# Japanese translations for po package
# Copyright (C) 2019 Free Software Foundation, Inc.
# This file is distributed under the same license as the po package.
# Kyosuke Matsumoto <kyokke@gmail.com>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: po 4a\n"
"POT-Creation-Date: 2019-07-22 01:00+0000\n"
"PO-Revision-Date: 2019-07-21 11:42+0000\n"
"Last-Translator: Kyosuke Matsumoto <kyokke@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: ext/julia/doc/src/./index.md:6
msgid ""
"```@eval io = IOBuffer()  release = isempty(VERSION.prerelease)  v = "
"\"$(VERSION.major).$(VERSION.minor)\" !release && (v = v*\"-$(first(VERSION."
"prerelease))\")  print(io, \"\"\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:8
#, no-wrap
msgid "    # Julia $(v) Documentation\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:10
#, no-wrap
msgid "    Welcome to the documentation for Julia $(v).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:13
#, no-wrap
msgid ""
"    \"\"\")\n"
"if !release\n"
"    print(io,\"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:22
#, no-wrap
msgid ""
"        !!! warning \"Work in progress!\"\n"
"            This documentation is for an unreleased, in-development, version of Julia.\n"
"        \"\"\")\n"
"end\n"
"import Markdown\n"
"Markdown.parse(String(take!(io)))\n"
"```\n"
"Please read the [release notes](NEWS.md) to see what has changed since the last release.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:29
#, no-wrap
msgid ""
"```@eval\n"
"release = isempty(VERSION.prerelease)\n"
"file = release ? \"julia-$(VERSION).pdf\" :\n"
"       \"julia-$(VERSION.major).$(VERSION.minor).$(VERSION.patch)-$(first(VERSION.prerelease)).pdf\"\n"
"url = \"https://raw.githubusercontent.com/JuliaLang/docs.julialang.org/assets/$(file)\"\n"
"import Markdown\n"
"Markdown.parse(\"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:32
#, no-wrap
msgid ""
"!!! note\n"
"    The documentation is also available in PDF format: [$file]($url).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:34
msgid "\"\"\")  ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/./index.md:35
#, no-wrap
msgid "[Introduction](@id man-introduction)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:45
msgid ""
"Scientific computing has traditionally required the highest performance, yet "
"domain experts have largely moved to slower dynamic languages for daily "
"work. We believe there are many good reasons to prefer dynamic languages for "
"these applications, and we do not expect their use to diminish.  "
"Fortunately, modern language design and compiler techniques make it possible "
"to mostly eliminate the performance trade-off and provide a single "
"environment productive enough for prototyping and efficient enough for "
"deploying performance-intensive applications. The Julia programming language "
"fills this role: it is a flexible dynamic language, appropriate for "
"scientific and numerical computing, with performance comparable to "
"traditional statically-typed languages."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:50
msgid ""
"Because Julia's compiler is different from the interpreters used for "
"languages like Python or R, you may find that Julia's performance is "
"unintuitive at first. If you find that something is slow, we highly "
"recommend reading through the [Performance Tips](@ref man-performance-tips) "
"section before trying anything else. Once you understand how Julia works, "
"it's easy to write code that's nearly as fast as C."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:61
msgid ""
"Julia features optional typing, multiple dispatch, and good performance, "
"achieved using type inference and [just-in-time (JIT) compilation](https://"
"en.wikipedia.org/wiki/Just-in-time_compilation), implemented using [LLVM]"
"(https://en.wikipedia.org/wiki/Low_Level_Virtual_Machine). It is multi-"
"paradigm, combining features of imperative, functional, and object-oriented "
"programming. Julia provides ease and expressiveness for high-level numerical "
"computing, in the same way as languages such as R, MATLAB, and Python, but "
"also supports general programming. To achieve this, Julia builds upon the "
"lineage of mathematical programming languages, but also borrows much from "
"popular dynamic languages, including [Lisp](https://en.wikipedia.org/wiki/"
"Lisp_(programming_language)), [Perl](https://en.wikipedia.org/wiki/"
"Perl_(programming_language)), [Python](https://en.wikipedia.org/wiki/"
"Python_(programming_language)), [Lua](https://en.wikipedia.org/wiki/"
"Lua_(programming_language)), and [Ruby](https://en.wikipedia.org/wiki/"
"Ruby_(programming_language))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:63
msgid ""
"The most significant departures of Julia from typical dynamic languages are:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:71
msgid ""
"The core language imposes very little; Julia Base and the standard library "
"is written in Julia itself, including primitive operations like integer "
"arithmetic"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:71
msgid ""
"A rich language of types for constructing and describing objects, that can "
"also optionally be used to make type declarations"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:71
msgid ""
"The ability to define function behavior across many combinations of argument "
"types via [multiple dispatch](https://en.wikipedia.org/wiki/"
"Multiple_dispatch)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:71
msgid ""
"Automatic generation of efficient, specialized code for different argument "
"types"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:71
msgid ""
"Good performance, approaching that of statically-compiled languages like C"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:79
msgid ""
"Although one sometimes speaks of dynamic languages as being \"typeless\", "
"they are definitely not: every object, whether primitive or user-defined, "
"has a type. The lack of type declarations in most dynamic languages, "
"however, means that one cannot instruct the compiler about the types of "
"values, and often cannot explicitly talk about types at all. In static "
"languages, on the other hand, while one can -- and usually must -- annotate "
"types for the compiler, types exist only at compile time and cannot be "
"manipulated or expressed at run time. In Julia, types are themselves run-"
"time objects, and can also be used to convey information to the compiler."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:87
msgid ""
"While the casual programmer need not explicitly use types or multiple "
"dispatch, they are the core unifying features of Julia: functions are "
"defined on different combinations of argument types, and applied by "
"dispatching to the most specific matching definition. This model is a good "
"fit for mathematical programming, where it is unnatural for the first "
"argument to \"own\" an operation as in traditional object-oriented dispatch. "
"Operators are just functions with special notation -- to extend addition to "
"new user-defined data types, you define new methods for the `+` function.  "
"Existing code then seamlessly applies to the new data types."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:94
msgid ""
"Partly because of run-time type inference (augmented by optional type "
"annotations), and partly because of a strong focus on performance from the "
"inception of the project, Julia's computational efficiency exceeds that of "
"other dynamic languages, and even rivals that of statically-compiled "
"languages. For large scale numerical problems, speed always has been, "
"continues to be, and probably always will be crucial: the amount of data "
"being processed has easily kept pace with Moore's Law over the past decades."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/./index.md:97
msgid ""
"Julia aims to create an unprecedented combination of ease-of-use, power, and "
"efficiency in a single language. In addition to the above, some advantages "
"of Julia over comparable systems include:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid ""
"Free and open source ([MIT licensed](https://github.com/JuliaLang/julia/blob/"
"master/LICENSE.md))"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid "User-defined types are as fast and compact as built-ins"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid "No need to vectorize code for performance; devectorized code is fast"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid "Designed for parallelism and distributed computation"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid ""
"Lightweight \"green\" threading ([coroutines](https://en.wikipedia.org/wiki/"
"Coroutine))"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid "Unobtrusive yet powerful type system"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid ""
"Elegant and extensible conversions and promotions for numeric and other types"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid ""
"Efficient support for [Unicode](https://en.wikipedia.org/wiki/Unicode), "
"including but not limited to [UTF-8](https://en.wikipedia.org/wiki/UTF-8)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid "Call C functions directly (no wrappers or special APIs needed)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid "Powerful shell-like capabilities for managing other processes"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/./index.md:109
msgid "Lisp-like macros and other metaprogramming facilities"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/running-external-programs.md:1
#, no-wrap
msgid "Running External Programs"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:5
msgid ""
"Julia borrows backtick notation for commands from the shell, Perl, and Ruby. "
"However, in Julia, writing"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:10
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> `echo hello`\n"
"`echo hello`\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:12
msgid ""
"differs in several aspects from the behavior in various shells, Perl, or "
"Ruby:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/running-external-programs.md:22
msgid ""
"Instead of immediately running the command, backticks create a [`Cmd`](@ref) "
"object to represent the command.  You can use this object to connect the "
"command to others via pipes, [`run`](@ref) it, and [`read`](@ref) or "
"[`write`](@ref)  to it."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/running-external-programs.md:22
msgid ""
"When the command is run, Julia does not capture its output unless you "
"specifically arrange for it to. Instead, the output of the command by "
"default goes to [`stdout`](@ref) as it would using `libc`'s `system` call."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/running-external-programs.md:22
msgid ""
"The command is never run with a shell. Instead, Julia parses the command "
"syntax directly, appropriately interpolating variables and splitting on "
"words as the shell would, respecting shell quoting syntax.  The command is "
"run as `julia`'s immediate child process, using `fork` and `exec` calls."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:24
msgid "Here's a simple example of running an external program:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:28
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> mycommand = `echo hello`\n"
"`echo hello`\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:31
#, no-wrap
msgid ""
"julia> typeof(mycommand)\n"
"Cmd\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:35
#, no-wrap
msgid ""
"julia> run(mycommand);\n"
"hello\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:39
msgid ""
"The `hello` is the output of the `echo` command, sent to [`stdout`](@ref). "
"The run method itself returns `nothing`, and throws an [`ErrorException`]"
"(@ref) if the external command fails to run successfully."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:41
msgid ""
"If you want to read the output of the external command, [`read`](@ref) can "
"be used instead:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:45
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> a = read(`echo hello`, String)\n"
"\"hello\\n\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:49
#, no-wrap
msgid ""
"julia> chomp(a) == \"hello\"\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:51
msgid ""
"More generally, you can use [`open`](@ref) to read from or write to an "
"external command."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:62
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> open(`less`, \"w\", stdout) do io\n"
"           for i = 1:3\n"
"               println(io, i)\n"
"           end\n"
"       end\n"
"1\n"
"2\n"
"3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:70
#, no-wrap
msgid ""
"The program name and the individual arguments in a command can be accessed\n"
"and iterated over as if the command were an array of strings:\n"
"```jldoctest\n"
"julia> collect(`echo \"foo bar\"`)\n"
"2-element Array{String,1}:\n"
" \"echo\"\n"
" \"foo bar\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:74
#, no-wrap
msgid ""
"julia> `echo \"foo bar\"`[2]\n"
"\"foo bar\"\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/running-external-programs.md:75
#, no-wrap
msgid "[Interpolation](@id command-interpolation)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:80
msgid ""
"Suppose you want to do something a bit more complicated and use the name of "
"a file in the variable `file` as an argument to a command. You can use `$` "
"for interpolation much as you would in a string literal (see [Strings]"
"(@ref)):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:84
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> file = \"/etc/passwd\"\n"
"\"/etc/passwd\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:88
#, no-wrap
msgid ""
"julia> `sort $file`\n"
"`sort /etc/passwd`\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:93
msgid ""
"A common pitfall when running external programs via a shell is that if a "
"file name contains characters that are special to the shell, they may cause "
"undesirable behavior. Suppose, for example, rather than `/etc/passwd`, we "
"wanted to sort the contents of the file `/Volumes/External HD/data.csv`.  "
"Let's try it:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:97
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> file = \"/Volumes/External HD/data.csv\"\n"
"\"/Volumes/External HD/data.csv\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:101
#, no-wrap
msgid ""
"julia> `sort $file`\n"
"`sort '/Volumes/External HD/data.csv'`\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:107
msgid ""
"How did the file name get quoted? Julia knows that `file` is meant to be "
"interpolated as a single argument, so it quotes the word for you. Actually, "
"that is not quite accurate: the value of `file` is never interpreted by a "
"shell, so there's no need for actual quoting; the quotes are inserted only "
"for presentation to the user. This will even work if you interpolate a value "
"as part of a shell word:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:111
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> path = \"/Volumes/External HD\"\n"
"\"/Volumes/External HD\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:114
#, no-wrap
msgid ""
"julia> name = \"data\"\n"
"\"data\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:117
#, no-wrap
msgid ""
"julia> ext = \"csv\"\n"
"\"csv\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:121
#, no-wrap
msgid ""
"julia> `sort $path/$name.$ext`\n"
"`sort '/Volumes/External HD/data.csv'`\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:124
msgid ""
"As you can see, the space in the `path` variable is appropriately escaped. "
"But what if you *want* to interpolate multiple words? In that case, just use "
"an array (or any other iterable container):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:130
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> files = [\"/etc/passwd\",\"/Volumes/External HD/data.csv\"]\n"
"2-element Array{String,1}:\n"
" \"/etc/passwd\"\n"
" \"/Volumes/External HD/data.csv\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:134
#, no-wrap
msgid ""
"julia> `grep foo $files`\n"
"`grep foo /etc/passwd '/Volumes/External HD/data.csv'`\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:137
msgid ""
"If you interpolate an array as part of a shell word, Julia emulates the "
"shell's `{a,b,c}` argument generation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:144
#: ext/julia/doc/src/manual/running-external-programs.md:158
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> names = [\"foo\",\"bar\",\"baz\"]\n"
"3-element Array{String,1}:\n"
" \"foo\"\n"
" \"bar\"\n"
" \"baz\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:148
#, no-wrap
msgid ""
"julia> `grep xylophone $names.txt`\n"
"`grep xylophone foo.txt bar.txt baz.txt`\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:151
msgid ""
"Moreover, if you interpolate multiple arrays into the same word, the shell's "
"Cartesian product generation behavior is emulated:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:163
#, no-wrap
msgid ""
"julia> exts = [\"aux\",\"log\"]\n"
"2-element Array{String,1}:\n"
" \"aux\"\n"
" \"log\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:167
#, no-wrap
msgid ""
"julia> `rm -f $names.$exts`\n"
"`rm -f foo.aux foo.log bar.aux bar.log baz.aux baz.log`\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:170
msgid ""
"Since you can interpolate literal arrays, you can use this generative "
"functionality without needing to create temporary array objects first:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:175
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> `rm -rf $[\"foo\",\"bar\",\"baz\",\"qux\"].$[\"aux\",\"log\",\"pdf\"]`\n"
"`rm -rf foo.aux foo.log foo.pdf bar.aux bar.log bar.pdf baz.aux baz.log baz.pdf qux.aux qux.log qux.pdf`\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/running-external-programs.md:176
#: ext/julia/doc/src/manual/metaprogramming.md:144
#, no-wrap
msgid "Quoting"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:180
msgid ""
"Inevitably, one wants to write commands that aren't quite so simple, and it "
"becomes necessary to use quotes. Here's a simple example of a Perl one-liner "
"at a shell prompt:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:188
msgid "``` sh$ perl -le '$|=1; for (0..3) { print }' 0 1 2 3 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:193
msgid ""
"The Perl expression needs to be in single quotes for two reasons: so that "
"spaces don't break the expression into multiple shell words, and so that "
"uses of Perl variables like `$|` (yes, that's the name of a variable in "
"Perl), don't cause interpolation. In other instances, you may want to use "
"double quotes so that interpolation *does* occur:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:201
msgid ""
"``` sh$ first=\"A\" sh$ second=\"B\" sh$ perl -le '$|=1; print for @ARGV' "
"\"1: $first\" \"2: $second\" 1: A 2: B ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:207
msgid ""
"In general, the Julia backtick syntax is carefully designed so that you can "
"just cut-and-paste shell commands as is into backticks and they will work: "
"the escaping, quoting, and interpolation behaviors are the same as the "
"shell's. The only difference is that the interpolation is integrated and "
"aware of Julia's notion of what is a single string value, and what is a "
"container for multiple values. Let's try the above two examples in Julia:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:211
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> A = `perl -le '$|=1; for (0..3) { print }'`\n"
"`perl -le '$|=1; for (0..3) { print }'`\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:217
#, no-wrap
msgid ""
"julia> run(A);\n"
"0\n"
"1\n"
"2\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:219
#, no-wrap
msgid "julia> first = \"A\"; second = \"B\";\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:222
#, no-wrap
msgid ""
"julia> B = `perl -le 'print for @ARGV' \"1: $first\" \"2: $second\"`\n"
"`perl -le 'print for @ARGV' '1: A' '2: B'`\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:227
#, no-wrap
msgid ""
"julia> run(B);\n"
"1: A\n"
"2: B\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:233
msgid ""
"The results are identical, and Julia's interpolation behavior mimics the "
"shell's with some improvements due to the fact that Julia supports first-"
"class iterable objects while most shells use strings split on spaces for "
"this, which introduces ambiguities. When trying to port shell commands to "
"Julia, try cut and pasting first. Since Julia shows commands to you before "
"running them, you can easily and safely just examine its interpretation "
"without doing any damage."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/running-external-programs.md:234
#, no-wrap
msgid "Pipelines"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:237
#, no-wrap
msgid "Shell metacharacters, such as `|`, `&`, and `>`, need to be quoted (or escaped) inside of Julia's backticks:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:241
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> run(`echo hello '|' sort`);\n"
"hello | sort\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:245
#, no-wrap
msgid ""
"julia> run(`echo hello \\| sort`);\n"
"hello | sort\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:249
msgid ""
"This expression invokes the `echo` command with three words as arguments: "
"`hello`, `|`, and `sort`.  The result is that a single line is printed: "
"`hello | sort`. How, then, does one construct a pipeline? Instead of using "
"`'|'` inside of backticks, one uses [`pipeline`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:254
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> run(pipeline(`echo hello`, `sort`));\n"
"hello\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:258
msgid ""
"This pipes the output of the `echo` command to the `sort` command. Of "
"course, this isn't terribly interesting since there's only one line to sort, "
"but we can certainly do much more interesting things:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:267
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> run(pipeline(`cut -d: -f3 /etc/passwd`, `sort -n`, `tail -n5`))\n"
"210\n"
"211\n"
"212\n"
"213\n"
"214\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:273
msgid ""
"This prints the highest five user IDs on a UNIX system. The `cut`, `sort` "
"and `tail` commands are all spawned as immediate children of the current "
"`julia` process, with no intervening shell process. Julia itself does the "
"work to setup pipes and connect file descriptors that is normally done by "
"the shell. Since Julia does this itself, it retains better control and can "
"do some things that shells cannot."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:275
msgid "Julia can run multiple commands in parallel:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:281
#, no-wrap
msgid ""
"```jldoctest; filter = r\"(world\\nhello|hello\\nworld)\"\n"
"julia> run(`echo hello` & `echo world`);\n"
"world\n"
"hello\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:286
msgid ""
"The order of the output here is non-deterministic because the two `echo` "
"processes are started nearly simultaneously, and race to make the first "
"write to the [`stdout`](@ref) descriptor they share with each other and the "
"`julia` parent process. Julia lets you pipe the output from both of these "
"processes to another program:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:292
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> run(pipeline(`echo world` & `echo hello`, `sort`));\n"
"hello\n"
"world\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:296
msgid ""
"In terms of UNIX plumbing, what's happening here is that a single UNIX pipe "
"object is created and written to by both `echo` processes, and the other end "
"of the pipe is read from by the `sort` command."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:299
msgid ""
"IO redirection can be accomplished by passing keyword arguments `stdin`, "
"`stdout`, and `stderr` to the `pipeline` function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:303
msgid ""
"```julia pipeline(`do_work`, stdout=pipeline(`sort`, \"out.txt\"), stderr="
"\"errs.txt\")  ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/running-external-programs.md:304
#, no-wrap
msgid "Avoiding Deadlock in Pipelines"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:308
msgid ""
"When reading and writing to both ends of a pipeline from a single process, "
"it is important to avoid forcing the kernel to buffer all of the data."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:312
msgid ""
"For example, when reading all of the output from a command, call `read(out, "
"String)`, not `wait(process)`, since the former will actively consume all of "
"the data written by the process, whereas the latter will attempt to store "
"the data in the kernel's buffers while waiting for a reader to be connected."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:314
msgid ""
"Another common solution is to separate the reader and writer of the pipeline "
"into separate [`Task`](@ref)s:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:321
msgid ""
"```julia writer = @async write(process, \"data\")  reader = @async "
"do_compute(read(process, String))  wait(process)  fetch(reader)  ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/running-external-programs.md:322
#, no-wrap
msgid "Complex Example"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:328
msgid ""
"The combination of a high-level programming language, a first-class command "
"abstraction, and automatic setup of pipes between processes is a powerful "
"one. To give some sense of the complex pipelines that can be created easily, "
"here are some more sophisticated examples, with apologies for the excessive "
"use of Perl one-liners:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:331
#, no-wrap
msgid ""
"```jldoctest prefixer; filter = r\"([A-B] [0-5])\"\n"
"julia> prefixer(prefix, sleep) = `perl -nle '$|=1; print \"'$prefix' \", $_; sleep '$sleep';'`;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:340
#, no-wrap
msgid ""
"julia> run(pipeline(`perl -le '$|=1; for(0..5){ print; sleep 1 }'`, prefixer(\"A\",2) & prefixer(\"B\",2)));\n"
"B 0\n"
"A 1\n"
"B 2\n"
"A 3\n"
"B 4\n"
"A 5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:348
msgid ""
"This is a classic example of a single producer feeding two concurrent "
"consumers: one `perl` process generates lines with the numbers 0 through 5 "
"on them, while two parallel processes consume that output, one prefixing "
"lines with the letter \"A\", the other with the letter \"B\". Which consumer "
"gets the first line is non-deterministic, but once that race has been won, "
"the lines are consumed alternately by one process and then the other. "
"(Setting `$|=1` in Perl causes each print statement to flush the [`stdout`]"
"(@ref) handle, which is necessary for this example to work. Otherwise all "
"the output is buffered and printed to the pipe at once, to be read by just "
"one consumer process.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:350
msgid "Here is an even more complex multi-stage producer-consumer example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:362
#, no-wrap
msgid ""
"```jldoctest prefixer; filter = r\"[A-B] [X-Z] [0-5]\"\n"
"julia> run(pipeline(`perl -le '$|=1; for(0..5){ print; sleep 1 }'`,\n"
"           prefixer(\"X\",3) & prefixer(\"Y\",3) & prefixer(\"Z\",3),\n"
"           prefixer(\"A\",2) & prefixer(\"B\",2)));\n"
"A X 0\n"
"B Y 1\n"
"A Z 2\n"
"B X 3\n"
"A Y 4\n"
"B Z 5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:366
msgid ""
"This example is similar to the previous one, except there are two stages of "
"consumers, and the stages have different latency so they use a different "
"number of parallel workers, to maintain saturated throughput."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/running-external-programs.md:367
msgid ""
"We strongly encourage you to try all these examples to see how they work."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:1
#, no-wrap
msgid "Methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:10
msgid ""
"Recall from [Functions](@ref man-functions) that a function is an object "
"that maps a tuple of arguments to a return value, or throws an exception if "
"no appropriate value can be returned. It is common for the same conceptual "
"function or operation to be implemented quite differently for different "
"types of arguments: adding two integers is very different from adding two "
"floating-point numbers, both of which are distinct from adding an integer to "
"a floating-point number. Despite their implementation differences, these "
"operations all fall under the general concept of \"addition\". Accordingly, "
"in Julia, these behaviors all belong to a single object: the `+` function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:22
msgid ""
"To facilitate using many different implementations of the same concept "
"smoothly, functions need not be defined all at once, but can rather be "
"defined piecewise by providing specific behaviors for certain combinations "
"of argument types and counts. A definition of one possible behavior for a "
"function is called a *method*. Thus far, we have presented only examples of "
"functions defined with a single method, applicable to all types of "
"arguments. However, the signatures of method definitions can be annotated to "
"indicate the types of arguments in addition to their number, and more than a "
"single method definition may be provided. When a function is applied to a "
"particular tuple of arguments, the most specific method applicable to those "
"arguments is applied. Thus, the overall behavior of a function is a "
"patchwork of the behaviors of its various method definitions.  If the "
"patchwork is well designed, even though the implementations of the methods "
"may be quite different, the outward behavior of the function will appear "
"seamless and consistent."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:36
msgid ""
"The choice of which method to execute when a function is applied is called "
"*dispatch*. Julia allows the dispatch process to choose which of a "
"function's methods to call based on the number of arguments given, and on "
"the types of all of the function's arguments. This is different than "
"traditional object-oriented languages, where dispatch occurs based only on "
"the first argument, which often has a special argument syntax, and is "
"sometimes implied rather than explicitly written as an argument.  [^1] Using "
"all of a function's arguments to choose which method should be invoked, "
"rather than just the first, is known as [multiple dispatch](https://en."
"wikipedia.org/wiki/Multiple_dispatch).  Multiple dispatch is particularly "
"useful for mathematical code, where it makes little sense to artificially "
"deem the operations to \"belong\" to one argument more than any of the "
"others: does the addition operation in `x + y` belong to `x` any more than "
"it does to `y`? The implementation of a mathematical operator generally "
"depends on the types of all of its arguments. Even beyond mathematical "
"operations, however, multiple dispatch ends up being a powerful and "
"convenient paradigm for structuring and organizing programs."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:43
#, no-wrap
msgid ""
"[^1]:\n"
"    In C++ or Java, for example, in a method call like `obj.meth(arg1,arg2)`, the object obj \"receives\"\n"
"    the method call and is implicitly passed to the method via the `this` keyword, rather than as\n"
"    an explicit method argument. When the current `this` object is the receiver of a method call,\n"
"    it can be omitted altogether, writing just `meth(arg1,arg2)`, with `this` implied as the receiving\n"
"    object.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/methods.md:44
#, no-wrap
msgid "Defining Methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:52
msgid ""
"Until now, we have, in our examples, defined only functions with a single "
"method having unconstrained argument types. Such functions behave just like "
"they would in traditional dynamically typed languages.  Nevertheless, we "
"have used multiple dispatch and methods almost continually without being "
"aware of it: all of Julia's standard functions and operators, like the "
"aforementioned `+` function, have many methods defining their behavior over "
"various possible combinations of argument type and count."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:55
msgid ""
"When defining a function, one can optionally constrain the types of "
"parameters it is applicable to, using the `::` type-assertion operator, "
"introduced in the section on [Composite Types](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:60
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> f(x::Float64, y::Float64) = 2x + y\n"
"f (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:63
msgid ""
"This function definition applies only to calls where `x` and `y` are both "
"values of type [`Float64`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:68
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> f(2.0, 3.0)\n"
"7.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:70
msgid ""
"Applying it to any other types of arguments will result in a [`MethodError`]"
"(@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:76
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> f(2.0, 3)\n"
"ERROR: MethodError: no method matching f(::Float64, ::Int64)\n"
"Closest candidates are:\n"
"  f(::Float64, !Matched::Float64) at none:1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:81
#, no-wrap
msgid ""
"julia> f(Float32(2.0), 3.0)\n"
"ERROR: MethodError: no method matching f(::Float32, ::Float64)\n"
"Closest candidates are:\n"
"  f(!Matched::Float64, ::Float64) at none:1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:86
#, no-wrap
msgid ""
"julia> f(2.0, \"3.0\")\n"
"ERROR: MethodError: no method matching f(::Float64, ::String)\n"
"Closest candidates are:\n"
"  f(::Float64, !Matched::Float64) at none:1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:90
#, no-wrap
msgid ""
"julia> f(\"2.0\", \"3.0\")\n"
"ERROR: MethodError: no method matching f(::String, ::String)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:97
msgid ""
"As you can see, the arguments must be precisely of type [`Float64`](@ref). "
"Other numeric types, such as integers or 32-bit floating-point values, are "
"not automatically converted to 64-bit floating-point, nor are strings parsed "
"as numbers. Because `Float64` is a concrete type and concrete types cannot "
"be subclassed in Julia, such a definition can only be applied to arguments "
"that are exactly of type `Float64`. It may often be useful, however, to "
"write more general methods where the declared parameter types are abstract:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:101
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> f(x::Number, y::Number) = 2x - y\n"
"f (generic function with 2 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:105
#, no-wrap
msgid ""
"julia> f(2.0, 3)\n"
"1.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:110
msgid ""
"This method definition applies to any pair of arguments that are instances "
"of [`Number`](@ref).  They need not be of the same type, so long as they are "
"each numeric values. The problem of handling disparate numeric types is "
"delegated to the arithmetic operations in the expression `2x - y`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:120
msgid ""
"To define a function with multiple methods, one simply defines the function "
"multiple times, with different numbers and types of arguments. The first "
"method definition for a function creates the function object, and subsequent "
"method definitions add new methods to the existing function object.  The "
"most specific method definition matching the number and types of the "
"arguments will be executed when the function is applied. Thus, the two "
"method definitions above, taken together, define the behavior for `f` over "
"all pairs of instances of the abstract type `Number` -- but with a different "
"behavior specific to pairs of [`Float64`](@ref) values. If one of the "
"arguments is a 64-bit float but the other one is not, then the `f(Float64,"
"Float64)` method cannot be called and the more general `f(Number,Number)` "
"method must be used:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:124
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> f(2.0, 3.0)\n"
"7.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:127
#, no-wrap
msgid ""
"julia> f(2, 3.0)\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:130
#, no-wrap
msgid ""
"julia> f(2.0, 3)\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:134
#, no-wrap
msgid ""
"julia> f(2, 3)\n"
"1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:140
msgid ""
"The `2x + y` definition is only used in the first case, while the `2x - y` "
"definition is used in the others. No automatic casting or conversion of "
"function arguments is ever performed: all conversion in Julia is non-magical "
"and completely explicit. [Conversion and Promotion](@ref conversion-and-"
"promotion), however, shows how clever application of sufficiently advanced "
"technology can be indistinguishable from magic. [^Clarke61]"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:143
msgid ""
"For non-numeric values, and for fewer or more than two arguments, the "
"function `f` remains undefined, and applying it will still result in a "
"[`MethodError`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:149
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> f(\"foo\", 3)\n"
"ERROR: MethodError: no method matching f(::String, ::Int64)\n"
"Closest candidates are:\n"
"  f(!Matched::Number, ::Number) at none:1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:156
#, no-wrap
msgid ""
"julia> f()\n"
"ERROR: MethodError: no method matching f()\n"
"Closest candidates are:\n"
"  f(!Matched::Float64, !Matched::Float64) at none:1\n"
"  f(!Matched::Number, !Matched::Number) at none:1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:159
msgid ""
"You can easily see which methods exist for a function by entering the "
"function object itself in an interactive session:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:164
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> f\n"
"f (generic function with 2 methods)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:167
msgid ""
"This output tells us that `f` is a function object with two methods. To find "
"out what the signatures of those methods are, use the [`methods`](@ref) "
"function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:170
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> methods(f)\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:170
#, no-wrap
msgid "2 methods for generic function \"f\":"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:174
msgid ""
"[1] f(x::Float64, y::Float64) in Main at none:1 [2] f(x::Number, y::Number) "
"in Main at none:1 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:178
msgid ""
"which shows that `f` has two methods, one taking two `Float64` arguments and "
"one taking arguments of type `Number`. It also indicates the file and line "
"number where the methods were defined: because these methods were defined at "
"the REPL, we get the apparent line number `none:1`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:182
msgid ""
"In the absence of a type declaration with `::`, the type of a method "
"parameter is `Any` by default, meaning that it is unconstrained since all "
"values in Julia are instances of the abstract type `Any`. Thus, we can "
"define a catch-all method for `f` like so:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:186
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> f(x,y) = println(\"Whoa there, Nelly.\")\n"
"f (generic function with 3 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:190
#, no-wrap
msgid ""
"julia> f(\"foo\", 1)\n"
"Whoa there, Nelly.\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:193
msgid ""
"This catch-all is less specific than any other possible method definition "
"for a pair of parameter values, so it will only be called on pairs of "
"arguments to which no other method definition applies."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:197
msgid ""
"Although it seems a simple concept, multiple dispatch on the types of values "
"is perhaps the single most powerful and central feature of the Julia "
"language. Core operations typically have dozens of methods:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:200
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> methods(+)\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:200
#, no-wrap
msgid "180 methods for generic function \"+\":"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:221
#, no-wrap
msgid ""
"[1] +(x::Bool, z::Complex{Bool}) in Base at complex.jl:227\n"
"[2] +(x::Bool, y::Bool) in Base at bool.jl:89\n"
"[3] +(x::Bool) in Base at bool.jl:86\n"
"[4] +(x::Bool, y::T) where T<:AbstractFloat in Base at bool.jl:96\n"
"[5] +(x::Bool, z::Complex) in Base at complex.jl:234\n"
"[6] +(a::Float16, b::Float16) in Base at float.jl:373\n"
"[7] +(x::Float32, y::Float32) in Base at float.jl:375\n"
"[8] +(x::Float64, y::Float64) in Base at float.jl:376\n"
"[9] +(z::Complex{Bool}, x::Bool) in Base at complex.jl:228\n"
"[10] +(z::Complex{Bool}, x::Real) in Base at complex.jl:242\n"
"[11] +(x::Char, y::Integer) in Base at char.jl:40\n"
"[12] +(c::BigInt, x::BigFloat) in Base.MPFR at mpfr.jl:307\n"
"[13] +(a::BigInt, b::BigInt, c::BigInt, d::BigInt, e::BigInt) in Base.GMP at gmp.jl:392\n"
"[14] +(a::BigInt, b::BigInt, c::BigInt, d::BigInt) in Base.GMP at gmp.jl:391\n"
"[15] +(a::BigInt, b::BigInt, c::BigInt) in Base.GMP at gmp.jl:390\n"
"[16] +(x::BigInt, y::BigInt) in Base.GMP at gmp.jl:361\n"
"[17] +(x::BigInt, c::Union{UInt16, UInt32, UInt64, UInt8}) in Base.GMP at gmp.jl:398\n"
"...\n"
"[180] +(a, b, c, xs...) in Base at operators.jl:424\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:225
msgid ""
"Multiple dispatch together with the flexible parametric type system give "
"Julia its ability to abstractly express high-level algorithms decoupled from "
"implementation details, yet generate efficient, specialized code to handle "
"each case at run time."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/methods.md:226
#, no-wrap
msgid "[Method Ambiguities](@id man-ambiguities)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:230
msgid ""
"It is possible to define a set of function methods such that there is no "
"unique most specific method applicable to some combinations of arguments:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:234
#, no-wrap
msgid ""
"```jldoctest gofxy\n"
"julia> g(x::Float64, y) = 2x + y\n"
"g (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:237
#, no-wrap
msgid ""
"julia> g(x, y::Float64) = x + 2y\n"
"g (generic function with 2 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:240
#: ext/julia/doc/src/manual/methods.md:263
#, no-wrap
msgid ""
"julia> g(2.0, 3)\n"
"7.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:243
#: ext/julia/doc/src/manual/methods.md:266
#, no-wrap
msgid ""
"julia> g(2, 3.0)\n"
"8.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:251
#, no-wrap
msgid ""
"julia> g(2.0, 3.0)\n"
"ERROR: MethodError: g(::Float64, ::Float64) is ambiguous. Candidates:\n"
"  g(x, y::Float64) in Main at none:1\n"
"  g(x::Float64, y) in Main at none:1\n"
"Possible fix, define\n"
"  g(::Float64, ::Float64)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:256
msgid ""
"Here the call `g(2.0, 3.0)` could be handled by either the `g(Float64, Any)` "
"or the `g(Any, Float64)` method, and neither is more specific than the "
"other. In such cases, Julia raises a [`MethodError`](@ref)  rather than "
"arbitrarily picking a method. You can avoid method ambiguities by specifying "
"an appropriate method for the intersection case:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:260
#, no-wrap
msgid ""
"```jldoctest gofxy\n"
"julia> g(x::Float64, y::Float64) = 2x + 2y\n"
"g (generic function with 3 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:270
#, no-wrap
msgid ""
"julia> g(2.0, 3.0)\n"
"10.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:273
msgid ""
"It is recommended that the disambiguating method be defined first, since "
"otherwise the ambiguity exists, if transiently, until the more specific "
"method is defined."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:276
msgid ""
"In more complex cases, resolving method ambiguities involves a certain "
"element of design; this topic is explored further [below](@ref man-method-"
"design-ambiguities)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/methods.md:277
#, no-wrap
msgid "Parametric Methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:280
msgid ""
"Method definitions can optionally have type parameters qualifying the "
"signature:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:284
#, no-wrap
msgid ""
"```jldoctest same_typefunc\n"
"julia> same_type(x::T, y::T) where {T} = true\n"
"same_type (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:288
#, no-wrap
msgid ""
"julia> same_type(x,y) = false\n"
"same_type (generic function with 2 methods)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:293
msgid ""
"The first method applies whenever both arguments are of the same concrete "
"type, regardless of what type that is, while the second method acts as a "
"catch-all, covering all other cases. Thus, overall, this defines a boolean "
"function that checks whether its two arguments are of the same type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:297
#, no-wrap
msgid ""
"```jldoctest same_typefunc\n"
"julia> same_type(1, 2)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:300
#, no-wrap
msgid ""
"julia> same_type(1, 2.0)\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:303
#, no-wrap
msgid ""
"julia> same_type(1.0, 2.0)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:306
#, no-wrap
msgid ""
"julia> same_type(\"foo\", 2.0)\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:309
#, no-wrap
msgid ""
"julia> same_type(\"foo\", \"bar\")\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:313
#, no-wrap
msgid ""
"julia> same_type(Int32(1), Int64(2))\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:316
msgid ""
"Such definitions correspond to methods whose type signatures are `UnionAll` "
"types (see [UnionAll Types](@ref))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:322
msgid ""
"This kind of definition of function behavior by dispatch is quite common -- "
"idiomatic, even -- in Julia. Method type parameters are not restricted to "
"being used as the types of arguments: they can be used anywhere a value "
"would be in the signature of the function or body of the function.  Here's "
"an example where the method type parameter `T` is used as the type parameter "
"to the parametric type `Vector{T}` in the method signature:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:326
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> myappend(v::Vector{T}, x::T) where {T} = [v..., x]\n"
"myappend (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:333
#, no-wrap
msgid ""
"julia> myappend([1,2,3],4)\n"
"4-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
" 4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:338
#, no-wrap
msgid ""
"julia> myappend([1,2,3],2.5)\n"
"ERROR: MethodError: no method matching myappend(::Array{Int64,1}, ::Float64)\n"
"Closest candidates are:\n"
"  myappend(::Array{T,1}, !Matched::T) where T at none:1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:345
#, no-wrap
msgid ""
"julia> myappend([1.0,2.0,3.0],4.0)\n"
"4-element Array{Float64,1}:\n"
" 1.0\n"
" 2.0\n"
" 3.0\n"
" 4.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:351
#, no-wrap
msgid ""
"julia> myappend([1.0,2.0,3.0],4)\n"
"ERROR: MethodError: no method matching myappend(::Array{Float64,1}, ::Int64)\n"
"Closest candidates are:\n"
"  myappend(::Array{T,1}, !Matched::T) where T at none:1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:355
msgid ""
"As you can see, the type of the appended element must match the element type "
"of the vector it is appended to, or else a [`MethodError`](@ref) is raised. "
"In the following example, the method type parameter `T` is used as the "
"return value:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:359
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> mytypeof(x::T) where {T} = T\n"
"mytypeof (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:362
#, no-wrap
msgid ""
"julia> mytypeof(1)\n"
"Int64\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:366
#, no-wrap
msgid ""
"julia> mytypeof(1.0)\n"
"Float64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:369
msgid ""
"Just as you can put subtype constraints on type parameters in type "
"declarations (see [Parametric Types](@ref)), you can also constrain type "
"parameters of methods:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:373
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> same_type_numeric(x::T, y::T) where {T<:Number} = true\n"
"same_type_numeric (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:376
#, no-wrap
msgid ""
"julia> same_type_numeric(x::Number, y::Number) = false\n"
"same_type_numeric (generic function with 2 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:379
#, no-wrap
msgid ""
"julia> same_type_numeric(1, 2)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:382
#, no-wrap
msgid ""
"julia> same_type_numeric(1, 2.0)\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:385
#, no-wrap
msgid ""
"julia> same_type_numeric(1.0, 2.0)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:391
#, no-wrap
msgid ""
"julia> same_type_numeric(\"foo\", 2.0)\n"
"ERROR: MethodError: no method matching same_type_numeric(::String, ::Float64)\n"
"Closest candidates are:\n"
"  same_type_numeric(!Matched::T<:Number, ::T<:Number) where T<:Number at none:1\n"
"  same_type_numeric(!Matched::Number, ::Number) at none:1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:394
#, no-wrap
msgid ""
"julia> same_type_numeric(\"foo\", \"bar\")\n"
"ERROR: MethodError: no method matching same_type_numeric(::String, ::String)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:398
#, no-wrap
msgid ""
"julia> same_type_numeric(Int32(1), Int64(2))\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:401
msgid ""
"The `same_type_numeric` function behaves much like the `same_type` function "
"defined above, but is only defined for pairs of numbers."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:408
#, no-wrap
msgid ""
"Parametric methods allow the same syntax as `where` expressions used to write types\n"
"(see [UnionAll Types](@ref)).\n"
"If there is only a single parameter, the enclosing curly braces (in `where {T}`) can be omitted,\n"
"but are often preferred for clarity.\n"
"Multiple parameters can be separated with commas, e.g. `where {T, S<:Real}`, or written using\n"
"nested `where`, e.g. `where S<:Real where T`.\n"
msgstr ""

#. type: Title -
#: ext/julia/doc/src/manual/methods.md:410
#, no-wrap
msgid "Redefining Methods\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:419
msgid ""
"When redefining a method or adding new methods, it is important to realize "
"that these changes don't take effect immediately.  This is key to Julia's "
"ability to statically infer and compile code to run fast, without the usual "
"JIT tricks and overhead.  Indeed, any new method definition won't be visible "
"to the current runtime environment, including Tasks and Threads (and any "
"previously defined `@generated` functions).  Let's start with an example to "
"see what this means:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:426
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> function tryeval()\n"
"           @eval newfun() = 1\n"
"           newfun()\n"
"       end\n"
"tryeval (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:434
#, no-wrap
msgid ""
"julia> tryeval()\n"
"ERROR: MethodError: no method matching newfun()\n"
"The applicable method may be too new: running in world age xxxx1, while current world is xxxx2.\n"
"Closest candidates are:\n"
"  newfun() at none:1 (method too new to be called from this world context.)\n"
" in tryeval() at none:1\n"
" ...\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:438
#, no-wrap
msgid ""
"julia> newfun()\n"
"1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:445
msgid ""
"In this example, observe that the new definition for `newfun` has been "
"created, but can't be immediately called.  The new global is immediately "
"visible to the `tryeval` function, so you could write `return newfun` "
"(without parentheses).  But neither you, nor any of your callers, nor the "
"functions they call, or etc.  can call this new method definition!"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:448
msgid ""
"But there's an exception: future calls to `newfun` *from the REPL* work as "
"expected, being able to both see and call the new definition of `newfun`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:451
msgid ""
"However, future calls to `tryeval` will continue to see the definition of "
"`newfun` as it was *at the previous statement at the REPL*, and thus before "
"that call to `tryeval`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:453
msgid "You may want to try this for yourself to see how it works."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:461
msgid ""
"The implementation of this behavior is a \"world age counter\".  This "
"monotonically increasing value tracks each method definition operation.  "
"This allows describing \"the set of method definitions visible to a given "
"runtime environment\" as a single number, or \"world age\".  It also allows "
"comparing the methods available in two worlds just by comparing their "
"ordinal value.  In the example above, we see that the \"current world\" (in "
"which the method `newfun` exists), is one greater than the task-local "
"\"runtime world\" that was fixed when the execution of `tryeval` started."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:464
msgid ""
"Sometimes it is necessary to get around this (for example, if you are "
"implementing the above REPL).  Fortunately, there is an easy solution: call "
"the function using [`Base.invokelatest`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:471
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function tryeval2()\n"
"           @eval newfun2() = 2\n"
"           Base.invokelatest(newfun2)\n"
"       end\n"
"tryeval2 (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:475
#, no-wrap
msgid ""
"julia> tryeval2()\n"
"2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:478
msgid ""
"Finally, let's take a look at some more complex examples where this rule "
"comes into play.  Define a function `f(x)`, which initially has one method:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:483
#, no-wrap
msgid ""
"```jldoctest redefinemethod\n"
"julia> f(x) = \"original definition\"\n"
"f (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:485
msgid "Start some other operations that use `f(x)`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:489
#, no-wrap
msgid ""
"```jldoctest redefinemethod\n"
"julia> g(x) = f(x)\n"
"g (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:492
#, no-wrap
msgid ""
"julia> t = @async f(wait()); yield();\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:494
msgid "Now we add some new methods to `f(x)`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:498
#, no-wrap
msgid ""
"```jldoctest redefinemethod\n"
"julia> f(x::Int) = \"definition for Int\"\n"
"f (generic function with 2 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:502
#, no-wrap
msgid ""
"julia> f(x::Type{Int}) = \"definition for Type{Int}\"\n"
"f (generic function with 3 methods)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:504
msgid "Compare how these results differ:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:508
#, no-wrap
msgid ""
"```jldoctest redefinemethod\n"
"julia> f(1)\n"
"\"definition for Int\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:511
#: ext/julia/doc/src/manual/metaprogramming.md:1195
#, no-wrap
msgid ""
"julia> g(1)\n"
"\"definition for Int\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:514
#, no-wrap
msgid ""
"julia> fetch(schedule(t, 1))\n"
"\"original definition\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:516
#, no-wrap
msgid "julia> t = @async f(wait()); yield();\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:520
#, no-wrap
msgid ""
"julia> fetch(schedule(t, 1))\n"
"\"definition for Int\"\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/methods.md:521
#, no-wrap
msgid "Design Patterns with Parametric Methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:527
msgid ""
"While complex dispatch logic is not required for performance or usability, "
"sometimes it can be the best way to express some algorithm.  Here are a few "
"common design patterns that come up sometimes when using dispatch in this "
"way."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:528
#, no-wrap
msgid "Extracting the type parameter from a super-type"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:533
msgid ""
"Here is the correct code template for returning the element-type `T` of any "
"arbitrary subtype of `AbstractArray`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:541
#, no-wrap
msgid ""
"```julia\n"
"abstract type AbstractArray{T, N} end\n"
"eltype(::Type{<:AbstractArray{T}}) where {T} = T\n"
"```\n"
"using so-called triangular dispatch.  Note that if `T` is a `UnionAll`\n"
"type, as e.g. `eltype(Array{T} where T <: Integer)`, then `Any` is\n"
"returned (as does the the version of `eltype` in `Base`).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:544
msgid ""
"Another way, which used to be the only correct way before the advent of "
"triangular dispatch in Julia v0.6, is:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:552
#, no-wrap
msgid ""
"```julia\n"
"abstract type AbstractArray{T, N} end\n"
"eltype(::Type{AbstractArray}) = Any\n"
"eltype(::Type{AbstractArray{T}}) where {T} = T\n"
"eltype(::Type{AbstractArray{T, N}}) where {T, N} = T\n"
"eltype(::Type{A}) where {A<:AbstractArray} = eltype(supertype(A))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:563
#, no-wrap
msgid ""
"Another possibility is the following, which could useful to adapt\n"
"to cases where the parameter `T` would need to be matched more\n"
"narrowly:\n"
"```julia\n"
"eltype(::Type{AbstractArray{T, N} where {T<:S, N<:M}}) where {M, S} = Any\n"
"eltype(::Type{AbstractArray{T, N} where {T<:S}}) where {N, S} = Any\n"
"eltype(::Type{AbstractArray{T, N} where {N<:M}}) where {M, T} = T\n"
"eltype(::Type{AbstractArray{T, N}}) where {T, N} = T\n"
"eltype(::Type{A}) where {A <: AbstractArray} = eltype(supertype(A))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:566
msgid ""
"One common mistake is to try and get the element-type by using introspection:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:570
#, no-wrap
msgid ""
"```julia\n"
"eltype_wrong(::Type{A}) where {A<:AbstractArray} = A.parameters[1]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:572
msgid "However, it is not hard to construct cases where this will fail:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:576
#, no-wrap
msgid ""
"```julia\n"
"struct BitVector <: AbstractArray{Bool, 1}; end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:579
msgid ""
"Here we have created a type `BitVector` which has no parameters, but where "
"the element-type is still fully specified, with `T` equal to `Bool`!"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:581
#, no-wrap
msgid "Building a similar type with a different type parameter"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:591
msgid ""
"When building generic code, there is often a need for constructing a similar "
"object with some change made to the layout of the type, also necessitating a "
"change of the type parameters.  For instance, you might have some sort of "
"abstract array with an arbitrary element type and want to write your "
"computation on it with a specific element type.  We must implement a method "
"for each `AbstractArray{T}` subtype that describes how to compute this type "
"transform.  There is no general transform of one subtype into another "
"subtype with a different parameter.  (Quick review: do you see why this is?)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:599
msgid ""
"The subtypes of `AbstractArray` typically implement two methods to achieve "
"this: A method to convert the input array to a subtype of a specific "
"`AbstractArray{T, N}` abstract type; and a method to make a new "
"uninitialized array with a specific element type.  Sample implementations of "
"these can be found in Julia Base.  Here is a basic example usage of them, "
"guaranteeing that `input` and `output` are of the same type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:604
msgid ""
"```julia input = convert(AbstractArray{Eltype}, input)  output = "
"similar(input, Eltype)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:610
msgid ""
"As an extension of this, in cases where the algorithm needs a copy of the "
"input array, [`convert`](@ref) is insufficient as the return value may alias "
"the original input.  Combining [`similar`](@ref) (to make the output array) "
"and [`copyto!`](@ref) (to fill it with the input data)  is a generic way to "
"express the requirement for a mutable copy of the input argument:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:614
msgid ""
"```julia copy_with_eltype(input, Eltype) = copyto!(similar(input, Eltype), "
"input)  ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:615
#, no-wrap
msgid "Iterated dispatch"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:620
msgid ""
"In order to dispatch a multi-level parametric argument list, often it is "
"best to separate each level of dispatch into distinct functions.  This may "
"sound similar in approach to single-dispatch, but as we shall see below, it "
"is still more flexible."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:627
msgid ""
"For example, trying to dispatch on the element-type of an array will often "
"run into ambiguous situations.  Instead, commonly code will dispatch first "
"on the container type, then recurse down to a more specific method based on "
"eltype.  In most cases, the algorithms lend themselves conveniently to this "
"hierarchical approach, while in other cases, this rigor must be resolved "
"manually.  This dispatching branching can be observed, for example, in the "
"logic to sum two matrices:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:629 ext/julia/doc/src/manual/faq.md:73
#: ext/julia/doc/src/manual/strings.md:564
#: ext/julia/doc/src/manual/strings.md:570
#: ext/julia/doc/src/manual/strings.md:577
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:794
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:822
#: ext/julia/doc/src/manual/documentation.md:225
#: ext/julia/doc/src/manual/types.md:1003
#: ext/julia/doc/src/devdocs/require.md:27
#: ext/julia/doc/src/devdocs/inference.md:24
msgid "```julia"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:629
#, no-wrap
msgid "First dispatch selects the map algorithm for element-wise summation."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:631
msgid "+(a::Matrix, b::Matrix) = map(+, a, b)"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:631
#, no-wrap
msgid "Then dispatch handles each element and selects the appropriate"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:632
#, no-wrap
msgid "common element type for the computation."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:634
msgid "+(a, b) = +(promote(a, b)...)"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:634
#, no-wrap
msgid "Once the elements have the same type, they can be added."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:635
#, no-wrap
msgid "For example, via primitive operations exposed by the processor."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:638
msgid "+(a::Float64, b::Float64) = Core.add(a, b)  ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:639
#, no-wrap
msgid "Trait-based dispatch"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:650
msgid ""
"A natural extension to the iterated dispatch above is to add a layer to "
"method selection that allows to dispatch on sets of types which are "
"independent from the sets defined by the type hierarchy.  We could construct "
"such a set by writing out a `Union` of the types in question, but then this "
"set would not be extensible as `Union`-types cannot be altered after "
"creation.  However, such an extensible set can be programmed with a design "
"pattern often referred to as a [\"Holy-trait\"](https://github.com/JuliaLang/"
"julia/issues/2345#issuecomment-54537633)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:655
msgid ""
"This pattern is implemented by defining a generic function which computes a "
"different singleton value (or type) for each trait-set to which the function "
"arguments may belong to.  If this function is pure there is no impact on "
"performance compared to normal dispatch."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:666
msgid ""
"The example in the previous section glossed over the implementation details "
"of [`map`](@ref) and [`promote`](@ref), which both operate in terms of these "
"traits.  When iterating over a matrix, such as in the implementation of "
"`map`, one important question is what order to use to traverse the data.  "
"When `AbstractArray` subtypes implement the [`Base.IndexStyle`](@ref) trait, "
"other functions such as `map` can dispatch on this information to pick the "
"best algorithm (see [Abstract Array Interface](@ref man-interface-array)).  "
"This means that each subtype does not need to implement a custom version of "
"`map`, since the generic definitions + trait classes will enable the system "
"to select the fastest version.  Here a toy implementation of `map` "
"illustrating the trait-based dispatch:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:669
msgid ""
"```julia map(f, a::AbstractArray, b::AbstractArray) = map(Base.IndexStyle(a, "
"b), f, a, b)"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:669
#, no-wrap
msgid "generic implementation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:671
msgid "map(::Base.IndexCartesian, f, a::AbstractArray, b::AbstractArray) = ..."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:671
#, no-wrap
msgid "linear-indexing implementation (faster)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:674
msgid ""
"map(::Base.IndexLinear, f, a::AbstractArray, b::AbstractArray) = ...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:682
msgid ""
"This trait-based approach is also present in the [`promote`](@ref)  "
"mechanism employed by the scalar `+`.  It uses [`promote_type`](@ref), which "
"returns the optimal common type to compute the operation given the two types "
"of the operands.  This makes it possible to reduce the problem of "
"implementing every function for every pair of possible type arguments, to "
"the much smaller problem of implementing a conversion operation from each "
"type to a common type, plus a table of preferred pair-wise promotion rules."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:684
#, no-wrap
msgid "Output-type computation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:688
msgid ""
"The discussion of trait-based promotion provides a transition into our next "
"design pattern: computing the output element type for a matrix operation."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:692
msgid ""
"For implementing primitive operations, such as addition, we use the "
"[`promote_type`](@ref) function to compute the desired output type.  (As "
"before, we saw this at work in the `promote` call in the call to `+`)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:696
msgid ""
"For more complex functions on matrices, it may be necessary to compute the "
"expected return type for a more complex sequence of operations.  This is "
"often performed by the following steps:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/methods.md:701
msgid ""
"Write a small function `op` that expresses the set of operations performed "
"by the kernel of the algorithm."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/methods.md:701
msgid ""
"Compute the element type `R` of the result matrix as `promote_op(op, "
"argument_types...)`, where `argument_types` is computed from `eltype` "
"applied to each input array."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/methods.md:701
msgid ""
"Build the output matrix as `similar(R, dims)`, where `dims` are the desired "
"dimensions of the output array."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:703
msgid ""
"For a more specific example, a generic square-matrix multiply pseudo-code "
"might look like:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:707
#, no-wrap
msgid ""
"```julia\n"
"function matmul(a::AbstractMatrix, b::AbstractMatrix)\n"
"    op = (ai, bi) -> ai * bi + ai * bi\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:710
#, no-wrap
msgid ""
"    ## this is insufficient because it assumes `one(eltype(a))` is constructable:\n"
"    # R = typeof(op(one(eltype(a)), one(eltype(b))))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:713
#, no-wrap
msgid ""
"    ## this fails because it assumes `a[1]` exists and is representative of all elements of the array\n"
"    # R = typeof(op(a[1], b[1]))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:717
#, no-wrap
msgid ""
"    ## this is incorrect because it assumes that `+` calls `promote_type`\n"
"    ## but this is not true for some types, such as Bool:\n"
"    # R = promote_type(ai, bi)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:721
#, no-wrap
msgid ""
"    # this is wrong, since depending on the return value\n"
"    # of type-inference is very brittle (as well as not being optimizable):\n"
"    # R = Base.return_types(op, (eltype(a), eltype(b)))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:726
#, no-wrap
msgid ""
"    ## but, finally, this works:\n"
"    R = promote_op(op, eltype(a), eltype(b))\n"
"    ## although sometimes it may give a larger type than desired\n"
"    ## it will always give a correct type\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:746
#, no-wrap
msgid ""
"    output = similar(b, R, (size(a, 1), size(b, 2)))\n"
"    if size(a, 2) > 0\n"
"        for j in 1:size(b, 2)\n"
"            for i in 1:size(b, 1)\n"
"                ## here we don't use `ab = zero(R)`,\n"
"                ## since `R` might be `Any` and `zero(Any)` is not defined\n"
"                ## we also must declare `ab::R` to make the type of `ab` constant in the loop,\n"
"                ## since it is possible that typeof(a * b) != typeof(a * b + a * b) == R\n"
"                ab::R = a[i, 1] * b[1, j]\n"
"                for k in 2:size(a, 2)\n"
"                    ab += a[i, k] * b[k, j]\n"
"                end\n"
"                output[i, j] = ab\n"
"            end\n"
"        end\n"
"    end\n"
"    return output\n"
"end\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:747
#, no-wrap
msgid "Separate convert and kernel logic"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:753
msgid ""
"One way to significantly cut down on compile-times and testing complexity is "
"to isolate the logic for converting to the desired type and the "
"computation.  This lets the compiler specialize and inline the conversion "
"logic independent from the rest of the body of the larger kernel."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:756
msgid ""
"This is a common pattern seen when converting from a larger class of types "
"to the one specific argument type that is actually supported by the "
"algorithm:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:760
msgid ""
"```julia complexfunction(arg::Int) = ...  complexfunction(arg::Any) = "
"complexfunction(convert(Int, arg))"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:764
msgid "matmul(a::T, b::T) = ...  matmul(a, b) = matmul(promote(a, b)...)  ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/methods.md:765
#, no-wrap
msgid "Parametrically-constrained Varargs methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:770
msgid ""
"Function parameters can also be used to constrain the number of arguments "
"that may be supplied to a \"varargs\" function ([Varargs Functions](@ref)).  "
"The notation `Vararg{T,N}` is used to indicate such a constraint.  For "
"example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:774
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> bar(a,b,x::Vararg{Any,2}) = (a,b,x)\n"
"bar (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:779
#, no-wrap
msgid ""
"julia> bar(1,2,3)\n"
"ERROR: MethodError: no method matching bar(::Int64, ::Int64, ::Int64)\n"
"Closest candidates are:\n"
"  bar(::Any, ::Any, ::Any, !Matched::Any) at none:1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:782
#, no-wrap
msgid ""
"julia> bar(1,2,3,4)\n"
"(1, 2, (3, 4))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:788
#, no-wrap
msgid ""
"julia> bar(1,2,3,4,5)\n"
"ERROR: MethodError: no method matching bar(::Int64, ::Int64, ::Int64, ::Int64, ::Int64)\n"
"Closest candidates are:\n"
"  bar(::Any, ::Any, ::Any, ::Any) at none:1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:790
msgid ""
"More usefully, it is possible to constrain varargs methods by a parameter. "
"For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:794
msgid ""
"```julia function getindex(A::AbstractArray{T,N}, indices::Vararg{Number,N}) "
"where {T,N} ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:796
msgid ""
"would be called only when the number of `indices` matches the dimensionality "
"of the array."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:799
msgid ""
"When only the type of supplied arguments needs to be constrained `Vararg{T}` "
"can be equivalently written as `T...`. For instance `f(x::Int...) = x` is a "
"shorthand for `f(x::Vararg{Int}) = x`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/methods.md:800
#, no-wrap
msgid "Note on Optional and keyword Arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:804
msgid ""
"As mentioned briefly in [Functions](@ref man-functions), optional arguments "
"are implemented as syntax for multiple method definitions. For example, this "
"definition:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:808
msgid "```julia f(a=1,b=2) = a+2b ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:810
msgid "translates to the following three methods:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:816
msgid "```julia f(a,b) = a+2b f(a) = f(a,2)  f() = f(1,2)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:820
msgid ""
"This means that calling `f()` is equivalent to calling `f(1,2)`. In this "
"case the result is `5`, because `f(1,2)` invokes the first method of `f` "
"above. However, this need not always be the case.  If you define a fourth "
"method that is more specialized for integers:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:824
msgid "```julia f(a::Int,b::Int) = a-2b ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:829
msgid ""
"then the result of both `f()` and `f(1,2)` is `-3`. In other words, optional "
"arguments are tied to a function, not to any specific method of that "
"function. It depends on the types of the optional arguments which method is "
"invoked. When optional arguments are defined in terms of a global variable, "
"the type of the optional argument may even change at run-time."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:833
msgid ""
"Keyword arguments behave quite differently from ordinary positional "
"arguments. In particular, they do not participate in method dispatch. "
"Methods are dispatched based only on positional arguments, with keyword "
"arguments processed after the matching method is identified."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/methods.md:834
#, no-wrap
msgid "Function-like objects"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:838
msgid ""
"Methods are associated with types, so it is possible to make any arbitrary "
"Julia object \"callable\" by adding methods to its type. (Such \"callable\" "
"objects are sometimes called \"functors.\")"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:841
msgid ""
"For example, you can define a type that stores the coefficients of a "
"polynomial, but behaves like a function evaluating the polynomial:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:846
#, no-wrap
msgid ""
"```jldoctest polynomial\n"
"julia> struct Polynomial{R}\n"
"           coeffs::Vector{R}\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:854
#, no-wrap
msgid ""
"julia> function (p::Polynomial)(x)\n"
"           v = p.coeffs[end]\n"
"           for i = (length(p.coeffs)-1):-1:1\n"
"               v = v*x + p.coeffs[i]\n"
"           end\n"
"           return v\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:857
#, no-wrap
msgid ""
"julia> (p::Polynomial)() = p(5)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:861
msgid ""
"Notice that the function is specified by type instead of by name. As with "
"normal functions there is a terse syntax form. In the function body, `p` "
"will refer to the object that was called. A `Polynomial` can be used as "
"follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:865
#, no-wrap
msgid ""
"```jldoctest polynomial\n"
"julia> p = Polynomial([1,10,100])\n"
"Polynomial{Int64}([1, 10, 100])\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:868
#, no-wrap
msgid ""
"julia> p(3)\n"
"931\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:872
#, no-wrap
msgid ""
"julia> p()\n"
"2551\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:875
msgid ""
"This mechanism is also the key to how type constructors and closures (inner "
"functions that refer to their surrounding environment) work in Julia."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/methods.md:876
#, no-wrap
msgid "Empty generic functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:882
msgid ""
"Occasionally it is useful to introduce a generic function without yet adding "
"methods. This can be used to separate interface definitions from "
"implementations. It might also be done for the purpose of documentation or "
"code readability. The syntax for this is an empty `function` block without a "
"tuple of arguments:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:887
msgid "```julia function emptyfunc end ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/methods.md:888
#, no-wrap
msgid "[Method design and the avoidance of ambiguities](@id man-method-design-ambiguities)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:894
msgid ""
"Julia's method polymorphism is one of its most powerful features, yet "
"exploiting this power can pose design challenges.  In particular, in more "
"complex method hierarchies it is not uncommon for [ambiguities](@ref man-"
"ambiguities) to arise."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:896
msgid "Above, it was pointed out that one can resolve ambiguities like"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:901
msgid "```julia f(x, y::Int) = 1 f(x::Int, y) = 2 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:903
msgid "by defining a method"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:907
msgid "```julia f(x::Int, y::Int) = 3 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:914
msgid ""
"This is often the right strategy; however, there are circumstances where "
"following this advice blindly can be counterproductive. In particular, the "
"more methods a generic function has, the more possibilities there are for "
"ambiguities. When your method hierarchies get more complicated than this "
"simple example, it can be worth your while to think carefully about "
"alternative strategies."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:916
msgid ""
"Below we discuss particular challenges and some alternative ways to resolve "
"such issues."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:917
#, no-wrap
msgid "Tuple and NTuple arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:920
msgid ""
"`Tuple` (and `NTuple`) arguments present special challenges. For example,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:925
msgid ""
"```julia f(x::NTuple{N,Int}) where {N} = 1 f(x::NTuple{N,Float64}) where {N} "
"= 2 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:930
msgid ""
"are ambiguous because of the possibility that `N == 0`: there are no "
"elements to determine whether the `Int` or `Float64` variant should be "
"called. To resolve the ambiguity, one approach is define a method for the "
"empty tuple:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:934
msgid "```julia f(x::Tuple{}) = 3 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:937
msgid ""
"Alternatively, for all methods but one you can insist that there is at least "
"one element in the tuple:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:942
#, no-wrap
msgid ""
"```julia\n"
"f(x::NTuple{N,Int}) where {N} = 1           # this is the fallback\n"
"f(x::Tuple{Float64, Vararg{Float64}}) = 2   # this requires at least one Float64\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:943
#, no-wrap
msgid "[Orthogonalize your design](@id man-methods-orthogonalize)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:948
msgid ""
"When you might be tempted to dispatch on two or more arguments, consider "
"whether a \"wrapper\" function might make for a simpler design. For example, "
"instead of writing multiple variants:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:955
msgid ""
"```julia f(x::A, y::A) = ...  f(x::A, y::B) = ...  f(x::B, y::A) = ...  f(x::"
"B, y::B) = ...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:957
msgid "you might consider defining"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:962
msgid "```julia f(x::A, y::A) = ...  f(x, y) = f(g(x), g(y))  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:968
msgid ""
"where `g` converts the argument to type `A`. This is a very specific example "
"of the more general principle of [orthogonal design](https://en.wikipedia."
"org/wiki/Orthogonality_(programming)), in which separate concepts are "
"assigned to separate methods. Here, `g` will most likely need a fallback "
"definition"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:972
msgid "```julia g(x::A) = x ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:975
msgid ""
"A related strategy exploits `promote` to bring `x` and `y` to a common type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:980
msgid ""
"```julia f(x::T, y::T) where {T} = ...  f(x, y) = f(promote(x, y)...)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:987
msgid ""
"One risk with this design is the possibility that if there is no suitable "
"promotion method converting `x` and `y` to the same type, the second method "
"will recurse on itself infinitely and trigger a stack overflow. The non-"
"exported function `Base.promote_noncircular` can be used as an alternative; "
"when promotion fails it will still throw an error, but one that fails faster "
"with a more specific error message."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:988
#, no-wrap
msgid "Dispatch on one argument at a time"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:995
msgid ""
"If you need to dispatch on multiple arguments, and there are many fallbacks "
"with too many combinations to make it practical to define all possible "
"variants, then consider introducing a \"name cascade\" where (for example) "
"you dispatch on the first argument and then call an internal method:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1000
msgid "```julia f(x::A, y) = _fA(x, y)  f(x::B, y) = _fB(x, y)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1003
msgid ""
"Then the internal methods `_fA` and `_fB` can dispatch on `y` without "
"concern about ambiguities with each other with respect to `x`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1010
msgid ""
"Be aware that this strategy has at least one major disadvantage: in many "
"cases, it is not possible for users to further customize the behavior of `f` "
"by defining further specializations of your exported function `f`. Instead, "
"they have to define specializations for your internal methods `_fA` and "
"`_fB`, and this blurs the lines between exported and internal methods."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:1011
#, no-wrap
msgid "Abstract containers and element types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1015
msgid ""
"Where possible, try to avoid defining methods that dispatch on specific "
"element types of abstract containers. For example,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1019
#, no-wrap
msgid ""
"```julia\n"
"-(A::AbstractArray{T}, b::Date) where {T<:Date}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1021
msgid "generates ambiguities for anyone who defines a method"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1025
msgid "```julia -(A::MyArrayType{T}, b::T) where {T} ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1032
msgid ""
"The best approach is to avoid defining *either* of these methods: instead, "
"rely on a generic method `-(A::AbstractArray, b)` and make sure this method "
"is implemented with generic calls (like `similar` and `-`) that do the right "
"thing for each container type and element type *separately*. This is just a "
"more complex variant of the advice to [orthogonalize](@ref man-methods-"
"orthogonalize) your methods."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1038
msgid ""
"When this approach is not possible, it may be worth starting a discussion "
"with other developers about resolving the ambiguity; just because one method "
"was defined first does not necessarily mean that it can't be modified or "
"eliminated.  As a last resort, one developer can define the \"band-aid\" "
"method"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1042
#, no-wrap
msgid ""
"```julia\n"
"-(A::MyArrayType{T}, b::Date) where {T<:Date} = ...\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1044
msgid "that resolves the ambiguity by brute force."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/methods.md:1045
#, no-wrap
msgid "Complex method \"cascades\" with default arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1052
msgid ""
"If you are defining a method \"cascade\" that supplies defaults, be careful "
"about dropping any arguments that correspond to potential defaults. For "
"example, suppose you're writing a digital filtering algorithm and you have a "
"method that handles the edges of the signal by applying padding:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1059
#, no-wrap
msgid ""
"```julia\n"
"function myfilter(A, kernel, ::Replicate)\n"
"    Apadded = replicate_edges(A, size(kernel))\n"
"    myfilter(Apadded, kernel)  # now perform the \"real\" computation\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1061
msgid "This will run afoul of a method that supplies default padding:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1065
msgid ""
"```julia myfilter(A, kernel) = myfilter(A, kernel, Replicate()) # replicate "
"the edge by default ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1067
msgid ""
"Together, these two methods generate an infinite recursion with `A` "
"constantly growing bigger."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1069
msgid "The better design would be to define your call hierarchy like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1072
msgid ""
"```julia struct NoPad end # indicate that no padding is desired, or that "
"it's already applied"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1074
msgid ""
"myfilter(A, kernel) = myfilter(A, kernel, Replicate())  # default boundary "
"conditions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1079
#, no-wrap
msgid ""
"function myfilter(A, kernel, ::Replicate)\n"
"    Apadded = replicate_edges(A, size(kernel))\n"
"    myfilter(Apadded, kernel, NoPad())  # indicate the new boundary conditions\n"
"end\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/methods.md:1080
#, no-wrap
msgid "other padding methods go here"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1086
#, no-wrap
msgid ""
"function myfilter(A, kernel, ::NoPad)\n"
"    # Here's the \"real\" implementation of the core computation\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1092
msgid ""
"`NoPad` is supplied in the same argument position as any other kind of "
"padding, so it keeps the dispatch hierarchy well organized and with reduced "
"likelihood of ambiguities. Moreover, it extends the \"public\" `myfilter` "
"interface: a user who wants to control the padding explicitly can call the "
"`NoPad` variant directly."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/methods.md:1093
msgid ""
"[^Clarke61]: Arthur C. Clarke, *Profiles of the Future* (1961): Clarke's "
"Third Law."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/environment-variables.md:1
#, no-wrap
msgid "Environment Variables"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:11
msgid ""
"Julia can be configured with a number of environment variables, set either "
"in the usual way for each operating system, or in a portable way from within "
"Julia.  Supposing that you want to set the environment variable "
"`JULIA_EDITOR` to `vim`, you can type `ENV[\"JULIA_EDITOR\"] = \"vim\"` (for "
"instance, in the REPL) to make this change on a case by case basis, or add "
"the same to the user configuration file `~/.julia/config/startup.jl` in the "
"user's home directory to have a permanent effect. The current value of the "
"same environment variable can be determined by evaluating `ENV[\"JULIA_EDITOR"
"\"]`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:16
msgid ""
"The environment variables that Julia uses generally start with `JULIA`. If "
"[`InteractiveUtils.versioninfo`](@ref) is called with the keyword "
"`verbose=true`, then the output will list defined environment variables "
"relevant for Julia, including those for which `JULIA` appears in the name."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:18
#: ext/julia/doc/src/manual/environment-variables.md:86
#: ext/julia/doc/src/manual/environment-variables.md:131
#: ext/julia/doc/src/manual/environment-variables.md:168
#: ext/julia/doc/src/manual/environment-variables.md:251
#: ext/julia/doc/src/manual/environment-variables.md:262
#: ext/julia/doc/src/manual/environment-variables.md:273
#: ext/julia/doc/src/manual/environment-variables.md:284
msgid "!!! note"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:24
#, no-wrap
msgid ""
"    Some variables, such as `JULIA_NUM_THREADS` and `JULIA_PROJECT`, need to be set before Julia\n"
"    starts, therefore adding these to `~/.julia/config/startup.jl` is too late in the startup process.\n"
"    In Bash, environment variables can either be set manually by running, e.g.,\n"
"    `export JULIA_NUM_THREADS=4` before starting Julia, or by adding the same command to\n"
"    `-/.bashrc` or `~/.bash_profile` to set the variable each time Bash is started.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/environment-variables.md:25
#, no-wrap
msgid "File locations"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:27
#, no-wrap
msgid "`JULIA_BINDIR`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:32
msgid ""
"The absolute path of the directory containing the Julia executable, which "
"sets the global variable [`Sys.BINDIR`](@ref). If `$JULIA_BINDIR` is not "
"set, then Julia determines the value `Sys.BINDIR` at run-time."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:34
msgid "The executable itself is one of"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:39
msgid "``` $JULIA_BINDIR/julia $JULIA_BINDIR/julia-debug ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:41
msgid "by default."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:44
msgid ""
"The global variable `Base.DATAROOTDIR` determines a relative path from `Sys."
"BINDIR` to the data directory associated with Julia. Then the path"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:48
msgid "``` $JULIA_BINDIR/$DATAROOTDIR/julia/base ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:51
msgid ""
"determines the directory in which Julia initially searches for source files "
"(via `Base.find_source_file()`)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:54
msgid ""
"Likewise, the global variable `Base.SYSCONFDIR` determines a relative path "
"to the configuration file directory. Then Julia searches for a `startup.jl` "
"file at"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:59
msgid ""
"``` $JULIA_BINDIR/$SYSCONFDIR/julia/startup.jl $JULIA_BINDIR/../etc/julia/"
"startup.jl ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:61
msgid "by default (via `Base.load_julia_startup()`)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:65
msgid ""
"For example, a Linux installation with a Julia executable located at `/bin/"
"julia`, a `DATAROOTDIR` of `../share`, and a `SYSCONFDIR` of `../etc` will "
"have `JULIA_BINDIR` set to `/bin`, a source-file search path of"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:69
msgid "``` /share/julia/base ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:71
msgid "and a global configuration search path of"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:75
msgid "``` /etc/julia/startup.jl ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:76
#, no-wrap
msgid "`JULIA_PROJECT`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:84
msgid ""
"A directory path that points to the current Julia project. Setting this "
"environment variable has the same effect as specifying the `--project` start-"
"up option, but `--project` has higher precedence.  If the variable is set to "
"`@.` then Julia tries to find a project directory that contains `Project."
"toml` or `JuliaProject.toml` file from the current directory and its "
"parents.  See also the chapter on [Code Loading](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:88
#, no-wrap
msgid "    `JULIA_PROJECT` must be defined before starting julia; defining it in `startup.jl` is too late in the startup process.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:89
#, no-wrap
msgid "`JULIA_LOAD_PATH`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:99
msgid ""
"A separated list of absolute paths that are to be appended to the variable "
"[`LOAD_PATH`](@ref). (In Unix-like systems, `:` is the path separator; in "
"Windows systems, `;` is the path separator.) The `LOAD_PATH` variable is "
"where [`Base.require`](@ref) and `Base.load_in_path()` look for code; it "
"defaults to the absolute path `$JULIA_HOME/../share/julia/stdlib/v$(VERSION."
"major).$(VERSION.minor)` so that, e.g., version 0.7 of Julia on a Linux "
"system with a Julia executable at `/bin/julia` will have a default "
"`LOAD_PATH` of `/share/julia/stdlib/v0.7`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:100
#, no-wrap
msgid "`JULIA_HISTORY`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:104
msgid ""
"The absolute path `REPL.find_hist_file()` of the REPL's history file. If `"
"$JULIA_HISTORY` is not set, then `REPL.find_hist_file()` defaults to"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:108
msgid "``` $HOME/.julia/logs/repl_history.jl ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:109
#, no-wrap
msgid "`JULIA_PKGRESOLVE_ACCURACY`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:115
msgid ""
"A positive `Int` that determines how much time the max-sum subroutine "
"`MaxSum.maxsum()` of the package dependency resolver will devote to "
"attempting satisfying constraints before giving up: this value is by default "
"`1`, and larger values correspond to larger amounts of time."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:117
msgid "Suppose the value of `$JULIA_PKGRESOLVE_ACCURACY` is `n`. Then"
msgstr ""

#. type: Bullet: '*   '
#: ext/julia/doc/src/manual/environment-variables.md:121
msgid "the number of pre-decimation iterations is `20*n`,"
msgstr ""

#. type: Bullet: '*   '
#: ext/julia/doc/src/manual/environment-variables.md:121
msgid "the number of iterations between decimation steps is `10*n`, and"
msgstr ""

#. type: Bullet: '*   '
#: ext/julia/doc/src/manual/environment-variables.md:121
msgid "at decimation steps, at most one in every `20*n` packages is decimated."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/environment-variables.md:122
#, no-wrap
msgid "External applications"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:124
#, no-wrap
msgid "`JULIA_SHELL`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:129
msgid ""
"The absolute path of the shell with which Julia should execute external "
"commands (via `Base.repl_cmd()`). Defaults to the environment variable `"
"$SHELL`, and falls back to `/bin/sh` if `$SHELL` is unset."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:134
#, no-wrap
msgid ""
"    On Windows, this environment variable is ignored, and external commands are\n"
"    executed directly.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:135
#, no-wrap
msgid "`JULIA_EDITOR`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:139
msgid ""
"The editor returned by `InteractiveUtils.editor()` and used in, e.g., "
"[`InteractiveUtils.edit`](@ref), referring to the command of the preferred "
"editor, for instance `vim`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:144
msgid ""
"`$JULIA_EDITOR` takes precedence over `$VISUAL`, which in turn takes "
"precedence over `$EDITOR`. If none of these environment variables is set, "
"then the editor is taken to be `open` on Windows and OS X, or `/etc/"
"alternatives/editor` if it exists, or `emacs` otherwise."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/environment-variables.md:145
#, no-wrap
msgid "Parallelization"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:147
#, no-wrap
msgid "`JULIA_CPU_THREADS`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:151
msgid ""
"Overrides the global variable [`Base.Sys.CPU_THREADS`](@ref), the number of "
"logical CPU cores available."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:152
#, no-wrap
msgid "`JULIA_WORKER_TIMEOUT`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:157
msgid ""
"A [`Float64`](@ref) that sets the value of `Distributed.worker_timeout()` "
"(default: `60.0`).  This function gives the number of seconds a worker "
"process will wait for a master process to establish a connection before "
"dying."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:158
#, no-wrap
msgid "`JULIA_NUM_THREADS`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:166
msgid ""
"An unsigned 64-bit integer (`uint64_t`) that sets the maximum number of "
"threads available to Julia. If `$JULIA_NUM_THREADS` exceeds the number of "
"available physical CPU cores, then the number of threads is set to the "
"number of cores. If `$JULIA_NUM_THREADS` is not positive or is not set, or "
"if the number of CPU cores cannot be determined through system calls, then "
"the number of threads is set to `1`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:170
#, no-wrap
msgid "    `JULIA_NUM_THREADS` must be defined before starting julia; defining it in `startup.jl` is too late in the startup process.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:171
#, no-wrap
msgid "`JULIA_THREAD_SLEEP_THRESHOLD`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:177
msgid ""
"If set to a string that starts with the case-insensitive substring `"
"\"infinite\"`, then spinning threads never sleep. Otherwise, `"
"$JULIA_THREAD_SLEEP_THRESHOLD` is interpreted as an unsigned 64-bit integer "
"(`uint64_t`) and gives, in nanoseconds, the amount of time after which "
"spinning threads should sleep."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:178
#, no-wrap
msgid "`JULIA_EXCLUSIVE`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:183
msgid ""
"If set to anything besides `0`, then Julia's thread policy is consistent "
"with running on a dedicated machine: the master thread is on proc 0, and "
"threads are affinitized. Otherwise, Julia lets the operating system handle "
"thread policy."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/environment-variables.md:184
#, no-wrap
msgid "REPL formatting"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:191
msgid ""
"Environment variables that determine how REPL output should be formatted at "
"the terminal. Generally, these variables should be set to [ANSI terminal "
"escape sequences](http://ascii-table.com/ansi-escape-sequences.php). Julia "
"provides a high-level interface with much of the same functionality; see the "
"section on [The Julia REPL](@ref)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:192
#, no-wrap
msgid "`JULIA_ERROR_COLOR`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:196
msgid ""
"The formatting `Base.error_color()` (default: light red, `\"\\033[91m\"`) "
"that errors should have at the terminal."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:197
#, no-wrap
msgid "`JULIA_WARN_COLOR`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:201
msgid ""
"The formatting `Base.warn_color()` (default: yellow, `\"\\033[93m\"`) that "
"warnings should have at the terminal."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:202
#, no-wrap
msgid "`JULIA_INFO_COLOR`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:206
msgid ""
"The formatting `Base.info_color()` (default: cyan, `\"\\033[36m\"`) that "
"info should have at the terminal."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:207
#, no-wrap
msgid "`JULIA_INPUT_COLOR`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:211
msgid ""
"The formatting `Base.input_color()` (default: normal, `\"\\033[0m\"`) that "
"input should have at the terminal."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:212
#, no-wrap
msgid "`JULIA_ANSWER_COLOR`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:216
msgid ""
"The formatting `Base.answer_color()` (default: normal, `\"\\033[0m\"`) that "
"output should have at the terminal."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:217
#, no-wrap
msgid "`JULIA_STACKFRAME_LINEINFO_COLOR`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:221
msgid ""
"The formatting `Base.stackframe_lineinfo_color()` (default: bold, `\"\\033[1m"
"\"`)  that line info should have during a stack trace at the terminal."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:222
#, no-wrap
msgid "`JULIA_STACKFRAME_FUNCTION_COLOR`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:226
msgid ""
"The formatting `Base.stackframe_function_color()` (default: bold, `\"\\033[1m"
"\"`)  that function calls should have during a stack trace at the terminal."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/environment-variables.md:227
#, no-wrap
msgid "Debugging and profiling"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:229
#, no-wrap
msgid "`JULIA_GC_ALLOC_POOL`, `JULIA_GC_ALLOC_OTHER`, `JULIA_GC_ALLOC_PRINT`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:235
msgid ""
"If set, these environment variables take strings that optionally start with "
"the character `'r'`, followed by a string interpolation of a colon-separated "
"list of three signed 64-bit integers (`int64_t`). This triple of integers `a:"
"b:c` represents the arithmetic sequence `a`, `a + b`, `a + 2*b`, ... `c`."
msgstr ""

#. type: Bullet: '*   '
#: ext/julia/doc/src/manual/environment-variables.md:246
msgid ""
"If it's the `n`th time that `jl_gc_pool_alloc()` has been called, and `n` "
"belongs to the arithmetic sequence represented by `$JULIA_GC_ALLOC_POOL`, "
"then garbage collection is forced."
msgstr ""

#. type: Bullet: '*   '
#: ext/julia/doc/src/manual/environment-variables.md:246
msgid ""
"If it's the `n`th time that `maybe_collect()` has been called, and `n` "
"belongs to the arithmetic sequence represented by `$JULIA_GC_ALLOC_OTHER`, "
"then garbage collection is forced."
msgstr ""

#. type: Bullet: '*   '
#: ext/julia/doc/src/manual/environment-variables.md:246
msgid ""
"If it's the `n`th time that `jl_gc_collect()` has been called, and `n` "
"belongs to the arithmetic sequence represented by `$JULIA_GC_ALLOC_PRINT`, "
"then counts for the number of calls to `jl_gc_pool_alloc()` and "
"`maybe_collect()` are printed."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:249
msgid ""
"If the value of the environment variable begins with the character `'r'`, "
"then the interval between garbage collection events is randomized."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:255
#, no-wrap
msgid ""
"    These environment variables only have an effect if Julia was compiled with\n"
"    garbage-collection debugging (that is, if `WITH_GC_DEBUG_ENV` is set to `1`\n"
"    in the build configuration).\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:256
#, no-wrap
msgid "`JULIA_GC_NO_GENERATIONAL`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:260
msgid ""
"If set to anything besides `0`, then the Julia garbage collector never "
"performs \"quick sweeps\" of memory."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:266
#: ext/julia/doc/src/manual/environment-variables.md:277
#, no-wrap
msgid ""
"    This environment variable only has an effect if Julia was compiled with\n"
"    garbage-collection debugging (that is, if `WITH_GC_DEBUG_ENV` is set to `1`\n"
"    in the build configuration).\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:267
#, no-wrap
msgid "`JULIA_GC_WAIT_FOR_DEBUGGER`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:271
msgid ""
"If set to anything besides `0`, then the Julia garbage collector will wait "
"for a debugger to attach instead of aborting whenever there's a critical "
"error."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:278
#, no-wrap
msgid "`ENABLE_JITPROFILING`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:282
msgid ""
"If set to anything besides `0`, then the compiler will create and register "
"an event listener for just-in-time (JIT) profiling."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:291
#, no-wrap
msgid ""
"    This environment variable only has an effect if Julia was compiled with JIT\n"
"    profiling support, using either\n"
"    * Intel's [VTune™ Amplifier](https://software.intel.com/en-us/vtune)\n"
"      (`USE_INTEL_JITEVENTS` set to `1` in the build configuration), or\n"
"    * [OProfile](http://oprofile.sourceforge.net/news/) (`USE_OPROFILE_JITEVENTS` set to `1`\n"
"      in the build configuration).\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:292
#, no-wrap
msgid "`JULIA_LLVM_ARGS`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:295
msgid "Arguments to be passed to the LLVM backend."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/environment-variables.md:296
#, no-wrap
msgid "`JULIA_DEBUG_LOADING`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/environment-variables.md:300
msgid ""
"If set, then Julia prints detailed information about the cache in the "
"loading process of [`Base.require`](@ref)."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/mathematical-operations.md:1
#, no-wrap
msgid "Mathematical Operations and Elementary Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:6
msgid ""
"Julia provides a complete collection of basic arithmetic and bitwise "
"operators across all of its numeric primitive types, as well as providing "
"portable, efficient implementations of a comprehensive collection of "
"standard mathematical functions."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/mathematical-operations.md:7
#, no-wrap
msgid "Arithmetic Operators"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:11
msgid ""
"The following [arithmetic operators](https://en.wikipedia.org/wiki/"
"Arithmetic#Arithmetic_operations)  are supported on all primitive numeric "
"types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:24
#, no-wrap
msgid ""
"| Expression | Name           | Description                            |\n"
"|:---------- |:-------------- |:-------------------------------------- |\n"
"| `+x`       | unary plus     | the identity operation                 |\n"
"| `-x`       | unary minus    | maps values to their additive inverses |\n"
"| `x + y`    | binary plus    | performs addition                      |\n"
"| `x - y`    | binary minus   | performs subtraction                   |\n"
"| `x * y`    | times          | performs multiplication                |\n"
"| `x / y`    | divide         | performs division                      |\n"
"| `x ÷ y`    | integer divide | x / y, truncated to an integer         |\n"
"| `x \\ y`    | inverse divide | equivalent to `y / x`                  |\n"
"| `x ^ y`    | power          | raises `x` to the `y`th power          |\n"
"| `x % y`    | remainder      | equivalent to `rem(x,y)`               |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:26
msgid "as well as the negation on [`Bool`](@ref) types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:30
#, no-wrap
msgid ""
"| Expression | Name     | Description                              |\n"
"|:---------- |:-------- |:---------------------------------------- |\n"
"| `!x`       | negation | changes `true` to `false` and vice versa |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:34
msgid ""
"Julia's promotion system makes arithmetic operations on mixtures of argument "
"types \"just work\" naturally and automatically. See [Conversion and "
"Promotion](@ref conversion-and-promotion) for details of the promotion "
"system."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:36
msgid "Here are some simple examples using arithmetic operators:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:40
#: ext/julia/doc/src/manual/functions.md:154
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 1 + 2 + 3\n"
"6\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:43
#, no-wrap
msgid ""
"julia> 1 - 2\n"
"-1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:47
#, no-wrap
msgid ""
"julia> 3*2/12\n"
"0.5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:51
msgid ""
"(By convention, we tend to space operators more tightly if they get applied "
"before other nearby operators. For instance, we would generally write `-x + "
"2` to reflect that first `x` gets negated, and then `2` is added to that "
"result.)"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/mathematical-operations.md:52
#, no-wrap
msgid "Bitwise Operators"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:56
msgid ""
"The following [bitwise operators](https://en.wikipedia.org/wiki/"
"Bitwise_operation#Bitwise_operators)  are supported on all primitive integer "
"types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:66
#, no-wrap
msgid ""
"| Expression | Name                                                                     |\n"
"|:---------- |:------------------------------------------------------------------------ |\n"
"| `~x`       | bitwise not                                                              |\n"
"| `x & y`    | bitwise and                                                              |\n"
"| `x \\| y`   | bitwise or                                                               |\n"
"| `x ⊻ y`    | bitwise xor (exclusive or)                                               |\n"
"| `x >>> y`  | [logical shift](https://en.wikipedia.org/wiki/Logical_shift) right       |\n"
"| `x >> y`   | [arithmetic shift](https://en.wikipedia.org/wiki/Arithmetic_shift) right |\n"
"| `x << y`   | logical/arithmetic shift left                                            |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:68
msgid "Here are some examples with bitwise operators:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:72
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> ~123\n"
"-124\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:75
#, no-wrap
msgid ""
"julia> 123 & 234\n"
"106\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:78
#, no-wrap
msgid ""
"julia> 123 | 234\n"
"251\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:81
#, no-wrap
msgid ""
"julia> 123 ⊻ 234\n"
"145\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:84
#, no-wrap
msgid ""
"julia> xor(123, 234)\n"
"145\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:87
#, no-wrap
msgid ""
"julia> ~UInt32(123)\n"
"0xffffff84\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:91
#, no-wrap
msgid ""
"julia> ~UInt8(123)\n"
"0x84\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/mathematical-operations.md:92
#, no-wrap
msgid "Updating operators"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:98
msgid ""
"Every binary arithmetic and bitwise operator also has an updating version "
"that assigns the result of the operation back into its left operand. The "
"updating version of the binary operator is formed by placing a `=` "
"immediately after the operator. For example, writing `x += 3` is equivalent "
"to writing `x = x + 3`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:102
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = 1\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:105
#, no-wrap
msgid ""
"julia> x += 3\n"
"4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:109
#, no-wrap
msgid ""
"julia> x\n"
"4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:111
msgid ""
"The updating versions of all the binary arithmetic and bitwise operators are:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:115
#, no-wrap
msgid ""
"```\n"
"+=  -=  *=  /=  \\=  ÷=  %=  ^=  &=  |=  ⊻=  >>>=  >>=  <<=\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:119
#, no-wrap
msgid ""
"!!! note\n"
"    An updating operator rebinds the variable on the left-hand side. As a result, the type of the\n"
"    variable may change.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:123
#, no-wrap
msgid ""
"    ```jldoctest\n"
"    julia> x = 0x01; typeof(x)\n"
"    UInt8\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:126
#, no-wrap
msgid ""
"    julia> x *= 2 # Same as x = x * 2\n"
"    2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:130
#, no-wrap
msgid ""
"    julia> typeof(x)\n"
"    Int64\n"
"    ```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/mathematical-operations.md:131
#, no-wrap
msgid "[Vectorized \"dot\" operators](@id man-dot-operators)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:142
msgid ""
"For *every* binary operation like `^`, there is a corresponding \"dot\" "
"operation `.^` that is *automatically* defined to perform `^` element-by-"
"element on arrays. For example, `[1,2,3] ^ 3` is not defined, since there is "
"no standard mathematical meaning to \"cubing\" a (non-square) array, but "
"`[1,2,3] .^ 3` is defined as computing the elementwise (or \"vectorized\") "
"result `[1^3, 2^3, 3^3]`.  Similarly for unary operators like `!` or `√`, "
"there is a corresponding `.√` that applies the operator elementwise."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:150
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> [1,2,3] .^ 3\n"
"3-element Array{Int64,1}:\n"
"  1\n"
"  8\n"
" 27\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:163
msgid ""
"More specifically, `a .^ b` is parsed as the [\"dot\" call](@ref man-"
"vectorized)  `(^).(a,b)`, which performs a [broadcast](@ref Broadcasting) "
"operation: it can combine arrays and scalars, arrays of the same size "
"(performing the operation elementwise), and even arrays of different shapes "
"(e.g.  combining row and column vectors to produce a matrix). Moreover, like "
"all vectorized \"dot calls,\" these \"dot operators\" are *fusing*. For "
"example, if you compute `2 .* A.^2 .+ sin.(A)` (or equivalently `@. 2A^2 + "
"sin(A)`, using the [`@.`](@ref @__dot__) macro) for an array `A`, it "
"performs a *single* loop over `A`, computing `2a^2 + sin(a)` for each "
"element of `A`. In particular, nested dot calls like `f.(g.(x))` are fused, "
"and \"adjacent\" binary operators like `x .+ 3 .* x.^2` are equivalent to "
"nested dot calls `(+).(x, (*).(3, (^).(x, 2)))`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:167
msgid ""
"Furthermore, \"dotted\" updating operators like `a .+= b` (or `@. a += b`) "
"are parsed as `a .= a .+ b`, where `.=` is a fused *in-place* assignment "
"operation (see the [dot syntax documentation](@ref man-vectorized))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:172
msgid ""
"Note the dot syntax is also applicable to user-defined operators.  For "
"example, if you define `⊗(A,B) = kron(A,B)` to give a convenient infix "
"syntax `A ⊗ B` for Kronecker products ([`kron`](@ref)), then `[A,B] .⊗ [C,"
"D]` will compute `[A⊗C, B⊗D]` with no additional coding."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:177
msgid ""
"Combining dot operators with numeric literals can be ambiguous.  For "
"example, it is not clear whether `1.+x` means `1. + x` or `1 .+ x`.  "
"Therefore this syntax is disallowed, and spaces must be used around the "
"operator in such cases."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/mathematical-operations.md:178
#, no-wrap
msgid "Numeric Comparisons"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:181
msgid ""
"Standard comparison operations are defined for all the primitive numeric "
"types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:190
#, no-wrap
msgid ""
"| Operator                     | Name                     |\n"
"|:---------------------------- |:------------------------ |\n"
"| [`==`](@ref)                 | equality                 |\n"
"| [`!=`](@ref), [`≠`](@ref !=) | inequality               |\n"
"| [`<`](@ref)                  | less than                |\n"
"| [`<=`](@ref), [`≤`](@ref <=) | less than or equal to    |\n"
"| [`>`](@ref)                  | greater than             |\n"
"| [`>=`](@ref), [`≥`](@ref >=) | greater than or equal to |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:192
msgid "Here are some simple examples:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:196
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 1 == 1\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:199
#, no-wrap
msgid ""
"julia> 1 == 2\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:202
#, no-wrap
msgid ""
"julia> 1 != 2\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:205
#, no-wrap
msgid ""
"julia> 1 == 1.0\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:208
#, no-wrap
msgid ""
"julia> 1 < 2\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:211
#, no-wrap
msgid ""
"julia> 1.0 > 3\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:214
#, no-wrap
msgid ""
"julia> 1 >= 1.0\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:217
#, no-wrap
msgid ""
"julia> -1 <= 1\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:220
#, no-wrap
msgid ""
"julia> -1 <= -1\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:223
#, no-wrap
msgid ""
"julia> -1 <= -2\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:227
#, no-wrap
msgid ""
"julia> 3 < -0.5\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:230
msgid ""
"Integers are compared in the standard manner -- by comparison of bits. "
"Floating-point numbers are compared according to the [IEEE 754 standard]"
"(https://en.wikipedia.org/wiki/IEEE_754-2008):"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/mathematical-operations.md:236
msgid "Finite numbers are ordered in the usual manner."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/mathematical-operations.md:236
msgid "Positive zero is equal but not greater than negative zero."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/mathematical-operations.md:236
msgid "`Inf` is equal to itself and greater than everything else except `NaN`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/mathematical-operations.md:236
msgid "`-Inf` is equal to itself and less then everything else except `NaN`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/mathematical-operations.md:236
msgid ""
"`NaN` is not equal to, not less than, and not greater than anything, "
"including itself."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:238
msgid "The last point is potentially surprising and thus worth noting:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:242
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> NaN == NaN\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:245
#, no-wrap
msgid ""
"julia> NaN != NaN\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:248
#, no-wrap
msgid ""
"julia> NaN < NaN\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:252
#, no-wrap
msgid ""
"julia> NaN > NaN\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:254
msgid ""
"and can cause especial headaches with [arrays](@ref man-multi-dim-arrays):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:259
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> [1 NaN] == [1 NaN]\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:262
msgid ""
"Julia provides additional functions to test numbers for special values, "
"which can be useful in situations like hash key comparisons:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:269
#, no-wrap
msgid ""
"| Function                | Tests if                  |\n"
"|:----------------------- |:------------------------- |\n"
"| [`isequal(x, y)`](@ref) | `x` and `y` are identical |\n"
"| [`isfinite(x)`](@ref)   | `x` is a finite number    |\n"
"| [`isinf(x)`](@ref)      | `x` is infinite           |\n"
"| [`isnan(x)`](@ref)      | `x` is not a number       |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:271
msgid "[`isequal`](@ref) considers `NaN`s equal to each other:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:275
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> isequal(NaN, NaN)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:278
#, no-wrap
msgid ""
"julia> isequal([1 NaN], [1 NaN])\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:282
#, no-wrap
msgid ""
"julia> isequal(NaN, NaN32)\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:284
msgid "`isequal` can also be used to distinguish signed zeros:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:288
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> -0.0 == 0.0\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:292
#, no-wrap
msgid ""
"julia> isequal(-0.0, 0.0)\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:295
msgid ""
"Mixed-type comparisons between signed integers, unsigned integers, and "
"floats can be tricky. A great deal of care has been taken to ensure that "
"Julia does them correctly."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:300
msgid ""
"For other types, `isequal` defaults to calling [`==`](@ref), so if you want "
"to define equality for your own types then you only need to add a [`==`]"
"(@ref) method.  If you define your own equality function, you should "
"probably define a corresponding [`hash`](@ref) method to ensure that "
"`isequal(x,y)` implies `hash(x) == hash(y)`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/mathematical-operations.md:301
#, no-wrap
msgid "Chaining comparisons"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:305
msgid ""
"Unlike most languages, with the [notable exception of Python](https://en."
"wikipedia.org/wiki/Python_syntax_and_semantics#Comparison_operators), "
"comparisons can be arbitrarily chained:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:310
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 1 < 2 <= 2 < 3 == 3 > 2 >= 1 == 1 < 3 != 5\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:315
#, no-wrap
msgid ""
"Chaining comparisons is often quite convenient in numerical code. Chained comparisons use the\n"
"`&&` operator for scalar comparisons, and the [`&`](@ref) operator for elementwise comparisons,\n"
"which allows them to work on arrays. For example, `0 .< A .< 1` gives a boolean array whose entries\n"
"are true where the corresponding elements of `A` are between 0 and 1.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:317
msgid "Note the evaluation behavior of chained comparisons:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:321
#: ext/julia/doc/src/manual/control-flow.md:238
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> v(x) = (println(x); x)\n"
"v (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:327
#, no-wrap
msgid ""
"julia> v(1) < v(2) <= v(3)\n"
"2\n"
"1\n"
"3\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:333
#, no-wrap
msgid ""
"julia> v(1) > v(2) <= v(3)\n"
"2\n"
"1\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:339
#, no-wrap
msgid ""
"The middle expression is only evaluated once, rather than twice as it would be if the expression\n"
"were written as `v(1) < v(2) && v(2) <= v(3)`. However, the order of evaluations in a chained\n"
"comparison is undefined. It is strongly recommended not to use expressions with side effects (such\n"
"as printing) in chained comparisons. If side effects are required, the short-circuit `&&` operator\n"
"should be used explicitly (see [Short-Circuit Evaluation](@ref)).\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/mathematical-operations.md:340
#, no-wrap
msgid "Elementary Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:346
msgid ""
"Julia provides a comprehensive collection of mathematical functions and "
"operators. These mathematical operations are defined over as broad a class "
"of numerical values as permit sensible definitions, including integers, "
"floating-point numbers, rationals, and complex numbers, wherever such "
"definitions make sense."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:350
msgid ""
"Moreover, these functions (like any Julia function) can be applied in "
"\"vectorized\" fashion to arrays and other collections with the [dot syntax]"
"(@ref man-vectorized) `f.(A)`, e.g. `sin.(A)` will compute the sine of each "
"element of an array `A`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/mathematical-operations.md:351
#, no-wrap
msgid "Operator Precedence and Associativity"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:354
msgid ""
"Julia applies the following order and associativity of operations, from "
"highest precedence to lowest:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:371
#, no-wrap
msgid ""
"| Category       | Operators                                                                                         | Associativity              |\n"
"|:-------------- |:------------------------------------------------------------------------------------------------- |:-------------------------- |\n"
"| Syntax         | `.` followed by `::`                                                                              | Left                       |\n"
"| Exponentiation | `^`                                                                                               | Right                      |\n"
"| Unary          | `+ - √`                                                                                           | Right[^1]                  |\n"
"| Bitshifts      | `<< >> >>>`                                                                                       | Left                       |\n"
"| Fractions      | `//`                                                                                              | Left                       |\n"
"| Multiplication | `* / % & \\ ÷`                                                                                     | Left[^2]                   |\n"
"| Addition       | `+ - \\| ⊻`                                                                                        | Left[^2]                   |\n"
"| Syntax         | `: ..`                                                                                            | Left                       |\n"
"| Syntax         | `\\|>`                                                                                             | Left                       |\n"
"| Syntax         | `<\\|`                                                                                             | Right                      |\n"
"| Comparisons    | `> < >= <= == === != !== <:`                                                                      | Non-associative            |\n"
"| Control flow   | `&&` followed by `\\|\\|` followed by `?`                                                           | Right                      |\n"
"| Pair           | `=>`                                                                                              | Right                      |\n"
"| Assignments    | `= += -= *= /= //= \\= ^= ÷= %= \\|= &= ⊻= <<= >>= >>>=`                                            | Right                      |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:377
#, no-wrap
msgid ""
"[^1]:\n"
"    The unary operators `+` and `-` require explicit parentheses around their argument to disambiguate them from the operator `++`, etc. Other compositions of unary operators are parsed with right-associativity, e. g., `√√-a` as `√(√(-a))`.\n"
"[^2]:\n"
"    The operators `+`, `++` and `*` are non-associative. `a + b + c` is parsed as `+(a, b, c)` not `+(+(a, b),\n"
"    c)`. However, the fallback methods for `+(a, b, c, d...)` and `*(a, b, c, d...)` both default to left-associative evaluation.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:380
msgid ""
"For a complete list of *every* Julia operator's precedence, see the top of "
"this file: [`src/julia-parser.scm`](https://github.com/JuliaLang/julia/blob/"
"master/src/julia-parser.scm)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:382
msgid ""
"You can also find the numerical precedence for any given operator via the "
"built-in function `Base.operator_precedence`, where higher numbers take "
"precedence:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:386
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Base.operator_precedence(:+), Base.operator_precedence(:*), Base.operator_precedence(:.)\n"
"(11, 13, 17)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:390
#, no-wrap
msgid ""
"julia> Base.operator_precedence(:sin), Base.operator_precedence(:+=), Base.operator_precedence(:(=))  # (Note the necessary parens on `:(=)`)\n"
"(0, 1, 1)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:392
msgid ""
"A symbol representing the operator associativity can also be found by "
"calling the built-in function `Base.operator_associativity`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:396
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Base.operator_associativity(:-), Base.operator_associativity(:+), Base.operator_associativity(:^)\n"
"(:left, :none, :right)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:400
#, no-wrap
msgid ""
"julia> Base.operator_associativity(:⊗), Base.operator_associativity(:sin), Base.operator_associativity(:→)\n"
"(:left, :none, :right)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:403
msgid ""
"Note that symbols such as `:sin` return precedence `0`. This value "
"represents invalid operators and not operators of lowest precedence. "
"Similarly, such operators are assigned associativity `:none`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/mathematical-operations.md:404
#, no-wrap
msgid "Numerical Conversions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:408
msgid ""
"Julia supports three forms of numerical conversion, which differ in their "
"handling of inexact conversions."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/mathematical-operations.md:410
msgid ""
"The notation `T(x)` or `convert(T,x)` converts `x` to a value of type `T`."
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/mathematical-operations.md:419
msgid ""
"If `T` is a floating-point type, the result is the nearest representable "
"value, which could be positive or negative infinity."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:419
#, no-wrap
msgid ""
"      * If `T` is an integer type, an `InexactError` is raised if `x` is not representable by `T`.\n"
"  * `x % T` converts an integer `x` to a value of integer type `T` congruent to `x` modulo `2^n`,\n"
"    where `n` is the number of bits in `T`. In other words, the binary representation is truncated\n"
"    to fit.\n"
"  * The [Rounding functions](@ref) take a type `T` as an optional argument. For example, `round(Int,x)`\n"
"    is a shorthand for `Int(round(x))`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:421
msgid "The following examples show the different forms."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:425
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Int8(127)\n"
"127\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:430
#, no-wrap
msgid ""
"julia> Int8(128)\n"
"ERROR: InexactError: trunc(Int8, 128)\n"
"Stacktrace:\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:433
#, no-wrap
msgid ""
"julia> Int8(127.0)\n"
"127\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:438
#, no-wrap
msgid ""
"julia> Int8(3.14)\n"
"ERROR: InexactError: Int8(3.14)\n"
"Stacktrace:\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:443
#, no-wrap
msgid ""
"julia> Int8(128.0)\n"
"ERROR: InexactError: Int8(128.0)\n"
"Stacktrace:\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:446
#, no-wrap
msgid ""
"julia> 127 % Int8\n"
"127\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:449
#, no-wrap
msgid ""
"julia> 128 % Int8\n"
"-128\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:452
#, no-wrap
msgid ""
"julia> round(Int8,127.4)\n"
"127\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:458
#, no-wrap
msgid ""
"julia> round(Int8,127.6)\n"
"ERROR: InexactError: trunc(Int8, 128.0)\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:460
msgid ""
"See [Conversion and Promotion](@ref conversion-and-promotion) for how to "
"define your own conversions and promotions."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/mathematical-operations.md:461
#, no-wrap
msgid "Rounding functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:473
#, no-wrap
msgid ""
"| Function              | Description                      | Return type |\n"
"|:--------------------- |:-------------------------------- |:----------- |\n"
"| [`round(x)`](@ref)    | round `x` to the nearest integer | `typeof(x)` |\n"
"| [`round(T, x)`](@ref) | round `x` to the nearest integer | `T`         |\n"
"| [`floor(x)`](@ref)    | round `x` towards `-Inf`         | `typeof(x)` |\n"
"| [`floor(T, x)`](@ref) | round `x` towards `-Inf`         | `T`         |\n"
"| [`ceil(x)`](@ref)     | round `x` towards `+Inf`         | `typeof(x)` |\n"
"| [`ceil(T, x)`](@ref)  | round `x` towards `+Inf`         | `T`         |\n"
"| [`trunc(x)`](@ref)    | round `x` towards zero           | `typeof(x)` |\n"
"| [`trunc(T, x)`](@ref) | round `x` towards zero           | `T`         |\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/mathematical-operations.md:474
#, no-wrap
msgid "Division functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:489
#, no-wrap
msgid ""
"| Function                  | Description                                                                                               |\n"
"|:------------------------- |:--------------------------------------------------------------------------------------------------------- |\n"
"| [`div(x,y)`](@ref), `x÷y` | truncated division; quotient rounded towards zero                                                         |\n"
"| [`fld(x,y)`](@ref)        | floored division; quotient rounded towards `-Inf`                                                         |\n"
"| [`cld(x,y)`](@ref)        | ceiling division; quotient rounded towards `+Inf`                                                         |\n"
"| [`rem(x,y)`](@ref)        | remainder; satisfies `x == div(x,y)*y + rem(x,y)`; sign matches `x`                                       |\n"
"| [`mod(x,y)`](@ref)        | modulus; satisfies `x == fld(x,y)*y + mod(x,y)`; sign matches `y`                                         |\n"
"| [`mod1(x,y)`](@ref)       | `mod` with offset 1; returns `r∈(0,y]` for `y>0` or `r∈[y,0)` for `y<0`, where `mod(r, y) == mod(x, y)`   |\n"
"| [`mod2pi(x)`](@ref)       | modulus with respect to 2pi;  `0 <= mod2pi(x)    < 2pi`                                                   |\n"
"| [`divrem(x,y)`](@ref)     | returns `(div(x,y),rem(x,y))`                                                                             |\n"
"| [`fldmod(x,y)`](@ref)     | returns `(fld(x,y),mod(x,y))`                                                                             |\n"
"| [`gcd(x,y...)`](@ref)     | greatest positive common divisor of `x`, `y`,...                                                          |\n"
"| [`lcm(x,y...)`](@ref)     | least positive common multiple of `x`, `y`,...                                                            |\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/mathematical-operations.md:490
#, no-wrap
msgid "Sign and absolute value functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:500
#, no-wrap
msgid ""
"| Function                | Description                                                |\n"
"|:----------------------- |:---------------------------------------------------------- |\n"
"| [`abs(x)`](@ref)        | a positive value with the magnitude of `x`                 |\n"
"| [`abs2(x)`](@ref)       | the squared magnitude of `x`                               |\n"
"| [`sign(x)`](@ref)       | indicates the sign of `x`, returning -1, 0, or +1          |\n"
"| [`signbit(x)`](@ref)    | indicates whether the sign bit is on (true) or off (false) |\n"
"| [`copysign(x,y)`](@ref) | a value with the magnitude of `x` and the sign of `y`      |\n"
"| [`flipsign(x,y)`](@ref) | a value with the magnitude of `x` and the sign of `x*y`    |\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/mathematical-operations.md:501
#, no-wrap
msgid "Powers, logs and roots"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:518
#, no-wrap
msgid ""
"| Function                 | Description                                                                |\n"
"|:------------------------ |:-------------------------------------------------------------------------- |\n"
"| [`sqrt(x)`](@ref), `√x`  | square root of `x`                                                         |\n"
"| [`cbrt(x)`](@ref), `∛x`  | cube root of `x`                                                           |\n"
"| [`hypot(x,y)`](@ref)     | hypotenuse of right-angled triangle with other sides of length `x` and `y` |\n"
"| [`exp(x)`](@ref)         | natural exponential function at `x`                                        |\n"
"| [`expm1(x)`](@ref)       | accurate `exp(x)-1` for `x` near zero                                      |\n"
"| [`ldexp(x,n)`](@ref)     | `x*2^n` computed efficiently for integer values of `n`                     |\n"
"| [`log(x)`](@ref)         | natural logarithm of `x`                                                   |\n"
"| [`log(b,x)`](@ref)       | base `b` logarithm of `x`                                                  |\n"
"| [`log2(x)`](@ref)        | base 2 logarithm of `x`                                                    |\n"
"| [`log10(x)`](@ref)       | base 10 logarithm of `x`                                                   |\n"
"| [`log1p(x)`](@ref)       | accurate `log(1+x)` for `x` near zero                                      |\n"
"| [`exponent(x)`](@ref)    | binary exponent of `x`                                                     |\n"
"| [`significand(x)`](@ref) | binary significand (a.k.a. mantissa) of a floating-point number `x`        |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:522
msgid ""
"For an overview of why functions like [`hypot`](@ref), [`expm1`](@ref), and "
"[`log1p`](@ref)  are necessary and useful, see John D. Cook's excellent pair "
"of blog posts on the subject: [expm1, log1p, erfc](https://www.johndcook.com/"
"blog/2010/06/07/math-library-functions-that-seem-unnecessary/), and [hypot]"
"(https://www.johndcook.com/blog/2010/06/02/whats-so-hard-about-finding-a-"
"hypotenuse/)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/mathematical-operations.md:523
#, no-wrap
msgid "Trigonometric and hyperbolic functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:526
msgid ""
"All the standard trigonometric and hyperbolic functions are also defined:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:534
#, no-wrap
msgid ""
"```\n"
"sin    cos    tan    cot    sec    csc\n"
"sinh   cosh   tanh   coth   sech   csch\n"
"asin   acos   atan   acot   asec   acsc\n"
"asinh  acosh  atanh  acoth  asech  acsch\n"
"sinc   cosc\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:537
msgid ""
"These are all single-argument functions, with [`atan`](@ref) also accepting "
"two arguments corresponding to a traditional [`atan2`](https://en.wikipedia."
"org/wiki/Atan2) function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:540
msgid ""
"Additionally, [`sinpi(x)`](@ref) and [`cospi(x)`](@ref) are provided for "
"more accurate computations of [`sin(pi*x)`](@ref) and [`cos(pi*x)`](@ref) "
"respectively."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:544
msgid ""
"In order to compute trigonometric functions with degrees instead of radians, "
"suffix the function with `d`. For example, [`sind(x)`](@ref) computes the "
"sine of `x` where `x` is specified in degrees.  The complete list of "
"trigonometric functions with degree variants is:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:549
#, no-wrap
msgid ""
"```\n"
"sind   cosd   tand   cotd   secd   cscd\n"
"asind  acosd  atand  acotd  asecd  acscd\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/mathematical-operations.md:550
#, no-wrap
msgid "Special functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/mathematical-operations.md:553
msgid ""
"Many other special mathematical functions are provided by the package "
"[SpecialFunctions.jl](https://github.com/JuliaMath/SpecialFunctions.jl)."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/embedding.md:1
#, no-wrap
msgid "Embedding Julia"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:9
msgid ""
"As we have seen in [Calling C and Fortran Code](@ref), Julia has a simple "
"and efficient way to call functions written in C. But there are situations "
"where the opposite is needed: calling Julia function from C code. This can "
"be used to integrate Julia code into a larger C/C++ project, without the "
"need to rewrite everything in C/C++. Julia has a C API to make this "
"possible. As almost all programming languages have some way to call C "
"functions, the Julia C API can also be used to build further language "
"bridges (e.g. calling Julia from Python or C#)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/embedding.md:10
#, no-wrap
msgid "High-Level Embedding"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:14
msgid ""
"__Note__: This section covers embedding Julia code in C on Unix-like "
"operating systems. For doing this on Windows, please see the section "
"following this."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:16
msgid ""
"We start with a simple C program that initializes Julia and calls some Julia "
"code:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:18
#: ext/julia/doc/src/manual/embedding.md:91
#: ext/julia/doc/src/manual/embedding.md:151
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:563
msgid "```c"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:18
#: ext/julia/doc/src/manual/embedding.md:91
#: ext/julia/doc/src/manual/embedding.md:152
#, no-wrap
msgid "#include <julia.h>\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:20
msgid ""
"JULIA_DEFINE_FAST_TLS() // only define this once, in an executable (not in a "
"shared library) if you want fast code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:25
#, no-wrap
msgid ""
"int main(int argc, char *argv[])\n"
"{\n"
"    /* required: setup the Julia context */\n"
"    jl_init();\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:28
#: ext/julia/doc/src/manual/embedding.md:165
#, no-wrap
msgid ""
"    /* run Julia commands */\n"
"    jl_eval_string(\"print(sqrt(2.0))\");\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:38
#: ext/julia/doc/src/manual/embedding.md:175
#, no-wrap
msgid ""
"    /* strongly recommended: notify Julia that the\n"
"         program is about to terminate. this allows\n"
"         Julia time to cleanup pending write requests\n"
"         and run all finalizers\n"
"    */\n"
"    jl_atexit_hook(0);\n"
"    return 0;\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:42
msgid ""
"In order to build this program you have to put the path to the Julia header "
"into the include path and link against `libjulia`. For instance, when Julia "
"is installed to `$JULIA_DIR`, one can compile the above test program `test."
"c` with `gcc` using:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:46
msgid ""
"``` gcc -o test -fPIC -I$JULIA_DIR/include/julia -L$JULIA_DIR/lib test.c -"
"ljulia $JULIA_DIR/lib/julia/libstdc++.so.6 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:49
msgid ""
"Then if the environment variable `JULIA_BINDIR` is set to `$JULIA_DIR/bin`, "
"the output `test` program can be executed."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:53
msgid ""
"Alternatively, look at the `embedding.c` program in the Julia source tree in "
"the `test/embedding/` folder.  The file `ui/repl.c` program is another "
"simple example of how to set `jl_options` options while linking against "
"`libjulia`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:58
msgid ""
"The first thing that has to be done before calling any other Julia C "
"function is to initialize Julia. This is done by calling `jl_init`, which "
"tries to automatically determine Julia's install location. If you need to "
"specify a custom location, or specify which system image to load, use "
"`jl_init_with_image` instead."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:60
msgid ""
"The second statement in the test program evaluates a Julia statement using a "
"call to `jl_eval_string`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:63
msgid ""
"Before the program terminates, it is strongly recommended to call "
"`jl_atexit_hook`.  The above example program calls this before returning "
"from `main`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:67
#, no-wrap
msgid ""
"!!! note\n"
"    Currently, dynamically linking with the `libjulia` shared library requires passing the `RTLD_GLOBAL`\n"
"    option. In Python, this looks like:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:74
#, no-wrap
msgid ""
"    ```\n"
"    >>> julia=CDLL('./libjulia.dylib',RTLD_GLOBAL)\n"
"    >>> julia.jl_init.argtypes = []\n"
"    >>> julia.jl_init()\n"
"    250593296\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:79
#, no-wrap
msgid ""
"!!! note\n"
"    If the julia program needs to access symbols from the main executable, it may be necessary to\n"
"    add `-Wl,--export-dynamic` linker flag at compile time on Linux in addition to the ones generated\n"
"    by `julia-config.jl` described below. This is not necessary when compiling a shared library.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/embedding.md:80
#, no-wrap
msgid "Using julia-config to automatically determine build parameters"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:87
msgid ""
"The script `julia-config.jl` was created to aid in determining what build "
"parameters are required by a program that uses embedded Julia.  This script "
"uses the build parameters and system configuration of the particular Julia "
"distribution it is invoked by to export the necessary compiler flags for an "
"embedding program to interact with that distribution.  This script is "
"located in the Julia shared data directory."
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/manual/embedding.md:88
#, no-wrap
msgid "Example"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:101
#, no-wrap
msgid ""
"int main(int argc, char *argv[])\n"
"{\n"
"    jl_init();\n"
"    (void)jl_eval_string(\"println(sqrt(2.0))\");\n"
"    jl_atexit_hook(0);\n"
"    return 0;\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/manual/embedding.md:102
#, no-wrap
msgid "On the command line"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:107
msgid ""
"A simple use of this script is from the command line.  Assuming that `julia-"
"config.jl` is located in `/usr/local/julia/share/julia`, it can be invoked "
"on the command line directly and takes any combination of 3 flags:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:112
msgid ""
"``` /usr/local/julia/share/julia/julia-config.jl Usage: julia-config [--"
"cflags|--ldflags|--ldlibs] ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:116
msgid ""
"If the above example source is saved in the file `embed_example.c`, then the "
"following command will compile it into a running program on Linux and "
"Windows (MSYS2 environment), or if on OS/X, then substitute `clang` for "
"`gcc`.:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:120
msgid ""
"``` /usr/local/julia/share/julia/julia-config.jl --cflags --ldflags --ldlibs "
"| xargs gcc embed_example.c ```"
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/manual/embedding.md:121
#, no-wrap
msgid "Use in Makefiles"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:129
msgid ""
"But in general, embedding projects will be more complicated than the above, "
"and so the following allows general makefile support as well – assuming GNU "
"make because of the use of the **shell** macro expansions.  Additionally, "
"though many times `julia-config.jl` may be found in the directory `/usr/"
"local`, this is not necessarily the case, but Julia can be used to locate "
"`julia-config.jl` too, and the makefile can be used to take advantage of "
"that.  The above example is extended to use a Makefile:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:136
#, no-wrap
msgid ""
"```\n"
"JL_SHARE = $(shell julia -e 'print(joinpath(Sys.BINDIR, Base.DATAROOTDIR, \"julia\"))')\n"
"CFLAGS   += $(shell $(JL_SHARE)/julia-config.jl --cflags)\n"
"CXXFLAGS += $(shell $(JL_SHARE)/julia-config.jl --cflags)\n"
"LDFLAGS  += $(shell $(JL_SHARE)/julia-config.jl --ldflags)\n"
"LDLIBS   += $(shell $(JL_SHARE)/julia-config.jl --ldlibs)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:139
msgid "all: embed_example ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:141
msgid "Now the build command is simply `make`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/embedding.md:142
#, no-wrap
msgid "High-Level Embedding on Windows with Visual Studio"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:146
msgid ""
"If the `JULIA_DIR` environment variable hasn't been setup, add it using the "
"System panel before starting Visual Studio. The `bin` folder under JULIA_DIR "
"should be on the system PATH."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:149
msgid ""
"We start by opening Visual Studio and creating a new Console Application "
"project. To the 'stdafx.h' header file, add the following lines at the end:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:151
#, no-wrap
msgid "#define JULIA_ENABLE_THREADING\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:154
#: ext/julia/doc/src/manual/functions.md:204
#: ext/julia/doc/src/manual/metaprogramming.md:919
#: ext/julia/doc/src/manual/metaprogramming.md:932
#: ext/julia/doc/src/manual/strings.md:573
#: ext/julia/doc/src/manual/strings.md:581
#: ext/julia/doc/src/manual/constructors.md:135
#: ext/julia/doc/src/manual/constructors.md:181
#: ext/julia/doc/src/manual/constructors.md:208
#: ext/julia/doc/src/manual/interfaces.md:546
#: ext/julia/doc/src/manual/interfaces.md:554
#: ext/julia/doc/src/devdocs/ssair.md:89
#: ext/julia/doc/src/devdocs/debuggingtips.md:85
msgid "```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:156
msgid "Then, replace the main() function in the project with this code:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:162
#, no-wrap
msgid ""
"```c\n"
"int main(int argc, char *argv[])\n"
"{\n"
"    /* required: setup the Julia context */\n"
"    jl_init();\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:179
msgid ""
"The next step is to set up the project to find the Julia include files and "
"the libraries. It's important to know whether the Julia installation is 32- "
"or 64-bits. Remove any platform configuration that doesn't correspond to the "
"Julia installation before proceeding."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:184
msgid ""
"Using the project Properties dialog, go to `C/C++` | `General` and add `"
"$(JULIA_DIR)\\include\\julia\\` to the Additional Include Directories "
"property. Then, go to the `Linker` | `General` section and add `"
"$(JULIA_DIR)\\lib` to the Additional Library Directories property. Finally, "
"under `Linker` | `Input`, add `libjulia.dll.a;libopenlibm.dll.a;` to the "
"list of libraries."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:186
msgid "At this point, the project should build and run."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/embedding.md:187
#, no-wrap
msgid "Converting Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:194
msgid ""
"Real applications will not just need to execute expressions, but also return "
"their values to the host program. `jl_eval_string` returns a `jl_value_t*`, "
"which is a pointer to a heap-allocated Julia object. Storing simple data "
"types like [`Float64`](@ref) in this way is called `boxing`, and extracting "
"the stored primitive data is called `unboxing`. Our improved sample program "
"that calculates the square root of 2 in Julia and reads back the result in C "
"looks as follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:197
msgid "```c jl_value_t *ret = jl_eval_string(\"sqrt(2.0)\");"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:206
#, no-wrap
msgid ""
"if (jl_typeis(ret, jl_float64_type)) {\n"
"    double ret_unboxed = jl_unbox_float64(ret);\n"
"    printf(\"sqrt(2.0) in C: %e \\n\", ret_unboxed);\n"
"}\n"
"else {\n"
"    printf(\"ERROR: unexpected return type from sqrt(::Float64)\\n\");\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:212
msgid ""
"In order to check whether `ret` is of a specific Julia type, we can use the "
"`jl_isa`, `jl_typeis`, or `jl_is_...` functions.  By typing "
"`typeof(sqrt(2.0))` into the Julia shell we can see that the return type is "
"[`Float64`](@ref) (`double` in C). To convert the boxed Julia value into a C "
"double the `jl_unbox_float64` function is used in the above code snippet."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:214
msgid "Corresponding `jl_box_...` functions are used to convert the other way:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:220
msgid ""
"```c jl_value_t *a = jl_box_float64(3.0); jl_value_t *b = "
"jl_box_float32(3.0f); jl_value_t *c = jl_box_int32(3); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:222
msgid ""
"As we will see next, boxing is required to call Julia functions with "
"specific arguments."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/embedding.md:223
#, no-wrap
msgid "Calling Julia Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:228
msgid ""
"While `jl_eval_string` allows C to obtain the result of a Julia expression, "
"it does not allow passing arguments computed in C to Julia. For this you "
"will need to invoke Julia functions directly, using `jl_call`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:234
msgid ""
"```c jl_function_t *func = jl_get_function(jl_base_module, \"sqrt\"); "
"jl_value_t *argument = jl_box_float64(2.0); jl_value_t *ret = jl_call1(func, "
"argument); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:240
msgid ""
"In the first step, a handle to the Julia function `sqrt` is retrieved by "
"calling `jl_get_function`.  The first argument passed to `jl_get_function` "
"is a pointer to the `Base` module in which `sqrt` is defined. Then, the "
"double value is boxed using `jl_box_float64`. Finally, in the last step, the "
"function is called using `jl_call1`. `jl_call0`, `jl_call2`, and `jl_call3` "
"functions also exist, to conveniently handle different numbers of arguments. "
"To pass more arguments, use `jl_call`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:244
msgid ""
"``` jl_value_t *jl_call(jl_function_t *f, jl_value_t **args, int32_t nargs)  "
"```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:247
msgid ""
"Its second argument `args` is an array of `jl_value_t*` arguments and "
"`nargs` is the number of arguments."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/embedding.md:248
#, no-wrap
msgid "Memory Management"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:252
msgid ""
"As we have seen, Julia objects are represented in C as pointers. This raises "
"the question of who is responsible for freeing these objects."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:256
msgid ""
"Typically, Julia objects are freed by a garbage collector (GC), but the GC "
"does not automatically know that we are holding a reference to a Julia value "
"from C. This means the GC can free objects out from under you, rendering "
"pointers invalid."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:262
msgid ""
"The GC can only run when Julia objects are allocated. Calls like "
"`jl_box_float64` perform allocation, and allocation might also happen at any "
"point in running Julia code. However, it is generally safe to use pointers "
"in between `jl_...` calls. But in order to make sure that values can survive "
"`jl_...` calls, we have to tell Julia that we hold a reference to a Julia "
"value. This can be done using the `JL_GC_PUSH` macros:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:269
msgid ""
"```c jl_value_t *ret = jl_eval_string(\"sqrt(2.0)\"); JL_GC_PUSH1(&ret); // "
"Do something with ret JL_GC_POP(); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:273
msgid ""
"The `JL_GC_POP` call releases the references established by the previous "
"`JL_GC_PUSH`. Note that `JL_GC_PUSH` is working on the stack, so it must be "
"exactly paired with a `JL_GC_POP` before the stack frame is destroyed."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:277
msgid ""
"Several Julia values can be pushed at once using the `JL_GC_PUSH2` , "
"`JL_GC_PUSH3` , and `JL_GC_PUSH4` macros. To push an array of Julia values "
"one can use the `JL_GC_PUSHARGS` macro, which can be used as follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:286
msgid ""
"```c jl_value_t **args; JL_GC_PUSHARGS(args, 2); // args can now hold 2 "
"`jl_value_t*` objects args[0] = some_value; args[1] = some_other_value; // "
"Do something with args (e.g. call jl_... functions)  JL_GC_POP(); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:290
msgid ""
"The garbage collector also operates under the assumption that it is aware of "
"every old-generation object pointing to a young-generation one. Any time a "
"pointer is updated breaking that assumption, it must be signaled to the "
"collector with the `jl_gc_wb` (write barrier) function like so:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:296
#, no-wrap
msgid ""
"```c\n"
"jl_value_t *parent = some_old_value, *child = some_young_value;\n"
"((some_specific_type*)parent)->field = child;\n"
"jl_gc_wb(parent, child);\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:301
msgid ""
"It is in general impossible to predict which values will be old at runtime, "
"so the write barrier must be inserted after all explicit stores. One notable "
"exception is if the `parent` object was just allocated and garbage "
"collection was not run since then. Remember that most `jl_...` functions can "
"sometimes invoke garbage collection."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:304
msgid ""
"The write barrier is also necessary for arrays of pointers when updating "
"their data directly.  For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:312
msgid ""
"```c jl_array_t *some_array = ...; // e.g. a Vector{Any} void **data = "
"(void**)jl_array_data(some_array); jl_value_t *some_value = ...; data[0] = "
"some_value; jl_gc_wb(some_array, some_value); ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/embedding.md:313
#, no-wrap
msgid "Manipulating the Garbage Collector"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:316
msgid ""
"There are some functions to control the GC. In normal use cases, these "
"should not be necessary."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:323
#, no-wrap
msgid ""
"| Function             | Description                                  |\n"
"|:-------------------- |:-------------------------------------------- |\n"
"| `jl_gc_collect()`    | Force a GC run                               |\n"
"| `jl_gc_enable(0)`    | Disable the GC, return previous state as int |\n"
"| `jl_gc_enable(1)`    | Enable the GC,  return previous state as int |\n"
"| `jl_gc_is_enabled()` | Return current state as int                  |\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/embedding.md:324
#, no-wrap
msgid "Working with Arrays"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:327
msgid ""
"Julia and C can share array data without copying. The next example will show "
"how this works."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:330
msgid ""
"Julia arrays are represented in C by the datatype `jl_array_t*`. Basically, "
"`jl_array_t` is a struct that contains:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/embedding.md:334
msgid "Information about the datatype"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/embedding.md:334
msgid "A pointer to the data block"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/embedding.md:334
msgid "Information about the sizes of the array"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:337
msgid ""
"To keep things simple, we start with a 1D array. Creating an array "
"containing Float64 elements of length 10 is done by:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:342
#, no-wrap
msgid ""
"```c\n"
"jl_value_t* array_type = jl_apply_array_type((jl_value_t*)jl_float64_type, 1);\n"
"jl_array_t* x          = jl_alloc_array_1d(array_type, 10);\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:345
msgid ""
"Alternatively, if you have already allocated the array you can generate a "
"thin wrapper around its data:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:350
msgid ""
"```c double *existingArray = (double*)malloc(sizeof(double)*10); jl_array_t "
"*x = jl_ptr_to_array_1d(array_type, existingArray, 10, 0); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:354
msgid ""
"The last argument is a boolean indicating whether Julia should take "
"ownership of the data. If this argument is non-zero, the GC will call `free` "
"on the data pointer when the array is no longer referenced."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:356
msgid "In order to access the data of x, we can use `jl_array_data`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:360
msgid "```c double *xData = (double*)jl_array_data(x); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:362
msgid "Now we can fill the array:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:367
#, no-wrap
msgid ""
"```c\n"
"for(size_t i=0; i<jl_array_len(x); i++)\n"
"    xData[i] = i;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:369
msgid ""
"Now let us call a Julia function that performs an in-place operation on `x`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:374
msgid ""
"```c jl_function_t *func = jl_get_function(jl_base_module, \"reverse!\"); "
"jl_call1(func, (jl_value_t*)x); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:376
msgid ""
"By printing the array, one can verify that the elements of `x` are now "
"reversed."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/embedding.md:377
#, no-wrap
msgid "Accessing Returned Arrays"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:381
msgid ""
"If a Julia function returns an array, the return value of `jl_eval_string` "
"and `jl_call` can be cast to a `jl_array_t*`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:386
msgid ""
"```c jl_function_t *func = jl_get_function(jl_base_module, \"reverse\"); "
"jl_array_t *y = (jl_array_t*)jl_call1(func, (jl_value_t*)x); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:389
msgid ""
"Now the content of `y` can be accessed as before using `jl_array_data`. As "
"always, be sure to keep a reference to the array while it is in use."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/embedding.md:390
#, no-wrap
msgid "Multidimensional Arrays"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:394
msgid ""
"Julia's multidimensional arrays are stored in memory in column-major order. "
"Here is some code that creates a 2D array and accesses its properties:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:399
msgid ""
"```c // Create 2D array of float64 type jl_value_t *array_type = "
"jl_apply_array_type(jl_float64_type, 2); jl_array_t *x = "
"jl_alloc_array_2d(array_type, 10, 5);"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:407
msgid ""
"// Get array pointer double *p = (double*)jl_array_data(x); // Get number of "
"dimensions int ndims = jl_array_ndims(x); // Get the size of the i-th dim "
"size_t size0 = jl_array_dim(x,0); size_t size1 = jl_array_dim(x,1);"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:413
#, no-wrap
msgid ""
"// Fill array with data\n"
"for(size_t i=0; i<size1; i++)\n"
"    for(size_t j=0; j<size0; j++)\n"
"        p[j + size0*i] = i + j;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:416
msgid ""
"Notice that while Julia arrays use 1-based indexing, the C API uses 0-based "
"indexing (for example in calling `jl_array_dim`) in order to read as "
"idiomatic C code."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/embedding.md:417
#, no-wrap
msgid "Exceptions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:420
msgid "Julia code can throw exceptions. For example, consider:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:424
msgid "```c jl_eval_string(\"this_function_does_not_exist()\"); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:427
msgid ""
"This call will appear to do nothing. However, it is possible to check "
"whether an exception was thrown:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:432
#, no-wrap
msgid ""
"```c\n"
"if (jl_exception_occurred())\n"
"    printf(\"%s \\n\", jl_typeof_str(jl_exception_occurred()));\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:436
msgid ""
"If you are using the Julia C API from a language that supports exceptions (e."
"g. Python, C#, C++), it makes sense to wrap each call into `libjulia` with a "
"function that checks whether an exception was thrown, and then rethrows the "
"exception in the host language."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/embedding.md:437
#, no-wrap
msgid "Throwing Julia Exceptions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:441
msgid ""
"When writing Julia callable functions, it might be necessary to validate "
"arguments and throw exceptions to indicate errors. A typical type check "
"looks like:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:447
#, no-wrap
msgid ""
"```c\n"
"if (!jl_typeis(val, jl_float64_type)) {\n"
"    jl_type_error(function_name, (jl_value_t*)jl_float64_type, val);\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:449
msgid "General exceptions can be raised using the functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:454
msgid ""
"```c void jl_error(const char *str); void jl_errorf(const char *fmt, ...); "
"```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:456
msgid "`jl_error` takes a C string, and `jl_errorf` is called like `printf`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:460
msgid "```c jl_errorf(\"argument x = %d is too large\", x); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/embedding.md:461
msgid "where in this example `x` is assumed to be an integer."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/noteworthy-differences.md:1
#, no-wrap
msgid "Noteworthy Differences from other Languages"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/noteworthy-differences.md:3
#, no-wrap
msgid "Noteworthy differences from MATLAB"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/noteworthy-differences.md:8
msgid ""
"Although MATLAB users may find Julia's syntax familiar, Julia is not a "
"MATLAB clone. There are major syntactic and functional differences. The "
"following are some noteworthy differences that may trip up Julia users "
"accustomed to MATLAB:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:83
msgid "Julia arrays are indexed with square brackets, `A[i,j]`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/noteworthy-differences.md:83
#, no-wrap
msgid ""
"  * Julia arrays are not copied when assigned to another variable. After `A = B`, changing elements of `B` will modify `A`\n"
"    as well.\n"
"  * Julia values are not copied when passed to a function. If a function modifies an array, the changes\n"
"    will be visible in the caller.\n"
"  * Julia does not automatically grow arrays in an assignment statement. Whereas in MATLAB `a(4) = 3.2`\n"
"    can create the array `a = [0 0 0 3.2]` and `a(5) = 7` can grow it into `a = [0 0 0 3.2 7]`, the\n"
"    corresponding Julia statement `a[5] = 7` throws an error if the length of `a` is less than 5 or\n"
"    if this statement is the first use of the identifier `a`. Julia has [`push!`](@ref) and [`append!`](@ref),\n"
"    which grow `Vector`s much more efficiently than MATLAB's `a(end+1) = val`.\n"
"  * The imaginary unit `sqrt(-1)` is represented in Julia as [`im`](@ref), not `i` or `j` as in MATLAB.\n"
"  * In Julia, literal numbers without a decimal point (such as `42`) create integers instead of floating\n"
"    point numbers. Arbitrarily large integer literals are supported. As a result, some operations\n"
"    such as `2^-1` will throw a domain error as the result is not an integer (see [the FAQ entry on domain errors](@ref faq-domain-errors)\n"
"    for details).\n"
"  * In Julia, multiple values are returned and assigned as tuples, e.g. `(a, b) = (1, 2)` or `a, b = 1, 2`.\n"
"    MATLAB's `nargout`, which is often used in MATLAB to do optional work based on the number of returned\n"
"    values, does not exist in Julia. Instead, users can use optional and keyword arguments to achieve\n"
"    similar capabilities.\n"
"  * Julia has true one-dimensional arrays. Column vectors are of size `N`, not `Nx1`. For example,\n"
"    [`rand(N)`](@ref) makes a 1-dimensional array.\n"
"  * In Julia, `[x,y,z]` will always construct a 3-element array containing `x`, `y` and `z`.\n"
"    - To concatenate in the first (\"vertical\") dimension use either [`vcat(x,y,z)`](@ref) or separate\n"
"      with semicolons (`[x; y; z]`).\n"
"    - To concatenate in the second (\"horizontal\") dimension use either [`hcat(x,y,z)`](@ref) or separate\n"
"      with spaces (`[x y z]`).\n"
"    - To construct block matrices (concatenating in the first two dimensions), use either [`hvcat`](@ref)\n"
"      or combine spaces and semicolons (`[a b; c d]`).\n"
"  * In Julia, `a:b` and `a:b:c` construct `AbstractRange` objects. To construct a full vector like in MATLAB,\n"
"    use [`collect(a:b)`](@ref). Generally, there is no need to call `collect` though. An `AbstractRange` object will\n"
"    act like a normal array in most cases but is more efficient because it lazily computes its values.\n"
"    This pattern of creating specialized objects instead of full arrays is used frequently, and is\n"
"    also seen in functions such as [`range`](@ref), or with iterators such as `enumerate`, and\n"
"    `zip`. The special objects can mostly be used as if they were normal arrays.\n"
"  * Functions in Julia return values from their last expression or the `return` keyword instead of\n"
"    listing the names of variables to return in the function definition (see [The return Keyword](@ref)\n"
"    for details).\n"
"  * A Julia script may contain any number of functions, and all definitions will be externally visible\n"
"    when the file is loaded. Function definitions can be loaded from files outside the current working\n"
"    directory.\n"
"  * In Julia, reductions such as [`sum`](@ref), [`prod`](@ref), and [`max`](@ref) are performed\n"
"    over every element of an array when called with a single argument, as in `sum(A)`, even if `A`\n"
"    has more than one dimension.\n"
"  * In Julia, parentheses must be used to call a function with zero arguments, like in [`rand()`](@ref).\n"
"  * Julia discourages the use of semicolons to end statements. The results of statements are not\n"
"    automatically printed (except at the interactive prompt), and lines of code do not need to end\n"
"    with semicolons. [`println`](@ref) or [`@printf`](@ref) can be used to print specific output.\n"
"  * In Julia, if `A` and `B` are arrays, logical comparison operations like `A == B` do not return\n"
"    an array of booleans. Instead, use `A .== B`, and similarly for the other boolean operators like\n"
"    [`<`](@ref), [`>`](@ref).\n"
"  * In Julia, the operators [`&`](@ref), [`|`](@ref), and [`⊻`](@ref xor) ([`xor`](@ref)) perform the\n"
"    bitwise operations equivalent to `and`, `or`, and `xor` respectively in MATLAB, and have precedence\n"
"    similar to Python's bitwise operators (unlike C). They can operate on scalars or element-wise\n"
"    across arrays and can be used to combine logical arrays, but note the difference in order of operations:\n"
"    parentheses may be required (e.g., to select elements of `A` equal to 1 or 2 use `(A .== 1) .| (A .== 2)`).\n"
"  * In Julia, the elements of a collection can be passed as arguments to a function using the splat\n"
"    operator `...`, as in `xs=[1,2]; f(xs...)`.\n"
"  * Julia's [`svd`](@ref) returns singular values as a vector instead of as a dense diagonal matrix.\n"
"  * In Julia, `...` is not used to continue lines of code. Instead, incomplete expressions automatically\n"
"    continue onto the next line.\n"
"  * In both Julia and MATLAB, the variable `ans` is set to the value of the last expression issued\n"
"    in an interactive session. In Julia, unlike MATLAB, `ans` is not set when Julia code is run in\n"
"    non-interactive mode.\n"
"  * Julia's `struct`s do not support dynamically adding fields at runtime, unlike MATLAB's `class`es.\n"
"    Instead, use a [`Dict`](@ref).\n"
"  * In Julia each module has its own global scope/namespace, whereas in MATLAB there is just one global\n"
"    scope.\n"
"  * In MATLAB, an idiomatic way to remove unwanted values is to use logical indexing, like in the\n"
"    expression `x(x>3)` or in the statement `x(x>3) = []` to modify `x` in-place. In contrast, Julia\n"
"    provides the higher order functions [`filter`](@ref) and [`filter!`](@ref), allowing users\n"
"    to write `filter(z->z>3, x)` and `filter!(z->z>3, x)` as alternatives to the corresponding transliterations\n"
"    `x[x.>3]` and `x = x[x.>3]`. Using [`filter!`](@ref) reduces the use of temporary arrays.\n"
"  * The analogue of extracting (or \"dereferencing\") all elements of a cell array, e.g. in `vertcat(A{:})`\n"
"    in MATLAB, is written using the splat operator in Julia, e.g. as `vcat(A...)`.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/noteworthy-differences.md:84
#, no-wrap
msgid "Noteworthy differences from R"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/noteworthy-differences.md:88
msgid ""
"One of Julia's goals is to provide an effective language for data analysis "
"and statistical programming.  For users coming to Julia from R, these are "
"some noteworthy differences:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:99
msgid "Julia's single quotes enclose characters, not strings."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:99
msgid ""
"Julia can create substrings by indexing into strings. In R, strings must be "
"converted into character vectors before creating substrings."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:99
msgid ""
"In Julia, like Python but unlike R, strings can be created with triple "
"quotes `\"\"\" ... \"\"\"`. This syntax is convenient for constructing "
"strings that contain line breaks."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:99
msgid ""
"In Julia, varargs are specified using the splat operator `...`, which always "
"follows the name of a specific variable, unlike R, for which `...` can occur "
"in isolation."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:99
msgid ""
"In Julia, modulus is `mod(a, b)`, not `a %% b`. `%` in Julia is the "
"remainder operator."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:99
msgid ""
"In Julia, not all data structures support logical indexing. Furthermore, "
"logical indexing in Julia is supported only with vectors of length equal to "
"the object being indexed. For example:"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:145
msgid "In R, `c(1, 2, 3, 4)[c(TRUE, FALSE)]` is equivalent to `c(1, 3)`."
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:145
msgid ""
"In R, `c(1, 2, 3, 4)[c(TRUE, FALSE, TRUE, FALSE)]` is equivalent to `c(1, "
"3)`."
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:145
msgid "In Julia, `[1, 2, 3, 4][[true, false]]` throws a [`BoundsError`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/noteworthy-differences.md:145
#, no-wrap
msgid ""
"      * In Julia, `[1, 2, 3, 4][[true, false, true, false]]` produces `[1, 3]`.\n"
"  * Like many languages, Julia does not always allow operations on vectors of different lengths, unlike\n"
"    R where the vectors only need to share a common index range.  For example, `c(1, 2, 3, 4) + c(1, 2)`\n"
"    is valid R but the equivalent `[1, 2, 3, 4] + [1, 2]` will throw an error in Julia.\n"
"  * Julia allows an optional trailing comma when that comma does not change the meaning of code.\n"
"    This can cause confusion among R users when indexing into arrays. For example, `x[1,]` in R\n"
"    would return the first row of a matrix; in Julia, however, the comma is ignored, so\n"
"    `x[1,] == x[1]`, and will return the first element. To extract a row, be sure to use `:`, as in `x[1,:]`.\n"
"  * Julia's [`map`](@ref) takes the function first, then its arguments, unlike `lapply(<structure>, function, ...)`\n"
"    in R. Similarly Julia's equivalent of `apply(X, MARGIN, FUN, ...)` in R is [`mapslices`](@ref)\n"
"    where the function is the first argument.\n"
"  * Multivariate apply in R, e.g. `mapply(choose, 11:13, 1:3)`, can be written as `broadcast(binomial, 11:13, 1:3)`\n"
"    in Julia. Equivalently Julia offers a shorter dot syntax for vectorizing functions `binomial.(11:13, 1:3)`.\n"
"  * Julia uses `end` to denote the end of conditional blocks, like `if`, loop blocks, like `while`/\n"
"    `for`, and functions. In lieu of the one-line `if ( cond ) statement`, Julia allows statements\n"
"    of the form `if cond; statement; end`, `cond && statement` and `!cond || statement`. Assignment\n"
"    statements in the latter two syntaxes must be explicitly wrapped in parentheses, e.g. `cond && (x = value)`.\n"
"  * In Julia, `<-`, `<<-` and `->` are not assignment operators.\n"
"  * Julia's `->` creates an anonymous function.\n"
"  * Julia constructs vectors using brackets. Julia's `[1, 2, 3]` is the equivalent of R's `c(1, 2, 3)`.\n"
"  * Julia's [`*`](@ref) operator can perform matrix multiplication, unlike in R. If `A` and `B` are\n"
"    matrices, then `A * B` denotes a matrix multiplication in Julia, equivalent to R's `A %*% B`.\n"
"    In R, this same notation would perform an element-wise (Hadamard) product. To get the element-wise\n"
"    multiplication operation, you need to write `A .* B` in Julia.\n"
"  * Julia performs matrix transposition using the `transpose` function and conjugated transposition using\n"
"    the `'` operator or the `adjoint` function. Julia's `transpose(A)` is therefore equivalent to R's `t(A)`.\n"
"    Additionally a non-recursive transpose in Julia is provided by the `permutedims` function.\n"
"  * Julia does not require parentheses when writing `if` statements or `for`/`while` loops: use `for i in [1, 2, 3]`\n"
"    instead of `for (i in c(1, 2, 3))` and `if i == 1` instead of `if (i == 1)`.\n"
"  * Julia does not treat the numbers `0` and `1` as Booleans. You cannot write `if (1)` in Julia,\n"
"    because `if` statements accept only booleans. Instead, you can write `if true`, `if Bool(1)`,\n"
"    or `if 1==1`.\n"
"  * Julia does not provide `nrow` and `ncol`. Instead, use `size(M, 1)` for `nrow(M)` and `size(M, 2)`\n"
"    for `ncol(M)`.\n"
"  * Julia is careful to distinguish scalars, vectors and matrices.  In R, `1` and `c(1)` are the same.\n"
"    In Julia, they cannot be used interchangeably.\n"
"  * Julia's [`diag`](@ref) and [`diagm`](@ref) are not like R's.\n"
"  * Julia cannot assign to the results of function calls on the left hand side of an assignment operation:\n"
"    you cannot write `diag(M) = fill(1, n)`.\n"
"  * Julia discourages populating the main namespace with functions. Most statistical functionality\n"
"    for Julia is found in [packages](https://pkg.julialang.org/) under the [JuliaStats organization](https://github.com/JuliaStats).\n"
"    For example:\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:196
msgid ""
"Functions pertaining to probability distributions are provided by the "
"[Distributions package](https://github.com/JuliaStats/Distributions.jl)."
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:196
msgid ""
"The [DataFrames package](https://github.com/JuliaData/DataFrames.jl) "
"provides data frames."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/noteworthy-differences.md:196
#, no-wrap
msgid ""
"      * Generalized linear models are provided by the [GLM package](https://github.com/JuliaStats/GLM.jl).\n"
"  * Julia provides tuples and real hash tables, but not R-style lists. When returning multiple items,\n"
"    you should typically use a tuple or a named tuple: instead of `list(a = 1, b = 2)`, use `(1, 2)`\n"
"    or `(a=1, b=2)`.\n"
"  * Julia encourages users to write their own types, which are easier to use than S3 or S4 objects\n"
"    in R. Julia's multiple dispatch system means that `table(x::TypeA)` and `table(x::TypeB)` act\n"
"    like R's `table.TypeA(x)` and `table.TypeB(x)`.\n"
"  * In Julia, values are not copied when assigned or passed to a function. If a function modifies an array, the changes\n"
"    will be visible in the caller. This is very different from R and allows new functions to operate\n"
"    on large data structures much more efficiently.\n"
"  * In Julia, vectors and matrices are concatenated using [`hcat`](@ref), [`vcat`](@ref) and\n"
"    [`hvcat`](@ref), not `c`, `rbind` and `cbind` like in R.\n"
"  * In Julia, a range like `a:b` is not shorthand for a vector like in R, but is a specialized `AbstractRange`\n"
"    object that is used for iteration without high memory overhead. To convert a range into a vector, use\n"
"    [`collect(a:b)`](@ref).\n"
"  * Julia's [`max`](@ref) and [`min`](@ref) are the equivalent of `pmax` and `pmin` respectively\n"
"    in R, but both arguments need to have the same dimensions.  While [`maximum`](@ref) and [`minimum`](@ref)\n"
"    replace `max` and `min` in R, there are important differences.\n"
"  * Julia's [`sum`](@ref), [`prod`](@ref), [`maximum`](@ref), and [`minimum`](@ref) are different\n"
"    from their counterparts in R. They all accept an optional keyword argument `dims`, which indicates the\n"
"    dimensions, over which the operation is carried out.  For instance, let `A = [1 2; 3 4]` in Julia\n"
"    and `B <- rbind(c(1,2),c(3,4))` be the same matrix in R.  Then `sum(A)` gives the same result as\n"
"    `sum(B)`, but `sum(A, dims=1)` is a row vector containing the sum over each column and `sum(A, dims=2)`\n"
"    is a column vector containing the sum over each row. This contrasts to the behavior of R, where separate\n"
"    `colSums(B)` and `rowSums(B)` functions provide these functionalities. If the `dims` keyword argument is a\n"
"    vector, then it specifies all the dimensions over which the sum is performed, while retaining the\n"
"    dimensions of the summed array, e.g. `sum(A, dims=(1,2)) == hcat(10)`. It should be noted that there is no\n"
"    error checking regarding the second argument.\n"
"  * Julia has several functions that can mutate their arguments. For example, it has both [`sort`](@ref)\n"
"    and [`sort!`](@ref).\n"
"  * In R, performance requires vectorization. In Julia, almost the opposite is true: the best performing\n"
"    code is often achieved by using devectorized loops.\n"
"  * Julia is eagerly evaluated and does not support R-style lazy evaluation. For most users, this\n"
"    means that there are very few unquoted expressions or column names.\n"
"  * Julia does not support the `NULL` type. The closest equivalent is [`nothing`](@ref), but it\n"
"    behaves like a scalar value rather than like a list. Use `x === nothing` instead of `is.null(x)`.\n"
"  * In Julia, missing values are represented by the [`missing`](@ref) object rather than by `NA`.\n"
"    Use [`ismissing(x)`](@ref) (or `ismissing.(x)` for element-wise operation on vectors) instead of\n"
"    `is.na(x)`. The [`skipmissing`](@ref) function is generally\n"
"    used instead of `na.rm=TRUE` (though in some particular cases functions take a `skipmissing`\n"
"    argument).\n"
"  * Julia lacks the equivalent of R's `assign` or `get`.\n"
"  * In Julia, `return` does not require parentheses.\n"
"  * In R, an idiomatic way to remove unwanted values is to use logical indexing, like in the expression\n"
"    `x[x>3]` or in the statement `x = x[x>3]` to modify `x` in-place. In contrast, Julia provides\n"
"    the higher order functions [`filter`](@ref) and [`filter!`](@ref), allowing users to write\n"
"    `filter(z->z>3, x)` and `filter!(z->z>3, x)` as alternatives to the corresponding transliterations\n"
"    `x[x.>3]` and `x = x[x.>3]`. Using [`filter!`](@ref) reduces the use of temporary arrays.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/noteworthy-differences.md:197
#, no-wrap
msgid "Noteworthy differences from Python"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:223
msgid ""
"Julia requires `end` to end a block. Unlike Python, Julia has no `pass` "
"keyword."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:223
#: ext/julia/doc/src/manual/noteworthy-differences.md:307
msgid "In Julia, indexing of arrays, strings, etc. is 1-based not 0-based."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:223
msgid ""
"Julia's slice indexing includes the last element, unlike in Python. `a[2:3]` "
"in Julia is `a[1:3]` in Python."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:223
msgid ""
"Julia does not support negative indices. In particular, the last element of "
"a list or array is indexed with `end` in Julia, not `-1` as in Python."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:223
msgid ""
"Julia's `for`, `if`, `while`, etc. blocks are terminated by the `end` "
"keyword. Indentation level is not significant as it is in Python."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:223
msgid ""
"Julia has no line continuation syntax: if, at the end of a line, the input "
"so far is a complete expression, it is considered done; otherwise the input "
"continues. One way to force an expression to continue is to wrap it in "
"parentheses."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:223
msgid ""
"Julia arrays are column major (Fortran ordered) whereas NumPy arrays are row "
"major (C-ordered)  by default. To get optimal performance when looping over "
"arrays, the order of the loops should be reversed in Julia relative to NumPy "
"(see relevant section of [Performance Tips](@ref man-performance-tips))."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:223
msgid ""
"Julia's updating operators (e.g. `+=`, `-=`, ...) are *not in-place* whereas "
"NumPy's are. This means `A = [1, 1]; B = A; B += [3, 3]` doesn't change "
"values in `A`, it rather rebinds the name `B` to the result of the right-"
"hand side `B = B + 3`, which is a new array. For in-place operation, use `B ."
"+= 3` (see also [dot operators](@ref man-dot-operators)), explicit loops, or "
"`InplaceOps.jl`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:223
msgid ""
"Julia evaluates default values of function arguments every time the method "
"is invoked, unlike in Python where the default values are evaluated only "
"once when the function is defined. For example, the function `f(x=rand()) = "
"x` returns a new random number every time it is invoked without argument.  "
"On the other hand, the function `g(x=[1,2]) = push!(x,3)` returns `[1,2,3]` "
"every time it is called as `g()`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:223
msgid ""
"In Julia `%` is the remainder operator, whereas in Python it is the modulus."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/noteworthy-differences.md:224
#, no-wrap
msgid "Noteworthy differences from C/C++"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:307
msgid ""
"Julia arrays are indexed with square brackets, and can have more than one "
"dimension `A[i,j]`.  This syntax is not just syntactic sugar for a reference "
"to a pointer or address as in C/C++. See the Julia documentation for the "
"syntax for array construction (it has changed between versions)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:307
msgid ""
"Julia arrays are not copied when assigned to another variable. After `A = "
"B`, changing elements of `B` will modify `A` as well. Updating operators "
"like `+=` do not operate in-place, they are equivalent to `A = A + B` which "
"rebinds the left-hand side to the result of the right-hand side expression."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:307
msgid ""
"Julia arrays are column major (Fortran ordered) whereas C/C++ arrays are row "
"major ordered by default. To get optimal performance when looping over "
"arrays, the order of the loops should be reversed in Julia relative to C/C++ "
"(see relevant section of [Performance Tips](@ref man-performance-tips))."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:307
msgid ""
"Julia values are not copied when assigned or passed to a function. If a "
"function modifies an array, the changes will be visible in the caller."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/noteworthy-differences.md:307
msgid ""
"In Julia, whitespace is significant, unlike C/C++, so care must be taken "
"when adding/removing whitespace from a Julia program."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/noteworthy-differences.md:307
#, no-wrap
msgid ""
"  * In Julia, literal numbers without a decimal point (such as `42`) create signed integers, of type\n"
"    `Int`, but literals too large to fit in the machine word size will automatically be promoted to\n"
"    a larger size type, such as `Int64` (if `Int` is `Int32`), `Int128`, or the arbitrarily large\n"
"    `BigInt` type. There are no numeric literal suffixes, such as `L`, `LL`, `U`, `UL`, `ULL` to indicate\n"
"    unsigned and/or signed vs. unsigned. Decimal literals are always signed, and hexadecimal literals\n"
"    (which start with `0x` like C/C++), are unsigned. Hexadecimal literals also, unlike C/C++/Java\n"
"    and unlike decimal literals in Julia, have a type based on the *length* of the literal, including\n"
"    leading 0s. For example, `0x0` and `0x00` have type [`UInt8`](@ref), `0x000` and `0x0000` have type\n"
"    [`UInt16`](@ref), then literals with 5 to 8 hex digits have type `UInt32`, 9 to 16 hex digits type\n"
"    `UInt64` and 17 to 32 hex digits type `UInt128`. This needs to be taken into account when defining\n"
"    hexadecimal masks, for example `~0xf == 0xf0` is very different from `~0x000f == 0xfff0`. 64 bit `Float64`\n"
"    and 32 bit [`Float32`](@ref) bit literals are expressed as `1.0` and `1.0f0` respectively. Floating point\n"
"    literals are rounded (and not promoted to the `BigFloat` type) if they can not be exactly represented.\n"
"     Floating point literals are closer in behavior to C/C++. Octal (prefixed with `0o`) and binary\n"
"    (prefixed with `0b`) literals are also treated as unsigned.\n"
"  * String literals can be delimited with either `\"`  or `\"\"\"`, `\"\"\"` delimited literals can contain\n"
"    `\"` characters without quoting it like `\"\\\"\"`. String literals can have values of other variables\n"
"    or expressions interpolated into them, indicated by `$variablename` or `$(expression)`, which\n"
"    evaluates the variable name or the expression in the context of the function.\n"
"  * `//` indicates a [`Rational`](@ref) number, and not a single-line comment (which is `#` in Julia)\n"
"  * `#=` indicates the start of a multiline comment, and `=#` ends it.\n"
"  * Functions in Julia return values from their last expression(s) or the `return` keyword.  Multiple\n"
"    values can be returned from functions and assigned as tuples, e.g. `(a, b) = myfunction()` or\n"
"    `a, b = myfunction()`, instead of having to pass pointers to values as one would have to do in\n"
"    C/C++ (i.e. `a = myfunction(&b)`.\n"
"  * Julia does not require the use of semicolons to end statements. The results of expressions are\n"
"    not automatically printed (except at the interactive prompt, i.e. the REPL), and lines of code\n"
"    do not need to end with semicolons. [`println`](@ref) or [`@printf`](@ref) can be used to\n"
"    print specific output. In the REPL, `;` can be used to suppress output. `;` also has a different\n"
"    meaning within `[ ]`, something to watch out for. `;` can be used to separate expressions on a\n"
"    single line, but are not strictly necessary in many cases, and are more an aid to readability.\n"
"  * In Julia, the operator [`⊻`](@ref xor) ([`xor`](@ref)) performs the bitwise XOR operation, i.e.\n"
"    [`^`](@ref) in C/C++.  Also, the bitwise operators do not have the same precedence as C/++, so\n"
"    parenthesis may be required.\n"
"  * Julia's [`^`](@ref) is exponentiation (pow), not bitwise XOR as in C/C++ (use [`⊻`](@ref xor), or\n"
"    [`xor`](@ref), in Julia)\n"
"  * Julia has two right-shift operators, `>>` and `>>>`.  `>>>` performs an arithmetic shift, `>>`\n"
"    always performs a logical shift, unlike C/C++, where the meaning of `>>` depends on the type of\n"
"    the value being shifted.\n"
"  * Julia's `->` creates an anonymous function, it does not access a member via a pointer.\n"
"  * Julia does not require parentheses when writing `if` statements or `for`/`while` loops: use `for i in [1, 2, 3]`\n"
"    instead of `for (int i=1; i <= 3; i++)` and `if i == 1` instead of `if (i == 1)`.\n"
"  * Julia does not treat the numbers `0` and `1` as Booleans. You cannot write `if (1)` in Julia,\n"
"    because `if` statements accept only booleans. Instead, you can write `if true`, `if Bool(1)`,\n"
"    or `if 1==1`.\n"
"  * Julia uses `end` to denote the end of conditional blocks, like `if`, loop blocks, like `while`/\n"
"    `for`, and functions. In lieu of the one-line `if ( cond ) statement`, Julia allows statements\n"
"    of the form `if cond; statement; end`, `cond && statement` and `!cond || statement`. Assignment\n"
"    statements in the latter two syntaxes must be explicitly wrapped in parentheses, e.g. `cond && (x = value)`,\n"
"    because of the operator precedence.\n"
"  * Julia has no line continuation syntax: if, at the end of a line, the input so far is a complete\n"
"    expression, it is considered done; otherwise the input continues. One way to force an expression\n"
"    to continue is to wrap it in parentheses.\n"
"  * Julia macros operate on parsed expressions, rather than the text of the program, which allows\n"
"    them to perform sophisticated transformations of Julia code. Macro names start with the `@` character,\n"
"    and have both a function-like syntax, `@mymacro(arg1, arg2, arg3)`, and a statement-like syntax,\n"
"    `@mymacro arg1 arg2 arg3`. The forms are interchangeable; the function-like form is particularly\n"
"    useful if the macro appears within another expression, and is often clearest. The statement-like\n"
"    form is often used to annotate blocks, as in the distributed `for` construct: `@distributed for i in 1:n; #= body =#; end`.\n"
"    Where the end of the macro construct may be unclear, use the function-like form.\n"
"  * Julia has an enumeration type, expressed using the macro `@enum(name, value1, value2, ...)`\n"
"    For example: `@enum(Fruit, banana=1, apple, pear)`\n"
"  * By convention, functions that modify their arguments have a `!` at the end of the name, for example\n"
"    `push!`.\n"
"  * In C++, by default, you have static dispatch, i.e. you need to annotate a function as virtual,\n"
"    in order to have dynamic dispatch. On the other hand, in Julia every method is \"virtual\" (although\n"
"    it's more general than that since methods are dispatched on every argument type, not only `this`,\n"
"    using the most-specific-declaration rule).\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:1
#, no-wrap
msgid "Complex and Rational Numbers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:7
msgid ""
"Julia includes predefined types for both complex and rational numbers, and "
"supports all the standard [Mathematical Operations and Elementary Functions]"
"(@ref) on them. [Conversion and Promotion](@ref conversion-and-promotion) "
"are defined so that operations on any combination of predefined numeric "
"types, whether primitive or composite, behave as expected."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:8
#, no-wrap
msgid "Complex Numbers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:14
msgid ""
"The global constant [`im`](@ref) is bound to the complex number *i*, "
"representing the principal square root of -1. (Using mathematicians' `i` or "
"engineers' `j` for this global constant were rejected since they are such "
"popular index variable names.) Since Julia allows numeric literals to be "
"[juxtaposed with identifiers as coefficients](@ref man-numeric-literal-"
"coefficients), this binding suffices to provide convenient syntax for "
"complex numbers, similar to the traditional mathematical notation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:19
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 1+2im\n"
"1 + 2im\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:21
msgid ""
"You can perform all the standard arithmetic operations with complex numbers:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:25
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> (1 + 2im)*(2 - 3im)\n"
"8 + 1im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:28
#, no-wrap
msgid ""
"julia> (1 + 2im)/(1 - 2im)\n"
"-0.6 + 0.8im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:31
#, no-wrap
msgid ""
"julia> (1 + 2im) + (1 - 2im)\n"
"2 + 0im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:34
#, no-wrap
msgid ""
"julia> (-3 + 2im) - (5 - 1im)\n"
"-8 + 3im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:37
#, no-wrap
msgid ""
"julia> (-1 + 2im)^2\n"
"-3 - 4im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:40
#, no-wrap
msgid ""
"julia> (-1 + 2im)^2.5\n"
"2.729624464784009 - 6.9606644595719im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:43
#, no-wrap
msgid ""
"julia> (-1 + 2im)^(1 + 1im)\n"
"-0.27910381075826657 + 0.08708053414102428im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:46
#, no-wrap
msgid ""
"julia> 3(2 - 5im)\n"
"6 - 15im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:49
#, no-wrap
msgid ""
"julia> 3(2 - 5im)^2\n"
"-63 - 60im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:53
#, no-wrap
msgid ""
"julia> 3(2 - 5im)^-1.0\n"
"0.20689655172413796 + 0.5172413793103449im\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:55
msgid ""
"The promotion mechanism ensures that combinations of operands of different "
"types just work:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:59
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 2(1 - 1im)\n"
"2 - 2im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:62
#, no-wrap
msgid ""
"julia> (2 + 3im) - 1\n"
"1 + 3im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:65
#, no-wrap
msgid ""
"julia> (1 + 2im) + 0.5\n"
"1.5 + 2.0im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:68
#, no-wrap
msgid ""
"julia> (2 + 3im) - 0.5im\n"
"2.0 + 2.5im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:71
#, no-wrap
msgid ""
"julia> 0.75(1 + 2im)\n"
"0.75 + 1.5im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:74
#, no-wrap
msgid ""
"julia> (2 + 3im) / 2\n"
"1.0 + 1.5im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:77
#, no-wrap
msgid ""
"julia> (1 - 3im) / (2 + 2im)\n"
"-0.5 - 1.0im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:80
#, no-wrap
msgid ""
"julia> 2im^2\n"
"-2 + 0im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:84
#, no-wrap
msgid ""
"julia> 1 + 3/4im\n"
"1.0 - 0.75im\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:87
msgid ""
"Note that `3/4im == 3/(4*im) == -(3/4*im)`, since a literal coefficient "
"binds more tightly than division."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:89
msgid "Standard functions to manipulate complex values are provided:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:93
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> z = 1 + 2im\n"
"1 + 2im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:96
#, no-wrap
msgid ""
"julia> real(1 + 2im) # real part of z\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:99
#, no-wrap
msgid ""
"julia> imag(1 + 2im) # imaginary part of z\n"
"2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:102
#, no-wrap
msgid ""
"julia> conj(1 + 2im) # complex conjugate of z\n"
"1 - 2im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:105
#, no-wrap
msgid ""
"julia> abs(1 + 2im) # absolute value of z\n"
"2.23606797749979\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:108
#, no-wrap
msgid ""
"julia> abs2(1 + 2im) # squared absolute value\n"
"5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:112
#, no-wrap
msgid ""
"julia> angle(1 + 2im) # phase angle in radians\n"
"1.1071487177940904\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:118
msgid ""
"As usual, the absolute value ([`abs`](@ref)) of a complex number is its "
"distance from zero.  [`abs2`](@ref) gives the square of the absolute value, "
"and is of particular use for complex numbers since it avoids taking a square "
"root. [`angle`](@ref) returns the phase angle in radians (also known as the "
"*argument* or *arg* function). The full gamut of other [Elementary Functions]"
"(@ref)  is also defined for complex numbers:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:122
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sqrt(1im)\n"
"0.7071067811865476 + 0.7071067811865475im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:125
#, no-wrap
msgid ""
"julia> sqrt(1 + 2im)\n"
"1.272019649514069 + 0.7861513777574233im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:128
#, no-wrap
msgid ""
"julia> cos(1 + 2im)\n"
"2.0327230070196656 - 3.0518977991518im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:131
#, no-wrap
msgid ""
"julia> exp(1 + 2im)\n"
"-1.1312043837568135 + 2.4717266720048188im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:135
#, no-wrap
msgid ""
"julia> sinh(1 + 2im)\n"
"-0.4890562590412937 + 1.4031192506220405im\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:139
msgid ""
"Note that mathematical functions typically return real values when applied "
"to real numbers and complex values when applied to complex numbers. For "
"example, [`sqrt`](@ref) behaves differently when applied to `-1` versus `-1 "
"+ 0im` even though `-1 == -1 + 0im`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:146
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sqrt(-1)\n"
"ERROR: DomainError with -1.0:\n"
"sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n"
"Stacktrace:\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:150
#, no-wrap
msgid ""
"julia> sqrt(-1 + 0im)\n"
"0.0 + 1.0im\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:153
msgid ""
"The [literal numeric coefficient notation](@ref man-numeric-literal-"
"coefficients) does not work when constructing a complex number from "
"variables. Instead, the multiplication must be explicitly written out:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:158
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> a = 1; b = 2; a + b*im\n"
"1 + 2im\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:161
msgid ""
"However, this is *not* recommended. Instead, use the more efficient "
"[`complex`](@ref) function to construct a complex value directly from its "
"real and imaginary parts:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:166
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> a = 1; b = 2; complex(a, b)\n"
"1 + 2im\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:168
msgid "This construction avoids the multiplication and addition operations."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:171
msgid ""
"[`Inf`](@ref) and [`NaN`](@ref) propagate through complex numbers in the "
"real and imaginary parts of a complex number as described in the [Special "
"floating-point values](@ref) section:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:175
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 1 + Inf*im\n"
"1.0 + Inf*im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:179
#, no-wrap
msgid ""
"julia> 1 + NaN*im\n"
"1.0 + NaN*im\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:180
#, no-wrap
msgid "Rational Numbers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:184
msgid ""
"Julia has a rational number type to represent exact ratios of integers. "
"Rationals are constructed using the [`//`](@ref) operator:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:189
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 2//3\n"
"2//3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:192
msgid ""
"If the numerator and denominator of a rational have common factors, they are "
"reduced to lowest terms such that the denominator is non-negative:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:196
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 6//9\n"
"2//3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:199
#, no-wrap
msgid ""
"julia> -4//8\n"
"-1//2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:202
#, no-wrap
msgid ""
"julia> 5//-15\n"
"-1//3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:206
#, no-wrap
msgid ""
"julia> -4//-12\n"
"1//3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:211
msgid ""
"This normalized form for a ratio of integers is unique, so equality of "
"rational values can be tested by checking for equality of the numerator and "
"denominator. The standardized numerator and denominator of a rational value "
"can be extracted using the [`numerator`](@ref) and [`denominator`](@ref)  "
"functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:215
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> numerator(2//3)\n"
"2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:219
#, no-wrap
msgid ""
"julia> denominator(2//3)\n"
"3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:222
msgid ""
"Direct comparison of the numerator and denominator is generally not "
"necessary, since the standard arithmetic and comparison operations are "
"defined for rational values:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:226
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 2//3 == 6//9\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:229
#, no-wrap
msgid ""
"julia> 2//3 == 9//27\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:232
#, no-wrap
msgid ""
"julia> 3//7 < 1//2\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:235
#, no-wrap
msgid ""
"julia> 3//4 > 2//3\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:238
#, no-wrap
msgid ""
"julia> 2//4 + 1//6\n"
"2//3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:241
#, no-wrap
msgid ""
"julia> 5//12 - 1//4\n"
"1//6\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:244
#, no-wrap
msgid ""
"julia> 5//8 * 3//12\n"
"5//32\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:248
#, no-wrap
msgid ""
"julia> 6//5 / 10//7\n"
"21//25\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:250
msgid "Rationals can easily be converted to floating-point numbers:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:255
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> float(3//4)\n"
"0.75\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:258
msgid ""
"Conversion from rational to floating-point respects the following identity "
"for any integral values of `a` and `b`, with the exception of the case `a == "
"0` and `b == 0`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:261
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> a = 1; b = 2;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:265
#, no-wrap
msgid ""
"julia> isequal(float(a//b), a/b)\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:267
msgid "Constructing infinite rational values is acceptable:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:271
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 5//0\n"
"1//0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:274
#, no-wrap
msgid ""
"julia> -3//0\n"
"-1//0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:278
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Rational{Int64}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:280
msgid ""
"Trying to construct a [`NaN`](@ref) rational value, however, is invalid:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:287
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 0//0\n"
"ERROR: ArgumentError: invalid rational: zero(Int64)//zero(Int64)\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:289
msgid ""
"As usual, the promotion system makes interactions with other numeric types "
"effortless:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:293
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 3//5 + 1\n"
"8//5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:296
#, no-wrap
msgid ""
"julia> 3//5 - 0.5\n"
"0.09999999999999998\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:299
#, no-wrap
msgid ""
"julia> 2//7 * (1 + 2im)\n"
"2//7 + 4//7*im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:302
#, no-wrap
msgid ""
"julia> 2//7 * (1.5 + 2im)\n"
"0.42857142857142855 + 0.5714285714285714im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:305
#, no-wrap
msgid ""
"julia> 3//2 / (1 + 2im)\n"
"3//10 - 3//5*im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:308
#, no-wrap
msgid ""
"julia> 1//2 + 2im\n"
"1//2 + 2//1*im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:311
#, no-wrap
msgid ""
"julia> 1 + 2//3im\n"
"1//1 - 2//3*im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:314
#, no-wrap
msgid ""
"julia> 0.5 == 1//2\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:317
#, no-wrap
msgid ""
"julia> 0.33 == 1//3\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:320
#, no-wrap
msgid ""
"julia> 0.33 < 1//3\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/complex-and-rational-numbers.md:323
#, no-wrap
msgid ""
"julia> 1//3 - 0.33\n"
"0.0033333333333332993\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/code-loading.md:1
#, no-wrap
msgid "Code Loading"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:5
#, no-wrap
msgid ""
"!!! note\n"
"    This chapter covers the technical details of package loading. To install packages, use [`Pkg`](@ref Pkg), Julia's built-in package manager, to add packages to your active environment. To use packages already in your active environment, write `import X` or `using X`, as described in the [Modules documentation](@ref modules).\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/code-loading.md:6
#, no-wrap
msgid "Definitions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:9
msgid "Julia has two mechanisms for loading code:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/code-loading.md:12
msgid ""
"**Code inclusion:** e.g. `include(\"source.jl\")`. Inclusion allows you to "
"split a single program across multiple source files. The expression "
"`include(\"source.jl\")` causes the contents of the file `source.jl` to be "
"evaluated in the global scope of the module where the `include` call occurs. "
"If `include(\"source.jl\")` is called multiple times, `source.jl` is "
"evaluated multiple times. The included path, `source.jl`, is interpreted "
"relative to the file where the `include` call occurs. This makes it simple "
"to relocate a subtree of source files. In the REPL, included paths are "
"interpreted relative to the current working directory, [`pwd()`](@ref)."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/code-loading.md:12
msgid ""
"**Package loading:** e.g. `import X` or `using X`. The import mechanism "
"allows you to load a package—i.e. an independent, reusable collection of "
"Julia code, wrapped in a module—and makes the resulting module available by "
"the name `X` inside of the importing module. If the same `X` package is "
"imported multiple times in the same Julia session, it is only loaded the "
"first time—on subsequent imports, the importing module gets a reference to "
"the same module. Note though, that `import X` can load different packages in "
"different contexts: `X` can refer to one package named `X` in the main "
"project but potentially to different packages also named `X` in each "
"dependency. More on this below."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:14
msgid ""
"Code inclusion is quite straightforward and simple: it evaluates the given "
"source file in the context of the caller. Package loading is built on top of "
"code inclusion and serves a [different purpose](@ref modules). The rest of "
"this chapter focuses on the behavior and mechanics of package loading."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:16
msgid ""
"A *package* is a source tree with a standard layout providing functionality "
"that can be reused by other Julia projects. A package is loaded by `import "
"X` or `using X` statements. These statements also make the module named `X`—"
"which results from loading the package code—available within the module "
"where the import statement occurs. The meaning of `X` in `import X` is "
"context-dependent: which `X` package is loaded depends on what code the "
"statement occurs in. Thus, handling of `import X` happens in two stages: "
"first, it determines **what** package is defined to be `X` in this context; "
"second, it determines **where** that particular `X` package is found."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:18
msgid ""
"These questions are answered by searching through the project environments "
"listed in [`LOAD_PATH`](@ref) for project files (`Project.toml` or "
"`JuliaProject.toml`), manifest files (`Manifest.toml` or `JuliaManifest."
"toml`), or folders of source files."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/code-loading.md:20
#, no-wrap
msgid "Federation of packages"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:23
msgid ""
"Most of the time, a package is uniquely identifiable simply from its name. "
"However, sometimes a project might encounter a situation where it needs to "
"use two different packages that share the same name. While you might be able "
"fix this by renaming one of the packages, being forced to do so can be "
"highly disruptive in a large, shared code base. Instead, Julia's code "
"loading mechanism allows the same package name to refer to different "
"packages in different components of an application."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:25
msgid ""
"Julia supports federated package management, which means that multiple "
"independent parties can maintain both public and private packages and "
"registries of packages, and that projects can depend on a mix of public and "
"private packages from different registries. Packages from various registries "
"are installed and managed using a common set of tools and workflows. The "
"`Pkg` package manager that ships with Julia lets you install and manage your "
"projects' dependencies. It assists in creating and manipulating project "
"files (which describe what other projects that your project depends on), and "
"manifest files (which snapshot exact versions of your project's complete "
"dependency graph)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:27
msgid ""
"One consequence of federation is that there cannot be a central authority "
"for package naming. Different entities may use the same name to refer to "
"unrelated packages. This possibility is unavoidable since these entities do "
"not coordinate and may not even know about each other. Because of the lack "
"of a central naming authority, a single project may end up depending on "
"different packages that have the same name. Julia's package loading "
"mechanism does not require package names to be globally unique, even within "
"the dependency graph of a single project. Instead, packages are identified "
"by [universally unique identifiers](https://en.wikipedia.org/wiki/"
"Universally_unique_identifier) (UUIDs), which get assigned when each package "
"is created. Usually you won't have to work directly with these somewhat "
"cumbersome 128-bit identifiers since `Pkg` will take care of generating and "
"tracking them for you. However, these UUIDs provide the definitive answer to "
"the question of *\"what package does `X` refer to?\"*"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:29
msgid ""
"Since the decentralized naming problem is somewhat abstract, it may help to "
"walk through a concrete scenario to understand the issue. Suppose you're "
"developing an application called `App`, which uses two packages: `Pub` and "
"`Priv`. `Priv` is a private package that you created, whereas `Pub` is a "
"public package that you use but don't control. When you created `Priv`, "
"there was no public package by the name `Priv`. Subsequently, however, an "
"unrelated package also named `Priv` has been published and become popular. "
"In fact, the `Pub` package has started to use it. Therefore, when you next "
"upgrade `Pub` to get the latest bug fixes and features, `App` will end up "
"depending on two different packages named `Priv`—through no action of yours "
"other than upgrading. `App` has a direct dependency on your private `Priv` "
"package, and an indirect dependency, through `Pub`, on the new public `Priv` "
"package. Since these two `Priv` packages are different but are both required "
"for `App` to continue working correctly, the expression `import Priv` must "
"refer to different `Priv` packages depending on whether it occurs in `App`'s "
"code or in `Pub`'s code. To handle this, Julia's package loading mechanism "
"distinguishes the two `Priv` packages by their UUID and picks the correct "
"one based on its context (the module that called `import`). How this "
"distinction works is determined by environments, as explained in the "
"following sections."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/code-loading.md:30
#, no-wrap
msgid "Environments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:33
msgid ""
"An *environment* determines what `import X` and `using X` mean in various "
"code contexts and what files these statements cause to be loaded. Julia "
"understands two kinds of environments:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/code-loading.md:36
msgid ""
"**A project environment** is a directory with a project file and an optional "
"manifest file, and forms an *explicit environement*. The project file "
"determines what the names and identities of the direct dependencies of a "
"project are. The manifest file, if present, gives a complete dependency "
"graph, including all direct and indirect dependencies, exact versions of "
"each dependency, and sufficient information to locate and load the correct "
"version."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/code-loading.md:36
msgid ""
"**A package directory** is a directory containing the source trees of a set "
"of packages as subdirectories, and forms an *implicit environment*. If `X` "
"is a subdirectory of a package directory and `X/src/X.jl` exists, then the "
"package `X` is available in the package directory environment and `X/src/X."
"jl` is the source file by which it is loaded."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:38
msgid ""
"These can be intermixed to create **a stacked environment**: an ordered set "
"of project environments and package directories, overlaid to make a single "
"composite environment. The precedence and visibility rules then combine to "
"determine which packages are available and where they get loaded from. "
"Julia's load path forms a stacked environment, for example."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:40
msgid "These environment each serve a different purpose:"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:44
msgid ""
"Project environments provide **reproducibility**. By checking a project "
"environment into version control—e.g. a git repository—along with the rest "
"of the project's source code, you can reproduce the exact state of the "
"project and all of its dependencies. The manifest file, in particular, "
"captures the exact version of every dependency, identified by a "
"cryptographic hash of its source tree, which makes it possible for `Pkg` to "
"retrieve the correct versions and be sure that you are running the exact "
"code that was recorded for all dependencies."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:44
msgid ""
"Package directories provide **convenience** when a full carefully-tracked "
"project environment is unnecessary. They are useful when you want to put a "
"set of packages somewhere and be able to directly use them, without needing "
"to create a project environment for them."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:44
msgid ""
"Stacked environments allow for **adding** tools to the primary environment. "
"You can push an environment of development tools onto the end of the stack "
"to make them available from the REPL and scripts, but not from inside "
"packages."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:46
msgid ""
"At a high-level, each environment conceptually defines three maps: roots, "
"graph and paths. When resolving the meaning of `import X`, the roots and "
"graph maps are used to determine the identity of `X`, while the paths map is "
"used to locate the source code of `X`. The specific roles of the three maps "
"are:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:48
msgid "- **roots:** `name::Symbol` ⟶ `uuid::UUID`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:50
#, no-wrap
msgid "   An environment's roots map assigns package names to UUIDs for all the top-level dependencies that the environment makes available to the main project (i.e. the ones that can be loaded in `Main`). When Julia encounters `import X` in the main project, it looks up the identity of `X` as `roots[:X]`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:52
msgid "- **graph:** `context::UUID` ⟶ `name::Symbol` ⟶ `uuid::UUID`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:54
#, no-wrap
msgid "   An environment's graph is a multilevel map which assigns, for each `context` UUID, a map from names to UUIDs, similar to the roots map but specific to that `context`. When Julia sees `import X` in the code of the package whose UUID is `context`, it looks up the identity of `X` as `graph[context][:X]`. In particular, this means that `import X` can refer to different packages depending on `context`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:56
msgid "- **paths:** `uuid::UUID` × `name::Symbol` ⟶ `path::String`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:58
#, no-wrap
msgid "   The paths map assigns to each package UUID-name pair, the location of that package's entry-point source file. After the identity of `X` in `import X` has been resolved to a UUID via roots or graph (depending on whether it is loaded from the main project or a dependency), Julia determines what file to load to acquire `X` by looking up `paths[uuid,:X]` in the environment. Including this file should define a module named `X`. Once this package is loaded, any subsequent import resolving to the same `uuid` will create a new binding to the already-loaded package module.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:60
msgid ""
"Each kind of environment defines these three maps differently, as detailed "
"in the following sections."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:63
#, no-wrap
msgid ""
"!!! note\n"
"    For ease of understanding, the examples throughout this chapter show full data structures for roots, graph and paths. However, Julia's package loading code does not explicitly create these. Instead, it lazily computes only as much of each structure as it needs to load a given package.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/code-loading.md:64
#, no-wrap
msgid "Project environments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:67
msgid ""
"A project environment is determined by a directory containing a project file "
"called `Project.toml`, and optionally a manifest file called `Manifest."
"toml`. These files may also be called `JuliaProject.toml` and `JuliaManifest."
"toml`, in which case `Project.toml` and `Manifest.toml` are ignored. This "
"allows for coexistence with other tools that might consider files called "
"`Project.toml` and `Manifest.toml` significant. For pure Julia projects, "
"however, the names `Project.toml` and `Manifest.toml` are preferred."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:69
msgid ""
"The roots, graph and paths maps of a project environment are defined as "
"follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:71
#, no-wrap
msgid "**The roots map** of the environment is determined by the contents of the project file, specifically, its top-level `name` and `uuid` entries and its `[deps]` section (all optional). Consider the following example project file for the hypothetical application, `App`, as described earlier:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:75
msgid "```toml name = \"App\" uuid = \"8f986787-14fe-4607-ba5d-fbff2944afa9\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:80
msgid ""
"[deps] Priv = \"ba13f791-ae1d-465a-978b-69c3ad90f72b\" Pub = "
"\"c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1\" ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:82
msgid ""
"This project file implies the following roots map, if it was represented by "
"a Julia dictionary:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:90
#, no-wrap
msgid ""
"```julia\n"
"roots = Dict(\n"
"    :App  => UUID(\"8f986787-14fe-4607-ba5d-fbff2944afa9\"),\n"
"    :Priv => UUID(\"ba13f791-ae1d-465a-978b-69c3ad90f72b\"),\n"
"    :Pub  => UUID(\"c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1\"),\n"
")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:92
msgid ""
"Given this roots map, in `App`'s code the statement `import Priv` will cause "
"Julia to look up `roots[:Priv]`, which yields `ba13f791-"
"ae1d-465a-978b-69c3ad90f72b`, the UUID of the `Priv` package that is to be "
"loaded in that context. This UUID identifies which `Priv` package to load "
"and use when the main application evaluates `import Priv`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:94
#, no-wrap
msgid "**The dependency graph** of a project environment is determined by the contents of the manifest file, if present. If there is no manifest file, graph is empty. A manifest file contains a stanza for each of a project's direct or indirect dependencies. For each dependency, the file lists the package's UUID and a source tree hash or an explicit path to the source code. Consider the following example manifest file for `App`:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:100
msgid ""
"```toml [[Priv]] # the private one deps = [\"Pub\", \"Zebra\"] uuid = "
"\"ba13f791-ae1d-465a-978b-69c3ad90f72b\" path = \"deps/Priv\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:105
msgid ""
"[[Priv]] # the public one uuid = \"2d15fe94-a1f7-436c-a4d8-07a9a496e01c\" "
"git-tree-sha1 = \"1bf63d3be994fe83456a03b874b409cfd59a6373\" version = "
"\"0.1.5\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:110
msgid ""
"[[Pub]] uuid = \"c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1\" git-tree-sha1 = "
"\"9ebd50e2b0dd1e110e842df3b433cb5869b0dd38\" version = \"2.1.4\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:114
#, no-wrap
msgid ""
"  [Pub.deps]\n"
"  Priv = \"2d15fe94-a1f7-436c-a4d8-07a9a496e01c\"\n"
"  Zebra = \"f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:120
msgid ""
"[[Zebra]] uuid = \"f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62\" git-tree-sha1 = "
"\"e808e36a5d7173974b90a15a353b564f3494092f\" version = \"3.4.2\" ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:122
msgid ""
"This manifest file describes a possible complete dependency graph for the "
"`App` project:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:127
#, no-wrap
msgid ""
"- There are two different packages named `Priv` that the application uses. It uses a private package, which is a root dependency, and a public one, which is an indirect dependency through `Pub`. These are differentiated by their distinct UUIDs, and they have different deps:\n"
"  * The private `Priv` depends on the `Pub` and `Zebra` packages.\n"
"  * The public `Priv` has no dependencies.\n"
"- The application also depends on the `Pub` package, which in turn depends on the public `Priv ` and the same `Zebra` package that the private `Priv` package depends on.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:130
msgid "This dependency graph represented as a dictionary, looks like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:149
#, no-wrap
msgid ""
"```julia\n"
"graph = Dict(\n"
"    # Priv – the private one:\n"
"    UUID(\"ba13f791-ae1d-465a-978b-69c3ad90f72b\") => Dict(\n"
"        :Pub   => UUID(\"c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1\"),\n"
"        :Zebra => UUID(\"f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62\"),\n"
"    ),\n"
"    # Priv – the public one:\n"
"    UUID(\"2d15fe94-a1f7-436c-a4d8-07a9a496e01c\") => Dict(),\n"
"    # Pub:\n"
"    UUID(\"c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1\") => Dict(\n"
"        :Priv  => UUID(\"2d15fe94-a1f7-436c-a4d8-07a9a496e01c\"),\n"
"        :Zebra => UUID(\"f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62\"),\n"
"    ),\n"
"    # Zebra:\n"
"    UUID(\"f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62\") => Dict(),\n"
")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:151
msgid ""
"Given this dependency `graph`, when Julia sees `import Priv` in the `Pub` "
"package—which has UUID `c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1`—it looks up:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:155
msgid ""
"```julia graph[UUID(\"c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1\")][:Priv] ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:157
msgid ""
"and gets `2d15fe94-a1f7-436c-a4d8-07a9a496e01c`, which indicates that in the "
"context of the `Pub` package, `import Priv` refers to the public `Priv` "
"package, rather than the private one which the app depends on directly. This "
"is how the name `Priv` can refer to different packages in the main project "
"than it does in one of its package's dependencies, which allows for "
"duplicate names in the package ecosystem."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:159
msgid ""
"What happens if `import Zebra` is evaluated in the main `App` code base? "
"Since `Zebra` does not appear in the project file, the import will fail even "
"though `Zebra` *does* appear in the manifest file. Moreover, if `import "
"Zebra` occurs in the public `Priv` package—the one with UUID `2d15fe94-"
"a1f7-436c-a4d8-07a9a496e01c`—then that would also fail since that `Priv` "
"package has no declared dependencies in the manifest file and therefore "
"cannot load any packages. The `Zebra` package can only be loaded by packages "
"for which it appear as an explicit dependency in the manifest file: the "
"`Pub` package and one of the `Priv` packages."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:161
#, no-wrap
msgid "**The paths map** of a project environment is extracted from the manifest file. The path of a package `uuid` named `X` is determined by these rules (in order):\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:168
#, no-wrap
msgid ""
"1. If the project file in the directory matches `uuid` and name `X`, then either:\n"
"  - It has a toplevel `path` entry, then `uuid` will be mapped to that path, interpreted relative to the directory containing the project file.\n"
"  - Otherwise, `uuid` is mapped to  `src/X.jl` relative to the directory containing the project file.\n"
"2. If the above is not the case and the project file has a corresponding manifest file and the manifest contains a stanza matching `uuid` then:\n"
"  - If it has a `path` entry, use that path (relative to the directory containing the manifest file).\n"
"  - If it has a `git-tree-sha1` entry, compute a deterministic hash function of `uuid` and `git-tree-sha1`—call it `slug`—and look for a directory named `packages/X/$slug` in each directory in the Julia `DEPOT_PATH` global array. Use the first such directory that exists.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:170
msgid ""
"If any of these result in success, the path to the source code entry point "
"will be either that result, the relative path from that result plus `src/X."
"jl`; otherwise, there is no path mapping for `uuid`. When loading `X`, if no "
"source code path is found, the lookup will fail, and the user may be "
"prompted to install the appropriate package version or to take other "
"corrective action (e.g. declaring `X` as a dependency)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:172
msgid ""
"In the example manifest file above, to find the path of the first `Priv` "
"package—the one with UUID `ba13f791-ae1d-465a-978b-69c3ad90f72b`—Julia looks "
"for its stanza in the manifest file, sees that it has a `path` entry, looks "
"at `deps/Priv` relative to the `App` project directory—let's suppose the "
"`App` code lives in `/home/me/projects/App`—sees that `/home/me/projects/App/"
"deps/Priv` exists and therefore loads `Priv` from there."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:174
msgid ""
"If, on the other hand, Julia was loading the *other* `Priv` package—the one "
"with UUID `2d15fe94-a1f7-436c-a4d8-07a9a496e01c`—it finds its stanza in the "
"manifest, see that it does *not* have a `path` entry, but that it does have "
"a `git-tree-sha1` entry. It then computes the `slug` for this UUID/SHA-1 "
"pair, which is `HDkrT` (the exact details of this computation aren't "
"important, but it is consistent and deterministic). This means that the path "
"to this `Priv` package will be `packages/Priv/HDkrT/src/Priv.jl` in one of "
"the package depots. Suppose the contents of `DEPOT_PATH` is `[\"/home/me/."
"julia\", \"/usr/local/julia\"]`, then Julia will look at the following paths "
"to see if they exist:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/code-loading.md:177
msgid "`/home/me/.julia/packages/Priv/HDkrT`"
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/code-loading.md:177
msgid "`/usr/local/julia/packages/Priv/HDkrT`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:179
msgid ""
"Julia uses the first of these that exists to try to load the public `Priv` "
"package from the file `packages/Priv/HDKrT/src/Priv.jl` in the depot where "
"it was found."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:183
msgid ""
"Here is a representation of a possible paths map for our example `App` "
"project environment, as provided in the Manifest given above for the "
"dependency graph, after searching the local file system:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:204
#, no-wrap
msgid ""
"```julia\n"
"paths = Dict(\n"
"    # Priv – the private one:\n"
"    (UUID(\"ba13f791-ae1d-465a-978b-69c3ad90f72b\"), :Priv) =>\n"
"        # relative entry-point inside `App` repo:\n"
"        \"/home/me/projects/App/deps/Priv/src/Priv.jl\",\n"
"    # Priv – the public one:\n"
"    (UUID(\"2d15fe94-a1f7-436c-a4d8-07a9a496e01c\"), :Priv) =>\n"
"        # package installed in the system depot:\n"
"        \"/usr/local/julia/packages/Priv/HDkr/src/Priv.jl\",\n"
"    # Pub:\n"
"    (UUID(\"c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1\"), :Pub) =>\n"
"        # package installed in the user depot:\n"
"        \"/home/me/.julia/packages/Pub/oKpw/src/Pub.jl\",\n"
"    # Zebra:\n"
"    (UUID(\"f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62\"), :Zebra) =>\n"
"        # package installed in the system depot:\n"
"        \"/usr/local/julia/packages/Zebra/me9k/src/Zebra.jl\",\n"
")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:206
msgid ""
"This example map includes three different kinds of package locations (the "
"first and third are part of the default load path):"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/code-loading.md:210
msgid ""
"The private `Priv` package is \"[vendored](https://stackoverflow.com/"
"a/35109534)\" inside the `App` repository."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/code-loading.md:210
msgid ""
"The public `Priv` and `Zebra` packages are in the system depot, where "
"packages installed and managed by the system administrator live. These are "
"available to all users on the system."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/code-loading.md:210
msgid ""
"The `Pub` package is in the user depot, where packages installed by the user "
"live. These are only available to the user who installed them."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/code-loading.md:212
#, no-wrap
msgid "Package directories"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:215
msgid ""
"Package directories provide a simpler kind of environment without the "
"ability to handle name collisions. In a package directory, the set of top-"
"level packages is the set of subdirectories that \"look like\" packages. A "
"package `X` is exists in a package directory if the directory contains one "
"of the following \"entry point\" files:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:219
msgid "- `X.jl` - `X/src/X.jl` - `X.jl/src/X.jl`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:221
msgid ""
"Which dependencies a package in a package directory can import depends on "
"whether the package contains a project file:"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:224
msgid ""
"If it has a project file, it can only import those packages which are "
"identified in the `[deps]` section of the project file."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:224
msgid ""
"If it does not have a project file, it can import any top-level package—i.e. "
"the same packages that can be loaded in `Main` or the REPL."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:227
#, no-wrap
msgid ""
"**The roots map** is determined by examining the contents of the package directory to generate a list of all packages that exist.\n"
"Additionally, a UUID will be assigned to each entry as follows: For a given package found inside the folder `X`...\n"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/code-loading.md:231
msgid ""
"If `X/Project.toml` exists and has a `uuid` entry, then `uuid` is that value."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/code-loading.md:231
msgid ""
"If `X/Project.toml` exists and but does *not* have a top-level UUID entry, "
"`uuid` is a dummy UUID generated by hashing the canonical (real) path to `X/"
"Project.toml`."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/code-loading.md:231
msgid ""
"Otherwise (if `Project.toml` does not exist), then `uuid` is the all-zero "
"[nil UUID](https://en.wikipedia.org/wiki/"
"Universally_unique_identifier#Nil_UUID)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:233
#, no-wrap
msgid "**The dependency graph** of a project directory is determined by the presence and contents of project files in the subdirectory of each package. The rules are:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:236
msgid ""
"- If a package subdirectory has no project file, then it is omitted from "
"graph and import statements in its code are treated as top-level, the same "
"as the main project and REPL.  - If a package subdirectory has a project "
"file, then the graph entry for its UUID is the `[deps]` map of the project "
"file, which is considered to be empty if the section is absent."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:238
msgid ""
"As an example, suppose a package directory has the following structure and "
"content:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:244
#, no-wrap
msgid ""
"```\n"
"Aardvark/\n"
"    src/Aardvark.jl:\n"
"        import Bobcat\n"
"        import Cobra\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:250
#, no-wrap
msgid ""
"Bobcat/\n"
"    Project.toml:\n"
"        [deps]\n"
"        Cobra = \"4725e24d-f727-424b-bca0-c4307a3456fa\"\n"
"        Dingo = \"7a7925be-828c-4418-bbeb-bac8dfc843bc\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:254
#, no-wrap
msgid ""
"    src/Bobcat.jl:\n"
"        import Cobra\n"
"        import Dingo\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:260
#, no-wrap
msgid ""
"Cobra/\n"
"    Project.toml:\n"
"        uuid = \"4725e24d-f727-424b-bca0-c4307a3456fa\"\n"
"        [deps]\n"
"        Dingo = \"7a7925be-828c-4418-bbeb-bac8dfc843bc\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:263
#, no-wrap
msgid ""
"    src/Cobra.jl:\n"
"        import Dingo\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:267
#, no-wrap
msgid ""
"Dingo/\n"
"    Project.toml:\n"
"        uuid = \"7a7925be-828c-4418-bbeb-bac8dfc843bc\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:271
#, no-wrap
msgid ""
"    src/Dingo.jl:\n"
"        # no imports\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:273
msgid "Here is a corresponding roots structure, represented as a dictionary:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:282
#, no-wrap
msgid ""
"```julia\n"
"roots = Dict(\n"
"    :Aardvark => UUID(\"00000000-0000-0000-0000-000000000000\"), # no project file, nil UUID\n"
"    :Bobcat   => UUID(\"85ad11c7-31f6-5d08-84db-0a4914d4cadf\"), # dummy UUID based on path\n"
"    :Cobra    => UUID(\"4725e24d-f727-424b-bca0-c4307a3456fa\"), # UUID from project file\n"
"    :Dingo    => UUID(\"7a7925be-828c-4418-bbeb-bac8dfc843bc\"), # UUID from project file\n"
")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:284
msgid "Here is the corresponding graph structure, represented as a dictionary:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:300
#, no-wrap
msgid ""
"```julia\n"
"graph = Dict(\n"
"    # Bobcat:\n"
"    UUID(\"85ad11c7-31f6-5d08-84db-0a4914d4cadf\") => Dict(\n"
"        :Cobra => UUID(\"4725e24d-f727-424b-bca0-c4307a3456fa\"),\n"
"        :Dingo => UUID(\"7a7925be-828c-4418-bbeb-bac8dfc843bc\"),\n"
"    ),\n"
"    # Cobra:\n"
"    UUID(\"4725e24d-f727-424b-bca0-c4307a3456fa\") => Dict(\n"
"        :Dingo => UUID(\"7a7925be-828c-4418-bbeb-bac8dfc843bc\"),\n"
"    ),\n"
"    # Dingo:\n"
"    UUID(\"7a7925be-828c-4418-bbeb-bac8dfc843bc\") => Dict(),\n"
")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:302
msgid "A few general rules to note:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/code-loading.md:306
msgid ""
"A package without a project file can depend on any top-level dependency, and "
"since every package in a package directory is available at the top-level, it "
"can import all packages in the environment."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/code-loading.md:306
msgid ""
"A package with a project file cannot depend on one without a project file "
"since packages with project files can only load packages in `graph` and "
"packages without project files do not appear in `graph`."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/code-loading.md:306
msgid ""
"A package with a project file but no explicit UUID can only be depended on "
"by packages without project files since dummy UUIDs assigned to these "
"packages are strictly internal."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:308
msgid "Observe the following specific instances of these rules in our example:"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:315
msgid ""
"`Aardvark` can import on any of `Bobcat`, `Cobra` or `Dingo`; it does import "
"`Bobcat` and `Cobra`."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:315
msgid ""
"`Bobcat` can and does import both `Cobra` and `Dingo`, which both have "
"project files with UUIDs and are declared as dependencies in `Bobcat`'s "
"`[deps]` section."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:315
msgid ""
"`Bobcat` cannot depend on `Aardvark` since `Aardvark` does not have a "
"project file."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:315
msgid ""
"`Cobra` can and does import `Dingo`, which has a project file and UUID, and "
"is declared as a dependency in `Cobra`'s `[deps]` section."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:315
msgid ""
"`Cobra` cannot depend on `Aardvark` or `Bobcat` since neither have real "
"UUIDs."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/code-loading.md:315
msgid ""
"`Dingo` cannot import anything because it has a project file without a "
"`[deps]` section."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:317
#, no-wrap
msgid "**The paths map** in a package directory is simple: it maps subdirectory names to their corresponding entry-point paths. In other words, if the path to our example project directory is `/home/me/animals` then the `paths` map could be represented by this dictionary:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:330
#, no-wrap
msgid ""
"```julia\n"
"paths = Dict(\n"
"    (UUID(\"00000000-0000-0000-0000-000000000000\"), :Aardvark) =>\n"
"        \"/home/me/AnimalPackages/Aardvark/src/Aardvark.jl\",\n"
"    (UUID(\"85ad11c7-31f6-5d08-84db-0a4914d4cadf\"), :Bobcat) =>\n"
"        \"/home/me/AnimalPackages/Bobcat/src/Bobcat.jl\",\n"
"    (UUID(\"4725e24d-f727-424b-bca0-c4307a3456fa\"), :Cobra) =>\n"
"        \"/home/me/AnimalPackages/Cobra/src/Cobra.jl\",\n"
"    (UUID(\"7a7925be-828c-4418-bbeb-bac8dfc843bc\"), :Dingo) =>\n"
"        \"/home/me/AnimalPackages/Dingo/src/Dingo.jl\",\n"
")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:332
msgid ""
"Since all packages in a package directory environment are, by definition, "
"subdirectories with the expected entry-point files, their `paths` map "
"entries always have this form."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/code-loading.md:333
#, no-wrap
msgid "Environment stacks"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:336
msgid ""
"The third and final kind of environment is one that combines other "
"environments by overlaying several of them, making the packages in each "
"available in a single composite environment. These composite environments "
"are called *environment stacks*. The Julia `LOAD_PATH` global defines an "
"environment stack—the environment in which the Julia process operates. If "
"you want your Julia process to have access only to the packages in one "
"project or package directory, make it the only entry in `LOAD_PATH`. It is "
"often quite useful, however, to have access to some of your favorite tools—"
"standard libraries, profilers, debuggers, personal utilities, etc.—even if "
"they are not dependencies of the project you're working on. By adding an "
"environment containing these tools to the load path, you immediately have "
"access to them in top-level code without needing to add them to your project."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:338
msgid ""
"The mechanism for combining the roots, graph and paths data structures of "
"the components of an environment stack is simple: they are merged as "
"dictionaries, favoring earlier entries over later ones in the case of key "
"collisions. In other words, if we have `stack = [env₁, env₂, …]` then we "
"have:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:344
msgid ""
"```julia roots = reduce(merge, reverse([roots₁, roots₂, …]))  graph = "
"reduce(merge, reverse([graph₁, graph₂, …]))  paths = reduce(merge, "
"reverse([paths₁, paths₂, …]))  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:346
msgid ""
"The subscripted `rootsᵢ`, `graphᵢ` and `pathsᵢ` variables correspond to the "
"subscripted environments, `envᵢ`, contained in `stack`. The `reverse` is "
"present because `merge` favors the last argument rather than first when "
"there are collisions between keys in its argument dictionaries. There are a "
"couple of noteworthy features of this design:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/code-loading.md:349
msgid ""
"The *primary environment*—i.e. the first environment in a stack—is "
"faithfully embedded in a stacked environment. The full dependency graph of "
"the first environment in a stack is guaranteed to be included intact in the "
"stacked environment including the same versions of all dependencies."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/code-loading.md:349
msgid ""
"Packages in non-primary environments can end up using incompatible versions "
"of their dependencies even if their own environments are entirely "
"compatible. This can happen when one of their dependencies is shadowed by a "
"version in an earlier environment in the stack (either by graph or path, or "
"both)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:351
msgid ""
"Since the primary environment is typically the environment of a project "
"you're working on, while environments later in the stack contain additional "
"tools, this is the right trade-off: it's better to break your development "
"tools but keep the project working. When such incompatibilities occur, "
"you'll typically want to upgrade your dev tools to versions that are "
"compatible with the main project."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/code-loading.md:352
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/code-loading.md:354
msgid ""
"Federated package management and precise software reproducibility are "
"difficult but worthy goals in a package system. In combination, these goals "
"lead to a more complex package loading mechanism than most dynamic languages "
"have, but it also yields scalability and reproducibility that is more "
"commonly associated with static languages. Typically, Julia users should be "
"able to use the built-in package manager to manage their projects without "
"needing a precise understanding of these interactions. A call to `Pkg.add(\"X"
"\")` will add to the appropriate project and manifest files, selected via "
"`Pkg.activate(\"Y\")`, so that a future call to `import X` will load `X` "
"without further thought."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/faq.md:1
#, no-wrap
msgid "Frequently Asked Questions"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/faq.md:3
#, no-wrap
msgid "Sessions and the REPL"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:5
#, no-wrap
msgid "How do I delete an object in memory?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:9
msgid ""
"Julia does not have an analog of MATLAB's `clear` function; once a name is "
"defined in a Julia session (technically, in module `Main`), it is always "
"present."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:14
#, no-wrap
msgid ""
"If memory usage is your concern, you can always replace objects with ones that consume less memory.\n"
" For example, if `A` is a gigabyte-sized array that you no longer need, you can free the memory\n"
"with `A = nothing`.  The memory will be released the next time the garbage collector runs; you can force\n"
"this to happen with [`gc()`](@ref Base.GC.gc). Moreover, an attempt to use `A` will likely result in an error, because most methods are not defined on type `Nothing`.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:15
#, no-wrap
msgid "How can I modify the declaration of a type in my session?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:19
msgid ""
"Perhaps you've defined a type and then realize you need to add a new field.  "
"If you try this at the REPL, you get the error:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:23
msgid "``` ERROR: invalid redefinition of constant MyType ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:25
msgid "Types in module `Main` cannot be redefined."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:31
#, no-wrap
msgid ""
"While this can be inconvenient when you are developing new code, there's an excellent workaround.\n"
" Modules can be replaced by redefining them, and so if you wrap all your new code inside a module\n"
"you can redefine types and constants.  You can't import the type names into `Main` and then expect\n"
"to be able to redefine them there, but you can use the module name to resolve the scope.  In other\n"
"words, while developing you might use a workflow something like this:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:36
#, no-wrap
msgid ""
"```julia\n"
"include(\"mynewcode.jl\")              # this defines a module MyModule\n"
"obj1 = MyModule.ObjConstructor(a, b)\n"
"obj2 = MyModule.somefunction(obj1)\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/faq.md:36
#, no-wrap
msgid "Got an error. Change something in \"mynewcode.jl\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:43
#, no-wrap
msgid ""
"include(\"mynewcode.jl\")              # reload the module\n"
"obj1 = MyModule.ObjConstructor(a, b) # old objects are no longer valid, must reconstruct\n"
"obj2 = MyModule.somefunction(obj1)   # this time it worked!\n"
"obj3 = MyModule.someotherfunction(obj2, c)\n"
"...\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/faq.md:44
#, no-wrap
msgid "[Scripting](@id man-scripting)"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:46
#, no-wrap
msgid "How do I check if the current file is being run as the main script?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:51
msgid ""
"When a file is run as the main script using `julia file.jl` one might want "
"to activate extra functionality like command line argument handling. A way "
"to determine that a file is run in this fashion is to check if "
"`abspath(PROGRAM_FILE) == @__FILE__` is `true`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:52
#, no-wrap
msgid "How do I catch CTRL-C in a script?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:61
msgid ""
"Running a Julia script using `julia file.jl` does not throw "
"[`InterruptException`](@ref) when you try to terminate it with CTRL-C "
"(SIGINT).  To run a certain code before terminating a Julia script, which "
"may or may not be caused by CTRL-C, use [`atexit`](@ref).  Alternatively, "
"you can use `julia -e 'include(popfirst!(ARGS))' file.jl` to execute a "
"script while being able to catch `InterruptException` in the [`try`](@ref) "
"block."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:62
#, no-wrap
msgid "How do I pass options to `julia` using `#!/usr/bin/env`?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:71
msgid ""
"Passing options to `julia` in so-called shebang by, e.g., `#!/usr/bin/env "
"julia --startup-file=no` may not work in some platforms such as Linux.  This "
"is because argument parsing in shebang is platform-dependent and not well-"
"specified.  In a Unix-like environment, a reliable way to pass options to "
"`julia` in an executable script would be to start the script as a `bash` "
"script and use `exec` to replace the process to `julia`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:73
#, no-wrap
msgid "#!/bin/bash\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:74
#, no-wrap
msgid "#=\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:78
#, no-wrap
msgid ""
"exec julia --color=yes --startup-file=no -e 'include(popfirst!(ARGS))' \\\n"
"    \"${BASH_SOURCE[0]}\" \"$@\"\n"
"=#\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:81
msgid "@show ARGS # put any Julia code here ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:86
msgid ""
"In the example above, the code between `#=` and `=#` is run as a `bash` "
"script.  Julia ignores this part since it is a multi-line comment for "
"Julia.  The Julia code after `=#` is ignored by `bash` since it stops "
"parsing the file once it reaches to the `exec` statement."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/faq.md:87
#, no-wrap
msgid "Functions"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:89
#, no-wrap
msgid "I passed an argument `x` to a function, modified it inside that function, but on the outside, the variable `x` is still unchanged. Why?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:92
msgid "Suppose you call a function like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:96
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = 10\n"
"10\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:101
#, no-wrap
msgid ""
"julia> function change_value!(y)\n"
"           y = 17\n"
"       end\n"
"change_value! (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:104
#, no-wrap
msgid ""
"julia> change_value!(x)\n"
"17\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:108
#, no-wrap
msgid ""
"julia> x # x is unchanged!\n"
"10\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:113
msgid ""
"In Julia, the binding of a variable `x` cannot be changed by passing `x` as "
"an argument to a function.  When calling `change_value!(x)` in the above "
"example, `y` is a newly created variable, bound initially to the value of "
"`x`, i.e. `10`; then `y` is rebound to the constant `17`, while the variable "
"`x` of the outer scope is left untouched."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:117
msgid ""
"But here is a thing you should pay attention to: suppose `x` is bound to an "
"object of type `Array` (or any other *mutable* type). From within the "
"function, you cannot \"unbind\" `x` from this Array, but you can change its "
"content. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:124
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = [1,2,3]\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:129
#, no-wrap
msgid ""
"julia> function change_array!(A)\n"
"           A[1] = 5\n"
"       end\n"
"change_array! (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:132
#, no-wrap
msgid ""
"julia> change_array!(x)\n"
"5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:139
#, no-wrap
msgid ""
"julia> x\n"
"3-element Array{Int64,1}:\n"
" 5\n"
" 2\n"
" 3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:144
msgid ""
"Here we created a function `change_array!`, that assigns `5` to the first "
"element of the passed array (bound to `x` at the call site, and bound to `A` "
"within the function). Notice that, after the function call, `x` is still "
"bound to the same array, but the content of that array changed: the "
"variables `A` and `x` were distinct bindings referring to the same mutable "
"`Array` object."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:145
#, no-wrap
msgid "Can I use `using` or `import` inside a function?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:150
msgid ""
"No, you are not allowed to have a `using` or `import` statement inside a "
"function.  If you want to import a module but only use its symbols inside a "
"specific function or set of functions, you have two options:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/faq.md:152
msgid "Use `import`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:159
#, no-wrap
msgid ""
"   ```julia\n"
"   import Foo\n"
"   function bar(...)\n"
"       # ... refer to Foo symbols via Foo.baz ...\n"
"   end\n"
"   ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:164
#, no-wrap
msgid ""
"   This loads the module `Foo` and defines a variable `Foo` that refers to the module, but does not\n"
"   import any of the other symbols from the module into the current namespace.  You refer to the\n"
"   `Foo` symbols by their qualified names `Foo.bar` etc.\n"
"2. Wrap your function in a module:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:175
#, no-wrap
msgid ""
"   ```julia\n"
"   module Bar\n"
"   export bar\n"
"   using Foo\n"
"   function bar(...)\n"
"       # ... refer to Foo.baz as simply baz ....\n"
"   end\n"
"   end\n"
"   using Bar\n"
"   ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:177
#, no-wrap
msgid "   This imports all the symbols from `Foo`, but only inside the module `Bar`.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:178
#, no-wrap
msgid "What does the `...` operator do?"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:180
#, no-wrap
msgid "The two uses of the `...` operator: slurping and splatting"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:184
msgid ""
"Many newcomers to Julia find the use of `...` operator confusing. Part of "
"what makes the `...` operator confusing is that it means two different "
"things depending on context."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:185
#, no-wrap
msgid "`...` combines many arguments into one argument in function definitions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:190
msgid ""
"In the context of function definitions, the `...` operator is used to "
"combine many different arguments into a single argument. This use of `...` "
"for combining many different arguments into a single argument is called "
"slurping:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:199
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function printargs(args...)\n"
"           println(typeof(args))\n"
"           for (i, arg) in enumerate(args)\n"
"               println(\"Arg #$i = $arg\")\n"
"           end\n"
"       end\n"
"printargs (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:206
#, no-wrap
msgid ""
"julia> printargs(1, 2, 3)\n"
"Tuple{Int64,Int64,Int64}\n"
"Arg #1 = 1\n"
"Arg #2 = 2\n"
"Arg #3 = 3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:209
#, no-wrap
msgid ""
"If Julia were a language that made more liberal use of ASCII characters, the slurping operator\n"
"might have been written as `<-...` instead of `...`.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:210
#, no-wrap
msgid "`...` splits one argument into many different arguments in function calls"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:216
msgid ""
"In contrast to the use of the `...` operator to denote slurping many "
"different arguments into one argument when defining a function, the `...` "
"operator is also used to cause a single function argument to be split apart "
"into many different arguments when used in the context of a function call. "
"This use of `...` is called splatting:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:224
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function threeargs(a, b, c)\n"
"           println(\"a = $a::$(typeof(a))\")\n"
"           println(\"b = $b::$(typeof(b))\")\n"
"           println(\"c = $c::$(typeof(c))\")\n"
"       end\n"
"threeargs (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:230
#, no-wrap
msgid ""
"julia> x = [1, 2, 3]\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:236
#, no-wrap
msgid ""
"julia> threeargs(x...)\n"
"a = 1::Int64\n"
"b = 2::Int64\n"
"c = 3::Int64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:239
#, no-wrap
msgid ""
"If Julia were a language that made more liberal use of ASCII characters, the splatting operator\n"
"might have been written as `...->` instead of `...`.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:240
#, no-wrap
msgid "What is the return value of an assignment?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:243
msgid "The operator `=` always returns the right-hand side, therefore:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:250
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function threeint()\n"
"           x::Int = 3.0\n"
"           x # returns variable x\n"
"       end\n"
"threeint (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:255
#, no-wrap
msgid ""
"julia> function threefloat()\n"
"           x::Int = 3.0 # returns 3.0\n"
"       end\n"
"threefloat (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:258
#, no-wrap
msgid ""
"julia> threeint()\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:262
#, no-wrap
msgid ""
"julia> threefloat()\n"
"3.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:264
msgid "and similarly:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:271
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function threetup()\n"
"           x, y = [3, 3]\n"
"           x, y # returns a tuple\n"
"       end\n"
"threetup (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:276
#, no-wrap
msgid ""
"julia> function threearr()\n"
"           x, y = [3, 3] # returns an array\n"
"       end\n"
"threearr (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:279
#, no-wrap
msgid ""
"julia> threetup()\n"
"(3, 3)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:285
#, no-wrap
msgid ""
"julia> threearr()\n"
"2-element Array{Int64,1}:\n"
" 3\n"
" 3\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/faq.md:286
#, no-wrap
msgid "Types, type declarations, and constructors"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:288
#, no-wrap
msgid "[What does \"type-stable\" mean?](@id man-type-stability)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:293
msgid ""
"It means that the type of the output is predictable from the types of the "
"inputs.  In particular, it means that the type of the output cannot vary "
"depending on the *values* of the inputs. The following code is *not* type-"
"stable:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:304
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function unstable(flag::Bool)\n"
"           if flag\n"
"               return 1\n"
"           else\n"
"               return 1.0\n"
"           end\n"
"       end\n"
"unstable (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:309
msgid ""
"It returns either an `Int` or a [`Float64`](@ref) depending on the value of "
"its argument.  Since Julia can't predict the return type of this function at "
"compile-time, any computation that uses it will have to guard against both "
"types possibly occurring, making generation of fast machine code difficult."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:310
#, no-wrap
msgid "[Why does Julia give a `DomainError` for certain seemingly-sensible operations?](@id faq-domain-errors)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:313
msgid "Certain operations make mathematical sense but result in errors:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:321
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sqrt(-2.0)\n"
"ERROR: DomainError with -2.0:\n"
"sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:328
msgid ""
"This behavior is an inconvenient consequence of the requirement for type-"
"stability.  In the case of [`sqrt`](@ref), most users want `sqrt(2.0)` to "
"give a real number, and would be unhappy if it produced the complex number "
"`1.4142135623730951 + 0.0im`.  One could write the [`sqrt`](@ref)  function "
"to switch to a complex-valued output only when passed a negative number "
"(which is what [`sqrt`](@ref) does in some other languages), but then the "
"result would not be [type-stable](@ref man-type-stability)  and the [`sqrt`]"
"(@ref) function would have poor performance."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:331
msgid ""
"In these and other cases, you can get the result you want by choosing an "
"*input type* that conveys your willingness to accept an *output type* in "
"which the result can be represented:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:336
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sqrt(-2.0+0im)\n"
"0.0 + 1.4142135623730951im\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:337
#, no-wrap
msgid "Why does Julia use native machine integer arithmetic?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:342
msgid ""
"Julia uses machine arithmetic for integer computations. This means that the "
"range of `Int` values is bounded and wraps around at either end so that "
"adding, subtracting and multiplying integers can overflow or underflow, "
"leading to some results that can be unsettling at first:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:346
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typemax(Int)\n"
"9223372036854775807\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:349
#, no-wrap
msgid ""
"julia> ans+1\n"
"-9223372036854775808\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:352
#, no-wrap
msgid ""
"julia> -ans\n"
"-9223372036854775808\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:356
#, no-wrap
msgid ""
"julia> 2*ans\n"
"0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:360
msgid ""
"Clearly, this is far from the way mathematical integers behave, and you "
"might think it less than ideal for a high-level programming language to "
"expose this to the user. For numerical work where efficiency and "
"transparency are at a premium, however, the alternatives are worse."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:370
msgid ""
"One alternative to consider would be to check each integer operation for "
"overflow and promote results to bigger integer types such as [`Int128`]"
"(@ref) or [`BigInt`](@ref) in the case of overflow.  Unfortunately, this "
"introduces major overhead on every integer operation (think incrementing a "
"loop counter) – it requires emitting code to perform run-time overflow "
"checks after arithmetic instructions and branches to handle potential "
"overflows. Worse still, this would cause every computation involving "
"integers to be type-unstable. As we mentioned above, [type-stability is "
"crucial](@ref man-type-stability)  for effective generation of efficient "
"code. If you can't count on the results of integer operations being "
"integers, it's impossible to generate fast, simple code the way C and "
"Fortran compilers do."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:388
msgid ""
"A variation on this approach, which avoids the appearance of type "
"instability is to merge the `Int` and [`BigInt`](@ref) types into a single "
"hybrid integer type, that internally changes representation when a result no "
"longer fits into the size of a machine integer. While this superficially "
"avoids type-instability at the level of Julia code, it just sweeps the "
"problem under the rug by foisting all of the same difficulties onto the C "
"code implementing this hybrid integer type. This approach *can* be made to "
"work and can even be made quite fast in many cases, but has several "
"drawbacks.  One problem is that the in-memory representation of integers and "
"arrays of integers no longer match the natural representation used by C, "
"Fortran and other languages with native machine integers.  Thus, to "
"interoperate with those languages, we would ultimately need to introduce "
"native integer types anyway. Any unbounded representation of integers cannot "
"have a fixed number of bits, and thus cannot be stored inline in an array "
"with fixed-size slots – large integer values will always require separate "
"heap-allocated storage. And of course, no matter how clever a hybrid integer "
"implementation one uses, there are always performance traps – situations "
"where performance degrades unexpectedly. Complex representation, lack of "
"interoperability with C and Fortran, the inability to represent integer "
"arrays without additional heap storage, and unpredictable performance "
"characteristics make even the cleverest hybrid integer implementations a "
"poor choice for high-performance numerical work."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:392
msgid ""
"An alternative to using hybrid integers or promoting to BigInts is to use "
"saturating integer arithmetic, where adding to the largest integer value "
"leaves it unchanged and likewise for subtracting from the smallest integer "
"value. This is precisely what Matlab™ does:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:395
#, no-wrap
msgid ""
"```\n"
">> int64(9223372036854775807)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:397 ext/julia/doc/src/manual/faq.md:403
#: ext/julia/doc/src/manual/faq.md:409 ext/julia/doc/src/manual/faq.md:415
#: ext/julia/doc/src/manual/faq.md:459
msgid "ans ="
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:399 ext/julia/doc/src/manual/faq.md:405
#, no-wrap
msgid "  9223372036854775807\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:401
#, no-wrap
msgid ">> int64(9223372036854775807) + 1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:407
#, no-wrap
msgid ">> int64(-9223372036854775808)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:411
#, no-wrap
msgid " -9223372036854775808\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:413
#, no-wrap
msgid ">> int64(-9223372036854775808) - 1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:418
#, no-wrap
msgid ""
" -9223372036854775808\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:428
msgid ""
"At first blush, this seems reasonable enough since 9223372036854775807 is "
"much closer to 9223372036854775808 than -9223372036854775808 is and integers "
"are still represented with a fixed size in a natural way that is compatible "
"with C and Fortran. Saturated integer arithmetic, however, is deeply "
"problematic.  The first and most obvious issue is that this is not the way "
"machine integer arithmetic works, so implementing saturated operations "
"requires emitting instructions after each machine integer operation to check "
"for underflow or overflow and replace the result with [`typemin(Int)`]"
"(@ref)  or [`typemax(Int)`](@ref) as appropriate. This alone expands each "
"integer operation from a single, fast instruction into half a dozen "
"instructions, probably including branches. Ouch. But it gets worse – "
"saturating integer arithmetic isn't associative. Consider this Matlab "
"computation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:432
#, no-wrap
msgid ""
"```\n"
">> n = int64(2)^62\n"
"4611686018427387904\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:435
#, no-wrap
msgid ""
">> n + (n - 1)\n"
"9223372036854775807\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:439
#, no-wrap
msgid ""
">> (n + n) - 1\n"
"9223372036854775806\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:443
#, no-wrap
msgid ""
"This makes it hard to write many basic integer algorithms since a lot of common techniques depend\n"
"on the fact that machine addition with overflow *is* associative. Consider finding the midpoint\n"
"between integer values `lo` and `hi` in Julia using the expression `(lo + hi) >>> 1`:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:447
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> n = 2^62\n"
"4611686018427387904\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:451
#, no-wrap
msgid ""
"julia> (n + 2n) >>> 1\n"
"6917529027641081856\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:454
msgid ""
"See? No problem. That's the correct midpoint between 2^62 and 2^63, despite "
"the fact that `n + 2n` is -4611686018427387904. Now try it in Matlab:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:457
#, no-wrap
msgid ""
"```\n"
">> (n + 2*n)/2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:462
#, no-wrap
msgid ""
"  4611686018427387904\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:465
#, no-wrap
msgid ""
"Oops. Adding a `>>>` operator to Matlab wouldn't help, because saturation that occurs when adding\n"
"`n` and `2n` has already destroyed the information necessary to compute the correct midpoint.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:471
msgid ""
"Not only is lack of associativity unfortunate for programmers who cannot "
"rely it for techniques like this, but it also defeats almost anything "
"compilers might want to do to optimize integer arithmetic. For example, "
"since Julia integers use normal machine integer arithmetic, LLVM is free to "
"aggressively optimize simple little functions like `f(k) = 5k-1`. The "
"machine code for this function is just this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:484
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> code_native(f, Tuple{Int})\n"
"  .text\n"
"Filename: none\n"
"  pushq %rbp\n"
"  movq  %rsp, %rbp\n"
"Source line: 1\n"
"  leaq  -1(%rdi,%rdi,4), %rax\n"
"  popq  %rbp\n"
"  retq\n"
"  nopl  (%rax,%rax)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:487
msgid ""
"The actual body of the function is a single `leaq` instruction, which "
"computes the integer multiply and add at once. This is even more beneficial "
"when `f` gets inlined into another function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:496
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> function g(k, n)\n"
"           for i = 1:n\n"
"               k = f(k)\n"
"           end\n"
"           return k\n"
"       end\n"
"g (generic function with 1 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:519
#, no-wrap
msgid ""
"julia> code_native(g, Tuple{Int,Int})\n"
"  .text\n"
"Filename: none\n"
"  pushq %rbp\n"
"  movq  %rsp, %rbp\n"
"Source line: 2\n"
"  testq %rsi, %rsi\n"
"  jle L26\n"
"  nopl  (%rax)\n"
"Source line: 3\n"
"L16:\n"
"  leaq  -1(%rdi,%rdi,4), %rdi\n"
"Source line: 2\n"
"  decq  %rsi\n"
"  jne L16\n"
"Source line: 5\n"
"L26:\n"
"  movq  %rdi, %rax\n"
"  popq  %rbp\n"
"  retq\n"
"  nop\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:522
msgid ""
"Since the call to `f` gets inlined, the loop body ends up being just a "
"single `leaq` instruction.  Next, consider what happens if we make the "
"number of loop iterations fixed:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:531
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> function g(k)\n"
"           for i = 1:10\n"
"               k = f(k)\n"
"           end\n"
"           return k\n"
"       end\n"
"g (generic function with 2 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:545
#, no-wrap
msgid ""
"julia> code_native(g,(Int,))\n"
"  .text\n"
"Filename: none\n"
"  pushq %rbp\n"
"  movq  %rsp, %rbp\n"
"Source line: 3\n"
"  imulq $9765625, %rdi, %rax    # imm = 0x9502F9\n"
"  addq  $-2441406, %rax         # imm = 0xFFDABF42\n"
"Source line: 5\n"
"  popq  %rbp\n"
"  retq\n"
"  nopw  %cs:(%rax,%rax)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:552
msgid ""
"Because the compiler knows that integer addition and multiplication are "
"associative and that multiplication distributes over addition – neither of "
"which is true of saturating arithmetic – it can optimize the entire loop "
"down to just a multiply and an add. Saturated arithmetic completely defeats "
"this kind of optimization since associativity and distributivity can fail at "
"each loop iteration, causing different outcomes depending on which iteration "
"the failure occurs in. The compiler can unroll the loop, but it cannot "
"algebraically reduce multiple operations into fewer equivalent operations."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:560
msgid ""
"The most reasonable alternative to having integer arithmetic silently "
"overflow is to do checked arithmetic everywhere, raising errors when adds, "
"subtracts, and multiplies overflow, producing values that are not value-"
"correct. In this [blog post](http://danluu.com/integer-overflow/), Dan Luu "
"analyzes this and finds that rather than the trivial cost that this approach "
"should in theory have, it ends up having a substantial cost due to compilers "
"(LLVM and GCC) not gracefully optimizing around the added overflow checks. "
"If this improves in the future, we could consider defaulting to checked "
"integer arithmetic in Julia, but for now, we have to live with the "
"possibility of overflow."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:561
#, no-wrap
msgid "What are the possible causes of an `UndefVarError` during remote execution?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:565
msgid ""
"As the error states, an immediate cause of an `UndefVarError` on a remote "
"node is that a binding by that name does not exist. Let us explore some of "
"the possible causes."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:570
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> module Foo\n"
"           foo() = remotecall_fetch(x->x, 2, \"Hello\")\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:577
#, no-wrap
msgid ""
"julia> Foo.foo()\n"
"ERROR: On worker 2:\n"
"UndefVarError: Foo not defined\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:580
#, no-wrap
msgid ""
"The closure `x->x` carries a reference to `Foo`, and since `Foo` is unavailable on node 2,\n"
"an `UndefVarError` is thrown.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:583
msgid ""
"Globals under modules other than `Main` are not serialized by value to the "
"remote node. Only a reference is sent.  Functions which create global "
"bindings (except under `Main`) may cause an `UndefVarError` to be thrown "
"later."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:591
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @everywhere module Foo\n"
"           function foo()\n"
"               global gvar = \"Hello\"\n"
"               remotecall_fetch(()->gvar, 2)\n"
"           end\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:598
#, no-wrap
msgid ""
"julia> Foo.foo()\n"
"ERROR: On worker 2:\n"
"UndefVarError: gvar not defined\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:601
msgid ""
"In the above example, `@everywhere module Foo` defined `Foo` on all nodes. "
"However the call to `Foo.foo()` created a new global binding `gvar` on the "
"local node, but this was not found on node 2 resulting in an `UndefVarError` "
"error."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:604
msgid ""
"Note that this does not apply to globals created under module `Main`. "
"Globals under module `Main` are serialized and new bindings created under "
"`Main` on the remote node."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:608
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> gvar_self = \"Node1\"\n"
"\"Node1\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:611
#, no-wrap
msgid ""
"julia> remotecall_fetch(()->gvar_self, 2)\n"
"\"Node1\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:620
#, no-wrap
msgid ""
"julia> remotecall_fetch(varinfo, 2)\n"
"name          size summary\n"
"––––––––– –––––––– –––––––\n"
"Base               Module\n"
"Core               Module\n"
"Main               Module\n"
"gvar_self 13 bytes String\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:623
msgid ""
"This does not apply to `function` or `struct` declarations. However, "
"anonymous functions bound to global variables are serialized as can be seen "
"below."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:627
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> bar() = 1\n"
"bar (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:632
#, no-wrap
msgid ""
"julia> remotecall_fetch(bar, 2)\n"
"ERROR: On worker 2:\n"
"UndefVarError: #bar not defined\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:635
#, no-wrap
msgid ""
"julia> anon_bar  = ()->1\n"
"(::#21) (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:639
#, no-wrap
msgid ""
"julia> remotecall_fetch(anon_bar, 2)\n"
"1\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:640
#, no-wrap
msgid "Why does Julia use `*` for string concatenation? Why not `+` or something else?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:646
msgid ""
"The [main argument](@ref man-concatenation) against `+` is that string "
"concatenation is not commutative, while `+` is generally used as a "
"commutative operator. While the Julia community recognizes that other "
"languages use different operators and `*` may be unfamiliar for some users, "
"it communicates certain algebraic properties."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:650
msgid ""
"Note that you can also use `string(...)` to concatenate strings (and other "
"values converted to strings); similarly, `repeat` can be used instead of `^` "
"to repeat strings. The [interpolation syntax](@ref string-interpolation) is "
"also useful for constructing strings."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/faq.md:651
#, no-wrap
msgid "Packages and Modules"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:653
#, no-wrap
msgid "What is the difference between \"using\" and \"import\"?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:659
msgid ""
"There is only one difference, and on the surface (syntax-wise) it may seem "
"very minor. The difference between `using` and `import` is that with `using` "
"you need to say `function Foo.bar(..` to extend module Foo's function bar "
"with a new method, but with `import Foo.bar`, you only need to say `function "
"bar(...` and it automatically extends module Foo's function bar."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:667
msgid ""
"The reason this is important enough to have been given separate syntax is "
"that you don't want to accidentally extend a function that you didn't know "
"existed, because that could easily cause a bug. This is most likely to "
"happen with a method that takes a common type like a string or integer, "
"because both you and the other module could define a method to handle such a "
"common type. If you use `import`, then you'll replace the other module's "
"implementation of `bar(s::AbstractString)` with your new implementation, "
"which could easily do something completely different (and break all/many "
"future usages of the other functions in module Foo that depend on calling "
"bar)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/faq.md:668
#, no-wrap
msgid "Nothingness and missing values"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:670
#, no-wrap
msgid "[How does \"null\", \"nothingness\" or \"missingness\" work in Julia?](@id faq-nothing)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:676
msgid ""
"Unlike many languages (for example, C and Java), Julia objects cannot be "
"\"null\" by default.  When a reference (variable, object field, or array "
"element) is uninitialized, accessing it will immediately throw an error. "
"This situation can be detected using the [`isdefined`](@ref) or "
"[`isassigned`](@ref Base.isassigned) functions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:682
msgid ""
"Some functions are used only for their side effects, and do not need to "
"return a value. In these cases, the convention is to return the value "
"`nothing`, which is just a singleton object of type `Nothing`. This is an "
"ordinary type with no fields; there is nothing special about it except for "
"this convention, and that the REPL does not print anything for it. Some "
"language constructs that would not otherwise have a value also yield "
"`nothing`, for example `if false; end`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:692
msgid ""
"For situations where a value `x` of type `T` exists only sometimes, the "
"`Union{T, Nothing}` type can be used for function arguments, object fields "
"and array element types as the equivalent of [`Nullable`, `Option` or "
"`Maybe`](https://en.wikipedia.org/wiki/Nullable_type)  in other languages. "
"If the value itself can be `nothing` (notably, when `T` is `Any`), the "
"`Union{Some{T}, Nothing}` type is more appropriate since `x == nothing` then "
"indicates the absence of a value, and `x == Some(nothing)` indicates the "
"presence of a value equal to `nothing`. The [`something`](@ref) function "
"allows unwrapping `Some` objects and using a default value instead of "
"`nothing` arguments. Note that the compiler is able to generate efficient "
"code when working with `Union{T, Nothing}` arguments or fields."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:695
msgid ""
"To represent missing data in the statistical sense (`NA` in R or `NULL` in "
"SQL), use the [`missing`](@ref) object. See the [`Missing Values`](@ref "
"missing) section for more details."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:698
msgid ""
"The empty tuple (`()`) is another form of nothingness. But, it should not "
"really be thought of as nothing but rather a tuple of zero values."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:701
msgid ""
"The empty (or \"bottom\") type, written as `Union{}` (an empty union type), "
"is a type with no values and no subtypes (except itself). You will generally "
"not need to use this type."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/faq.md:702
#, no-wrap
msgid "Memory"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:704
#, no-wrap
msgid "Why does `x += y` allocate memory when `x` and `y` are arrays?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:709
msgid ""
"In Julia, `x += y` gets replaced during parsing by `x = x + y`. For arrays, "
"this has the consequence that, rather than storing the result in the same "
"location in memory as `x`, it allocates a new array to store the result."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:715
msgid ""
"While this behavior might surprise some, the choice is deliberate. The main "
"reason is the presence of immutable objects within Julia, which cannot "
"change their value once created.  Indeed, a number is an immutable object; "
"the statements `x = 5; x += 1` do not modify the meaning of `5`, they modify "
"the value bound to `x`. For an immutable, the only way to change the value "
"is to reassign it."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:717
msgid "To amplify a bit further, consider the following function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:728
#, no-wrap
msgid ""
"```julia\n"
"function power_by_squaring(x, n::Int)\n"
"    ispow2(n) || error(\"This implementation only works for powers of 2\")\n"
"    while n >= 2\n"
"        x *= x\n"
"        n >>= 1\n"
"    end\n"
"    x\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:732
#, no-wrap
msgid ""
"After a call like `x = 5; y = power_by_squaring(x, 4)`, you would get the expected result: `x == 5 && y == 625`.\n"
" However, now suppose that `*=`, when used with matrices, instead mutated the left hand side.\n"
" There would be two problems:\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/faq.md:739
msgid ""
"For general square matrices, `A = A*B` cannot be implemented without "
"temporary storage: `A[1,1]` gets computed and stored on the left hand side "
"before you're done using it on the right hand side."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/faq.md:739
msgid ""
"Suppose you were willing to allocate a temporary for the computation (which "
"would eliminate most of the point of making `*=` work in-place); if you took "
"advantage of the mutability of `x`, then this function would behave "
"differently for mutable vs. immutable inputs. In particular, for immutable "
"`x`, after the call you'd have (in general) `y != x`, but for mutable `x` "
"you'd have `y == x`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:743
msgid ""
"Because supporting generic programming is deemed more important than "
"potential performance optimizations that can be achieved by other means (e."
"g., using explicit loops), operators like `+=` and `*=` work by rebinding "
"new values."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/faq.md:744
#, no-wrap
msgid "[Asynchronous IO and concurrent synchronous writes](@id faq-async-io)"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:746
#, no-wrap
msgid "Why do concurrent writes to the same stream result in inter-mixed output?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:749
msgid ""
"While the streaming I/O API is synchronous, the underlying implementation is "
"fully asynchronous."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:751
msgid "Consider the printed output from the following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:758
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> @sync for i in 1:3\n"
"           @async write(stdout, string(i), \" Foo \", \" Bar \")\n"
"       end\n"
"123 Foo  Foo  Foo  Bar  Bar  Bar\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:761
msgid ""
"This is happening because, while the `write` call is synchronous, the "
"writing of each argument yields to other tasks while waiting for that part "
"of the I/O to complete."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:764
msgid ""
"`print` and `println` \"lock\" the stream during a call. Consequently "
"changing `write` to `println` in the above example results in:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:773
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> @sync for i in 1:3\n"
"           @async println(stdout, string(i), \" Foo \", \" Bar \")\n"
"       end\n"
"1 Foo  Bar\n"
"2 Foo  Bar\n"
"3 Foo  Bar\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:775
msgid "You can lock your writes with a `ReentrantLock` like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:779
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> l = ReentrantLock()\n"
"ReentrantLock(nothing, Condition(Any[]), 0)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:792
#, no-wrap
msgid ""
"julia> @sync for i in 1:3\n"
"           @async begin\n"
"               lock(l)\n"
"               try\n"
"                   write(stdout, string(i), \" Foo \", \" Bar \")\n"
"               finally\n"
"                   unlock(l)\n"
"               end\n"
"           end\n"
"       end\n"
"1 Foo  Bar 2 Foo  Bar 3 Foo  Bar\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/faq.md:793
#, no-wrap
msgid "Arrays"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:795
#, no-wrap
msgid "What are the differences between zero-dimensional arrays and scalars?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:802
msgid ""
"Zero-dimensional arrays are arrays of the form `Array{T,0}`. They behave "
"similar to scalars, but there are important differences. They deserve a "
"special mention because they are a special case which makes logical sense "
"given the generic definition of arrays, but might be a bit unintuitive at "
"first. The following line defines a zero-dimensional array:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:808
#, no-wrap
msgid ""
"```\n"
"julia> A = zeros()\n"
"0-dimensional Array{Float64,0}:\n"
"0.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:814
msgid ""
"In this example, `A` is a mutable container that contains one element, which "
"can be set by `A[] = 1.0` and retrieved with `A[]`. All zero-dimensional "
"arrays have the same size (`size(A) == ()`), and length (`length(A) == 1`). "
"In particular, zero-dimensional arrays are not empty. If you find this "
"unintuitive, here are some ideas that might help to understand Julia's "
"definition."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/faq.md:825
msgid ""
"Zero-dimensional arrays are the \"point\" to vector's \"line\" and matrix's "
"\"plane\". Just as a line has no area (but still represents a set of "
"things), a point has no length or any dimensions at all (but still "
"represents a thing)."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/faq.md:825
msgid ""
"We define `prod(())` to be 1, and the total number of elements in an array "
"is the product of the size. The size of a zero-dimensional array is `()`, "
"and therefore its length is `1`."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/faq.md:825
msgid ""
"Zero-dimensional arrays don't natively have any dimensions into which you "
"index -- they’re just `A[]`. We can apply the same \"trailing one\" rule for "
"them as for all other array dimensionalities, so you can indeed index them "
"as `A[1]`, `A[1,1]`, etc."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:836
msgid ""
"It is also important to understand the differences to ordinary scalars. "
"Scalars are not mutable containers (even though they are iterable and define "
"things like `length`, `getindex`, *e.g.* `1[] == 1`). In particular, if `x = "
"0.0` is defined as a scalar, it is an error to attempt to change its value "
"via `x[] = 1.0`. A scalar `x` can be converted into a zero-dimensional array "
"containing it via `fill(x)`, and conversely, a zero-dimensional array `a` "
"can be converted to the contained scalar via `a[]`. Another difference is "
"that a scalar can participate in linear algebra operations such as `2 * "
"rand(2,2)`, but the analogous operation with a zero-dimensional array "
"`fill(2) * rand(2,2)` is an error."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/faq.md:837
#, no-wrap
msgid "Julia Releases"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:839
#, no-wrap
msgid "Do I want to use a release, beta, or nightly version of Julia?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:843
msgid ""
"You may prefer the release version of Julia if you are looking for a stable "
"code base. Releases generally occur every 6 months, giving you a stable "
"platform for writing code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:847
msgid ""
"You may prefer the beta version of Julia if you don't mind being slightly "
"behind the latest bugfixes and changes, but find the slightly faster rate of "
"changes more appealing. Additionally, these binaries are tested before they "
"are published to ensure they are fully functional."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:850
msgid ""
"You may prefer the nightly version of Julia if you want to take advantage of "
"the latest updates to the language, and don't mind if the version available "
"today occasionally doesn't actually work."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:854
msgid ""
"Finally, you may also consider building Julia from source for yourself. This "
"option is mainly for those individuals who are comfortable at the command "
"line, or interested in learning. If this describes you, you may also be "
"interested in reading our [guidelines for contributing](https://github.com/"
"JuliaLang/julia/blob/master/CONTRIBUTING.md)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:857
msgid ""
"Links to each of these download types can be found on the download page at "
"[https://julialang.org/downloads/](https://julialang.org/downloads/).  Note "
"that not all versions of Julia are available for all platforms."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/faq.md:858
#, no-wrap
msgid "When are deprecated functions removed?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/faq.md:861
msgid ""
"Deprecated functions are removed after the subsequent release. For example, "
"functions marked as deprecated in the 0.1 release will not be available "
"starting with the 0.2 release."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/functions.md:1
#, no-wrap
msgid "[Functions](@id man-functions)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:6
msgid ""
"In Julia, a function is an object that maps a tuple of argument values to a "
"return value. Julia functions are not pure mathematical functions, in the "
"sense that functions can alter and be affected by the global state of the "
"program. The basic syntax for defining functions in Julia is:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:13
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function f(x,y)\n"
"           x + y\n"
"       end\n"
"f (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:16
msgid ""
"There is a second, more terse syntax for defining a function in Julia. The "
"traditional function declaration syntax demonstrated above is equivalent to "
"the following compact \"assignment form\":"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:21
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> f(x,y) = x + y\n"
"f (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:26
msgid ""
"In the assignment form, the body of the function must be a single "
"expression, although it can be a compound expression (see [Compound "
"Expressions](@ref man-compound-expressions)). Short, simple function "
"definitions are common in Julia. The short function syntax is accordingly "
"quite idiomatic, considerably reducing both typing and visual noise."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:28
msgid "A function is called using the traditional parenthesis syntax:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:33
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> f(2,3)\n"
"5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:36
msgid ""
"Without parentheses, the expression `f` refers to the function object, and "
"can be passed around like any value:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:39
#, no-wrap
msgid ""
"```jldoctest fofxy\n"
"julia> g = f;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:43
#, no-wrap
msgid ""
"julia> g(2,3)\n"
"5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:45
msgid "As with variables, Unicode can also be used for function names:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:49
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> ∑(x,y) = x + y\n"
"∑ (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:53
#, no-wrap
msgid ""
"julia> ∑(2, 3)\n"
"5\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:54
#, no-wrap
msgid "Argument Passing Behavior"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:62
msgid ""
"Julia function arguments follow a convention sometimes called \"pass-by-"
"sharing\", which means that values are not copied when they are passed to "
"functions. Function arguments themselves act as new variable *bindings* (new "
"locations that can refer to values), but the values they refer to are "
"identical to the passed values. Modifications to mutable values (such as "
"`Array`s) made within a function will be visible to the caller. This is the "
"same behavior found in Scheme, most Lisps, Python, Ruby and Perl, among "
"other dynamic languages."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:63
#, no-wrap
msgid "The `return` Keyword"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:70
msgid ""
"The value returned by a function is the value of the last expression "
"evaluated, which, by default, is the last expression in the body of the "
"function definition. In the example function, `f`, from the previous section "
"this is the value of the expression `x + y`. As in C and most other "
"imperative or functional languages, the `return` keyword causes a function "
"to return immediately, providing an expression whose value is returned:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:77
#, no-wrap
msgid ""
"```julia\n"
"function g(x,y)\n"
"    return x * y\n"
"    x + y\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:80
msgid ""
"Since function definitions can be entered into interactive sessions, it is "
"easy to compare these definitions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:84
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> f(x,y) = x + y\n"
"f (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:90
#, no-wrap
msgid ""
"julia> function g(x,y)\n"
"           return x * y\n"
"           x + y\n"
"       end\n"
"g (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:93
#, no-wrap
msgid ""
"julia> f(2,3)\n"
"5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:97
#, no-wrap
msgid ""
"julia> g(2,3)\n"
"6\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:103
msgid ""
"Of course, in a purely linear function body like `g`, the usage of `return` "
"is pointless since the expression `x + y` is never evaluated and we could "
"simply make `x * y` the last expression in the function and omit the "
"`return`. In conjunction with other control flow, however, `return` is of "
"real use. Here, for example, is a function that computes the hypotenuse "
"length of a right triangle with sides of length `x` and `y`, avoiding "
"overflow:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:119
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function hypot(x,y)\n"
"           x = abs(x)\n"
"           y = abs(y)\n"
"           if x > y\n"
"               r = y/x\n"
"               return x*sqrt(1+r*r)\n"
"           end\n"
"           if y == 0\n"
"               return zero(x)\n"
"           end\n"
"           r = x/y\n"
"           return y*sqrt(1+r*r)\n"
"       end\n"
"hypot (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:123
#, no-wrap
msgid ""
"julia> hypot(3, 4)\n"
"5.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:127
msgid ""
"There are three possible points of return from this function, returning the "
"values of three different expressions, depending on the values of `x` and "
"`y`. The `return` on the last line could be omitted since it is the last "
"expression."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:130
msgid ""
"A return type can also be specified in the function declaration using the `::"
"` operator. This converts the return value to the specified type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:135
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function g(x, y)::Int8\n"
"           return x * y\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:139
#, no-wrap
msgid ""
"julia> typeof(g(1, 2))\n"
"Int8\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:142
msgid ""
"This function will always return an `Int8` regardless of the types of `x` "
"and `y`.  See [Type Declarations](@ref) for more on return types."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:143
#, no-wrap
msgid "Operators Are Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:150
msgid ""
"In Julia, most operators are just functions with support for special syntax. "
"(The exceptions are operators with special evaluation semantics like `&&` "
"and `||`. These operators cannot be functions since [Short-Circuit "
"Evaluation](@ref) requires that their operands are not evaluated before "
"evaluation of the operator.) Accordingly, you can also apply them using "
"parenthesized argument lists, just as you would any other function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:158
#, no-wrap
msgid ""
"julia> +(1,2,3)\n"
"6\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:162
msgid ""
"The infix form is exactly equivalent to the function application form -- in "
"fact the former is parsed to produce the function call internally. This also "
"means that you can assign and pass around operators such as [`+`](@ref) and "
"[`*`](@ref) just like you would with other function values:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:165
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> f = +;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:169
#, no-wrap
msgid ""
"julia> f(1,2,3)\n"
"6\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:171
msgid ""
"Under the name `f`, the function does not support infix notation, however."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:172
#, no-wrap
msgid "Operators With Special Names"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:175
msgid ""
"A few special expressions correspond to calls to functions with non-obvious "
"names. These are:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:186
#, no-wrap
msgid ""
"| Expression        | Calls                   |\n"
"|:----------------- |:----------------------- |\n"
"| `[A B C ...]`     | [`hcat`](@ref)          |\n"
"| `[A; B; C; ...]`  | [`vcat`](@ref)          |\n"
"| `[A B; C D; ...]` | [`hvcat`](@ref)         |\n"
"| `A'`              | [`adjoint`](@ref)       |\n"
"| `A[i]`            | [`getindex`](@ref)      |\n"
"| `A[i] = x`        | [`setindex!`](@ref)     |\n"
"| `A.n`             | [`getproperty`](@ref Base.getproperty) |\n"
"| `A.n = x`         | [`setproperty!`](@ref Base.setproperty!) |\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:187
#, no-wrap
msgid "[Anonymous Functions](@id man-anonymous-functions)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:194
msgid ""
"Functions in Julia are [first-class objects](https://en.wikipedia.org/wiki/"
"First-class_citizen): they can be assigned to variables, and called using "
"the standard function call syntax from the variable they have been assigned "
"to. They can be used as arguments, and they can be returned as values. They "
"can also be created anonymously, without being given a name, using either of "
"these syntaxes:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:197
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x -> x^2 + 2x - 1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:197
#, no-wrap
msgid "#1 (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:202
#, no-wrap
msgid ""
"julia> function (x)\n"
"           x^2 + 2x - 1\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:202
#, no-wrap
msgid "#3 (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:208
msgid ""
"This creates a function taking one argument `x` and returning the value of "
"the polynomial `x^2 + 2x - 1` at that value. Notice that the result is a "
"generic function, but with a compiler-generated name based on consecutive "
"numbering."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:212
msgid ""
"The primary use for anonymous functions is passing them to functions which "
"take other functions as arguments. A classic example is [`map`](@ref), which "
"applies a function to each value of an array and returns a new array "
"containing the resulting values:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:220
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> map(round, [1.2,3.5,1.7])\n"
"3-element Array{Float64,1}:\n"
" 1.0\n"
" 4.0\n"
" 2.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:225
msgid ""
"This is fine if a named function effecting the transform already exists to "
"pass as the first argument to [`map`](@ref). Often, however, a ready-to-use, "
"named function does not exist. In these situations, the anonymous function "
"construct allows easy creation of a single-use function object without "
"needing a name:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:233
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> map(x -> x^2 + 2x - 1, [1,3,-1])\n"
"3-element Array{Int64,1}:\n"
"  2\n"
" 14\n"
" -2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:238
#, no-wrap
msgid ""
"An anonymous function accepting multiple arguments can be written using the syntax `(x,y,z)->2x+y-z`.\n"
"A zero-argument anonymous function is written as `()->3`. The idea of a function with no arguments\n"
"may seem strange, but is useful for \"delaying\" a computation. In this usage, a block of code is\n"
"wrapped in a zero-argument function, which is later invoked by calling it as `f`.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:239
#, no-wrap
msgid "Tuples"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:246
msgid ""
"Julia has a built-in data structure called a *tuple* that is closely related "
"to function arguments and return values.  A tuple is a fixed-length "
"container that can hold any values, but cannot be modified (it is "
"*immutable*).  Tuples are constructed with commas and parentheses, and can "
"be accessed via indexing:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:250
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> (1, 1+1)\n"
"(1, 2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:253
#, no-wrap
msgid ""
"julia> (1,)\n"
"(1,)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:256
#, no-wrap
msgid ""
"julia> x = (0.0, \"hello\", 6*7)\n"
"(0.0, \"hello\", 42)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:260
#, no-wrap
msgid ""
"julia> x[2]\n"
"\"hello\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:264
msgid ""
"Notice that a length-1 tuple must be written with a comma, `(1,)`, since "
"`(1)` would just be a parenthesized value.  `()` represents the empty "
"(length-0) tuple."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:265
#, no-wrap
msgid "Named Tuples"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:269
msgid ""
"The components of tuples can optionally be named, in which case a *named "
"tuple* is constructed:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:273
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = (a=1, b=1+1)\n"
"(a = 1, b = 2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:277
#, no-wrap
msgid ""
"julia> x.a\n"
"1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:280
msgid ""
"Named tuples are very similar to tuples, except that fields can additionally "
"be accessed by name using dot syntax (`x.a`)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:281
#, no-wrap
msgid "Multiple Return Values"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:287
msgid ""
"In Julia, one returns a tuple of values to simulate returning multiple "
"values. However, tuples can be created and destructured without needing "
"parentheses, thereby providing an illusion that multiple values are being "
"returned, rather than a single tuple value. For example, the following "
"function returns a pair of values:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:294
#, no-wrap
msgid ""
"```jldoctest foofunc\n"
"julia> function foo(a,b)\n"
"           a+b, a*b\n"
"       end\n"
"foo (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:297
msgid ""
"If you call it in an interactive session without assigning the return value "
"anywhere, you will see the tuple returned:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:302
#, no-wrap
msgid ""
"```jldoctest foofunc\n"
"julia> foo(2,3)\n"
"(5, 6)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:305
msgid ""
"A typical usage of such a pair of return values, however, extracts each "
"value into a variable.  Julia supports simple tuple \"destructuring\" that "
"facilitates this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:309
#, no-wrap
msgid ""
"```jldoctest foofunc\n"
"julia> x, y = foo(2,3)\n"
"(5, 6)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:312
#, no-wrap
msgid ""
"julia> x\n"
"5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:316
#, no-wrap
msgid ""
"julia> y\n"
"6\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:318
msgid ""
"You can also return multiple values via an explicit usage of the `return` "
"keyword:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:324
#, no-wrap
msgid ""
"```julia\n"
"function foo(a,b)\n"
"    return a+b, a*b\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:326
msgid "This has the exact same effect as the previous definition of `foo`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:327
#, no-wrap
msgid "Argument destructuring"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:332
msgid ""
"The destructuring feature can also be used within a function argument.  If a "
"function argument name is written as a tuple (e.g. `(x, y)`) instead of just "
"a symbol, then an assignment `(x, y) = argument` will be inserted for you:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:335
#, no-wrap
msgid ""
"```julia\n"
"julia> minmax(x, y) = (y < x) ? (y, x) : (x, y)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:337
#, no-wrap
msgid "julia> range((min, max)) = max - min\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:341
#, no-wrap
msgid ""
"julia> range(minmax(10, 2))\n"
"8\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:345
msgid ""
"Notice the extra set of parentheses in the definition of `range`.  Without "
"those, `range` would be a two-argument function, and this example would not "
"work."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:346
#, no-wrap
msgid "Varargs Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:351
msgid ""
"It is often convenient to be able to write functions taking an arbitrary "
"number of arguments.  Such functions are traditionally known as \"varargs\" "
"functions, which is short for \"variable number of arguments\". You can "
"define a varargs function by following the last argument with an ellipsis:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:356
#, no-wrap
msgid ""
"```jldoctest barfunc\n"
"julia> bar(a,b,x...) = (a,b,x)\n"
"bar (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:360
msgid ""
"The variables `a` and `b` are bound to the first two argument values as "
"usual, and the variable `x` is bound to an iterable collection of the zero "
"or more values passed to `bar` after its first two arguments:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:364
#, no-wrap
msgid ""
"```jldoctest barfunc\n"
"julia> bar(1,2)\n"
"(1, 2, ())\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:367
#, no-wrap
msgid ""
"julia> bar(1,2,3)\n"
"(1, 2, (3,))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:370
#, no-wrap
msgid ""
"julia> bar(1, 2, 3, 4)\n"
"(1, 2, (3, 4))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:374
#, no-wrap
msgid ""
"julia> bar(1,2,3,4,5,6)\n"
"(1, 2, (3, 4, 5, 6))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:376
msgid ""
"In all these cases, `x` is bound to a tuple of the trailing values passed to "
"`bar`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:379
msgid ""
"It is possible to constrain the number of values passed as a variable "
"argument; this will be discussed later in [Parametrically-constrained "
"Varargs methods](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:383
msgid ""
"On the flip side, it is often handy to \"splat\" the values contained in an "
"iterable collection into a function call as individual arguments. To do "
"this, one also uses `...` but in the function call instead:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:387
#, no-wrap
msgid ""
"```jldoctest barfunc\n"
"julia> x = (3, 4)\n"
"(3, 4)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:391
#, no-wrap
msgid ""
"julia> bar(1,2,x...)\n"
"(1, 2, (3, 4))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:394
msgid ""
"In this case a tuple of values is spliced into a varargs call precisely "
"where the variable number of arguments go. This need not be the case, "
"however:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:398
#, no-wrap
msgid ""
"```jldoctest barfunc\n"
"julia> x = (2, 3, 4)\n"
"(2, 3, 4)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:401
#, no-wrap
msgid ""
"julia> bar(1,x...)\n"
"(1, 2, (3, 4))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:404
#, no-wrap
msgid ""
"julia> x = (1, 2, 3, 4)\n"
"(1, 2, 3, 4)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:408
#: ext/julia/doc/src/manual/functions.md:430
#, no-wrap
msgid ""
"julia> bar(x...)\n"
"(1, 2, (3, 4))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:410
msgid ""
"Furthermore, the iterable object splatted into a function call need not be a "
"tuple:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:416
#, no-wrap
msgid ""
"```jldoctest barfunc\n"
"julia> x = [3,4]\n"
"2-element Array{Int64,1}:\n"
" 3\n"
" 4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:419
#, no-wrap
msgid ""
"julia> bar(1,2,x...)\n"
"(1, 2, (3, 4))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:426
#, no-wrap
msgid ""
"julia> x = [1,2,3,4]\n"
"4-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
" 4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:433
msgid ""
"Also, the function that arguments are splatted into need not be a varargs "
"function (although it often is):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:436
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> baz(a,b) = a + b;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:441
#, no-wrap
msgid ""
"julia> args = [1,2]\n"
"2-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:444
#, no-wrap
msgid ""
"julia> baz(args...)\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:450
#, no-wrap
msgid ""
"julia> args = [1,2,3]\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:456
#, no-wrap
msgid ""
"julia> baz(args...)\n"
"ERROR: MethodError: no method matching baz(::Int64, ::Int64, ::Int64)\n"
"Closest candidates are:\n"
"  baz(::Any, ::Any) at none:1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:459
msgid ""
"As you can see, if the wrong number of elements are in the splatted "
"container, then the function call will fail, just as it would if too many "
"arguments were given explicitly."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:460
#, no-wrap
msgid "Optional Arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:467
msgid ""
"In many cases, function arguments have sensible default values and therefore "
"might not need to be passed explicitly in every call. For example, the "
"function [`Date(y, [m, d])`](@ref)  from `Dates` module constructs a `Date` "
"type for a given year `y`, month `m` and day `d`.  However, `m` and `d` "
"arguments are optional and their default value is `1`.  This behavior can be "
"expressed concisely as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:475
#, no-wrap
msgid ""
"```julia\n"
"function Date(y::Int64, m::Int64=1, d::Int64=1)\n"
"    err = validargs(Date, y, m, d)\n"
"    err === nothing || throw(err)\n"
"    return Date(UTD(totaldays(y, m, d)))\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:478
msgid ""
"Observe, that this definition calls another method of `Date` function that "
"takes one argument of `UTInstant{Day}` type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:481
msgid ""
"With this definition, the function can be called with either one, two or "
"three arguments, and `1` is automatically passed when any of the arguments "
"is not specified:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:484
#: ext/julia/doc/src/manual/strings.md:943
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> using Dates\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:487
#, no-wrap
msgid ""
"julia> Date(2000, 12, 12)\n"
"2000-12-12\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:490
#, no-wrap
msgid ""
"julia> Date(2000, 12)\n"
"2000-12-01\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:494
#, no-wrap
msgid ""
"julia> Date(2000)\n"
"2000-01-01\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:498
msgid ""
"Optional arguments are actually just a convenient syntax for writing "
"multiple method definitions with different numbers of arguments (see [Note "
"on Optional and keyword Arguments](@ref)).  This can be checked for our "
"`Date` function example by calling `methods` function."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:499
#, no-wrap
msgid "Keyword Arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:504
msgid ""
"Some functions need a large number of arguments, or have a large number of "
"behaviors. Remembering how to call such functions can be difficult. Keyword "
"arguments can make these complex interfaces easier to use and extend by "
"allowing arguments to be identified by name instead of only by position."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:511
msgid ""
"For example, consider a function `plot` that plots a line. This function "
"might have many options, for controlling line style, width, color, and so "
"on. If it accepts keyword arguments, a possible call might look like "
"`plot(x, y, width=2)`, where we have chosen to specify only line width. "
"Notice that this serves two purposes. The call is easier to read, since we "
"can label an argument with its meaning. It also becomes possible to pass any "
"subset of a large number of arguments, in any order."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:513
msgid ""
"Functions with keyword arguments are defined using a semicolon in the "
"signature:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:519
#, no-wrap
msgid ""
"```julia\n"
"function plot(x, y; style=\"solid\", width=1, color=\"black\")\n"
"    ###\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:523
msgid ""
"When the function is called, the semicolon is optional: one can either call "
"`plot(x, y, width=2)` or `plot(x, y; width=2)`, but the former style is more "
"common. An explicit semicolon is required only for passing varargs or "
"computed keywords as described below."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:527
msgid ""
"Keyword argument default values are evaluated only when necessary (when a "
"corresponding keyword argument is not passed), and in left-to-right order. "
"Therefore default expressions may refer to prior keyword arguments."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:529
msgid "The types of keyword arguments can be made explicit as follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:535
#, no-wrap
msgid ""
"```julia\n"
"function f(;x::Int=1)\n"
"    ###\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:537
msgid ""
"Extra keyword arguments can be collected using `...`, as in varargs "
"functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:543
#, no-wrap
msgid ""
"```julia\n"
"function f(x; y=0, kwargs...)\n"
"    ###\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:547
msgid ""
"Inside `f`, `kwargs` will be a key-value iterator over a named tuple. Named "
"tuples (as well as dictionaries with keys of `Symbol`) can be passed as "
"keyword arguments using a semicolon in a call, e.g. `f(x, z=1; kwargs...)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:558
#, no-wrap
msgid ""
"If a keyword argument is not assigned a default value in the method definition,\n"
"then it is *required*: an [`UndefKeywordError`](@ref) exception will be thrown\n"
"if the caller does not assign it a value:\n"
"```julia\n"
"function f(x; y)\n"
"    ###\n"
"end\n"
"f(3, y=5) # ok, y is assigned\n"
"f(3)      # throws UndefKeywordError(:y)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:562
#, no-wrap
msgid ""
"One can also pass `key => value` expressions after a semicolon. For example, `plot(x, y; :width => 2)`\n"
"is equivalent to `plot(x, y, width=2)`. This is useful in situations where the keyword name is computed\n"
"at runtime.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:569
msgid ""
"The nature of keyword arguments makes it possible to specify the same "
"argument more than once.  For example, in the call `plot(x, y; options..., "
"width=2)` it is possible that the `options` structure also contains a value "
"for `width`. In such a case the rightmost occurrence takes precedence; in "
"this example, `width` is certain to have the value `2`. However, explicitly "
"specifying the same keyword argument multiple times, for example `plot(x, y, "
"width=2, width=3)`, is not allowed and results in a syntax error."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:570
#, no-wrap
msgid "Evaluation Scope of Default Values"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:575
msgid ""
"When optional and keyword argument default expressions are evaluated, only "
"*previous* arguments are in scope.  For example, given this definition:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:581
#, no-wrap
msgid ""
"```julia\n"
"function f(x, a=b, b=1)\n"
"    ###\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:583
msgid ""
"the `b` in `a=b` refers to a `b` in an outer scope, not the subsequent "
"argument `b`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:584
#, no-wrap
msgid "Do-Block Syntax for Function Arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:590
msgid ""
"Passing functions as arguments to other functions is a powerful technique, "
"but the syntax for it is not always convenient. Such calls are especially "
"awkward to write when the function argument requires multiple lines. As an "
"example, consider calling [`map`](@ref) on a function with several cases:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:603
#, no-wrap
msgid ""
"```julia\n"
"map(x->begin\n"
"           if x < 0 && iseven(x)\n"
"               return 0\n"
"           elseif x == 0\n"
"               return 1\n"
"           else\n"
"               return x\n"
"           end\n"
"       end,\n"
"    [A, B, C])\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:605
msgid ""
"Julia provides a reserved word `do` for rewriting this code more clearly:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:617
#, no-wrap
msgid ""
"```julia\n"
"map([A, B, C]) do x\n"
"    if x < 0 && iseven(x)\n"
"        return 0\n"
"    elseif x == 0\n"
"        return 1\n"
"    else\n"
"        return x\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:621
#, no-wrap
msgid ""
"The `do x` syntax creates an anonymous function with argument `x` and passes it as the first argument\n"
"to [`map`](@ref). Similarly, `do a,b` would create a two-argument anonymous function, and a\n"
"plain `do` would declare that what follows is an anonymous function of the form `() -> ...`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:625
msgid ""
"How these arguments are initialized depends on the \"outer\" function; here, "
"[`map`](@ref) will sequentially set `x` to `A`, `B`, `C`, calling the "
"anonymous function on each, just as would happen in the syntax `map(func, "
"[A, B, C])`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:630
msgid ""
"This syntax makes it easier to use functions to effectively extend the "
"language, since calls look like normal code blocks. There are many possible "
"uses quite different from [`map`](@ref), such as managing system state. For "
"example, there is a version of [`open`](@ref) that runs code ensuring that "
"the opened file is eventually closed:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:636
#, no-wrap
msgid ""
"```julia\n"
"open(\"outfile\", \"w\") do io\n"
"    write(io, data)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:638
msgid "This is accomplished by the following definition:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:649
#, no-wrap
msgid ""
"```julia\n"
"function open(f::Function, args...)\n"
"    io = open(args...)\n"
"    try\n"
"        f(io)\n"
"    finally\n"
"        close(io)\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:654
msgid ""
"Here, [`open`](@ref) first opens the file for writing and then passes the "
"resulting output stream to the anonymous function you defined in the `do ... "
"end` block. After your function exits, [`open`](@ref)  will make sure that "
"the stream is properly closed, regardless of whether your function exited "
"normally or threw an exception. (The `try/finally` construct will be "
"described in [Control Flow](@ref).)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:657
msgid ""
"With the `do` block syntax, it helps to check the documentation or "
"implementation to know how the arguments of the user function are "
"initialized."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:662
msgid ""
"A `do` block, like any other inner function, can \"capture\" variables from "
"its enclosing scope. For example, the variable `data` in the above example "
"of `open...do` is captured from the outer scope. Captured variables can "
"create performance challenges as discussed in [performance tips](@ref man-"
"performance-tips)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:664
#, no-wrap
msgid "[Dot Syntax for Vectorizing Functions](@id man-vectorized)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:675
msgid ""
"In technical-computing languages, it is common to have \"vectorized\" "
"versions of functions, which simply apply a given function `f(x)` to each "
"element of an array `A` to yield a new array via `f(A)`. This kind of syntax "
"is convenient for data processing, but in other languages vectorization is "
"also often required for performance: if loops are slow, the \"vectorized\" "
"version of a function can call fast library code written in a low-level "
"language. In Julia, vectorized functions are *not* required for performance, "
"and indeed it is often beneficial to write your own loops (see [Performance "
"Tips](@ref man-performance-tips)), but they can still be convenient. "
"Therefore, *any* Julia function `f` can be applied elementwise to any array "
"(or other collection) with the syntax `f.(A)`.  For example, `sin` can be "
"applied to all elements in the vector `A` like so:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:682
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> A = [1.0, 2.0, 3.0]\n"
"3-element Array{Float64,1}:\n"
" 1.0\n"
" 2.0\n"
" 3.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:689
#, no-wrap
msgid ""
"julia> sin.(A)\n"
"3-element Array{Float64,1}:\n"
" 0.8414709848078965\n"
" 0.9092974268256817\n"
" 0.1411200080598672\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:693
msgid ""
"Of course, you can omit the dot if you write a specialized \"vector\" method "
"of `f`, e.g. via `f(A::AbstractArray) = map(f, A)`, and this is just as "
"efficient as `f.(A)`. But that approach requires you to decide in advance "
"which functions you want to vectorize."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:700
msgid ""
"More generally, `f.(args...)` is actually equivalent to `broadcast(f, "
"args...)`, which allows you to operate on multiple arrays (even of different "
"shapes), or a mix of arrays and scalars (see [Broadcasting](@ref)). For "
"example, if you have `f(x,y) = 3x + 4y`, then `f.(pi,A)` will return a new "
"array consisting of `f(pi,a)` for each `a` in `A`, and `f.(vector1,vector2)` "
"will return a new vector consisting of `f(vector1[i],vector2[i])` for each "
"index `i` (throwing an exception if the vectors have different length)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:703
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> f(x,y) = 3x + 4y;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:705
#, no-wrap
msgid "julia> A = [1.0, 2.0, 3.0];\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:707
#, no-wrap
msgid "julia> B = [4.0, 5.0, 6.0];\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:713
#, no-wrap
msgid ""
"julia> f.(pi, A)\n"
"3-element Array{Float64,1}:\n"
" 13.42477796076938\n"
" 17.42477796076938\n"
" 21.42477796076938\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:720
#, no-wrap
msgid ""
"julia> f.(A, B)\n"
"3-element Array{Float64,1}:\n"
" 19.0\n"
" 26.0\n"
" 33.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:730
#, no-wrap
msgid ""
"Moreover, *nested* `f.(args...)` calls are *fused* into a single `broadcast` loop. For example,\n"
"`sin.(cos.(X))` is equivalent to `broadcast(x -> sin(cos(x)), X)`, similar to `[sin(cos(x)) for x in X]`:\n"
"there is only a single loop over `X`, and a single array is allocated for the result. [In contrast,\n"
"`sin(cos(X))` in a typical \"vectorized\" language would first allocate one temporary array for\n"
"`tmp=cos(X)`, and then compute `sin(tmp)` in a separate loop, allocating a second array.] This\n"
"loop fusion is not a compiler optimization that may or may not occur, it is a *syntactic guarantee*\n"
"whenever nested `f.(args...)` calls are encountered. Technically, the fusion stops as soon as\n"
"a \"non-dot\" function call is encountered; for example, in `sin.(sort(cos.(X)))` the `sin` and `cos`\n"
"loops cannot be merged because of the intervening `sort` function.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:740
msgid ""
"Finally, the maximum efficiency is typically achieved when the output array "
"of a vectorized operation is *pre-allocated*, so that repeated calls do not "
"allocate new arrays over and over again for the results (see [Pre-allocating "
"outputs](@ref)). A convenient syntax for this is `X .= ...`, which is "
"equivalent to `broadcast!(identity, X, ...)` except that, as above, the "
"`broadcast!` loop is fused with any nested \"dot\" calls. For example, `X .= "
"sin.(Y)` is equivalent to `broadcast!(sin, X, Y)`, overwriting `X` with `sin."
"(Y)` in-place. If the left-hand side is an array-indexing expression, e.g. "
"`X[2:end] .= sin.(Y)`, then it translates to `broadcast!` on a `view`, e.g.  "
"`broadcast!(sin, view(X, 2:lastindex(X)), Y)`, so that the left-hand side is "
"updated in-place."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:745
msgid ""
"Since adding dots to many operations and function calls in an expression can "
"be tedious and lead to code that is difficult to read, the macro [`@.`](@ref "
"@__dot__) is provided to convert *every* function call, operation, and "
"assignment in an expression into the \"dotted\" version."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:748
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Y = [1.0, 2.0, 3.0, 4.0];\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:750
#, no-wrap
msgid "julia> X = similar(Y); # pre-allocate output array\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:758
#, no-wrap
msgid ""
"julia> @. X = sin(cos(Y)) # equivalent to X .= sin.(cos.(Y))\n"
"4-element Array{Float64,1}:\n"
"  0.5143952585235492\n"
" -0.4042391538522658\n"
" -0.8360218615377305\n"
" -0.6080830096407656\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:763
#, no-wrap
msgid ""
"Binary (or unary) operators like `.+` are handled with the same mechanism:\n"
"they are equivalent to `broadcast` calls and are fused with other nested \"dot\" calls.\n"
" `X .+= Y` etcetera is equivalent to `X .= X .+ Y` and results in a fused in-place assignment;\n"
" see also [dot operators](@ref man-dot-operators).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:774
#, no-wrap
msgid ""
"You can also combine dot operations with function chaining using [`|>`](@ref), as in this example:\n"
"```jldoctest\n"
"julia> [1:5;] .|> [x->x^2, inv, x->2*x, -, isodd]\n"
"5-element Array{Real,1}:\n"
"    1\n"
"    0.5\n"
"    6\n"
"   -4\n"
" true\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/functions.md:775
#, no-wrap
msgid "Further Reading"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/functions.md:781
msgid ""
"We should mention here that this is far from a complete picture of defining "
"functions. Julia has a sophisticated type system and allows multiple "
"dispatch on argument types. None of the examples given here provide any type "
"annotations on their arguments, meaning that they are applicable to all "
"types of arguments. The type system is described in [Types](@ref man-types) "
"and defining a function in terms of methods chosen by multiple dispatch on "
"run-time argument types is described in [Methods](@ref)."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/workflow-tips.md:1
#, no-wrap
msgid "[Workflow Tips](@id man-workflow-tips)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:4
msgid "Here are some tips for working with Julia efficiently."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/workflow-tips.md:5
#, no-wrap
msgid "REPL-based workflow"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:10
msgid ""
"As already elaborated in [The Julia REPL](@ref), Julia's REPL provides rich "
"functionality that facilitates an efficient interactive workflow. Here are "
"some tips that might further enhance your experience at the command line."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/workflow-tips.md:11
#, no-wrap
msgid "A basic editor/REPL workflow"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:15
msgid ""
"The most basic Julia workflows involve using a text editor in conjunction "
"with the `julia` command line. A common pattern includes the following "
"elements:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/workflow-tips.md:18
msgid ""
"**Put code under development in a temporary module.** Create a file, say "
"`Tmp.jl`, and include within it"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:22
#, no-wrap
msgid ""
"    ```julia\n"
"    module Tmp\n"
"    export say_hello\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:24
#, no-wrap
msgid "    say_hello() = println(\"Hello!\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:26
#, no-wrap
msgid "    # your other definitions here\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:30
#, no-wrap
msgid ""
"    end\n"
"    ```\n"
"  * **Put your test code in another file.** Create another file, say `tst.jl`, which looks like\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:35
#, no-wrap
msgid ""
"    ```julia\n"
"    include(\"Tmp.jl\")\n"
"    import .Tmp\n"
"    # using .Tmp # we can use `using` to bring the exported symbols in `Tmp` into our namespace\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:38
#, no-wrap
msgid ""
"    Tmp.say_hello()\n"
"    # say_hello()\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:41
#, no-wrap
msgid ""
"    # your other test code here\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:44
#, no-wrap
msgid ""
"    and includes tests for the contents of `Tmp`.\n"
"    Alternatively, you can wrap the contents of your test file in a module, as\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:50
#, no-wrap
msgid ""
"    ```julia\n"
"    module Tst\n"
"        include(\"Tmp.jl\")\n"
"        import .Tmp\n"
"        #using .Tmp\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:53
#, no-wrap
msgid ""
"        Tmp.say_hello()\n"
"        # say_hello()\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:57
#, no-wrap
msgid ""
"        # your other test code here\n"
"    end\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:60
#, no-wrap
msgid ""
"    The advantage is that your testing code is now contained in a module and does not use the global scope in `Main` for\n"
"    definitions, which is a bit more tidy.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/workflow-tips.md:62
msgid ""
"`include` the `tst.jl` file in the Julia REPL with `include(\"tst.jl\")`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/workflow-tips.md:64
msgid ""
"**Lather. Rinse. Repeat.** Explore ideas at the `julia` command prompt. Save "
"good ideas in `tst.jl`. To execute `tst.jl` after it has been changed, just "
"`include` it again."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/workflow-tips.md:65
#, no-wrap
msgid "Browser-based workflow"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/workflow-tips.md:68
msgid ""
"It is also possible to interact with a Julia REPL in the browser via [IJulia]"
"(https://github.com/JuliaLang/IJulia.jl).  See the package home for details."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/metaprogramming.md:1
#, no-wrap
msgid "Metaprogramming"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:13
msgid ""
"The strongest legacy of Lisp in the Julia language is its metaprogramming "
"support. Like Lisp, Julia represents its own code as a data structure of the "
"language itself. Since code is represented by objects that can be created "
"and manipulated from within the language, it is possible for a program to "
"transform and generate its own code. This allows sophisticated code "
"generation without extra build steps, and also allows true Lisp-style macros "
"operating at the level of [abstract syntax trees](https://en.wikipedia.org/"
"wiki/Abstract_syntax_tree).  In contrast, preprocessor \"macro\" systems, "
"like that of C and C++, perform textual manipulation and substitution before "
"any actual parsing or interpretation occurs. Because all data types and code "
"in Julia are represented by Julia data structures, powerful [reflection]"
"(https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29)  "
"capabilities are available to explore the internals of a program and its "
"types just like any other data."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/metaprogramming.md:14
#, no-wrap
msgid "Program representation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:17
msgid "Every Julia program starts life as a string:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:22
#, no-wrap
msgid ""
"```jldoctest prog\n"
"julia> prog = \"1 + 1\"\n"
"\"1 + 1\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:24
#, no-wrap
msgid "**What happens next?**\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:27
msgid ""
"The next step is to [parse](https://en.wikipedia.org/wiki/"
"Parsing#Computer_languages) each string into an object called an expression, "
"represented by the Julia type `Expr`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:31
#, no-wrap
msgid ""
"```jldoctest prog\n"
"julia> ex1 = Meta.parse(prog)\n"
":(1 + 1)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:35
#, no-wrap
msgid ""
"julia> typeof(ex1)\n"
"Expr\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:37
msgid "`Expr` objects contain two parts:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/metaprogramming.md:40
msgid ""
"a `Symbol` identifying the kind of expression. A symbol is an [interned "
"string](https://en.wikipedia.org/wiki/String_interning)  identifier (more "
"discussion below)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:45
#, no-wrap
msgid ""
"```jldoctest prog\n"
"julia> ex1.head\n"
":call\n"
"```\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/metaprogramming.md:47
msgid ""
"the expression arguments, which may be symbols, other expressions, or "
"literal values:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:55
#, no-wrap
msgid ""
"```jldoctest prog\n"
"julia> ex1.args\n"
"3-element Array{Any,1}:\n"
"  :+\n"
" 1\n"
" 1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:57
msgid ""
"Expressions may also be constructed directly in [prefix notation](https://en."
"wikipedia.org/wiki/Polish_notation):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:62
#, no-wrap
msgid ""
"```jldoctest prog\n"
"julia> ex2 = Expr(:call, :+, 1, 1)\n"
":(1 + 1)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:64
msgid ""
"The two expressions constructed above – by parsing and by direct "
"construction – are equivalent:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:69
#, no-wrap
msgid ""
"```jldoctest prog\n"
"julia> ex1 == ex2\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:72
#, no-wrap
msgid ""
"**The key point here is that Julia code is internally represented as a data structure that is accessible\n"
"from the language itself.**\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:74
msgid ""
"The [`dump`](@ref) function provides indented and annotated display of "
"`Expr` objects:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:84
#, no-wrap
msgid ""
"```jldoctest prog\n"
"julia> dump(ex2)\n"
"Expr\n"
"  head: Symbol call\n"
"  args: Array{Any}((3,))\n"
"    1: Symbol +\n"
"    2: Int64 1\n"
"    3: Int64 1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:86
msgid "`Expr` objects may also be nested:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:91
#, no-wrap
msgid ""
"```jldoctest ex3\n"
"julia> ex3 = Meta.parse(\"(4 + 4) / 2\")\n"
":((4 + 4) / 2)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:95
msgid ""
"Another way to view expressions is with `Meta.show_sexpr`, which displays "
"the [S-expression](https://en.wikipedia.org/wiki/S-expression)  form of a "
"given `Expr`, which may look very familiar to users of Lisp. Here's an "
"example illustrating the display on a nested `Expr`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:100
#, no-wrap
msgid ""
"```jldoctest ex3\n"
"julia> Meta.show_sexpr(ex3)\n"
"(:call, :/, (:call, :+, 4, 4), 2)\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:101
#, no-wrap
msgid "Symbols"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:106
msgid ""
"The `:` character has two syntactic purposes in Julia. The first form "
"creates a [`Symbol`](@ref), an [interned string](https://en.wikipedia.org/"
"wiki/String_interning) used as one building-block of expressions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:110
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> :foo\n"
":foo\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:114
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Symbol\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:117
msgid ""
"The [`Symbol`](@ref) constructor takes any number of arguments and creates a "
"new symbol by concatenating their string representations together:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:121
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> :foo == Symbol(\"foo\")\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:124
#, no-wrap
msgid ""
"julia> Symbol(\"func\",10)\n"
":func10\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:128
#, no-wrap
msgid ""
"julia> Symbol(:var,'_',\"sym\")\n"
":var_sym\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:131
msgid ""
"In the context of an expression, symbols are used to indicate access to "
"variables; when an expression is evaluated, a symbol is replaced with the "
"value bound to that symbol in the appropriate [scope](@ref scope-of-"
"variables)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:133
msgid ""
"Sometimes extra parentheses around the argument to `:` are needed to avoid "
"ambiguity in parsing.:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:137
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> :(:)\n"
":(:)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:141
#, no-wrap
msgid ""
"julia> :(::)\n"
":(::)\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/metaprogramming.md:142
#, no-wrap
msgid "Expressions and evaluation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:150
msgid ""
"The second syntactic purpose of the `:` character is to create expression "
"objects without using the explicit `Expr` constructor. This is referred to "
"as *quoting*. The `:` character, followed by paired parentheses around a "
"single statement of Julia code, produces an `Expr` object based on the "
"enclosed code. Here is example of the short form used to quote an arithmetic "
"expression:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:154
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> ex = :(a+b*c+1)\n"
":(a + b * c + 1)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:158
#: ext/julia/doc/src/manual/metaprogramming.md:198
#: ext/julia/doc/src/manual/metaprogramming.md:519
#, no-wrap
msgid ""
"julia> typeof(ex)\n"
"Expr\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:161
msgid ""
"(to view the structure of this expression, try `ex.head` and `ex.args`, or "
"use [`dump`](@ref)  as above or [`Meta.@dump`](@ref))"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:164
msgid ""
"Note that equivalent expressions may be constructed using [`Meta.parse`]"
"(@ref) or the direct `Expr` form:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:171
#, no-wrap
msgid ""
"```jldoctest\n"
"julia>      :(a + b*c + 1)       ==\n"
"       Meta.parse(\"a + b*c + 1\") ==\n"
"       Expr(:call, :+, :a, Expr(:call, :*, :b, :c), 1)\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:176
msgid ""
"Expressions provided by the parser generally only have symbols, other "
"expressions, and literal values as their args, whereas expressions "
"constructed by Julia code can have arbitrary run-time values without literal "
"forms as args. In this specific example, `+` and `a` are symbols, `*(b,c)` "
"is a subexpression, and `1` is a literal 64-bit signed integer."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:179
msgid ""
"There is a second syntactic form of quoting for multiple expressions: blocks "
"of code enclosed in `quote ... end`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:194
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> ex = quote\n"
"           x = 1\n"
"           y = 2\n"
"           x + y\n"
"       end\n"
"quote\n"
"    #= none:2 =#\n"
"    x = 1\n"
"    #= none:3 =#\n"
"    y = 2\n"
"    #= none:4 =#\n"
"    x + y\n"
"end\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:199
#, no-wrap
msgid "Interpolation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:204
msgid ""
"Direct construction of `Expr` objects with value arguments is powerful, but "
"`Expr` constructors can be tedious compared to \"normal\" Julia syntax. As "
"an alternative, Julia allows *interpolation* of literals or expressions into "
"quoted expressions. Interpolation is indicated by a prefix `$`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:206
msgid "In this example, the value of variable `a` is interpolated:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:209
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> a = 1;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:213
#, no-wrap
msgid ""
"julia> ex = :($a + b)\n"
":(1 + b)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:215
msgid ""
"Interpolating into an unquoted expression is not supported and will cause a "
"compile-time error:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:220
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> $a + b\n"
"ERROR: syntax: \"$\" expression outside quote\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:222
msgid ""
"In this example, the tuple `(1,2,3)` is interpolated as an expression into a "
"conditional test:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:227
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> ex = :(a in $:((1,2,3)) )\n"
":(a in (1, 2, 3))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:231
msgid ""
"The use of `$` for expression interpolation is intentionally reminiscent of "
"[string interpolation](@ref string-interpolation)  and [command "
"interpolation](@ref command-interpolation). Expression interpolation allows "
"convenient, readable programmatic construction of complex Julia expressions."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:232
#, no-wrap
msgid "Splatting interpolation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:241
msgid ""
"Notice that the `$` interpolation syntax allows inserting only a single "
"expression into an enclosing expression.  Occasionally, you have an array of "
"expressions and need them all to become arguments of the surrounding "
"expression.  This can be done with the syntax `$(xs...)`.  For example, the "
"following code generates a function call where the number of arguments is "
"determined programmatically:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:244
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> args = [:x, :y, :z];\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:248
#, no-wrap
msgid ""
"julia> :(f(1, $(args...)))\n"
":(f(1, x, y, z))\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:249
#, no-wrap
msgid "Nested quote"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:254
msgid ""
"Naturally, it is possible for quote expressions to contain other quote "
"expressions.  Understanding how interpolation works in these cases can be a "
"bit tricky.  Consider this example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:257
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> x = :(1 + 2);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:267
#, no-wrap
msgid ""
"julia> e = quote quote $x end end\n"
"quote\n"
"    #= none:1 =#\n"
"    $(Expr(:quote, quote\n"
"    #= none:1 =#\n"
"    $(Expr(:$, :x))\n"
"end))\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:272
msgid ""
"Notice that the result contains `Expr(:$, :x)`, which means that `x` has not "
"been evaluated yet.  In other words, the `$` expression \"belongs to\" the "
"inner quote expression, and so its argument is only evaluated when the inner "
"quote expression is:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:280
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> eval(e)\n"
"quote\n"
"    #= none:1 =#\n"
"    1 + 2\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:284
msgid ""
"However, the outer `quote` expression is able to interpolate values inside "
"the `$` in the inner quote.  This is done with multiple `$`s:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:295
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> e = quote quote $$x end end\n"
"quote\n"
"    #= none:1 =#\n"
"    $(Expr(:quote, quote\n"
"    #= none:1 =#\n"
"    $(Expr(:$, :(1 + 2)))\n"
"end))\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:298
msgid ""
"Notice that `:(1 + 2)` now appears in the result instead of the symbol `:"
"x`.  Evaluating this expression yields an interpolated `3`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:306
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> eval(e)\n"
"quote\n"
"    #= none:1 =#\n"
"    3\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:310
msgid ""
"The intuition behind this behavior is that `x` is evaluated once for each `"
"$`: one `$` works similarly to `eval(:x)`, giving `x`'s value, while two `"
"$`s do the equivalent of `eval(eval(:x))`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:311
#, no-wrap
msgid "QuoteNode"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:314
msgid ""
"The usual representation of a `quote` form in an AST is an `Expr` with head "
"`:quote`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:327
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> dump(Meta.parse(\":(1+2)\"))\n"
"Expr\n"
"  head: Symbol quote\n"
"  args: Array{Any}((1,))\n"
"    1: Expr\n"
"      head: Symbol call\n"
"      args: Array{Any}((3,))\n"
"        1: Symbol +\n"
"        2: Int64 1\n"
"        3: Int64 2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:333
msgid ""
"As we have seen, such expressions support interpolation with `$`.  However, "
"in some situations it is necessary to quote code *without* performing "
"interpolation.  This kind of quoting does not yet have syntax, but is "
"represented internally as an object of type `QuoteNode`.  The parser yields "
"`QuoteNode`s for simple quoted items like symbols:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:339
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> dump(Meta.parse(\":x\"))\n"
"QuoteNode\n"
"  value: Symbol x\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:341
msgid ""
"`QuoteNode` can also be used for certain advanced metaprogramming tasks."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:342
#, no-wrap
msgid "[`eval`](@ref) and effects"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:346
msgid ""
"Given an expression object, one can cause Julia to evaluate (execute) it at "
"global scope using [`eval`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:350
#, no-wrap
msgid ""
"```jldoctest interp1\n"
"julia> :(1 + 2)\n"
":(1 + 2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:353
#, no-wrap
msgid ""
"julia> eval(ans)\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:356
#, no-wrap
msgid ""
"julia> ex = :(a + b)\n"
":(a + b)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:360
#, no-wrap
msgid ""
"julia> eval(ex)\n"
"ERROR: UndefVarError: b not defined\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:362
#, no-wrap
msgid "julia> a = 1; b = 2;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:366
#: ext/julia/doc/src/manual/metaprogramming.md:403
#, no-wrap
msgid ""
"julia> eval(ex)\n"
"3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:370
msgid ""
"Every [module](@ref modules) has its own [`eval`](@ref) function that "
"evaluates expressions in its global scope. Expressions passed to [`eval`]"
"(@ref) are not limited to returning values -- they can also have side-"
"effects that alter the state of the enclosing module's environment:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:374
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> ex = :(x = 1)\n"
":(x = 1)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:377
#, no-wrap
msgid ""
"julia> x\n"
"ERROR: UndefVarError: x not defined\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:380
#, no-wrap
msgid ""
"julia> eval(ex)\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:384
#: ext/julia/doc/src/manual/variables-and-scoping.md:197
#, no-wrap
msgid ""
"julia> x\n"
"1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:387
msgid ""
"Here, the evaluation of an expression object causes a value to be assigned "
"to the global variable `x`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:391
msgid ""
"Since expressions are just `Expr` objects which can be constructed "
"programmatically and then evaluated, it is possible to dynamically generate "
"arbitrary code which can then be run using [`eval`](@ref).  Here is a simple "
"example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:394
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> a = 1;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:397
#, no-wrap
msgid ""
"julia> ex = Expr(:call, :+, a, :b)\n"
":(1 + b)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:399
#, no-wrap
msgid "julia> a = 0; b = 2;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:406
msgid ""
"The value of `a` is used to construct the expression `ex` which applies the `"
"+` function to the value 1 and the variable `b`. Note the important "
"distinction between the way `a` and `b` are used:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/metaprogramming.md:414
msgid ""
"The value of the *variable* `a` at expression construction time is used as "
"an immediate value in the expression. Thus, the value of `a` when the "
"expression is evaluated no longer matters: the value in the expression is "
"already `1`, independent of whatever the value of `a` might be."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/metaprogramming.md:414
msgid ""
"On the other hand, the *symbol* `:b` is used in the expression construction, "
"so the value of the variable `b` at that time is irrelevant -- `:b` is just "
"a symbol and the variable `b` need not even be defined. At expression "
"evaluation time, however, the value of the symbol `:b` is resolved by "
"looking up the value of the variable `b`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:415
#, no-wrap
msgid "Functions on `Expr`essions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:422
msgid ""
"As hinted above, one extremely useful feature of Julia is the capability to "
"generate and manipulate Julia code within Julia itself. We have already seen "
"one example of a function returning `Expr` objects: the [`parse`](@ref) "
"function, which takes a string of Julia code and returns the corresponding "
"`Expr`. A function can also take one or more `Expr` objects as arguments, "
"and return another `Expr`. Here is a simple, motivating example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:429
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function math_expr(op, op1, op2)\n"
"           expr = Expr(:call, op, op1, op2)\n"
"           return expr\n"
"       end\n"
"math_expr (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:432
#, no-wrap
msgid ""
"julia>  ex = math_expr(:+, 1, Expr(:call, :*, 4, 5))\n"
":(1 + 4 * 5)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:436
#, no-wrap
msgid ""
"julia> eval(ex)\n"
"21\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:439
msgid ""
"As another example, here is a function that doubles any numeric argument, "
"but leaves expressions alone:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:447
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function make_expr2(op, opr1, opr2)\n"
"           opr1f, opr2f = map(x -> isa(x, Number) ? 2*x : x, (opr1, opr2))\n"
"           retexpr = Expr(:call, op, opr1f, opr2f)\n"
"           return retexpr\n"
"       end\n"
"make_expr2 (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:450
#, no-wrap
msgid ""
"julia> make_expr2(:+, 1, 2)\n"
":(2 + 4)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:453
#, no-wrap
msgid ""
"julia> ex = make_expr2(:+, 1, Expr(:call, :*, 5, 8))\n"
":(2 + 5 * 8)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:457
#, no-wrap
msgid ""
"julia> eval(ex)\n"
"42\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/metaprogramming.md:458
#, no-wrap
msgid "[Macros](@id man-macros)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:464
msgid ""
"Macros provide a method to include generated code in the final body of a "
"program. A macro maps a tuple of arguments to a returned *expression*, and "
"the resulting expression is compiled directly rather than requiring a "
"runtime [`eval`](@ref) call. Macro arguments may include expressions, "
"literal values, and symbols."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:465
#, no-wrap
msgid "Basics"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:468
msgid "Here is an extraordinarily simple macro:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:475
#, no-wrap
msgid ""
"```jldoctest sayhello\n"
"julia> macro sayhello()\n"
"           return :( println(\"Hello, world!\") )\n"
"       end\n"
"@sayhello (macro with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:479
msgid ""
"Macros have a dedicated character in Julia's syntax: the `@` (at-sign), "
"followed by the unique name declared in a `macro NAME ... end` block. In "
"this example, the compiler will replace all instances of `@sayhello` with:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:483
msgid "```julia :( println(\"Hello, world!\") )  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:486
msgid ""
"When `@sayhello` is entered in the REPL, the expression executes "
"immediately, thus we only see the evaluation result:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:491
#, no-wrap
msgid ""
"```jldoctest sayhello\n"
"julia> @sayhello()\n"
"Hello, world!\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:493
msgid "Now, consider a slightly more complex macro:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:500
#, no-wrap
msgid ""
"```jldoctest sayhello2\n"
"julia> macro sayhello(name)\n"
"           return :( println(\"Hello, \", $name) )\n"
"       end\n"
"@sayhello (macro with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:503
msgid ""
"This macro takes one argument: `name`. When `@sayhello` is encountered, the "
"quoted expression is *expanded* to interpolate the value of the argument "
"into the final expression:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:508
#, no-wrap
msgid ""
"```jldoctest sayhello2\n"
"julia> @sayhello(\"human\")\n"
"Hello, human\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:511
msgid ""
"We can view the quoted return expression using the function [`macroexpand`]"
"(@ref) (**important note:** this is an extremely useful tool for debugging "
"macros):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:515
#, no-wrap
msgid ""
"```julia-repl sayhello2\n"
"julia> ex = macroexpand(Main, :(@sayhello(\"human\")) )\n"
":((Main.println)(\"Hello, \", \"human\"))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:521
msgid ""
"We can see that the `\"human\"` literal has been interpolated into the "
"expression."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:523
msgid ""
"There also exists a macro [`@macroexpand`](@ref) that is perhaps a bit more "
"convenient than the `macroexpand` function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:529
#, no-wrap
msgid ""
"```jldoctest sayhello2\n"
"julia> @macroexpand @sayhello \"human\"\n"
":((println)(\"Hello, \", \"human\"))\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:530
#, no-wrap
msgid "Hold up: why macros?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:534
#, no-wrap
msgid ""
"We have already seen a function `f(::Expr...) -> Expr` in a previous section. In fact, [`macroexpand`](@ref)\n"
"is also such a function. So, why do macros exist?\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:538
msgid ""
"Macros are necessary because they execute when code is parsed, therefore, "
"macros allow the programmer to generate and include fragments of customized "
"code *before* the full program is run. To illustrate the difference, "
"consider the following example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:545
#, no-wrap
msgid ""
"```julia-repl whymacros\n"
"julia> macro twostep(arg)\n"
"           println(\"I execute at parse time. The argument is: \", arg)\n"
"           return :(println(\"I execute at runtime. The argument is: \", $arg))\n"
"       end\n"
"@twostep (macro with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:549
#, no-wrap
msgid ""
"julia> ex = macroexpand(Main, :(@twostep :(1, 2, 3)) );\n"
"I execute at parse time. The argument is: $(Expr(:quote, :((1, 2, 3))))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:552
msgid ""
"The first call to [`println`](@ref) is executed when [`macroexpand`](@ref) "
"is called. The resulting expression contains *only* the second `println`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:556
#, no-wrap
msgid ""
"```julia-repl whymacros\n"
"julia> typeof(ex)\n"
"Expr\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:559
#, no-wrap
msgid ""
"julia> ex\n"
":((println)(\"I execute at runtime. The argument is: \", $(Expr(:copyast, :($(QuoteNode(:((1, 2, 3)))))))))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:563
#, no-wrap
msgid ""
"julia> eval(ex)\n"
"I execute at runtime. The argument is: (1, 2, 3)\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:564
#, no-wrap
msgid "Macro invocation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:567
msgid "Macros are invoked with the following general syntax:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:572
msgid "```julia @name expr1 expr2 ...  @name(expr1, expr2, ...)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:577
msgid ""
"Note the distinguishing `@` before the macro name and the lack of commas "
"between the argument expressions in the first form, and the lack of "
"whitespace after `@name` in the second form. The two styles should not be "
"mixed. For example, the following syntax is different from the examples "
"above; it passes the tuple `(expr1, expr2, ...)` as one argument to the "
"macro:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:581
msgid "```julia @name (expr1, expr2, ...)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:583
msgid ""
"An alternative way to invoke a macro over an array literal (or "
"comprehension) is to juxtapose both without using parentheses. In this case, "
"the array will be the only expression fed to the macro. The following syntax "
"is equivalent (and different from `@name [a b] * v`):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:588
msgid "```julia @name[a b] * v @name([a b]) * v ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:592
msgid ""
"It is important to emphasize that macros receive their arguments as "
"expressions, literals, or symbols. One way to explore macro arguments is to "
"call the [`show`](@ref) function within the macro body:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:599
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> macro showarg(x)\n"
"           show(x)\n"
"           # ... remainder of macro, returning an expression\n"
"       end\n"
"@showarg (macro with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:602
#, no-wrap
msgid ""
"julia> @showarg(a)\n"
":a\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:605
#, no-wrap
msgid ""
"julia> @showarg(1+1)\n"
":(1 + 1)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:609
#, no-wrap
msgid ""
"julia> @showarg(println(\"Yo!\"))\n"
":(println(\"Yo!\"))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:611
msgid ""
"In addition to the given argument list, every macro is passed extra "
"arguments named `__source__` and `__module__`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:617
msgid ""
"The argument `__source__` provides information (in the form of a "
"`LineNumberNode` object) about the parser location of the `@` sign from the "
"macro invocation.  This allows macros to include better error diagnostic "
"information, and is commonly used by logging, string-parser macros, and "
"docs, for example, as well as to implement the `@__LINE__`, `@__FILE__`, and "
"`@__DIR__` macros."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:619
msgid ""
"The location information can be accessed by referencing `__source__.line` "
"and `__source__.file`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:623
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> macro __LOCATION__(); return QuoteNode(__source__); end\n"
"@__LOCATION__ (macro with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:631
#, no-wrap
msgid ""
"julia> dump(\n"
"            @__LOCATION__(\n"
"       ))\n"
"LineNumberNode\n"
"  line: Int64 2\n"
"  file: Symbol none\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:637
msgid ""
"The argument `__module__` provides information (in the form of a `Module` "
"object)  about the expansion context of the macro invocation.  This allows "
"macros to look up contextual information, such as existing bindings, or to "
"insert the value as an extra argument to a runtime function call doing self-"
"reflection in the current module."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:639
#, no-wrap
msgid "Building an advanced macro"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:642
msgid "Here is a simplified definition of Julia's `@assert` macro:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:649
#, no-wrap
msgid ""
"```jldoctest building\n"
"julia> macro assert(ex)\n"
"           return :( $ex ? nothing : throw(AssertionError($(string(ex)))) )\n"
"       end\n"
"@assert (macro with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:651
msgid "This macro can be used like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:654
#, no-wrap
msgid ""
"```jldoctest building\n"
"julia> @assert 1 == 1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:658
#, no-wrap
msgid ""
"julia> @assert 1 == 0\n"
"ERROR: AssertionError: 1 == 0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:661
msgid ""
"In place of the written syntax, the macro call is expanded at parse time to "
"its returned result.  This is equivalent to writing:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:666
msgid ""
"```julia 1 == 1.0 ? nothing : throw(AssertionError(\"1 == 1.0\"))  1 == 0 ? "
"nothing : throw(AssertionError(\"1 == 0\"))  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:675
msgid ""
"That is, in the first call, the expression `:(1 == 1.0)` is spliced into the "
"test condition slot, while the value of `string(:(1 == 1.0))` is spliced "
"into the assertion message slot. The entire expression, thus constructed, is "
"placed into the syntax tree where the `@assert` macro call occurs.  Then at "
"execution time, if the test expression evaluates to true, then `nothing` is "
"returned, whereas if the test is false, an error is raised indicating the "
"asserted expression that was false.  Notice that it would not be possible to "
"write this as a function, since only the *value* of the condition is "
"available and it would be impossible to display the expression that computed "
"it in the error message."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:680
msgid ""
"The actual definition of `@assert` in Julia Base is more complicated. It "
"allows the user to optionally specify their own error message, instead of "
"just printing the failed expression.  Just like in functions with a variable "
"number of arguments, this is specified with an ellipses following the last "
"argument:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:689
#, no-wrap
msgid ""
"```jldoctest assert2\n"
"julia> macro assert(ex, msgs...)\n"
"           msg_body = isempty(msgs) ? ex : msgs[1]\n"
"           msg = string(msg_body)\n"
"           return :($ex ? nothing : throw(AssertionError($msg)))\n"
"       end\n"
"@assert (macro with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:695
msgid ""
"Now `@assert` has two modes of operation, depending upon the number of "
"arguments it receives! If there's only one argument, the tuple of "
"expressions captured by `msgs` will be empty and it will behave the same as "
"the simpler definition above. But now if the user specifies a second "
"argument, it is printed in the message body instead of the failing "
"expression. You can inspect the result of a macro expansion with the aptly "
"named [`@macroexpand`](@ref) macro:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:703
#, no-wrap
msgid ""
"```julia-repl assert2\n"
"julia> @macroexpand @assert a == b\n"
":(if Main.a == Main.b\n"
"        Main.nothing\n"
"    else\n"
"        (Main.throw)((Main.AssertionError)(\"a == b\"))\n"
"    end)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:711
#, no-wrap
msgid ""
"julia> @macroexpand @assert a==b \"a should equal b!\"\n"
":(if Main.a == Main.b\n"
"        Main.nothing\n"
"    else\n"
"        (Main.throw)((Main.AssertionError)(\"a should equal b!\"))\n"
"    end)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:717
msgid ""
"There is yet another case that the actual `@assert` macro handles: what if, "
"in addition to printing \"a should equal b,\" we wanted to print their "
"values? One might naively try to use string interpolation in the custom "
"message, e.g., `@assert a==b \"a ($a) should equal b ($b)!\"`, but this "
"won't work as expected with the above macro. Can you see why? Recall from "
"[string interpolation](@ref string-interpolation) that an interpolated "
"string is rewritten to a call to [`string`](@ref). Compare:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:721
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typeof(:(\"a should equal b\"))\n"
"String\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:724
#, no-wrap
msgid ""
"julia> typeof(:(\"a ($a) should equal b ($b)!\"))\n"
"Expr\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:735
#, no-wrap
msgid ""
"julia> dump(:(\"a ($a) should equal b ($b)!\"))\n"
"Expr\n"
"  head: Symbol string\n"
"  args: Array{Any}((5,))\n"
"    1: String \"a (\"\n"
"    2: Symbol a\n"
"    3: String \") should equal b (\"\n"
"    4: Symbol b\n"
"    5: String \")!\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:740
msgid ""
"So now instead of getting a plain string in `msg_body`, the macro is "
"receiving a full expression that will need to be evaluated in order to "
"display as expected. This can be spliced directly into the returned "
"expression as an argument to the [`string`](@ref) call; see [`error.jl`]"
"(https://github.com/JuliaLang/julia/blob/master/base/error.jl)  for the "
"complete implementation."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:743
msgid ""
"The `@assert` macro makes great use of splicing into quoted expressions to "
"simplify the manipulation of expressions inside the macro body."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:744
#, no-wrap
msgid "Hygiene"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:756
msgid ""
"An issue that arises in more complex macros is that of [hygiene](https://en."
"wikipedia.org/wiki/Hygienic_macro).  In short, macros must ensure that the "
"variables they introduce in their returned expressions do not accidentally "
"clash with existing variables in the surrounding code they expand into. "
"Conversely, the expressions that are passed into a macro as arguments are "
"often *expected* to evaluate in the context of the surrounding code, "
"interacting with and modifying the existing variables. Another concern "
"arises from the fact that a macro may be called in a different module from "
"where it was defined. In this case we need to ensure that all global "
"variables are resolved to the correct module. Julia already has a major "
"advantage over languages with textual macro expansion (like C) in that it "
"only needs to consider the returned expression. All the other variables "
"(such as `msg` in `@assert` above) follow the [normal scoping block behavior]"
"(@ref scope-of-variables)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:761
msgid ""
"To demonstrate these issues, let us consider writing a `@time` macro that "
"takes an expression as its argument, records the time, evaluates the "
"expression, records the time again, prints the difference between the before "
"and after times, and then has the value of the expression as its final "
"value. The macro might look like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:773
#, no-wrap
msgid ""
"```julia\n"
"macro time(ex)\n"
"    return quote\n"
"        local t0 = time()\n"
"        local val = $ex\n"
"        local t1 = time()\n"
"        println(\"elapsed time: \", t1-t0, \" seconds\")\n"
"        val\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:779
msgid ""
"Here, we want `t0`, `t1`, and `val` to be private temporary variables, and "
"we want `time` to refer to the [`time`](@ref) function in Julia Base, not to "
"any `time` variable the user might have (the same applies to `println`). "
"Imagine the problems that could occur if the user expression `ex` also "
"contained assignments to a variable called `t0`, or defined its own `time` "
"variable. We might get errors, or mysteriously incorrect behavior."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:787
msgid ""
"Julia's macro expander solves these problems in the following way. First, "
"variables within a macro result are classified as either local or global. A "
"variable is considered local if it is assigned to (and not declared global), "
"declared local, or used as a function argument name. Otherwise, it is "
"considered global. Local variables are then renamed to be unique (using the "
"[`gensym`](@ref)  function, which generates new symbols), and global "
"variables are resolved within the macro definition environment. Therefore "
"both of the above concerns are handled; the macro's locals will not conflict "
"with any user variables, and `time` and `println` will refer to the Julia "
"Base definitions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:789
msgid "One problem remains however. Consider the following use of this macro:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:793
msgid "```julia module MyModule import Base.@time"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:795
msgid "time() = ... # compute something"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:799
msgid "@time time()  end ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:803
msgid ""
"Here the user expression `ex` is a call to `time`, but not the same `time` "
"function that the macro uses. It clearly refers to `MyModule.time`. "
"Therefore we must arrange for the code in `ex` to be resolved in the macro "
"call environment. This is done by \"escaping\" the expression with [`esc`]"
"(@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:811
#, no-wrap
msgid ""
"```julia\n"
"macro time(ex)\n"
"    ...\n"
"    local val = $(esc(ex))\n"
"    ...\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:814
msgid ""
"An expression wrapped in this manner is left alone by the macro expander and "
"simply pasted into the output verbatim. Therefore it will be resolved in the "
"macro call environment."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:817
msgid ""
"This escaping mechanism can be used to \"violate\" hygiene when necessary, "
"in order to introduce or manipulate user variables. For example, the "
"following macro sets `x` to zero in the call environment:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:823
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> macro zerox()\n"
"           return esc(:(x = 0))\n"
"       end\n"
"@zerox (macro with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:830
#, no-wrap
msgid ""
"julia> function foo()\n"
"           x = 1\n"
"           @zerox\n"
"           return x # is zero\n"
"       end\n"
"foo (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:834
#, no-wrap
msgid ""
"julia> foo()\n"
"0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:836
msgid ""
"This kind of manipulation of variables should be used judiciously, but is "
"occasionally quite handy."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:843
#, no-wrap
msgid ""
"Getting the hygiene rules correct can be a formidable challenge.\n"
"Before using a macro, you might want to consider whether a function closure\n"
"would be sufficient. Another useful strategy is to defer as much work as possible to runtime.\n"
"For example, many macros simply wrap their arguments in a QuoteNode or other similar Expr.\n"
"Some examples of this include `@task body` which simply returns `schedule(Task(() -> $body))`,\n"
"and `@eval expr`, which simply returns `eval(QuoteNode(expr))`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:845
msgid "To demonstrate, we might rewrite the `@time` example above as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:858
#, no-wrap
msgid ""
"```julia\n"
"macro time(expr)\n"
"    return :(timeit(() -> $(esc(expr))))\n"
"end\n"
"function timeit(f)\n"
"    t0 = time()\n"
"    val = f()\n"
"    t1 = time()\n"
"    println(\"elapsed time: \", t1-t0, \" seconds\")\n"
"    return val\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:862
msgid ""
"However, we don't do this for a good reason: wrapping the `expr` in a new "
"scope block (the anonymous function)  also slightly changes the meaning of "
"the expression (the scope of any variables in it), while we want `@time` to "
"be usable with minimum impact on the wrapped code."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:863
#, no-wrap
msgid "Macros and dispatch"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:869
#, no-wrap
msgid ""
"Macros, just like Julia functions, are generic. This means they can also have multiple method definitions, thanks to multiple dispatch:\n"
"```jldoctest macromethods\n"
"julia> macro m end\n"
"@m (macro with 0 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:874
#, no-wrap
msgid ""
"julia> macro m(args...)\n"
"           println(\"$(length(args)) arguments\")\n"
"       end\n"
"@m (macro with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:879
#, no-wrap
msgid ""
"julia> macro m(x,y)\n"
"           println(\"Two arguments\")\n"
"       end\n"
"@m (macro with 2 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:882
#, no-wrap
msgid ""
"julia> @m \"asd\"\n"
"1 arguments\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:893
#, no-wrap
msgid ""
"julia> @m 1 2\n"
"Two arguments\n"
"```\n"
"However one should keep in mind, that macro dispatch is based on the types of AST\n"
"that are handed to the macro, not the types that the AST evaluates to at runtime:\n"
"```jldoctest macromethods\n"
"julia> macro m(::Int)\n"
"           println(\"An Integer\")\n"
"       end\n"
"@m (macro with 3 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:896
#, no-wrap
msgid ""
"julia> @m 2\n"
"An Integer\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:899
#, no-wrap
msgid ""
"julia> x = 2\n"
"2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:903
#, no-wrap
msgid ""
"julia> @m x\n"
"1 arguments\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/metaprogramming.md:904
#, no-wrap
msgid "Code Generation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:911
msgid ""
"When a significant amount of repetitive boilerplate code is required, it is "
"common to generate it programmatically to avoid redundancy. In most "
"languages, this requires an extra build step, and a separate program to "
"generate the repetitive code. In Julia, expression interpolation and [`eval`]"
"(@ref) allow such code generation to take place in the normal course of "
"program execution.  For example, consider the following custom type"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:916
#, no-wrap
msgid ""
"```jldoctest mynumber-codegen\n"
"struct MyNumber\n"
"    x::Float64\n"
"end\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/metaprogramming.md:916
#: ext/julia/doc/src/manual/metaprogramming.md:929
#: ext/julia/doc/src/manual/interfaces.md:543
#: ext/julia/doc/src/manual/interfaces.md:551
#: ext/julia/doc/src/manual/interfaces.md:570
#: ext/julia/doc/src/devdocs/inference.md:110
#, no-wrap
msgid "output"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:922
msgid ""
"for which we want to add a number of methods to. We can do this "
"programmatically in the following loop:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:929
#, no-wrap
msgid ""
"```jldoctest mynumber-codegen\n"
"for op = (:sin, :cos, :tan, :log, :exp)\n"
"    eval(quote\n"
"        Base.$op(a::MyNumber) = MyNumber($op(a.x))\n"
"    end)\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:934
msgid "and we can now use those functions with our custom type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:938
#, no-wrap
msgid ""
"```jldoctest mynumber-codegen\n"
"julia> x = MyNumber(π)\n"
"MyNumber(3.141592653589793)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:941
#, no-wrap
msgid ""
"julia> sin(x)\n"
"MyNumber(1.2246467991473532e-16)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:945
#, no-wrap
msgid ""
"julia> cos(x)\n"
"MyNumber(-1.0)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:949
msgid ""
"In this manner, Julia acts as its own [preprocessor](https://en.wikipedia."
"org/wiki/Preprocessor), and allows code generation from inside the language. "
"The above code could be written slightly more tersely using the `:` prefix "
"quoting form:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:955
#, no-wrap
msgid ""
"```julia\n"
"for op = (:sin, :cos, :tan, :log, :exp)\n"
"    eval(:(Base.$op(a::MyNumber) = MyNumber($op(a.x))))\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:958
msgid ""
"This sort of in-language code generation, however, using the "
"`eval(quote(...))` pattern, is common enough that Julia comes with a macro "
"to abbreviate this pattern:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:964
#, no-wrap
msgid ""
"```julia\n"
"for op = (:sin, :cos, :tan, :log, :exp)\n"
"    @eval Base.$op(a::MyNumber) = MyNumber($op(a.x))\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:968
msgid ""
"The [`@eval`](@ref) macro rewrites this call to be precisely equivalent to "
"the above longer versions.  For longer blocks of generated code, the "
"expression argument given to [`@eval`](@ref) can be a block:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:974
#, no-wrap
msgid ""
"```julia\n"
"@eval begin\n"
"    # multiple lines\n"
"end\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/metaprogramming.md:975
#, no-wrap
msgid "Non-Standard String Literals"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:979
msgid ""
"Recall from [Strings](@ref non-standard-string-literals) that string "
"literals prefixed by an identifier are called non-standard string literals, "
"and can have different semantics than un-prefixed string literals. For "
"example:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/metaprogramming.md:982
msgid ""
"`r\"^\\s*(?:#|$)\"` produces a regular expression object rather than a string"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/metaprogramming.md:982
msgid ""
"`b\"DATA\\xff\\u2200\"` is a byte array literal for "
"`[68,65,84,65,255,226,136,128]`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:987
msgid ""
"Perhaps surprisingly, these behaviors are not hard-coded into the Julia "
"parser or compiler. Instead, they are custom behaviors provided by a general "
"mechanism that anyone can use: prefixed string literals are parsed as calls "
"to specially-named macros. For example, the regular expression macro is just "
"the following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:993
#, no-wrap
msgid ""
"```julia\n"
"macro r_str(p)\n"
"    Regex(p)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:998
msgid ""
"That's all. This macro says that the literal contents of the string literal "
"`r\"^\\s*(?:#|$)\"` should be passed to the `@r_str` macro and the result of "
"that expansion should be placed in the syntax tree where the string literal "
"occurs. In other words, the expression `r\"^\\s*(?:#|$)\"` is equivalent to "
"placing the following object directly into the syntax tree:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1002
msgid "```julia Regex(\"^\\\\s*(?:#|\\$)\")  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1007
msgid ""
"Not only is the string literal form shorter and far more convenient, but it "
"is also more efficient: since the regular expression is compiled and the "
"`Regex` object is actually created *when the code is compiled*, the "
"compilation occurs only once, rather than every time the code is executed. "
"Consider if the regular expression occurs in a loop:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1018
#, no-wrap
msgid ""
"```julia\n"
"for line = lines\n"
"    m = match(r\"^\\s*(?:#|$)\", line)\n"
"    if m === nothing\n"
"        # non-comment\n"
"    else\n"
"        # comment\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1022
msgid ""
"Since the regular expression `r\"^\\s*(?:#|$)\"` is compiled and inserted "
"into the syntax tree when this code is parsed, the expression is only "
"compiled once instead of each time the loop is executed.  In order to "
"accomplish this without macros, one would have to write this loop like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1034
#, no-wrap
msgid ""
"```julia\n"
"re = Regex(\"^\\\\s*(?:#|\\$)\")\n"
"for line = lines\n"
"    m = match(re, line)\n"
"    if m === nothing\n"
"        # non-comment\n"
"    else\n"
"        # comment\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1044
msgid ""
"Moreover, if the compiler could not determine that the regex object was "
"constant over all loops, certain optimizations might not be possible, making "
"this version still less efficient than the more convenient literal form "
"above. Of course, there are still situations where the non-literal form is "
"more convenient: if one needs to interpolate a variable into the regular "
"expression, one must take this more verbose approach; in cases where the "
"regular expression pattern itself is dynamic, potentially changing upon each "
"loop iteration, a new regular expression object must be constructed on each "
"iteration. In the vast majority of use cases, however, regular expressions "
"are not constructed based on run-time data. In this majority of cases, the "
"ability to write regular expressions as compile-time values is invaluable."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1050
msgid ""
"Like non-standard string literals, non-standard command literals exist using "
"a prefixed variant of the command literal syntax. The command literal "
"```custom`literal` ``` is parsed as `@custom_cmd \"literal\"`.  Julia itself "
"does not contain any non-standard command literals, but packages can make "
"use of this syntax. Aside from the different syntax and the `_cmd` suffix "
"instead of the `_str` suffix, non-standard command literals behave exactly "
"like non-standard string literals."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1055
msgid ""
"In the event that two modules provide non-standard string or command "
"literals with the same name, it is possible to qualify the string or command "
"literal with a module name. For instance, if both `Foo` and `Bar` provide "
"non-standard string literal `@x_str`, then one can write `Foo.x\"literal\"` "
"or `Bar.x\"literal\"` to disambiguate between the two."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1059
msgid ""
"The mechanism for user-defined string literals is deeply, profoundly "
"powerful. Not only are Julia's non-standard literals implemented using it, "
"but also the command literal syntax (``` `echo \"Hello, $person\"` ```)  is "
"implemented with the following innocuous-looking macro:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1065
#, no-wrap
msgid ""
"```julia\n"
"macro cmd(str)\n"
"    :(cmd_gen($(shell_parse(str)[1])))\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1070
msgid ""
"Of course, a large amount of complexity is hidden in the functions used in "
"this macro definition, but they are just functions, written entirely in "
"Julia. You can read their source and see precisely what they do -- and all "
"they do is construct expression objects to be inserted into your program's "
"syntax tree."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/metaprogramming.md:1071
#, no-wrap
msgid "Generated functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1079
msgid ""
"A very special macro is [`@generated`](@ref), which allows you to define so-"
"called *generated functions*.  These have the capability to generate "
"specialized code depending on the types of their arguments with more "
"flexibility and/or less code than what can be achieved with multiple "
"dispatch. While macros work with expressions at parse time and cannot access "
"the types of their inputs, a generated function gets expanded at a time when "
"the types of the arguments are known, but the function is not yet compiled."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1086
msgid ""
"Instead of performing some calculation or action, a generated function "
"declaration returns a quoted expression which then forms the body for the "
"method corresponding to the types of the arguments.  When a generated "
"function is called, the expression it returns is compiled and then run.  To "
"make this efficient, the result is usually cached. And to make this "
"inferable, only a limited subset of the language is usable. Thus, generated "
"functions provide a flexible way to move work from run time to compile time, "
"at the expense of greater restrictions on allowed constructs."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1088
msgid ""
"When defining generated functions, there are four main differences to "
"ordinary functions:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/metaprogramming.md:1102
msgid ""
"You annotate the function declaration with the `@generated` macro. This adds "
"some information to the AST that lets the compiler know that this is a "
"generated function."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/metaprogramming.md:1102
msgid ""
"In the body of the generated function you only have access to the *types* of "
"the arguments – not their values – and any function that was defined "
"*before* the definition of the generated function."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/metaprogramming.md:1102
msgid ""
"Instead of calculating something or performing some action, you return a "
"*quoted expression* which, when evaluated, does what you want."
msgstr ""

#. type: Bullet: '4. '
#: ext/julia/doc/src/manual/metaprogramming.md:1102
msgid ""
"Generated functions must not *mutate* or *observe* any non-constant global "
"state (including, for example, IO, locks, non-local dictionaries, or using "
"`hasmethod`).  This means they can only read global constants, and cannot "
"have any side effects.  In other words, they must be completely pure.  Due "
"to an implementation limitation, this also means that they currently cannot "
"define a closure or generator."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1104
msgid ""
"It's easiest to illustrate this with an example. We can declare a generated "
"function `foo` as"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1112
#, no-wrap
msgid ""
"```jldoctest generated\n"
"julia> @generated function foo(x)\n"
"           Core.println(x)\n"
"           return :(x * x)\n"
"       end\n"
"foo (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1115
msgid ""
"Note that the body returns a quoted expression, namely `:(x * x)`, rather "
"than just the value of `x * x`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1118
msgid ""
"From the caller's perspective, this is identical to a regular function; in "
"fact, you don't have to know whether you're calling a regular or generated "
"function. Let's see how `foo` behaves:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1122
#, no-wrap
msgid ""
"```jldoctest generated\n"
"julia> x = foo(2); # note: output is from println() statement in the body\n"
"Int64\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1125
#, no-wrap
msgid ""
"julia> x           # now we print x\n"
"4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1128
#, no-wrap
msgid ""
"julia> y = foo(\"bar\");\n"
"String\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1132
#, no-wrap
msgid ""
"julia> y\n"
"\"barbar\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1136
msgid ""
"So, we see that in the body of the generated function, `x` is the *type* of "
"the passed argument, and the value returned by the generated function, is "
"the result of evaluating the quoted expression we returned from the "
"definition, now with the *value* of `x`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1138
msgid ""
"What happens if we evaluate `foo` again with a type that we have already "
"used?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1143
#, no-wrap
msgid ""
"```jldoctest generated\n"
"julia> foo(4)\n"
"16\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1149
msgid ""
"Note that there is no printout of [`Int64`](@ref). We can see that the body "
"of the generated function was only executed once here, for the specific set "
"of argument types, and the result was cached.  After that, for this example, "
"the expression returned from the generated function on the first invocation "
"was re-used as the method body. However, the actual caching behavior is an "
"implementation-defined performance optimization, so it is invalid to depend "
"too closely on this behavior."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1156
msgid ""
"The number of times a generated function is generated *might* be only once, "
"but it *might* also be more often, or appear to not happen at all. As a "
"consequence, you should *never* write a generated function with side effects "
"- when, and how often, the side effects occur is undefined. (This is true "
"for macros too - and just like for macros, the use of [`eval`](@ref) in a "
"generated function is a sign that you're doing something the wrong way.) "
"However, unlike macros, the runtime system cannot correctly handle a call to "
"[`eval`](@ref), so it is disallowed."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1162
msgid ""
"It is also important to see how `@generated` functions interact with method "
"redefinition.  Following the principle that a correct `@generated` function "
"must not observe any mutable state or cause any mutation of global state, we "
"see the following behavior.  Observe that the generated function *cannot* "
"call any method that was not defined prior to the *definition* of the "
"generated function itself."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1164
msgid "Initially `f(x)` has one definition"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1168
#, no-wrap
msgid ""
"```jldoctest redefinition\n"
"julia> f(x) = \"original definition\";\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1170
msgid "Define other operations that use `f(x)`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1173
#, no-wrap
msgid ""
"```jldoctest redefinition\n"
"julia> g(x) = f(x);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1175
#, no-wrap
msgid "julia> @generated gen1(x) = f(x);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1178
#, no-wrap
msgid ""
"julia> @generated gen2(x) = :(f(x));\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1180
msgid "We now add some new definitions for `f(x)`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1183
#, no-wrap
msgid ""
"```jldoctest redefinition\n"
"julia> f(x::Int) = \"definition for Int\";\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1186
#, no-wrap
msgid ""
"julia> f(x::Type{Int}) = \"definition for Type{Int}\";\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1188
msgid "and compare how these results differ:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1192
#, no-wrap
msgid ""
"```jldoctest redefinition\n"
"julia> f(1)\n"
"\"definition for Int\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1198
#, no-wrap
msgid ""
"julia> gen1(1)\n"
"\"original definition\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1202
#, no-wrap
msgid ""
"julia> gen2(1)\n"
"\"definition for Int\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1204
msgid ""
"Each method of a generated function has its own view of defined functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1207
#, no-wrap
msgid ""
"```jldoctest redefinition\n"
"julia> @generated gen1(x::Real) = f(x);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1211
#, no-wrap
msgid ""
"julia> gen1(1)\n"
"\"definition for Type{Int}\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1216
msgid ""
"The example generated function `foo` above did not do anything a normal "
"function `foo(x) = x * x` could not do (except printing the type on the "
"first invocation, and incurring higher overhead).  However, the power of a "
"generated function lies in its ability to compute different quoted "
"expressions depending on the types passed to it:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1226
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> @generated function bar(x)\n"
"           if x <: Integer\n"
"               return :(x ^ 2)\n"
"           else\n"
"               return :(x)\n"
"           end\n"
"       end\n"
"bar (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1229
#, no-wrap
msgid ""
"julia> bar(4)\n"
"16\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1233
#, no-wrap
msgid ""
"julia> bar(\"baz\")\n"
"\"baz\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1235
msgid ""
"(although of course this contrived example would be more easily implemented "
"using multiple dispatch...)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1237
msgid ""
"Abusing this will corrupt the runtime system and cause undefined behavior:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1248
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> @generated function baz(x)\n"
"           if rand() < .9\n"
"               return :(x^2)\n"
"           else\n"
"               return :(\"boo!\")\n"
"           end\n"
"       end\n"
"baz (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1251
msgid ""
"Since the body of the generated function is non-deterministic, its behavior, "
"*and the behavior of all subsequent code* is undefined."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1253
#, no-wrap
msgid "*Don't copy these examples!*\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1256
msgid ""
"These examples are hopefully helpful to illustrate how generated functions "
"work, both in the definition end and at the call site; however, *don't copy "
"them*, for the following reasons:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/metaprogramming.md:1262
msgid ""
"the `foo` function has side-effects (the call to `Core.println`), and it is "
"undefined exactly when, how often or how many times these side-effects will "
"occur"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/metaprogramming.md:1262
msgid ""
"the `bar` function solves a problem that is better solved with multiple "
"dispatch - defining `bar(x) = x` and `bar(x::Integer) = x ^ 2` will do the "
"same thing, but it is both simpler and faster."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/metaprogramming.md:1262
msgid "the `baz` function is pathological"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1268
msgid ""
"Note that the set of operations that should not be attempted in a generated "
"function is unbounded, and the runtime system can currently only detect a "
"subset of the invalid operations. There are many other operations that will "
"simply corrupt the runtime system without notification, usually in subtle "
"ways not obviously connected to the bad definition. Because the function "
"generator is run during inference, it must respect all of the limitations of "
"that code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1270
msgid "Some operations that should not be attempted include:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/metaprogramming.md:1274
msgid "Caching of native pointers."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/metaprogramming.md:1274
msgid "Interacting with the contents or methods of `Core.Compiler` in any way."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/metaprogramming.md:1274
msgid "Observing any mutable state."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1282
#, no-wrap
msgid ""
"     * Inference on the generated function may be run at *any* time, including while your code is attempting\n"
"       to observe or mutate this state.\n"
"4. Taking any locks: C code you call out to may use locks internally, (for example, it is not problematic\n"
"   to call `malloc`, even though most implementations require locks internally) but don't attempt\n"
"   to hold or acquire any while executing Julia code.\n"
"5. Calling any function that is defined after the body of the generated function. This condition\n"
"   is relaxed for incrementally-loaded precompiled modules to allow calling any function in the module.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1285
msgid ""
"Alright, now that we have a better understanding of how generated functions "
"work, let's use them to build some more advanced (and valid) functionality..."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:1286
#, no-wrap
msgid "An advanced example"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1292
msgid ""
"Julia's base library has a an internal `sub2ind` function to calculate a "
"linear index into an n-dimensional array, based on a set of n multilinear "
"indices - in other words, to calculate the index `i` that can be used to "
"index into an array `A` using `A[i]`, instead of `A[x,y,z,...]`. One "
"possible implementation is the following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1302
#, no-wrap
msgid ""
"```jldoctest sub2ind\n"
"julia> function sub2ind_loop(dims::NTuple{N}, I::Integer...) where N\n"
"           ind = I[N] - 1\n"
"           for i = N-1:-1:1\n"
"               ind = I[i]-1 + dims[i]*ind\n"
"           end\n"
"           return ind + 1\n"
"       end\n"
"sub2ind_loop (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1306
#, no-wrap
msgid ""
"julia> sub2ind_loop((3, 5), 1, 2)\n"
"4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1308
msgid "The same thing can be done using recursion:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1311
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sub2ind_rec(dims::Tuple{}) = 1;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1314
#, no-wrap
msgid ""
"julia> sub2ind_rec(dims::Tuple{}, i1::Integer, I::Integer...) =\n"
"           i1 == 1 ? sub2ind_rec(dims, I...) : throw(BoundsError());\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1316
#, no-wrap
msgid "julia> sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer) = i1;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1319
#, no-wrap
msgid ""
"julia> sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer, I::Integer...) =\n"
"           i1 + dims[1] * (sub2ind_rec(Base.tail(dims), I...) - 1);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1323
#, no-wrap
msgid ""
"julia> sub2ind_rec((3, 5), 1, 2)\n"
"4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1326
msgid ""
"Both these implementations, although different, do essentially the same "
"thing: a runtime loop over the dimensions of the array, collecting the "
"offset in each dimension into the final index."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1331
msgid ""
"However, all the information we need for the loop is embedded in the type "
"information of the arguments.  Thus, we can utilize generated functions to "
"move the iteration to compile-time; in compiler parlance, we use generated "
"functions to manually unroll the loop. The body becomes almost identical, "
"but instead of calculating the linear index, we build up an *expression* "
"that calculates the index:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1341
#, no-wrap
msgid ""
"```jldoctest sub2ind_gen\n"
"julia> @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N\n"
"           ex = :(I[$N] - 1)\n"
"           for i = (N - 1):-1:1\n"
"               ex = :(I[$i] - 1 + dims[$i] * $ex)\n"
"           end\n"
"           return :($ex + 1)\n"
"       end\n"
"sub2ind_gen (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1345
#, no-wrap
msgid ""
"julia> sub2ind_gen((3, 5), 1, 2)\n"
"4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1347
#, no-wrap
msgid "**What code will this generate?**\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1349
msgid ""
"An easy way to find out is to extract the body into another (regular) "
"function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1355
#, no-wrap
msgid ""
"```jldoctest sub2ind_gen2\n"
"julia> @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N\n"
"           return sub2ind_gen_impl(dims, I...)\n"
"       end\n"
"sub2ind_gen (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1366
#, no-wrap
msgid ""
"julia> function sub2ind_gen_impl(dims::Type{T}, I...) where T <: NTuple{N,Any} where N\n"
"           length(I) == N || return :(error(\"partial indexing is unsupported\"))\n"
"           ex = :(I[$N] - 1)\n"
"           for i = (N - 1):-1:1\n"
"               ex = :(I[$i] - 1 + dims[$i] * $ex)\n"
"           end\n"
"           return :($ex + 1)\n"
"       end\n"
"sub2ind_gen_impl (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1368
msgid ""
"We can now execute `sub2ind_gen_impl` and examine the expression it returns:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1373
#, no-wrap
msgid ""
"```jldoctest sub2ind_gen2\n"
"julia> sub2ind_gen_impl(Tuple{Int,Int}, Int, Int)\n"
":(((I[1] - 1) + dims[1] * (I[2] - 1)) + 1)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1379
msgid ""
"So, the method body that will be used here doesn't include a loop at all - "
"just indexing into the two tuples, multiplication and addition/subtraction. "
"All the looping is performed compile-time, and we avoid looping during "
"execution entirely. Thus, we only loop *once per type*, in this case once "
"per `N` (except in edge cases where the function is generated more than once "
"- see disclaimer above)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/metaprogramming.md:1380
#, no-wrap
msgid "Optionally-generated functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1388
msgid ""
"Generated functions can achieve high efficiency at run time, but come with a "
"compile time cost: a new function body must be generated for every "
"combination of concrete argument types.  Typically, Julia is able to compile "
"\"generic\" versions of functions that will work for any arguments, but with "
"generated functions this is impossible.  This means that programs making "
"heavy use of generated functions might be impossible to statically compile."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1392
msgid ""
"To solve this problem, the language provides syntax for writing normal, non-"
"generated alternative implementations of generated functions.  Applied to "
"the `sub2ind` example above, it would look like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1413
#, no-wrap
msgid ""
"```julia\n"
"function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N\n"
"    if N != length(I)\n"
"        throw(ArgumentError(\"Number of dimensions must match number of indices.\"))\n"
"    end\n"
"    if @generated\n"
"        ex = :(I[$N] - 1)\n"
"        for i = (N - 1):-1:1\n"
"            ex = :(I[$i] - 1 + dims[$i] * $ex)\n"
"        end\n"
"        return :($ex + 1)\n"
"    else\n"
"        ind = I[N] - 1\n"
"        for i = (N - 1):-1:1\n"
"            ind = I[i] - 1 + dims[i]*ind\n"
"        end\n"
"        return ind + 1\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1420
msgid ""
"Internally, this code creates two implementations of the function: a "
"generated one where the first block in `if @generated` is used, and a normal "
"one where the `else` block is used.  Inside the `then` part of the `if "
"@generated` block, code has the same semantics as other generated functions: "
"argument names refer to types, and the code should return an expression.  "
"Multiple `if @generated` blocks may occur, in which case the generated "
"implementation uses all of the `then` blocks and the alternate "
"implementation uses all of the `else` blocks."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1426
msgid ""
"Notice that we added an error check to the top of the function.  This code "
"will be common to both versions, and is run-time code in both versions (it "
"will be quoted and returned as an expression from the generated version).  "
"That means that the values and types of local variables are not available at "
"code generation time --- the code-generation code can only see the types of "
"arguments."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/metaprogramming.md:1434
msgid ""
"In this style of definition, the code generation feature is essentially an "
"optional optimization.  The compiler will use it if convenient, but "
"otherwise may choose to use the normal implementation instead.  This style "
"is preferred, since it allows the compiler to make more decisions and "
"compile programs in more ways, and since normal code is more readable than "
"code-generating code.  However, which implementation is used depends on "
"compiler implementation details, so it is essential for the two "
"implementations to behave identically."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/strings.md:1
#, no-wrap
msgid "[Strings](@id man-strings)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:20
msgid ""
"Strings are finite sequences of characters. Of course, the real trouble "
"comes when one asks what a character is. The characters that English "
"speakers are familiar with are the letters `A`, `B`, `C`, etc., together "
"with numerals and common punctuation symbols. These characters are "
"standardized together with a mapping to integer values between 0 and 127 by "
"the [ASCII](https://en.wikipedia.org/wiki/ASCII)  standard. There are, of "
"course, many other characters used in non-English languages, including "
"variants of the ASCII characters with accents and other modifications, "
"related scripts such as Cyrillic and Greek, and scripts completely unrelated "
"to ASCII and English, including Arabic, Chinese, Hebrew, Hindi, Japanese, "
"and Korean. The [Unicode](https://en.wikipedia.org/wiki/Unicode) standard "
"tackles the complexities of what exactly a character is, and is generally "
"accepted as the definitive standard addressing this problem. Depending on "
"your needs, you can either ignore these complexities entirely and just "
"pretend that only ASCII characters exist, or you can write code that can "
"handle any of the characters or encodings that one may encounter when "
"handling non-ASCII text. Julia makes dealing with plain ASCII text simple "
"and efficient, and handling Unicode is as simple and efficient as possible. "
"In particular, you can write C-style string code to process ASCII strings, "
"and they will work as expected, both in terms of performance and semantics. "
"If such code encounters non-ASCII text, it will gracefully fail with a clear "
"error message, rather than silently introducing corrupt results. When this "
"happens, modifying the code to handle non-ASCII data is straightforward."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:22
msgid "There are a few noteworthy high-level features about Julia's strings:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:42
msgid ""
"The built-in concrete type used for strings (and string literals) in Julia "
"is [`String`](@ref).  This supports the full range of [Unicode](https://en."
"wikipedia.org/wiki/Unicode) characters via the [UTF-8](https://en.wikipedia."
"org/wiki/UTF-8) encoding. (A [`transcode`](@ref) function is provided to "
"convert to/from other Unicode encodings.)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:42
msgid ""
"All string types are subtypes of the abstract type `AbstractString`, and "
"external packages define additional `AbstractString` subtypes (e.g. for "
"other encodings).  If you define a function expecting a string argument, you "
"should declare the type as `AbstractString` in order to accept any string "
"type."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:42
msgid ""
"Like C and Java, but unlike most dynamic languages, Julia has a first-class "
"type for representing a single character, called [`AbstractChar`](@ref). The "
"built-in [`Char`](@ref) subtype of `AbstractChar` is a 32-bit primitive type "
"that can represent any Unicode character (and which is based on the UTF-8 "
"encoding)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:42
msgid ""
"As in Java, strings are immutable: the value of an `AbstractString` object "
"cannot be changed.  To construct a different string value, you construct a "
"new string from parts of other strings."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:42
msgid ""
"Conceptually, a string is a *partial function* from indices to characters: "
"for some index values, no character value is returned, and instead an "
"exception is thrown. This allows for efficient indexing into strings by the "
"byte index of an encoded representation rather than by a character index, "
"which cannot be implemented both efficiently and simply for variable-width "
"encodings of Unicode strings."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:43
#, no-wrap
msgid "[Characters](@id man-characters)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:52
msgid ""
"A `Char` value represents a single character: it is just a 32-bit primitive "
"type with a special literal representation and appropriate arithmetic "
"behaviors, and which can be converted to a numeric value representing a "
"[Unicode code point](https://en.wikipedia.org/wiki/Code_point).  (Julia "
"packages may define other subtypes of `AbstractChar`, e.g. to optimize "
"operations for other [text encodings](https://en.wikipedia.org/wiki/"
"Character_encoding).) Here is how `Char` values are input and shown:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:56
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 'x'\n"
"'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:60
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Char\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:62
msgid "You can easily convert a `Char` to its integer value, i.e. code point:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:66
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Int('x')\n"
"120\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:70
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Int64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:73
msgid ""
"On 32-bit architectures, [`typeof(ans)`](@ref) will be [`Int32`](@ref). You "
"can convert an integer value back to a `Char` just as easily:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:78
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Char(120)\n"
"'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:82
msgid ""
"Not all integer values are valid Unicode code points, but for performance, "
"the `Char` conversion does not check that every character value is valid. If "
"you want to check that each converted value is a valid code point, use the "
"[`isvalid`](@ref) function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:86
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Char(0x110000)\n"
"'\\U110000': Unicode U+110000 (category In: Invalid, too high)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:90
#, no-wrap
msgid ""
"julia> isvalid(Char, 0x110000)\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:94
msgid ""
"As of this writing, the valid Unicode code points are `U+00` through `U"
"+d7ff` and `U+e000` through `U+10ffff`. These have not all been assigned "
"intelligible meanings yet, nor are they necessarily interpretable by "
"applications, but all of these values are considered to be valid Unicode "
"characters."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:98
msgid ""
"You can input any Unicode character in single quotes using `\\u` followed by "
"up to four hexadecimal digits or `\\U` followed by up to eight hexadecimal "
"digits (the longest valid value only requires six):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:102
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> '\\u0'\n"
"'\\0': ASCII/Unicode U+0000 (category Cc: Other, control)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:105
#, no-wrap
msgid ""
"julia> '\\u78'\n"
"'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:108
#, no-wrap
msgid ""
"julia> '\\u2200'\n"
"'∀': Unicode U+2200 (category Sm: Symbol, math)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:112
#, no-wrap
msgid ""
"julia> '\\U10ffff'\n"
"'\\U10ffff': Unicode U+10ffff (category Cn: Other, not assigned)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:117
msgid ""
"Julia uses your system's locale and language settings to determine which "
"characters can be printed as-is and which must be output using the generic, "
"escaped `\\u` or `\\U` input forms. In addition to these Unicode escape "
"forms, all of [C's traditional escaped input forms](https://en.wikipedia.org/"
"wiki/C_syntax#Backslash_escapes)  can also be used:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:121
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Int('\\0')\n"
"0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:124
#, no-wrap
msgid ""
"julia> Int('\\t')\n"
"9\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:127
#, no-wrap
msgid ""
"julia> Int('\\n')\n"
"10\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:130
#, no-wrap
msgid ""
"julia> Int('\\e')\n"
"27\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:133
#, no-wrap
msgid ""
"julia> Int('\\x7f')\n"
"127\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:137
#, no-wrap
msgid ""
"julia> Int('\\177')\n"
"127\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:139
msgid ""
"You can do comparisons and a limited amount of arithmetic with `Char` values:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:143
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 'A' < 'a'\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:146
#, no-wrap
msgid ""
"julia> 'A' <= 'a' <= 'Z'\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:149
#, no-wrap
msgid ""
"julia> 'A' <= 'X' <= 'Z'\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:152
#, no-wrap
msgid ""
"julia> 'x' - 'a'\n"
"23\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:156
#, no-wrap
msgid ""
"julia> 'A' + 1\n"
"'B': ASCII/Unicode U+0042 (category Lu: Letter, uppercase)\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:157
#, no-wrap
msgid "String Basics"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:160
msgid "String literals are delimited by double quotes or triple double quotes:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:164
#, no-wrap
msgid ""
"```jldoctest helloworldstring\n"
"julia> str = \"Hello, world.\\n\"\n"
"\"Hello, world.\\n\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:165
#, no-wrap
msgid "julia> \"\"\"Contains \"quote\" characters\"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:168
msgid "\"Contains \\\"quote\\\" characters\" ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:170
msgid "If you want to extract a character from a string, you index into it:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:174
#, no-wrap
msgid ""
"```jldoctest helloworldstring\n"
"julia> str[1]\n"
"'H': ASCII/Unicode U+0048 (category Lu: Letter, uppercase)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:177
#, no-wrap
msgid ""
"julia> str[6]\n"
"',': ASCII/Unicode U+002c (category Po: Punctuation, other)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:181
#, no-wrap
msgid ""
"julia> str[end]\n"
"'\\n': ASCII/Unicode U+000a (category Cc: Other, control)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:189
msgid ""
"Many Julia objects, including strings, can be indexed with integers. The "
"index of the first element is returned by [`firstindex(str)`](@ref), and the "
"index of the last element with [`lastindex(str)`](@ref). The keyword `end` "
"can be used inside an indexing operation as shorthand for the last index "
"along the given dimension.  Most indexing in Julia is 1-based: the first "
"element of many integer-indexed objects is found at index 1. (As we will see "
"below, this does not necessarily mean that the last element is found at "
"index `n`, where `n` is the length of the string.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:192
msgid ""
"You can perform arithmetic and other operations with [`end`](@ref), just "
"like a normal value:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:196
#, no-wrap
msgid ""
"```jldoctest helloworldstring\n"
"julia> str[end-1]\n"
"'.': ASCII/Unicode U+002e (category Po: Punctuation, other)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:200
#, no-wrap
msgid ""
"julia> str[end÷2]\n"
"' ': ASCII/Unicode U+0020 (category Zs: Separator, space)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:202
msgid "Using an index less than 1 or greater than `end` raises an error:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:208
#, no-wrap
msgid ""
"```jldoctest helloworldstring\n"
"julia> str[0]\n"
"ERROR: BoundsError: attempt to access \"Hello, world.\\n\"\n"
"  at index [0]\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:215
#, no-wrap
msgid ""
"julia> str[end+1]\n"
"ERROR: BoundsError: attempt to access \"Hello, world.\\n\"\n"
"  at index [15]\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:217
msgid "You can also extract a substring using range indexing:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:222
#, no-wrap
msgid ""
"```jldoctest helloworldstring\n"
"julia> str[4:9]\n"
"\"lo, wo\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:224
msgid ""
"Notice that the expressions `str[k]` and `str[k:k]` do not give the same "
"result:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:228
#, no-wrap
msgid ""
"```jldoctest helloworldstring\n"
"julia> str[6]\n"
"',': ASCII/Unicode U+002c (category Po: Punctuation, other)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:232
#, no-wrap
msgid ""
"julia> str[6:6]\n"
"\",\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:235
msgid ""
"The former is a single character value of type `Char`, while the latter is a "
"string value that happens to contain only a single character. In Julia these "
"are very different things."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:239
msgid ""
"Range indexing makes a copy of the selected part of the original string.  "
"Alternatively, it is possible to create a view into a string using the type "
"[`SubString`](@ref), for example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:243
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> str = \"long string\"\n"
"\"long string\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:246
#, no-wrap
msgid ""
"julia> substr = SubString(str, 1, 4)\n"
"\"long\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:250
#, no-wrap
msgid ""
"julia> typeof(substr)\n"
"SubString{String}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:253
msgid ""
"Several standard functions like [`chop`](@ref), [`chomp`](@ref) or [`strip`]"
"(@ref)  return a [`SubString`](@ref)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:254
#, no-wrap
msgid "Unicode and UTF-8"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:259
msgid ""
"Julia fully supports Unicode characters and strings. As [discussed above]"
"(@ref man-characters), in character literals, Unicode code points can be "
"represented using Unicode `\\u` and `\\U` escape sequences, as well as all "
"the standard C escape sequences. These can likewise be used to write string "
"literals:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:264
#, no-wrap
msgid ""
"```jldoctest unicodestring\n"
"julia> s = \"\\u2200 x \\u2203 y\"\n"
"\"∀ x ∃ y\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:273
msgid ""
"Whether these Unicode characters are displayed as escapes or shown as "
"special characters depends on your terminal's locale settings and its "
"support for Unicode. String literals are encoded using the UTF-8 encoding. "
"UTF-8 is a variable-width encoding, meaning that not all characters are "
"encoded in the same number of bytes. In UTF-8, ASCII characters -- i.e. "
"those with code points less than 0x80 (128) -- are encoded as they are in "
"ASCII, using a single byte, while code points 0x80 and above are encoded "
"using multiple bytes -- up to four per character. This means that not every "
"byte index into a UTF-8 string is necessarily a valid index for a character. "
"If you index into a string at such an invalid byte index, an error is thrown:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:277
#, no-wrap
msgid ""
"```jldoctest unicodestring\n"
"julia> s[1]\n"
"'∀': Unicode U+2200 (category Sm: Symbol, math)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:281
#, no-wrap
msgid ""
"julia> s[2]\n"
"ERROR: StringIndexError(\"∀ x ∃ y\", 2)\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:286
#, no-wrap
msgid ""
"julia> s[3]\n"
"ERROR: StringIndexError(\"∀ x ∃ y\", 3)\n"
"Stacktrace:\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:290
#, no-wrap
msgid ""
"julia> s[4]\n"
"' ': ASCII/Unicode U+0020 (category Zs: Separator, space)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:294
msgid ""
"In this case, the character `∀` is a three-byte character, so the indices 2 "
"and 3 are invalid and the next character's index is 4; this next valid index "
"can be computed by [`nextind(s,1)`](@ref), and the next index after that by "
"`nextind(s,4)` and so on."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:296
msgid ""
"Extraction of a substring using range indexing also expects valid byte "
"indices or an error is thrown:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:300
#, no-wrap
msgid ""
"```jldoctest unicodestring\n"
"julia> s[1:1]\n"
"\"∀\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:305
#, no-wrap
msgid ""
"julia> s[1:2]\n"
"ERROR: StringIndexError(\"∀ x ∃ y\", 2)\n"
"Stacktrace:\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:309
#, no-wrap
msgid ""
"julia> s[1:4]\n"
"\"∀ \"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:316
#, no-wrap
msgid ""
"Because of variable-length encodings, the number of characters in a string (given by [`length(s)`](@ref))\n"
"is not always the same as the last index. If you iterate through the indices 1 through [`lastindex(s)`](@ref)\n"
"and index into `s`, the sequence of characters returned when errors aren't thrown is the sequence\n"
"of characters comprising the string `s`. Thus we have the identity that `length(s) <= lastindex(s)`,\n"
"since each character in a string must have its own index. The following is an inefficient and\n"
"verbose way to iterate through the characters of `s`:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:326
#, no-wrap
msgid ""
"```jldoctest unicodestring\n"
"julia> for i = firstindex(s):lastindex(s)\n"
"           try\n"
"               println(s[i])\n"
"           catch\n"
"               # ignore the index error\n"
"           end\n"
"       end\n"
"∀\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:328
#: ext/julia/doc/src/manual/strings.md:345
msgid "x"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:330
#: ext/julia/doc/src/manual/strings.md:347
msgid "∃"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:333
#: ext/julia/doc/src/manual/strings.md:350
msgid "y ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:337
msgid ""
"The blank lines actually have spaces on them. Fortunately, the above awkward "
"idiom is unnecessary for iterating through the characters in a string, since "
"you can just use the string as an iterable object, no exception handling "
"required:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:343
#, no-wrap
msgid ""
"```jldoctest unicodestring\n"
"julia> for c in s\n"
"           println(c)\n"
"       end\n"
"∀\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:356
msgid ""
"Strings in Julia can contain invalid UTF-8 code unit sequences. This "
"convention allows to treat any byte sequence as a `String`. In such "
"situations a rule is that when parsing a sequence of code units from left to "
"right characters are formed by the longest sequence of 8-bit code units that "
"matches the start of one of the following bit patterns (each `x` can be `0` "
"or `1`):"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/strings.md:363
msgid "`0xxxxxxx`;"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/strings.md:363
msgid "`110xxxxx` `10xxxxxx`;"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/strings.md:363
msgid "`1110xxxx` `10xxxxxx` `10xxxxxx`;"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/strings.md:363
msgid "`11110xxx` `10xxxxxx` `10xxxxxx` `10xxxxxx`;"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/strings.md:363
msgid "`10xxxxxx`;"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/strings.md:363
msgid "`11111xxx`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:366
msgid ""
"In particular this implies that overlong and too high code unit sequences "
"are accepted.  This rule is best explained by an example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:370
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> s = \"\\xc0\\xa0\\xe2\\x88\\xe2|\"\n"
"\"\\xc0\\xa0\\xe2\\x88\\xe2|\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:376
#, no-wrap
msgid ""
"julia> foreach(display, s)\n"
"'\\xc0\\xa0': [overlong] ASCII/Unicode U+0020 (category Zs: Separator, space)\n"
"'\\xe2\\x88': Malformed UTF-8 (category Ma: Malformed, bad data)\n"
"'\\xe2': Malformed UTF-8 (category Ma: Malformed, bad data)\n"
"'|': ASCII/Unicode U+007c (category Sm: Symbol, math)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:383
#, no-wrap
msgid ""
"julia> isvalid.(collect(s))\n"
"4-element BitArray{1}:\n"
" false\n"
" false\n"
" false\n"
"  true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:386
#, no-wrap
msgid ""
"julia> s2 = \"\\xf7\\xbf\\xbf\\xbf\"\n"
"\"\\U1fffff\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:390
#, no-wrap
msgid ""
"julia> foreach(display, s2)\n"
"'\\U1fffff': Unicode U+1fffff (category In: Invalid, too high)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:398
msgid ""
"We can see that the first two code units in the string `s` form an overlong "
"encoding of space character. It is invalid, but is accepted in a string as a "
"single character.  The next two code units form a valid start of a three-"
"byte UTF-8 sequence. However, the fifth code unit `\\xe2` is not its valid "
"continuation. Therefore code units 3 and 4 are also interpreted as malformed "
"characters in this string. Similarly code unit 5 forms a malformed character "
"because `|` is not a valid continuation to it. Finally the string `s2` "
"contains one too high code point."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:406
msgid ""
"Julia uses the UTF-8 encoding by default, and support for new encodings can "
"be added by packages.  For example, the [LegacyStrings.jl](https://github."
"com/JuliaStrings/LegacyStrings.jl) package implements `UTF16String` and "
"`UTF32String` types. Additional discussion of other encodings and how to "
"implement support for them is beyond the scope of this document for the time "
"being. For further discussion of UTF-8 encoding issues, see the section "
"below on [byte array literals](@ref man-byte-array-literals).  The "
"[`transcode`](@ref) function is provided to convert data between the various "
"UTF-xx encodings, primarily for working with external data and libraries."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:407
#, no-wrap
msgid "[Concatenation](@id man-concatenation)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:410
msgid "One of the most common and useful string operations is concatenation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:414
#, no-wrap
msgid ""
"```jldoctest stringconcat\n"
"julia> greet = \"Hello\"\n"
"\"Hello\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:417
#, no-wrap
msgid ""
"julia> whom = \"world\"\n"
"\"world\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:421
#, no-wrap
msgid ""
"julia> string(greet, \", \", whom, \".\\n\")\n"
"\"Hello, world.\\n\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:426
msgid ""
"It's important to be aware of potentially dangerous situations such as "
"concatenation of invalid UTF-8 strings.  The resulting string may contain "
"different characters than the input strings, and its number of characters "
"may be lower than sum of numbers of characters of the concatenated strings, "
"e.g.:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:430
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> a, b = \"\\xe2\\x88\", \"\\x80\"\n"
"(\"\\xe2\\x88\", \"\\x80\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:433
#, no-wrap
msgid ""
"julia> c = a*b\n"
"\"∀\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:439
#, no-wrap
msgid ""
"julia> collect.([a, b, c])\n"
"3-element Array{Array{Char,1},1}:\n"
" ['\\xe2\\x88']\n"
" ['\\x80']\n"
" ['∀']\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:446
#, no-wrap
msgid ""
"julia> length.([a, b, c])\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 1\n"
" 1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:449
msgid ""
"This situation can happen only for invalid UTF-8 strings. For valid UTF-8 "
"strings concatenation preserves all characters in strings and additivity of "
"string lengths."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:451
msgid "Julia also provides [`*`](@ref) for string concatenation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:456
#, no-wrap
msgid ""
"```jldoctest stringconcat\n"
"julia> greet * \", \" * whom * \".\\n\"\n"
"\"Hello, world.\\n\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:459
msgid ""
"While `*` may seem like a surprising choice to users of languages that "
"provide `+` for string concatenation, this use of `*` has precedent in "
"mathematics, particularly in abstract algebra."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:467
msgid ""
"In mathematics, `+` usually denotes a *commutative* operation, where the "
"order of the operands does not matter. An example of this is matrix "
"addition, where `A + B == B + A` for any matrices `A` and `B` that have the "
"same shape. In contrast, `*` typically denotes a *noncommutative* operation, "
"where the order of the operands *does* matter. An example of this is matrix "
"multiplication, where in general `A * B != B * A`. As with matrix "
"multiplication, string concatenation is noncommutative: `greet * whom != "
"whom * greet`. As such, `*` is a more natural choice for an infix string "
"concatenation operator, consistent with common mathematical use."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:473
msgid ""
"More precisely, the set of all finite-length strings *S* together with the "
"string concatenation operator `*` forms a [free monoid](https://en.wikipedia."
"org/wiki/Free_monoid) (*S*, `*`). The identity element of this set is the "
"empty string, `\"\"`. Whenever a free monoid is not commutative, the "
"operation is typically represented as `\\cdot`, `*`, or a similar symbol, "
"rather than `+`, which as stated usually implies commutativity."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:474
#, no-wrap
msgid "[Interpolation](@id string-interpolation)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:479
msgid ""
"Constructing strings using concatenation can become a bit cumbersome, "
"however. To reduce the need for these verbose calls to [`string`](@ref) or "
"repeated multiplications, Julia allows interpolation into string literals "
"using `$`, as in Perl:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:484
#, no-wrap
msgid ""
"```jldoctest stringconcat\n"
"julia> \"$greet, $whom.\\n\"\n"
"\"Hello, world.\\n\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:487
msgid ""
"This is more readable and convenient and equivalent to the above string "
"concatenation -- the system rewrites this apparent single string literal "
"into a concatenation of string literals with variables."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:490
msgid ""
"The shortest complete expression after the `$` is taken as the expression "
"whose value is to be interpolated into the string. Thus, you can interpolate "
"any expression into a string using parentheses:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:495
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> \"1 + 2 = $(1 + 2)\"\n"
"\"1 + 2 = 3\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:499
msgid ""
"Both concatenation and string interpolation call [`string`](@ref) to convert "
"objects into string form. Most non-`AbstractString` objects are converted to "
"strings closely corresponding to how they are entered as literal expressions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:506
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> v = [1,2,3]\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:510
#, no-wrap
msgid ""
"julia> \"v: $v\"\n"
"\"v: [1, 2, 3]\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:513
msgid ""
"[`string`](@ref) is the identity for `AbstractString` and `AbstractChar` "
"values, so these are interpolated into strings as themselves, unquoted and "
"unescaped:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:517
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> c = 'x'\n"
"'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:521
#, no-wrap
msgid ""
"julia> \"hi, $c\"\n"
"\"hi, x\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:523
msgid ""
"To include a literal `$` in a string literal, escape it with a backslash:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:528
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> print(\"I have \\$100 in my account.\\n\")\n"
"I have $100 in my account.\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:529
#, no-wrap
msgid "Triple-Quoted String Literals"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:533
msgid ""
"When strings are created using triple-quotes (`\"\"\"...\"\"\"`) they have "
"some special behavior that can be useful for creating longer blocks of text."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:536
msgid ""
"First, triple-quoted strings are also dedented to the level of the least-"
"indented line.  This is useful for defining strings within code that is "
"indented. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:538
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> str = \"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:541
#, no-wrap
msgid ""
"           Hello,\n"
"           world.\n"
"         \"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:544
msgid "\" Hello,\\n world.\\n\" ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:546
msgid ""
"In this case the final (empty) line before the closing `\"\"\"` sets the "
"indentation level."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:556
#, no-wrap
msgid ""
"The dedentation level is determined as the longest common starting sequence of spaces or\n"
"tabs in all lines, excluding the line following the opening `\"\"\"` and lines containing\n"
"only spaces or tabs (the line containing the closing `\"\"\"` is always included).\n"
"Then for all lines, excluding the text following the opening `\"\"\"`, the common starting\n"
"sequence is removed (including lines containing only spaces and tabs if they start with\n"
"this sequence), e.g.:\n"
"```jldoctest\n"
"julia> \"\"\"    This\n"
"         is\n"
"           a test\"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:559
#, no-wrap
msgid ""
"\"    This\\nis\\n  a test\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:562
msgid ""
"Next, if the opening `\"\"\"` is followed by a newline, the newline is "
"stripped from the resulting string."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:566
msgid "\"\"\"hello\"\"\" ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:568
msgid "is equivalent to"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:571
msgid "\"\"\" hello\"\"\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:575
msgid "but"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:578
msgid "\"\"\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:579
msgid "hello\"\"\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:583
msgid "will contain a literal newline at the beginning."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:585
msgid ""
"Stripping of the newline is performed after the dedentation. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:587
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> \"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:589
#, no-wrap
msgid ""
"         Hello,\n"
"         world.\"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:592
msgid "\"Hello,\\nworld.\" ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:594
msgid "Trailing whitespace is left unaltered."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:596
msgid ""
"Triple-quoted string literals can contain `\"` symbols without escaping."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:601
msgid ""
"Note that line breaks in literal strings, whether single- or triple-quoted, "
"result in a newline (LF) character `\\n` in the string, even if your editor "
"uses a carriage return `\\r` (CR) or CRLF combination to end lines. To "
"include a CR in a string, use an explicit escape `\\r`; for example, you can "
"enter the literal string `\"a CRLF line ending\\r\\n\"`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:602
#, no-wrap
msgid "Common Operations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:605
msgid ""
"You can lexicographically compare strings using the standard comparison "
"operators:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:609
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> \"abracadabra\" < \"xylophone\"\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:612
#, no-wrap
msgid ""
"julia> \"abracadabra\" == \"xylophone\"\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:615
#, no-wrap
msgid ""
"julia> \"Hello, world.\" != \"Goodbye, world.\"\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:619
#, no-wrap
msgid ""
"julia> \"1 + 2 = 3\" == \"1 + 2 = $(1 + 2)\"\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:622
msgid ""
"You can search for the index of a particular character using the "
"[`findfirst`](@ref) and [`findlast`](@ref) functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:626
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> findfirst(isequal('o'), \"xylophone\")\n"
"4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:629
#, no-wrap
msgid ""
"julia> findlast(isequal('o'), \"xylophone\")\n"
"7\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:632
#, no-wrap
msgid ""
"julia> findfirst(isequal('z'), \"xylophone\")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:635
msgid ""
"You can start the search for a character at a given offset by using the "
"functions [`findnext`](@ref) and [`findprev`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:639
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> findnext(isequal('o'), \"xylophone\", 1)\n"
"4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:642
#, no-wrap
msgid ""
"julia> findnext(isequal('o'), \"xylophone\", 5)\n"
"7\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:645
#, no-wrap
msgid ""
"julia> findprev(isequal('o'), \"xylophone\", 5)\n"
"4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:648
#, no-wrap
msgid ""
"julia> findnext(isequal('o'), \"xylophone\", 8)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:650
msgid ""
"You can use the [`occursin`](@ref) function to check if a substring is found "
"within a string:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:654
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> occursin(\"world\", \"Hello, world.\")\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:657
#, no-wrap
msgid ""
"julia> occursin(\"o\", \"Xylophon\")\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:660
#, no-wrap
msgid ""
"julia> occursin(\"a\", \"Xylophon\")\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:664
#, no-wrap
msgid ""
"julia> occursin('o', \"Xylophon\")\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:666
msgid ""
"The last example shows that [`occursin`](@ref) can also look for a character "
"literal."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:668
msgid ""
"Two other handy string functions are [`repeat`](@ref) and [`join`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:672
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> repeat(\".:Z:.\", 10)\n"
"\".:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:.\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:676
#, no-wrap
msgid ""
"julia> join([\"apples\", \"bananas\", \"pineapples\"], \", \", \" and \")\n"
"\"apples, bananas and pineapples\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:678
msgid "Some other useful functions include:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:688
msgid ""
"[`firstindex(str)`](@ref) gives the minimal (byte) index that can be used to "
"index into `str` (always 1 for strings, not necessarily true for other "
"containers)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:688
msgid ""
"[`lastindex(str)`](@ref) gives the maximal (byte) index that can be used to "
"index into `str`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:688
msgid "[`length(str)`](@ref) the number of characters in `str`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:688
msgid ""
"[`length(str, i, j)`](@ref) the number of valid character indices in `str` "
"from `i` to `j`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:688
msgid ""
"[`ncodeunits(str)`](@ref) number of [code units](https://en.wikipedia.org/"
"wiki/Character_encoding#Terminology) in a string."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:688
msgid ""
"[`codeunit(str, i)`](@ref) gives the code unit value in the string `str` at "
"index `i`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:688
msgid ""
"[`thisind(str, i)`](@ref) given an arbitrary index into a string find the "
"first index of the character into which the index points."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:688
msgid ""
"[`nextind(str, i, n=1)`](@ref) find the start of the `n`th character "
"starting after index `i`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:688
msgid ""
"[`prevind(str, i, n=1)`](@ref) find the start of the `n`th character "
"starting before index `i`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:689
#, no-wrap
msgid "[Non-Standard String Literals](@id non-standard-string-literals)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:698
msgid ""
"There are situations when you want to construct a string or use string "
"semantics, but the behavior of the standard string construct is not quite "
"what is needed. For these kinds of situations, Julia provides [non-standard "
"string literals](@ref). A non-standard string literal looks like a regular "
"double-quoted string literal, but is immediately prefixed by an identifier, "
"and doesn't behave quite like a normal string literal.  Regular expressions, "
"byte array literals and version number literals, as described below, are "
"some examples of non-standard string literals. Other examples are given in "
"the [Metaprogramming](@ref) section."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:699
#, no-wrap
msgid "Regular Expressions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:708
msgid ""
"Julia has Perl-compatible regular expressions (regexes), as provided by the "
"[PCRE](http://www.pcre.org/)  library. Regular expressions are related to "
"strings in two ways: the obvious connection is that regular expressions are "
"used to find regular patterns in strings; the other connection is that "
"regular expressions are themselves input as strings, which are parsed into a "
"state machine that can be used to efficiently search for patterns in "
"strings. In Julia, regular expressions are input using non-standard string "
"literals prefixed with various identifiers beginning with `r`. The most "
"basic regular expression literal without any options turned on just uses `r"
"\"...\"`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:712
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> r\"^\\s*(?:#|$)\"\n"
"r\"^\\s*(?:#|$)\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:716
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Regex\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:718
msgid "To check if a regex matches a string, use [`occursin`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:722
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> occursin(r\"^\\s*(?:#|$)\", \"not a comment\")\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:726
#, no-wrap
msgid ""
"julia> occursin(r\"^\\s*(?:#|$)\", \"# a comment\")\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:731
msgid ""
"As one can see here, [`occursin`](@ref) simply returns true or false, "
"indicating whether a match for the given regex occurs in the string. "
"Commonly, however, one wants to know not just whether a string matched, but "
"also *how* it matched. To capture this information about a match, use the "
"[`match`](@ref) function instead:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:734
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> match(r\"^\\s*(?:#|$)\", \"not a comment\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:738
#, no-wrap
msgid ""
"julia> match(r\"^\\s*(?:#|$)\", \"# a comment\")\n"
"RegexMatch(\"#\")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:742
msgid ""
"If the regular expression does not match the given string, [`match`](@ref) "
"returns [`nothing`](@ref)  -- a special value that does not print anything "
"at the interactive prompt. Other than not printing, it is a completely "
"normal value and you can test for it programmatically:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:751
#, no-wrap
msgid ""
"```julia\n"
"m = match(r\"^\\s*(?:#|$)\", line)\n"
"if m === nothing\n"
"    println(\"not a comment\")\n"
"else\n"
"    println(\"blank or comment\")\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:757
msgid ""
"If a regular expression does match, the value returned by [`match`](@ref) is "
"a `RegexMatch` object. These objects record how the expression matches, "
"including the substring that the pattern matches and any captured "
"substrings, if there are any. This example only captures the portion of the "
"substring that matches, but perhaps we want to capture any non-blank text "
"after the comment character. We could do the following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:762
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> m = match(r\"^\\s*(?:#\\s*(.*?)\\s*$|$)\", \"# a comment \")\n"
"RegexMatch(\"# a comment \", 1=\"a comment\")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:765
msgid ""
"When calling [`match`](@ref), you have the option to specify an index at "
"which to start the search. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:769
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> m = match(r\"[0-9]\",\"aaaa1aaaa2aaaa3\",1)\n"
"RegexMatch(\"1\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:772
#, no-wrap
msgid ""
"julia> m = match(r\"[0-9]\",\"aaaa1aaaa2aaaa3\",6)\n"
"RegexMatch(\"2\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:776
#, no-wrap
msgid ""
"julia> m = match(r\"[0-9]\",\"aaaa1aaaa2aaaa3\",11)\n"
"RegexMatch(\"3\")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:778
msgid "You can extract the following info from a `RegexMatch` object:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:783
msgid "the entire substring matched: `m.match`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:783
msgid "the captured substrings as an array of strings: `m.captures`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:783
msgid "the offset at which the whole match begins: `m.offset`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:783
msgid "the offsets of the captured substrings as a vector: `m.offsets`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:787
msgid ""
"For when a capture doesn't match, instead of a substring, `m.captures` "
"contains `nothing` in that position, and `m.offsets` has a zero offset "
"(recall that indices in Julia are 1-based, so a zero offset into a string is "
"invalid). Here is a pair of somewhat contrived examples:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:791
#, no-wrap
msgid ""
"```jldoctest acdmatch\n"
"julia> m = match(r\"(a|b)(c)?(d)\", \"acd\")\n"
"RegexMatch(\"acd\", 1=\"a\", 2=\"c\", 3=\"d\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:794
#, no-wrap
msgid ""
"julia> m.match\n"
"\"acd\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:800
#, no-wrap
msgid ""
"julia> m.captures\n"
"3-element Array{Union{Nothing, SubString{String}},1}:\n"
" \"a\"\n"
" \"c\"\n"
" \"d\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:803
#: ext/julia/doc/src/manual/strings.md:824
#, no-wrap
msgid ""
"julia> m.offset\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:809
#, no-wrap
msgid ""
"julia> m.offsets\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:812
#, no-wrap
msgid ""
"julia> m = match(r\"(a|b)(c)?(d)\", \"ad\")\n"
"RegexMatch(\"ad\", 1=\"a\", 2=nothing, 3=\"d\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:815
#, no-wrap
msgid ""
"julia> m.match\n"
"\"ad\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:821
#, no-wrap
msgid ""
"julia> m.captures\n"
"3-element Array{Union{Nothing, SubString{String}},1}:\n"
" \"a\"\n"
" nothing\n"
" \"d\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:831
#, no-wrap
msgid ""
"julia> m.offsets\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 0\n"
" 2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:834
msgid ""
"It is convenient to have captures returned as an array so that one can use "
"destructuring syntax to bind them to local variables:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:839
#, no-wrap
msgid ""
"```jldoctest acdmatch\n"
"julia> first, second, third = m.captures; first\n"
"\"a\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:842
msgid ""
"Captures can also be accessed by indexing the `RegexMatch` object with the "
"number or name of the capture group:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:846
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> m=match(r\"(?<hour>\\d+):(?<minute>\\d+)\",\"12:45\")\n"
"RegexMatch(\"12:45\", hour=\"12\", minute=\"45\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:849
#, no-wrap
msgid ""
"julia> m[:minute]\n"
"\"45\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:853
#, no-wrap
msgid ""
"julia> m[2]\n"
"\"45\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:858
#, no-wrap
msgid ""
"Captures can be referenced in a substitution string when using [`replace`](@ref) by using `\\n`\n"
"to refer to the nth capture group and prefixing the substitution string with `s`. Capture group\n"
"0 refers to the entire match object. Named capture groups can be referenced in the substitution\n"
"with `\\g<groupname>`. For example:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:863
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> replace(\"first second\", r\"(\\w+) (?<agroup>\\w+)\" => s\"\\g<agroup> \\1\")\n"
"\"second first\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:865
#, no-wrap
msgid "Numbered capture groups can also be referenced as `\\g<n>` for disambiguation, as in:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:870
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> replace(\"a\", r\".\" => s\"\\g<0>1\")\n"
"\"a1\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:874
msgid ""
"You can modify the behavior of regular expressions by some combination of "
"the flags `i`, `m`, `s`, and `x` after the closing double quote mark. These "
"flags have the same meaning as they do in Perl, as explained in this excerpt "
"from the [perlre manpage](http://perldoc.perl.org/perlre.html#Modifiers):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:877
#, no-wrap
msgid ""
"```\n"
"i   Do case-insensitive pattern matching.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:883
#, no-wrap
msgid ""
"    If locale matching rules are in effect, the case map is taken\n"
"    from the current locale for code points less than 255, and\n"
"    from Unicode rules for larger code points. However, matches\n"
"    that would cross the Unicode rules/non-Unicode rules boundary\n"
"    (ords 255/256) will not succeed.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:887
#, no-wrap
msgid ""
"m   Treat string as multiple lines.  That is, change \"^\" and \"$\"\n"
"    from matching the start or end of the string to matching the\n"
"    start or end of any line anywhere within the string.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:891
#, no-wrap
msgid ""
"s   Treat string as single line.  That is, change \".\" to match any\n"
"    character whatsoever, even a newline, which normally it would\n"
"    not match.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:896
#, no-wrap
msgid ""
"    Used together, as r\"\"ms, they let the \".\" match any character\n"
"    whatsoever, while still allowing \"^\" and \"$\" to match,\n"
"    respectively, just after and just before newlines within the\n"
"    string.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:904
#, no-wrap
msgid ""
"x   Tells the regular expression parser to ignore most whitespace\n"
"    that is neither backslashed nor within a character class. You\n"
"    can use this to break up your regular expression into\n"
"    (slightly) more readable parts. The '#' character is also\n"
"    treated as a metacharacter introducing a comment, just as in\n"
"    ordinary code.\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:906
msgid "For example, the following regex has all three flags turned on:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:910
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> r\"a+.*b+.*?d$\"ism\n"
"r\"a+.*b+.*?d$\"ims\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:914
#, no-wrap
msgid ""
"julia> match(r\"a+.*b+.*?d$\"ism, \"Goodbye,\\nOh, angry,\\nBad world\\n\")\n"
"RegexMatch(\"angry,\\nBad world\")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:918
msgid ""
"The `r\"...\"` literal is constructed without interpolation and unescaping "
"(except for quotation mark `\"` which still has to be escaped). Here is an "
"example showing the difference from standard string literals:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:922
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> x = 10\n"
"10\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:925
#, no-wrap
msgid ""
"julia> r\"$x\"\n"
"r\"$x\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:928
#, no-wrap
msgid ""
"julia> \"$x\"\n"
"\"10\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:931
#, no-wrap
msgid ""
"julia> r\"\\x\"\n"
"r\"\\x\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:935
#, no-wrap
msgid ""
"julia> \"\\x\"\n"
"ERROR: syntax: invalid escape sequence\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:938
msgid ""
"Triple-quoted regex strings, of the form `r\"\"\"...\"\"\"`, are also "
"supported (and may be convenient for regular expressions containing "
"quotation marks or newlines)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:940
msgid ""
"The `Regex()` constructor may be used to create a valid regex string "
"programmatically.  This permits using the contents of string variables and "
"other string operations when constructing the regex string. Any of the regex "
"codes above can be used within the single string argument to `Regex()`. Here "
"are some examples:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:946
#, no-wrap
msgid ""
"julia> d = Date(1962,7,10)\n"
"1962-07-10\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:949
#, no-wrap
msgid ""
"julia> regex_d = Regex(\"Day \" * string(day(d)))\n"
"r\"Day 10\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:952
#, no-wrap
msgid ""
"julia> match(regex_d, \"It happened on Day 10\")\n"
"RegexMatch(\"Day 10\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:955
#, no-wrap
msgid ""
"julia> name = \"Jon\"\n"
"\"Jon\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:958
#, no-wrap
msgid ""
"julia> regex_name = Regex(\"[\\\"( ]$name[\\\") ]\")  # interpolate value of name\n"
"r\"[\\\"( ]Jon[\\\") ]\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:961
#, no-wrap
msgid ""
"julia> match(regex_name,\" Jon \")\n"
"RegexMatch(\" Jon \")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:965
#, no-wrap
msgid ""
"julia> match(regex_name,\"[Jon]\") === nothing\n"
"true\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:966
#, no-wrap
msgid "[Byte Array Literals](@id man-byte-array-literals)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:972
msgid ""
"Another useful non-standard string literal is the byte-array string literal: "
"`b\"...\"`. This form lets you use string notation to express read only "
"literal byte arrays -- i.e. arrays of [`UInt8`](@ref) values. The type of "
"those objects is `CodeUnits{UInt8, String}`.  The rules for byte array "
"literals are the following:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:976
msgid "ASCII characters and ASCII escapes produce a single byte."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:976
msgid ""
"`\\x` and octal escape sequences produce the *byte* corresponding to the "
"escape value."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/strings.md:976
msgid ""
"Unicode escape sequences produce a sequence of bytes encoding that code "
"point in UTF-8."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:981
msgid ""
"There is some overlap between these rules since the behavior of `\\x` and "
"octal escapes less than 0x80 (128) are covered by both of the first two "
"rules, but here these rules agree. Together, these rules allow one to easily "
"use ASCII characters, arbitrary byte values, and UTF-8 sequences to produce "
"arrays of bytes. Here is an example using all three:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:994
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> b\"DATA\\xff\\u2200\"\n"
"8-element Base.CodeUnits{UInt8,String}:\n"
" 0x44\n"
" 0x41\n"
" 0x54\n"
" 0x41\n"
" 0xff\n"
" 0xe2\n"
" 0x88\n"
" 0x80\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:998
msgid ""
"The ASCII string \"DATA\" corresponds to the bytes 68, 65, 84, 65. `\\xff` "
"produces the single byte 255.  The Unicode escape `\\u2200` is encoded in "
"UTF-8 as the three bytes 226, 136, 128. Note that the resulting byte array "
"does not correspond to a valid UTF-8 string:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1003
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> isvalid(\"DATA\\xff\\u2200\")\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1006
msgid ""
"As it was mentioned `CodeUnits{UInt8,String}` type behaves like read only "
"array of `UInt8` and if you need a standard vector you can convert it using "
"`Vector{UInt8}`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1013
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = b\"123\"\n"
"3-element Base.CodeUnits{UInt8,String}:\n"
" 0x31\n"
" 0x32\n"
" 0x33\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1016
#, no-wrap
msgid ""
"julia> x[1]\n"
"0x31\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1020
#, no-wrap
msgid ""
"julia> x[1] = 0x32\n"
"ERROR: setindex! not defined for Base.CodeUnits{UInt8,String}\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1027
#, no-wrap
msgid ""
"julia> Vector{UInt8}(x)\n"
"3-element Array{UInt8,1}:\n"
" 0x31\n"
" 0x32\n"
" 0x33\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1031
msgid ""
"Also observe the significant distinction between `\\xff` and `\\uff`: the "
"former escape sequence encodes the *byte 255*, whereas the latter escape "
"sequence represents the *code point 255*, which is encoded as two bytes in "
"UTF-8:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1036
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> b\"\\xff\"\n"
"1-element Base.CodeUnits{UInt8,String}:\n"
" 0xff\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1042
#, no-wrap
msgid ""
"julia> b\"\\uff\"\n"
"2-element Base.CodeUnits{UInt8,String}:\n"
" 0xc3\n"
" 0xbf\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1044
msgid "Character literals use the same behavior."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1051
msgid ""
"For code points less than `\\u80`, it happens that the UTF-8 encoding of "
"each code point is just the single byte produced by the corresponding `\\x` "
"escape, so the distinction can safely be ignored. For the escapes `\\x80` "
"through `\\xff` as compared to `\\u80` through `\\uff`, however, there is a "
"major difference: the former escapes all encode single bytes, which -- "
"unless followed by very specific continuation bytes -- do not form valid "
"UTF-8 data, whereas the latter escapes all represent Unicode code points "
"with two-byte encodings."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1057
msgid ""
"If this is all extremely confusing, try reading [\"The Absolute Minimum "
"Every Software Developer Absolutely, Positively Must Know About Unicode and "
"Character Sets\"](https://www.joelonsoftware.com/2003/10/08/the-absolute-"
"minimum-every-software-developer-absolutely-positively-must-know-about-"
"unicode-and-character-sets-no-excuses/).  It's an excellent introduction to "
"Unicode and UTF-8, and may help alleviate some confusion regarding the "
"matter."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:1058
#, no-wrap
msgid "[Version Number Literals](@id man-version-number-literals)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1069
msgid ""
"Version numbers can easily be expressed with non-standard string literals of "
"the form [`v\"...\"`](@ref @v_str).  Version number literals create "
"[`VersionNumber`](@ref) objects which follow the specifications of [semantic "
"versioning](https://semver.org/), and therefore are composed of major, minor "
"and patch numeric values, followed by pre-release and build alpha-numeric "
"annotations. For example, `v\"0.2.1-rc1+win64\"` is broken into major "
"version `0`, minor version `2`, patch version `1`, pre-release `rc1` and "
"build `win64`. When entering a version literal, everything except the major "
"version number is optional, therefore e.g.  `v\"0.2\"` is equivalent to `v"
"\"0.2.0\"` (with empty pre-release/build annotations), `v\"2\"` is "
"equivalent to `v\"2.0.0\"`, and so on."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1073
msgid ""
"`VersionNumber` objects are mostly useful to easily and correctly compare "
"two (or more) versions.  For example, the constant [`VERSION`](@ref) holds "
"Julia version number as a `VersionNumber` object, and therefore one can "
"define some version-specific behavior using simple statements as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1079
#, no-wrap
msgid ""
"```julia\n"
"if v\"0.2\" <= VERSION < v\"0.3-\"\n"
"    # do something specific to 0.2 release series\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1086
#, no-wrap
msgid ""
"Note that in the above example the non-standard version number `v\"0.3-\"` is used, with a trailing\n"
"`-`: this notation is a Julia extension of the standard, and it's used to indicate a version which\n"
"is lower than any `0.3` release, including all of its pre-releases. So in the above example the\n"
"code would only run with stable `0.2` versions, and exclude such versions as `v\"0.3.0-rc1\"`. In\n"
"order to also allow for unstable (i.e. pre-release) `0.2` versions, the lower bound check should\n"
"be modified like this: `v\"0.2-\" <= VERSION`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1091
#, no-wrap
msgid ""
"Another non-standard version specification extension allows one to use a trailing `+` to express\n"
"an upper limit on build versions, e.g.  `VERSION > v\"0.2-rc1+\"` can be used to mean any version\n"
"above `0.2-rc1` and any of its builds: it will return `false` for version `v\"0.2-rc1+win64\"` and\n"
"`true` for `v\"0.2-rc2\"`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1096
msgid ""
"It is good practice to use such special versions in comparisons "
"(particularly, the trailing `-` should always be used on upper bounds unless "
"there's a good reason not to), but they must not be used as the actual "
"version number of anything, as they are invalid in the semantic versioning "
"scheme."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1099
msgid ""
"Besides being used for the [`VERSION`](@ref) constant, `VersionNumber` "
"objects are widely used in the `Pkg` module, to specify packages versions "
"and their dependencies."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/strings.md:1100
#, no-wrap
msgid "[Raw String Literals](@id man-raw-string-literals)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1108
msgid ""
"Raw strings without interpolation or unescaping can be expressed with non-"
"standard string literals of the form `raw\"...\"`. Raw string literals "
"create ordinary `String` objects which contain the enclosed contents exactly "
"as entered with no interpolation or unescaping. This is useful for strings "
"which contain code or markup in other languages which use `$` or `\\` as "
"special characters."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1113
msgid ""
"The exception is that quotation marks still must be escaped, e.g. `raw\"\\"
"\"\"` is equivalent to `\"\\\"\"`.  To make it possible to express all "
"strings, backslashes then also must be escaped, but only when appearing "
"right before a quote character:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1118
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> println(raw\"\\\\ \\\\\\\"\")\n"
"\\\\ \\\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/strings.md:1122
msgid ""
"Notice that the first two backslashes appear verbatim in the output, since "
"they do not precede a quote character.  However, the next backslash "
"character escapes the backslash that follows it, and the last backslash "
"escapes a quote, since these backslashes appear before a quote."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/parallel-computing.md:1
#, no-wrap
msgid "Parallel Computing"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:5
msgid ""
"For newcomers to multi-threading and parallel computing it can be useful to "
"first appreciate the different levels of parallelism offered by Julia. We "
"can divide them in three main categories :"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/parallel-computing.md:9
msgid "Julia Coroutines (Green Threading)"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/parallel-computing.md:9
#: ext/julia/doc/src/base/multi-threading.md:2
#, no-wrap
msgid "Multi-Threading"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/parallel-computing.md:9
#: ext/julia/doc/src/manual/parallel-computing.md:507
#, no-wrap
msgid "Multi-Core or Distributed Processing"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:14
msgid ""
"We will first consider Julia [Tasks (aka Coroutines)](@ref man-tasks) and "
"other modules that rely on the Julia runtime library, that allow us to "
"suspend and resume computations with full control of inter-`Tasks` "
"communication without having to manually interface with the operating "
"system's scheduler.  Julia also supports communication between `Tasks` "
"through operations like [`wait`](@ref) and [`fetch`](@ref).  Communication "
"and data synchronization is managed through [`Channel`](@ref)s, which are "
"the conduits that provide inter-`Tasks` communication."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:23
msgid ""
"Julia also supports experimental multi-threading, where execution is forked "
"and an anonymous function is run across all threads.  Known as the fork-join "
"approach, parallel threads execute independently, and must ultimately be "
"joined in Julia's main thread to allow serial execution to continue.  Multi-"
"threading is supported using the `Base.Threads` module that is still "
"considered experimental, as Julia is not yet fully thread-safe. In "
"particular segfaults seem to occur during I/O operations and task "
"switching.  As an up-to-date reference, keep an eye on [the issue tracker]"
"(https://github.com/JuliaLang/julia/issues?q=is%3Aopen+is%3Aissue+label"
"%3Amultithreading).  Multi-Threading should only be used if you take into "
"consideration global variables, locks and atomics, all of which are "
"explained later."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:27
msgid ""
"In the end we will present Julia's approach to distributed and parallel "
"computing. With scientific computing in mind, Julia natively implements "
"interfaces to distribute a process across multiple cores or machines.  Also "
"we will mention useful external packages for distributed programming like "
"`MPI.jl` and `DistributedArrays.jl`."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/parallel-computing.md:28
#, no-wrap
msgid "Coroutines"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:38
msgid ""
"Julia's parallel programming platform uses [Tasks (aka Coroutines)](@ref man-"
"tasks) to switch among multiple computations.  To express an order of "
"execution between lightweight threads communication primitives are "
"necessary.  Julia offers `Channel(func::Function, ctype=Any, csize=0, "
"taskref=nothing)` that creates a new task from `func`, binds it to a new "
"channel of type `ctype` and size `csize` and schedule the task.  `Channels` "
"can serve as a way to communicate between tasks, as `Channel{T}(sz::Int)` "
"creates a buffered channel of type `T` and size `sz`.  Whenever code "
"performs a communication operation like [`fetch`](@ref) or [`wait`](@ref), "
"the current task is suspended and a scheduler picks another task to run.  A "
"task is restarted when the event it is waiting for completes."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:44
msgid ""
"For many problems, it is not necessary to think about tasks directly. "
"However, they can be used to wait for multiple events at the same time, "
"which provides for *dynamic scheduling*. In dynamic scheduling, a program "
"decides what to compute or where to compute it based on when other jobs "
"finish. This is needed for unpredictable or unbalanced workloads, where we "
"want to assign more work to processes only when they finish their current "
"tasks."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:45
#, no-wrap
msgid "Channels"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:50
msgid ""
"The section on [`Task`](@ref)s in [Control Flow](@ref) discussed the "
"execution of multiple functions in a co-operative manner. [`Channel`](@ref)s "
"can be quite useful to pass data between running tasks, particularly those "
"involving I/O operations."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:55
msgid ""
"Examples of operations involving I/O include reading/writing to files, "
"accessing web services, executing external programs, etc. In all these "
"cases, overall execution time can be improved if other tasks can be run "
"while a file is being read, or while waiting for an external service/program "
"to complete."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:57
msgid ""
"A channel can be visualized as a pipe, i.e., it has a write end and a read "
"end :"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:62
msgid ""
"Multiple writers in different tasks can write to the same channel "
"concurrently via [`put!`](@ref)  calls."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:62
msgid ""
"Multiple readers in different tasks can read data concurrently via [`take!`]"
"(@ref) calls."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:62
msgid "As an example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:67
#, no-wrap
msgid ""
"    ```julia\n"
"    # Given Channels c1 and c2,\n"
"    c1 = Channel(32)\n"
"    c2 = Channel(32)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:77
#, no-wrap
msgid ""
"    # and a function `foo` which reads items from c1, processes the item read\n"
"    # and writes a result to c2,\n"
"    function foo()\n"
"        while true\n"
"            data = take!(c1)\n"
"            [...]               # process data\n"
"            put!(c2, result)    # write out result\n"
"        end\n"
"    end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:95
#, no-wrap
msgid ""
"    # we can schedule `n` instances of `foo` to be active concurrently.\n"
"    for _ in 1:n\n"
"        @async foo()\n"
"    end\n"
"    ```\n"
"* Channels are created via the `Channel{T}(sz)` constructor. The channel will only hold objects\n"
"  of type `T`. If the type is not specified, the channel can hold objects of any type. `sz` refers\n"
"  to the maximum number of elements that can be held in the channel at any time. For example, `Channel(32)`\n"
"  creates a channel that can hold a maximum of 32 objects of any type. A `Channel{MyType}(64)` can\n"
"  hold up to 64 objects of `MyType` at any time.\n"
"* If a [`Channel`](@ref) is empty, readers (on a [`take!`](@ref) call) will block until data is available.\n"
"* If a [`Channel`](@ref) is full, writers (on a [`put!`](@ref) call) will block until space becomes available.\n"
"* [`isready`](@ref) tests for the presence of any object in the channel, while [`wait`](@ref)\n"
"  waits for an object to become available.\n"
"* A [`Channel`](@ref) is in an open state initially. This means that it can be read from and written to\n"
"  freely via [`take!`](@ref) and [`put!`](@ref) calls. [`close`](@ref) closes a [`Channel`](@ref).\n"
"  On a closed [`Channel`](@ref), [`put!`](@ref) will fail. For example:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:98
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> c = Channel(2);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:101
#, no-wrap
msgid ""
"julia> put!(c, 1) # `put!` on an open channel succeeds\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:103
#, no-wrap
msgid "julia> close(c);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:109
#, no-wrap
msgid ""
"julia> put!(c, 2) # `put!` on a closed channel throws an exception.\n"
"ERROR: InvalidStateException(\"Channel is closed.\",:closed)\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:112
msgid ""
"[`take!`](@ref) and [`fetch`](@ref) (which retrieves but does not remove the "
"value) on a closed channel successfully return any existing values until it "
"is emptied. Continuing the above example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:116
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> fetch(c) # Any number of `fetch` calls succeed.\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:119
#, no-wrap
msgid ""
"julia> fetch(c)\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:122
#, no-wrap
msgid ""
"julia> take!(c) # The first `take!` removes the value.\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:128
#, no-wrap
msgid ""
"julia> take!(c) # No more data available on a closed channel.\n"
"ERROR: InvalidStateException(\"Channel is closed.\",:closed)\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:132
msgid ""
"A `Channel` can be used as an iterable object in a `for` loop, in which case "
"the loop runs as long as the `Channel` has data or is open. The loop "
"variable takes on all values added to the `Channel`. The `for` loop is "
"terminated once the `Channel` is closed and emptied."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:134
msgid ""
"For example, the following would cause the `for` loop to wait for more data:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:137
#: ext/julia/doc/src/manual/parallel-computing.md:147
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> c = Channel{Int}(10);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:139
#, no-wrap
msgid "julia> foreach(i->put!(c, i), 1:3) # add a few entries\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:142
#, no-wrap
msgid ""
"julia> data = [i for i in c]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:144
msgid "while this will return after reading all data:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:149
#, no-wrap
msgid "julia> foreach(i->put!(c, i), 1:3); # add a few entries\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:151
#, no-wrap
msgid "julia> close(c);                    # `for` loops can exit\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:158
#, no-wrap
msgid ""
"julia> data = [i for i in c]\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:164
msgid ""
"Consider a simple example using channels for inter-task communication. We "
"start 4 tasks to process data from a single `jobs` channel. Jobs, identified "
"by an id (`job_id`), are written to the channel.  Each task in this "
"simulation reads a `job_id`, waits for a random amount of time and writes "
"back a tuple of `job_id` and the simulated time to the results channel. "
"Finally all the `results` are printed out."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:167
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> const jobs = Channel{Int}(32);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:169
#, no-wrap
msgid "julia> const results = Channel{Tuple}(32);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:178
#, no-wrap
msgid ""
"julia> function do_work()\n"
"           for job_id in jobs\n"
"               exec_time = rand()\n"
"               sleep(exec_time)                # simulates elapsed time doing actual work\n"
"                                               # typically performed externally.\n"
"               put!(results, (job_id, exec_time))\n"
"           end\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:184
#: ext/julia/doc/src/manual/parallel-computing.md:1079
#, no-wrap
msgid ""
"julia> function make_jobs(n)\n"
"           for i in 1:n\n"
"               put!(jobs, i)\n"
"           end\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:186
#: ext/julia/doc/src/manual/parallel-computing.md:1081
#, no-wrap
msgid "julia> n = 12;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:188
#: ext/julia/doc/src/manual/parallel-computing.md:1083
#, no-wrap
msgid "julia> @async make_jobs(n); # feed the jobs channel with \"n\" jobs\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:192
#, no-wrap
msgid ""
"julia> for i in 1:4 # start 4 tasks to process requests in parallel\n"
"           @async do_work()\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:212
#, no-wrap
msgid ""
"julia> @elapsed while n > 0 # print out results\n"
"           job_id, exec_time = take!(results)\n"
"           println(\"$job_id finished in $(round(exec_time; digits=2)) seconds\")\n"
"           global n = n - 1\n"
"       end\n"
"4 finished in 0.22 seconds\n"
"3 finished in 0.45 seconds\n"
"1 finished in 0.5 seconds\n"
"7 finished in 0.14 seconds\n"
"2 finished in 0.78 seconds\n"
"5 finished in 0.9 seconds\n"
"9 finished in 0.36 seconds\n"
"6 finished in 0.87 seconds\n"
"8 finished in 0.79 seconds\n"
"10 finished in 0.64 seconds\n"
"12 finished in 0.5 seconds\n"
"11 finished in 0.97 seconds\n"
"0.029772311\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:218
msgid ""
"The current version of Julia multiplexes all tasks onto a single OS thread. "
"Thus, while tasks involving I/O operations benefit from parallel execution, "
"compute bound tasks are effectively executed sequentially on a single OS "
"thread. Future versions of Julia may support scheduling of tasks on multiple "
"threads, in which case compute bound tasks will see benefits of parallel "
"execution too."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/parallel-computing.md:219
#, no-wrap
msgid "Multi-Threading (Experimental)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:223
msgid ""
"In addition to tasks Julia forwards natively supports multi-threading.  Note "
"that this section is experimental and the interfaces may change in the "
"future."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:224
#, no-wrap
msgid "Setup"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:228
msgid ""
"By default, Julia starts up with a single thread of execution. This can be "
"verified by using the command [`Threads.nthreads()`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:233
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> Threads.nthreads()\n"
"1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:236
msgid ""
"The number of threads Julia starts up with is controlled by an environment "
"variable called `JULIA_NUM_THREADS`.  Now, let's start up Julia with 4 "
"threads:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:240
msgid "```bash export JULIA_NUM_THREADS=4 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:244
msgid ""
"(The above command works on bourne shells on Linux and OSX. Note that if "
"you're using a C shell on these platforms, you should use the keyword `set` "
"instead of `export`. If you're on Windows, start up the command line in the "
"location of `julia.exe` and use `set` instead of `export`.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:246
msgid "Let's verify there are 4 threads at our disposal."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:251
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> Threads.nthreads()\n"
"4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:253
msgid ""
"But we are currently on the master thread. To check, we use the function "
"[`Threads.threadid`](@ref)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:258
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> Threads.threadid()\n"
"1\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:259
#, no-wrap
msgid "The `@threads` Macro"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:262
msgid ""
"Let's work a simple example using our native threads. Let us create an array "
"of zeros:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:277
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> a = zeros(10)\n"
"10-element Array{Float64,1}:\n"
" 0.0\n"
" 0.0\n"
" 0.0\n"
" 0.0\n"
" 0.0\n"
" 0.0\n"
" 0.0\n"
" 0.0\n"
" 0.0\n"
" 0.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:280
msgid ""
"Let us operate on this array simultaneously using 4 threads. We'll have each "
"thread write its thread ID into each location."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:283
msgid ""
"Julia supports parallel loops using the [`Threads.@threads`](@ref) macro. "
"This macro is affixed in front of a `for` loop to indicate to Julia that the "
"loop is a multi-threaded region:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:289
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> Threads.@threads for i = 1:10\n"
"           a[i] = Threads.threadid()\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:292
msgid ""
"The iteration space is split amongst the threads, after which each thread "
"writes its thread ID to its assigned locations:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:307
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> a\n"
"10-element Array{Float64,1}:\n"
" 1.0\n"
" 1.0\n"
" 1.0\n"
" 2.0\n"
" 2.0\n"
" 2.0\n"
" 3.0\n"
" 3.0\n"
" 4.0\n"
" 4.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:309
msgid ""
"Note that [`Threads.@threads`](@ref) does not have an optional reduction "
"parameter like [`@distributed`](@ref)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:310
#, no-wrap
msgid "Atomic Operations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:316
msgid ""
"Julia supports accessing and modifying values *atomically*, that is, in a "
"thread-safe way to avoid [race conditions](https://en.wikipedia.org/wiki/"
"Race_condition). A value (which must be of a primitive type) can be wrapped "
"as [`Threads.Atomic`](@ref) to indicate it must be accessed in this way.  "
"Here we can see an example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:319
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> i = Threads.Atomic{Int}(0);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:321
#, no-wrap
msgid "julia> ids = zeros(4);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:323
#, no-wrap
msgid "julia> old_is = zeros(4);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:328
#, no-wrap
msgid ""
"julia> Threads.@threads for id in 1:4\n"
"           old_is[id] = Threads.atomic_add!(i, id)\n"
"           ids[id] = id\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:335
#, no-wrap
msgid ""
"julia> old_is\n"
"4-element Array{Float64,1}:\n"
" 0.0\n"
" 1.0\n"
" 7.0\n"
" 3.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:343
#, no-wrap
msgid ""
"julia> ids\n"
"4-element Array{Float64,1}:\n"
" 1.0\n"
" 2.0\n"
" 3.0\n"
" 4.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:347
msgid ""
"Had we tried to do the addition without the atomic tag, we might have gotten "
"the wrong answer due to a race condition. An example of what would happen if "
"we didn't avoid the race:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:350
#: ext/julia/doc/src/manual/parallel-computing.md:394
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> using Base.Threads\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:353
#: ext/julia/doc/src/manual/parallel-computing.md:397
#, no-wrap
msgid ""
"julia> nthreads()\n"
"4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:356
#, no-wrap
msgid ""
"julia> acc = Ref(0)\n"
"Base.RefValue{Int64}(0)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:360
#, no-wrap
msgid ""
"julia> @threads for i in 1:1000\n"
"          acc[] += 1\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:363
#, no-wrap
msgid ""
"julia> acc[]\n"
"926\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:366
#, no-wrap
msgid ""
"julia> acc = Atomic{Int64}(0)\n"
"Atomic{Int64}(0)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:370
#, no-wrap
msgid ""
"julia> @threads for i in 1:1000\n"
"          atomic_add!(acc, 1)\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:374
#, no-wrap
msgid ""
"julia> acc[]\n"
"1000\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:380
#, no-wrap
msgid ""
"!!! note\n"
"    Not *all* primitive types can be wrapped in an `Atomic` tag. Supported types\n"
"    are `Int8`, `Int16`, `Int32`, `Int64`, `Int128`, `UInt8`, `UInt16`, `UInt32`,\n"
"    `UInt64`, `UInt128`, `Float16`, `Float32`, and `Float64`. Additionally,\n"
"    `Int128` and `UInt128` are not supported on AAarch32 and ppc64le.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:381
#, no-wrap
msgid "Side effects and mutable function arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:391
msgid ""
"When using multi-threading we have to be careful when using functions that "
"are not [pure](https://en.wikipedia.org/wiki/Pure_function) as we might get "
"a wrong answer.  For instance functions that have their [name ending with `!"
"`](https://docs.julialang.org/en/latest/manual/style-guide/#Append-!-to-"
"names-of-functions-that-modify-their-arguments-1)  by convention modify "
"their arguments and thus are not pure. However, there are functions that "
"have side effects and their name does not end with `!`. For instance "
"[`findfirst(regex, str)`](@ref) mutates its `regex` argument or [`rand()`]"
"(@ref) changes `Base.GLOBAL_RNG` :"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:408
#, no-wrap
msgid ""
"julia> function f()\n"
"           s = repeat([\"123\", \"213\", \"231\"], outer=1000)\n"
"           x = similar(s, Int)\n"
"           rx = r\"1\"\n"
"           @threads for i in 1:3000\n"
"               x[i] = findfirst(rx, s[i]).start\n"
"           end\n"
"           count(v -> v == 1, x)\n"
"       end\n"
"f (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:411
#, no-wrap
msgid ""
"julia> f() # the correct result is 1000\n"
"1017\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:420
#, no-wrap
msgid ""
"julia> function g()\n"
"           a = zeros(1000)\n"
"           @threads for i in 1:1000\n"
"               a[i] = rand()\n"
"           end\n"
"           length(unique(a))\n"
"       end\n"
"g (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:424
#, no-wrap
msgid ""
"julia> Random.seed!(1); g() # the result for a single thread is 1000\n"
"781\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:427
msgid ""
"In such cases one should redesign the code to avoid the possibility of a "
"race condition or use [synchronization primitives](https://docs.julialang."
"org/en/latest/base/multi-threading/#Synchronization-Primitives-1)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:430
msgid ""
"For example in order to fix `findfirst` example above one needs to have a "
"separate copy of `rx` variable for each thread:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:442
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> function f_fix()\n"
"             s = repeat([\"123\", \"213\", \"231\"], outer=1000)\n"
"             x = similar(s, Int)\n"
"             rx = [Regex(\"1\") for i in 1:nthreads()]\n"
"             @threads for i in 1:3000\n"
"                 x[i] = findfirst(rx[threadid()], s[i]).start\n"
"             end\n"
"             count(v -> v == 1, x)\n"
"         end\n"
"f_fix (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:446
#, no-wrap
msgid ""
"julia> f_fix()\n"
"1000\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:449
msgid ""
"We now use `Regex(\"1\")` instead of `r\"1\"` to make sure that Julia "
"creates separate instances of `Regex` object for each entry of `rx` vector."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:453
msgid ""
"The case of `rand` is a bit more complex as we have to ensure that each "
"thread uses non-overlapping pseudorandom number sequences. This can be "
"simply ensured by using `Future.randjump` function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:457
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> using Random; import Future\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:466
#, no-wrap
msgid ""
"julia> function g_fix(r)\n"
"           a = zeros(1000)\n"
"           @threads for i in 1:1000\n"
"               a[i] = rand(r[threadid()])\n"
"           end\n"
"           length(unique(a))\n"
"       end\n"
"g_fix (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:470
#, no-wrap
msgid ""
"julia>  r = let m = MersenneTwister(1)\n"
"                [m; accumulate(Future.randjump, fill(big(10)^20, nthreads()-1), init=m)]\n"
"            end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:474
#, no-wrap
msgid ""
"julia> g_fix(r)\n"
"1000\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:477
msgid ""
"We pass the `r` vector to `g_fix` as generating several RGNs is an expensive "
"operation so we do not want to repeat it every time we run the function."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:478
#, no-wrap
msgid "@threadcall (Experimental)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:485
msgid ""
"All I/O tasks, timers, REPL commands, etc are multiplexed onto a single OS "
"thread via an event loop. A patched version of libuv ([http://docs.libuv.org/"
"en/v1.x/](http://docs.libuv.org/en/v1.x/))  provides this functionality. "
"Yield points provide for co-operatively scheduling multiple tasks onto the "
"same OS thread. I/O tasks and timers yield implicitly while waiting for the "
"event to occur. Calling [`yield`](@ref) explicitly allows for other tasks to "
"be scheduled."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:490
msgid ""
"Thus, a task executing a [`ccall`](@ref) effectively prevents the Julia "
"scheduler from executing any other tasks till the call returns. This is true "
"for all calls into external libraries. Exceptions are calls into custom C "
"code that call back into Julia (which may then yield) or C code that calls "
"`jl_yield()` (C equivalent of [`yield`](@ref))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:494
msgid ""
"Note that while Julia code runs on a single thread (by default), libraries "
"used by Julia may launch their own internal threads. For example, the BLAS "
"library may start as many threads as there are cores on a machine."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:502
msgid ""
"The [`@threadcall`](@ref) macro addresses scenarios where we do not want a "
"[`ccall`](@ref) to block the main Julia event loop. It schedules a C "
"function for execution in a separate thread. A threadpool with a default "
"size of 4 is used for this. The size of the threadpool is controlled via "
"environment variable `UV_THREADPOOL_SIZE`. While waiting for a free thread, "
"and during function execution once a thread is available, the requesting "
"task (on the main Julia event loop) yields to other tasks. Note that "
"`@threadcall` does not return till the execution is complete. From a user "
"point of view, it is therefore a blocking call like other Julia APIs."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:504
msgid ""
"It is very important that the called function does not call back into Julia, "
"as it will segfault."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:506
msgid "`@threadcall` may be removed/changed in future versions of Julia."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:511
msgid ""
"An implementation of distributed memory parallel computing is provided by "
"module `Distributed` as part of the standard library shipped with Julia."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:522
msgid ""
"Most modern computers possess more than one CPU, and several computers can "
"be combined together in a cluster. Harnessing the power of these multiple "
"CPUs allows many computations to be completed more quickly. There are two "
"major factors that influence performance: the speed of the CPUs themselves, "
"and the speed of their access to memory. In a cluster, it's fairly obvious "
"that a given CPU will have fastest access to the RAM within the same "
"computer (node). Perhaps more surprisingly, similar issues are relevant on a "
"typical multicore laptop, due to differences in the speed of main memory and "
"the [cache](https://www.akkadia.org/drepper/cpumemory.pdf). Consequently, a "
"good multiprocessing environment should allow control over the \"ownership\" "
"of a chunk of memory by a particular CPU.  Julia provides a multiprocessing "
"environment based on message passing to allow programs to run on multiple "
"processes in separate memory domains at once."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:528
msgid ""
"Julia's implementation of message passing is different from other "
"environments such as MPI [^1].  Communication in Julia is generally \"one-"
"sided\", meaning that the programmer needs to explicitly manage only one "
"process in a two-process operation. Furthermore, these operations typically "
"do not look like \"message send\" and \"message receive\" but rather "
"resemble higher-level operations like calls to user functions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:533
msgid ""
"Distributed programming in Julia is built on two primitives: *remote "
"references* and *remote calls*.  A remote reference is an object that can be "
"used from any process to refer to an object stored on a particular process. "
"A remote call is a request by one process to call a certain function on "
"certain arguments on another (possibly the same) process."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:535
msgid ""
"Remote references come in two flavors: [`Future`](@ref) and [`RemoteChannel`]"
"(@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:540
msgid ""
"A remote call returns a [`Future`](@ref) to its result. Remote calls return "
"immediately; the process that made the call proceeds to its next operation "
"while the remote call happens somewhere else.  You can wait for a remote "
"call to finish by calling [`wait`](@ref) on the returned [`Future`](@ref), "
"and you can obtain the full value of the result using [`fetch`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:543
msgid ""
"On the other hand, [`RemoteChannel`](@ref) s are rewritable. For example, "
"multiple processes can co-ordinate their processing by referencing the same "
"remote `Channel`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:548
msgid ""
"Each process has an associated identifier. The process providing the "
"interactive Julia prompt always has an `id` equal to 1. The processes used "
"by default for parallel operations are referred to as \"workers\". When "
"there is only one process, process 1 is considered a worker. Otherwise, "
"workers are considered to be all processes other than process 1."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:552
msgid ""
"Let's try this out. Starting with `julia -p n` provides `n` worker processes "
"on the local machine.  Generally it makes sense for `n` to equal the number "
"of CPU threads (logical cores) on the machine. Note that the `-p` argument "
"implicitly loads module `Distributed`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:556
msgid "```julia $ ./julia -p 2"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:559
#, no-wrap
msgid ""
"julia> r = remotecall(rand, 2, 2, 2)\n"
"Future(2, 1, 4, nothing)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:562
#, no-wrap
msgid ""
"julia> s = @spawnat 2 1 .+ fetch(r)\n"
"Future(2, 1, 5, nothing)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:568
#, no-wrap
msgid ""
"julia> fetch(s)\n"
"2×2 Array{Float64,2}:\n"
" 1.18526  1.50912\n"
" 1.16296  1.60607\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:574
msgid ""
"The first argument to [`remotecall`](@ref) is the function to call. Most "
"parallel programming in Julia does not reference specific processes or the "
"number of processes available, but [`remotecall`](@ref)  is considered a low-"
"level interface providing finer control. The second argument to "
"[`remotecall`](@ref)  is the `id` of the process that will do the work, and "
"the remaining arguments will be passed to the function being called."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:579
msgid ""
"As you can see, in the first line we asked process 2 to construct a 2-by-2 "
"random matrix, and in the second line we asked it to add 1 to it. The result "
"of both calculations is available in the two futures, `r` and `s`. The "
"[`@spawnat`](@ref) macro evaluates the expression in the second argument on "
"the process specified by the first argument."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:584
msgid ""
"Occasionally you might want a remotely-computed value immediately. This "
"typically happens when you read from a remote object to obtain data needed "
"by the next local operation. The function [`remotecall_fetch`](@ref) exists "
"for this purpose. It is equivalent to `fetch(remotecall(...))` but is more "
"efficient."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:589
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> remotecall_fetch(getindex, 2, r, 1, 1)\n"
"0.18526337335308085\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:592
msgid ""
"Remember that [`getindex(r,1,1)`](@ref) is [equivalent](@ref man-array-"
"indexing) to `r[1,1]`, so this call fetches the first element of the future "
"`r`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:596
msgid ""
"The syntax of [`remotecall`](@ref) is not especially convenient. The macro "
"[`@spawn`](@ref)  makes things easier. It operates on an expression rather "
"than a function, and picks where to do the operation for you:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:600
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> r = @spawn rand(2,2)\n"
"Future(2, 1, 4, nothing)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:603
#, no-wrap
msgid ""
"julia> s = @spawn 1 .+ fetch(r)\n"
"Future(3, 1, 5, nothing)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:609
#, no-wrap
msgid ""
"julia> fetch(s)\n"
"2×2 Array{Float64,2}:\n"
" 1.38854  1.9098\n"
" 1.20939  1.57158\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:614
msgid ""
"Note that we used `1 .+ fetch(r)` instead of `1 .+ r`. This is because we do "
"not know where the code will run, so in general a [`fetch`](@ref) might be "
"required to move `r` to the process doing the addition. In this case, "
"[`@spawn`](@ref) is smart enough to perform the computation on the process "
"that owns `r`, so the [`fetch`](@ref) will be a no-op (no work is done)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:617
msgid ""
"(It is worth noting that [`@spawn`](@ref) is not built-in but defined in "
"Julia as a [macro](@ref man-macros).  It is possible to define your own such "
"constructs.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:621
msgid ""
"An important thing to remember is that, once fetched, a [`Future`](@ref) "
"will cache its value locally. Further [`fetch`](@ref) calls do not entail a "
"network hop. Once all referencing [`Future`](@ref)s have fetched, the remote "
"stored value is deleted."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:638
msgid ""
"[`@async`](@ref) is similar to [`@spawn`](@ref), but only runs tasks on the "
"local process. We use it to create a \"feeder\" task for each process. Each "
"task picks the next index that needs to be computed, then waits for its "
"process to finish, then repeats until we run out of indices. Note that the "
"feeder tasks do not begin to execute until the main task reaches the end of "
"the [`@sync`](@ref)  block, at which point it surrenders control and waits "
"for all the local tasks to complete before returning from the function.  As "
"for v0.7 and beyond, the feeder tasks are able to share state via `nextidx` "
"because they all run on the same process.  Even if `Tasks` are scheduled "
"cooperatively, locking may still be required in some contexts, as in "
"[asynchronous I/O](@ref faq-async-io).  This means context switches only "
"occur at well-defined points: in this case, when [`remotecall_fetch`](@ref) "
"is called. This is the current state of implementation and it may change for "
"future Julia versions, as it is intended to make it possible to run up to N "
"`Tasks` on M `Process`, aka [M:N Threading](https://en.wikipedia.org/wiki/"
"Thread_(computing)#Models). Then a lock acquiring\\releasing model for "
"`nextidx` will be needed, as it is not safe to let multiple processes read-"
"write a resource at the same time."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:641
#, no-wrap
msgid "Code Availability and Loading Packages"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:645
msgid ""
"Your code must be available on any process that runs it. For example, type "
"the following into the Julia prompt:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:650
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> function rand2(dims...)\n"
"           return 2*rand(dims...)\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:655
#, no-wrap
msgid ""
"julia> rand2(2,2)\n"
"2×2 Array{Float64,2}:\n"
" 0.153756  0.368514\n"
" 1.15119   0.918912\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:661
#, no-wrap
msgid ""
"julia> fetch(@spawn rand2(2,2))\n"
"ERROR: RemoteException(2, CapturedException(UndefVarError(Symbol(\"#rand2\"))\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:663
msgid "Process 1 knew about the function `rand2`, but process 2 did not."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:667
msgid ""
"Most commonly you'll be loading code from files or packages, and you have a "
"considerable amount of flexibility in controlling which processes load code. "
"Consider a file, `DummyModule.jl`, containing the following code:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:670
msgid "```julia module DummyModule"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:672
msgid "export MyType, f"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:676
#, no-wrap
msgid ""
"mutable struct MyType\n"
"    a::Int\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:678
msgid "f(x) = x^2+1"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:680
msgid "println(\"loaded\")"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:683
#: ext/julia/doc/src/manual/documentation.md:442
#: ext/julia/doc/src/manual/documentation.md:461
#: ext/julia/doc/src/manual/modules.md:76
#: ext/julia/doc/src/manual/modules.md:102
#: ext/julia/doc/src/manual/modules.md:154
msgid "end ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:688
msgid ""
"In order to refer to `MyType` across all processes, `DummyModule.jl` needs "
"to be loaded on every process.  Calling `include(\"DummyModule.jl\")` loads "
"it only on a single process.  To load it on every process, use the "
"[`@everywhere`](@ref) macro (starting Julia with `julia -p 2`):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:695
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @everywhere include(\"DummyModule.jl\")\n"
"loaded\n"
"      From worker 3:    loaded\n"
"      From worker 2:    loaded\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:699
msgid ""
"As usual, this does not bring `DummyModule` into scope on any of the "
"process, which requires `using` or `import`.  Moreover, when `DummyModule` "
"is brought into scope on one process, it is not on any other:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:702
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> using .DummyModule\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:705
#, no-wrap
msgid ""
"julia> MyType(7)\n"
"MyType(7)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:710
#, no-wrap
msgid ""
"julia> fetch(@spawnat 2 MyType(7))\n"
"ERROR: On worker 2:\n"
"UndefVarError: MyType not defined\n"
"⋮\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:714
#, no-wrap
msgid ""
"julia> fetch(@spawnat 2 DummyModule.MyType(7))\n"
"MyType(7)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:717
msgid ""
"However, it's still possible, for instance, to send a `MyType` to a process "
"which has loaded `DummyModule` even if it's not in scope:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:722
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> put!(RemoteChannel(2), MyType(7))\n"
"RemoteChannel{Channel{Any}}(2, 1, 13)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:725
msgid ""
"A file can also be preloaded on multiple processes at startup with the `-L` "
"flag, and a driver script can be used to drive the computation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:729
#, no-wrap
msgid ""
"```\n"
"julia -p <n> -L file1.jl -L file2.jl driver.jl\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:732
msgid ""
"The Julia process running the driver script in the example above has an `id` "
"equal to 1, just like a process providing an interactive prompt."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:736
msgid ""
"Finally, if `DummyModule.jl` is not a standalone file but a package, then "
"`using DummyModule` will _load_ `DummyModule.jl` on all processes, but only "
"bring it into scope on the process where `using` was called."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:737
#, no-wrap
msgid "Starting and managing worker processes"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:740
msgid ""
"The base Julia installation has in-built support for two types of clusters:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:744
msgid "A local cluster specified with the `-p` option as shown above."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:744
msgid ""
"A cluster spanning machines using the `--machine-file` option. This uses a "
"passwordless `ssh` login to start Julia worker processes (from the same path "
"as the current host) on the specified machines."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:747
msgid ""
"Functions [`addprocs`](@ref), [`rmprocs`](@ref), [`workers`](@ref), and "
"others are available as a programmatic means of adding, removing and "
"querying the processes in a cluster."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:750
#: ext/julia/doc/src/manual/parallel-computing.md:1185
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> using Distributed\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:756
#, no-wrap
msgid ""
"julia> addprocs(2)\n"
"2-element Array{Int64,1}:\n"
" 2\n"
" 3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:759
msgid ""
"Module `Distributed` must be explicitly loaded on the master process before "
"invoking [`addprocs`](@ref).  It is automatically made available on the "
"worker processes."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:763
msgid ""
"Note that workers do not run a `~/.julia/config/startup.jl` startup script, "
"nor do they synchronize their global state (such as global variables, new "
"method definitions, and loaded modules) with any of the other running "
"processes."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:766
msgid ""
"Other types of clusters can be supported by writing your own custom "
"`ClusterManager`, as described below in the [ClusterManagers](@ref) section."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:767
#, no-wrap
msgid "Data Movement"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:773
msgid ""
"Sending messages and moving data constitute most of the overhead in a "
"distributed program. Reducing the number of messages and the amount of data "
"sent is critical to achieving performance and scalability.  To this end, it "
"is important to understand the data movement performed by Julia's various "
"distributed programming constructs."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:778
msgid ""
"[`fetch`](@ref) can be considered an explicit data movement operation, since "
"it directly asks that an object be moved to the local machine. [`@spawn`]"
"(@ref) (and a few related constructs)  also moves data, but this is not as "
"obvious, hence it can be called an implicit data movement operation. "
"Consider these two approaches to constructing and squaring a random matrix:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:780
msgid "Method 1:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:783
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> A = rand(1000,1000);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:785
#, no-wrap
msgid "julia> Bref = @spawn A^2;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:787
#: ext/julia/doc/src/manual/parallel-computing.md:797
msgid "[...]"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:790
#: ext/julia/doc/src/manual/parallel-computing.md:800
#, no-wrap
msgid ""
"julia> fetch(Bref);\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:792
msgid "Method 2:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:795
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> Bref = @spawn rand(1000,1000)^2;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:805
msgid ""
"The difference seems trivial, but in fact is quite significant due to the "
"behavior of [`@spawn`](@ref).  In the first method, a random matrix is "
"constructed locally, then sent to another process where it is squared. In "
"the second method, a random matrix is both constructed and squared on "
"another process. Therefore the second method sends much less data than the "
"first."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:814
msgid ""
"In this toy example, the two methods are easy to distinguish and choose "
"from. However, in a real program designing data movement might require more "
"thought and likely some measurement. For example, if the first process needs "
"matrix `A` then the first method might be better. Or, if computing `A` is "
"expensive and only the current process has it, then moving it to another "
"process might be unavoidable. Or, if the current process has very little to "
"do between the [`@spawn`](@ref)  and `fetch(Bref)`, it might be better to "
"eliminate the parallelism altogether. Or imagine `rand(1000,1000)` is "
"replaced with a more expensive operation. Then it might make sense to add "
"another [`@spawn`](@ref)  statement just for this step."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:815
#, no-wrap
msgid "Global variables"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:820
msgid ""
"Expressions executed remotely via `@spawn`, or closures specified for remote "
"execution using `remotecall` may refer to global variables. Global bindings "
"under module `Main` are treated a little differently compared to global "
"bindings in other modules. Consider the following code snippet:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:825
#, no-wrap
msgid ""
"```julia-repl\n"
"A = rand(10,10)\n"
"remotecall_fetch(()->sum(A), 2)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:831
#, no-wrap
msgid ""
"In this case [`sum`](@ref) MUST be defined in the remote process.\n"
"Note that `A` is a global variable defined in the local workspace. Worker 2 does not have a variable called\n"
"`A` under `Main`. The act of shipping the closure `()->sum(A)` to worker 2 results in `Main.A` being defined\n"
"on 2. `Main.A` continues to exist on worker 2 even after the call `remotecall_fetch` returns. Remote calls\n"
"with embedded global references (under `Main` module only) manage globals as follows:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:833
msgid ""
"- New global bindings are created on destination workers if they are "
"referenced as part of a remote call."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:835
msgid "- Global constants are declared as constants on remote nodes too."
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/manual/parallel-computing.md:839
msgid ""
"Globals are re-sent to a destination worker only in the context of a remote "
"call, and then only if its value has changed. Also, the cluster does not "
"synchronize global bindings across nodes.  For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:847
#, no-wrap
msgid ""
"  ```julia\n"
"  A = rand(10,10)\n"
"  remotecall_fetch(()->sum(A), 2) # worker 2\n"
"  A = rand(10,10)\n"
"  remotecall_fetch(()->sum(A), 3) # worker 3\n"
"  A = nothing\n"
"  ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:850
#, no-wrap
msgid ""
"  Executing the above snippet results in `Main.A` on worker 2 having a different value from\n"
"  `Main.A` on worker 3, while the value of `Main.A` on node 1 is set to `nothing`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:856
msgid ""
"As you may have realized, while memory associated with globals may be "
"collected when they are reassigned on the master, no such action is taken on "
"the workers as the bindings continue to be valid.  [`clear!`](@ref) can be "
"used to manually reassign specific globals on remote nodes to `nothing` once "
"they are no longer required. This will release any memory associated with "
"them as part of a regular garbage collection cycle."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:859
msgid ""
"Thus programs should be careful referencing globals in remote calls. In "
"fact, it is preferable to avoid them altogether if possible. If you must "
"reference globals, consider using `let` blocks to localize global variables."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:861
#: ext/julia/doc/src/manual/performance-tips.md:349
msgid "For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:864
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> A = rand(10,10);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:866
#, no-wrap
msgid "julia> remotecall_fetch(()->A, 2);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:868
#, no-wrap
msgid "julia> B = rand(10,10);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:872
#, no-wrap
msgid ""
"julia> let B = B\n"
"           remotecall_fetch(()->B, 2)\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:881
#, no-wrap
msgid ""
"julia> @fetchfrom 2 InteractiveUtils.varinfo()\n"
"name           size summary\n"
"––––––––– ––––––––– ––––––––––––––––––––––\n"
"A         800 bytes 10×10 Array{Float64,2}\n"
"Base                Module\n"
"Core                Module\n"
"Main                Module\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:884
msgid ""
"As can be seen, global variable `A` is defined on worker 2, but `B` is "
"captured as a local variable and hence a binding for `B` does not exist on "
"worker 2."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:886
#, no-wrap
msgid "Parallel Map and Loops"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:892
msgid ""
"Fortunately, many useful parallel computations do not require data movement. "
"A common example is a Monte Carlo simulation, where multiple processes can "
"handle independent simulation trials simultaneously. We can use [`@spawn`]"
"(@ref) to flip coins on two processes. First, write the following function "
"in `count_heads.jl`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:902
#, no-wrap
msgid ""
"```julia\n"
"function count_heads(n)\n"
"    c::Int = 0\n"
"    for i = 1:n\n"
"        c += rand(Bool)\n"
"    end\n"
"    c\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:905
msgid ""
"The function `count_heads` simply adds together `n` random bits. Here is how "
"we can perform some trials on two machines, and add together the results:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:908
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @everywhere include_string(Main, $(read(\"count_heads.jl\", String)), \"count_heads.jl\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:911
#, no-wrap
msgid ""
"julia> a = @spawn count_heads(100000000)\n"
"Future(2, 1, 6, nothing)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:914
#, no-wrap
msgid ""
"julia> b = @spawn count_heads(100000000)\n"
"Future(3, 1, 7, nothing)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:918
#, no-wrap
msgid ""
"julia> fetch(a)+fetch(b)\n"
"100001564\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:927
msgid ""
"This example demonstrates a powerful and often-used parallel programming "
"pattern. Many iterations run independently over several processes, and then "
"their results are combined using some function.  The combination process is "
"called a *reduction*, since it is generally tensor-rank-reducing: a vector "
"of numbers is reduced to a single number, or a matrix is reduced to a single "
"row or column, etc. In code, this typically looks like the pattern `x = f(x,"
"v[i])`, where `x` is the accumulator, `f` is the reduction function, and the "
"`v[i]` are the elements being reduced. It is desirable for `f` to be "
"associative, so that it does not matter what order the operations are "
"performed in."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:932
msgid ""
"Notice that our use of this pattern with `count_heads` can be generalized. "
"We used two explicit [`@spawn`](@ref) statements, which limits the "
"parallelism to two processes. To run on any number of processes, we can use "
"a *parallel for loop*, running in distributed memory, which can be written "
"in Julia using [`@distributed`](@ref) like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:938
#, no-wrap
msgid ""
"```julia\n"
"nheads = @distributed (+) for i = 1:200000000\n"
"    Int(rand(Bool))\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:943
msgid ""
"This construct implements the pattern of assigning iterations to multiple "
"processes, and combining them with a specified reduction (in this case "
"`(+)`). The result of each iteration is taken as the value of the last "
"expression inside the loop. The whole parallel loop expression itself "
"evaluates to the final answer."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:948
msgid ""
"Note that although parallel for loops look like serial for loops, their "
"behavior is dramatically different. In particular, the iterations do not "
"happen in a specified order, and writes to variables or arrays will not be "
"globally visible since iterations run on different processes. Any variables "
"used inside the parallel loop will be copied and broadcast to each process."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:950
msgid "For example, the following code will not work as intended:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:957
#, no-wrap
msgid ""
"```julia\n"
"a = zeros(100000)\n"
"@distributed for i = 1:100000\n"
"    a[i] = i\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:961
msgid ""
"This code will not initialize all of `a`, since each process will have a "
"separate copy of it.  Parallel for loops like these must be avoided. "
"Fortunately, [Shared Arrays](@ref man-shared-arrays) can be used to get "
"around this limitation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:964
msgid "```julia using SharedArrays"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:970
#, no-wrap
msgid ""
"a = SharedArray{Float64}(10)\n"
"@distributed for i = 1:10\n"
"    a[i] = i\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:972
msgid ""
"Using \"outside\" variables in parallel loops is perfectly reasonable if the "
"variables are read-only:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:979
#, no-wrap
msgid ""
"```julia\n"
"a = randn(1000)\n"
"@distributed (+) for i = 1:100000\n"
"    f(a[rand(1:end)])\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:981
msgid ""
"Here each iteration applies `f` to a randomly-chosen sample from a vector "
"`a` shared by all processes."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:987
msgid ""
"As you could see, the reduction operator can be omitted if it is not needed. "
"In that case, the loop executes asynchronously, i.e. it spawns independent "
"tasks on all available workers and returns an array of [`Future`](@ref) "
"immediately without waiting for completion. The caller can wait for the "
"[`Future`](@ref) completions at a later point by calling [`fetch`](@ref) on "
"them, or wait for completion at the end of the loop by prefixing it with "
"[`@sync`](@ref), like `@sync @distributed for`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:992
msgid ""
"In some cases no reduction operator is needed, and we merely wish to apply a "
"function to all integers in some range (or, more generally, to all elements "
"in some collection). This is another useful operation called *parallel map*, "
"implemented in Julia as the [`pmap`](@ref) function. For example, we could "
"compute the singular values of several large random matrices in parallel as "
"follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:995
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> M = Matrix{Float64}[rand(1000,1000) for i = 1:10];\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:998
#, no-wrap
msgid ""
"julia> pmap(svdvals, M);\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1004
msgid ""
"Julia's [`pmap`](@ref) is designed for the case where each function call "
"does a large amount of work. In contrast, `@distributed for` can handle "
"situations where each iteration is tiny, perhaps merely summing two numbers. "
"Only worker processes are used by both [`pmap`](@ref) and `@distributed for` "
"for the parallel computation. In case of `@distributed for`, the final "
"reduction is done on the calling process."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:1005
#, no-wrap
msgid "Remote References and AbstractChannels"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1008
msgid ""
"Remote references always refer to an implementation of an `AbstractChannel`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1013
msgid ""
"A concrete implementation of an `AbstractChannel` (like `Channel`), is "
"required to implement [`put!`](@ref), [`take!`](@ref), [`fetch`](@ref), "
"[`isready`](@ref) and [`wait`](@ref).  The remote object referred to by a "
"[`Future`](@ref) is stored in a `Channel{Any}(1)`, i.e., a `Channel` of size "
"1 capable of holding objects of `Any` type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1016
msgid ""
"[`RemoteChannel`](@ref), which is rewritable, can point to any type and size "
"of channels, or any other implementation of an `AbstractChannel`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1020
msgid ""
"The constructor `RemoteChannel(f::Function, pid)()` allows us to construct "
"references to channels holding more than one value of a specific type. `f` "
"is a function executed on `pid` and it must return an `AbstractChannel`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1023
#, no-wrap
msgid ""
"For example, `RemoteChannel(()->Channel{Int}(10), pid)`, will return a reference to a channel\n"
"of type `Int` and size 10. The channel exists on worker `pid`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1026
msgid ""
"Methods [`put!`](@ref), [`take!`](@ref), [`fetch`](@ref), [`isready`](@ref) "
"and [`wait`](@ref)  on a [`RemoteChannel`](@ref) are proxied onto the "
"backing store on the remote process."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1031
msgid ""
"[`RemoteChannel`](@ref) can thus be used to refer to user implemented "
"`AbstractChannel` objects.  A simple example of this is provided in "
"`dictchannel.jl` in the [Examples repository](https://github.com/JuliaAttic/"
"Examples), which uses a dictionary as its remote store."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:1033
#, no-wrap
msgid "Channels and RemoteChannels"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1049
msgid ""
"A [`Channel`](@ref) is local to a process. Worker 2 cannot directly refer to "
"a [`Channel`](@ref) on worker 3 and vice-versa. A [`RemoteChannel`](@ref), "
"however, can put and take values across workers."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1049
msgid ""
"A [`RemoteChannel`](@ref) can be thought of as a *handle* to a [`Channel`]"
"(@ref)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1049
msgid ""
"The process id, `pid`, associated with a [`RemoteChannel`](@ref) identifies "
"the process where the backing store, i.e., the backing [`Channel`](@ref) "
"exists."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1049
msgid ""
"Any process with a reference to a [`RemoteChannel`](@ref) can put and take "
"items from the channel.  Data is automatically sent to (or retrieved from) "
"the process a [`RemoteChannel`](@ref) is associated with."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1049
msgid ""
"Serializing a [`Channel`](@ref) also serializes any data present in the "
"channel. Deserializing it therefore effectively makes a copy of the original "
"object."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1049
msgid ""
"On the other hand, serializing a [`RemoteChannel`](@ref) only involves the "
"serialization of an identifier that identifies the location and instance of "
"[`Channel`](@ref) referred to by the handle. A deserialized [`RemoteChannel`]"
"(@ref) object (on any worker), therefore also points to the same backing "
"store as the original."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1052
msgid ""
"The channels example from above can be modified for interprocess "
"communication, as shown below."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1057
msgid ""
"We start 4 workers to process a single `jobs` remote channel. Jobs, "
"identified by an id (`job_id`), are written to the channel. Each remotely "
"executing task in this simulation reads a `job_id`, waits for a random "
"amount of time and writes back a tuple of `job_id`, time taken and its own "
"`pid` to the results channel. Finally all the `results` are printed out on "
"the master process."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1060
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> addprocs(4); # add worker processes\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1062
#, no-wrap
msgid "julia> const jobs = RemoteChannel(()->Channel{Int}(32));\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1064
#, no-wrap
msgid "julia> const results = RemoteChannel(()->Channel{Tuple}(32));\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1073
#, no-wrap
msgid ""
"julia> @everywhere function do_work(jobs, results) # define work function everywhere\n"
"           while true\n"
"               job_id = take!(jobs)\n"
"               exec_time = rand()\n"
"               sleep(exec_time) # simulates elapsed time doing actual work\n"
"               put!(results, (job_id, exec_time, myid()))\n"
"           end\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1087
#, no-wrap
msgid ""
"julia> for p in workers() # start tasks on the workers to process requests in parallel\n"
"           remote_do(do_work, p, jobs, results)\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1107
#, no-wrap
msgid ""
"julia> @elapsed while n > 0 # print out results\n"
"           job_id, exec_time, where = take!(results)\n"
"           println(\"$job_id finished in $(round(exec_time; digits=2)) seconds on worker $where\")\n"
"           global n = n - 1\n"
"       end\n"
"1 finished in 0.18 seconds on worker 4\n"
"2 finished in 0.26 seconds on worker 5\n"
"6 finished in 0.12 seconds on worker 4\n"
"7 finished in 0.18 seconds on worker 4\n"
"5 finished in 0.35 seconds on worker 5\n"
"4 finished in 0.68 seconds on worker 2\n"
"3 finished in 0.73 seconds on worker 3\n"
"11 finished in 0.01 seconds on worker 3\n"
"12 finished in 0.02 seconds on worker 3\n"
"9 finished in 0.26 seconds on worker 5\n"
"8 finished in 0.57 seconds on worker 4\n"
"10 finished in 0.58 seconds on worker 2\n"
"0.055971741\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/parallel-computing.md:1108
#, no-wrap
msgid "Remote References and Distributed Garbage Collection"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1112
msgid ""
"Objects referred to by remote references can be freed only when *all* held "
"references in the cluster are deleted."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1120
msgid ""
"The node where the value is stored keeps track of which of the workers have "
"a reference to it.  Every time a [`RemoteChannel`](@ref) or a (unfetched) "
"[`Future`](@ref) is serialized to a worker, the node pointed to by the "
"reference is notified. And every time a [`RemoteChannel`](@ref) or a "
"(unfetched) [`Future`](@ref) is garbage collected locally, the node owning "
"the value is again notified. This is implemented in an internal cluster "
"aware serializer. Remote references are only valid in the context of a "
"running cluster. Serializing and deserializing references to and from "
"regular `IO` objects is not supported."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1124
msgid ""
"The notifications are done via sending of \"tracking\" messages--an \"add "
"reference\" message when a reference is serialized to a different process "
"and a \"delete reference\" message when a reference is locally garbage "
"collected."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1127
msgid ""
"Since [`Future`](@ref)s are write-once and cached locally, the act of "
"[`fetch`](@ref)ing a [`Future`](@ref) also updates reference tracking "
"information on the node owning the value."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1129
msgid ""
"The node which owns the value frees it once all references to it are cleared."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1132
msgid ""
"With [`Future`](@ref)s, serializing an already fetched [`Future`](@ref) to a "
"different node also sends the value since the original remote store may have "
"collected the value by this time."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1135
msgid ""
"It is important to note that *when* an object is locally garbage collected "
"depends on the size of the object and the current memory pressure in the "
"system."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1143
msgid ""
"In case of remote references, the size of the local reference object is "
"quite small, while the value stored on the remote node may be quite large. "
"Since the local object may not be collected immediately, it is a good "
"practice to explicitly call [`finalize`](@ref) on local instances of a "
"[`RemoteChannel`](@ref), or on unfetched [`Future`](@ref)s. Since calling "
"[`fetch`](@ref)  on a [`Future`](@ref) also removes its reference from the "
"remote store, this is not required on fetched [`Future`](@ref)s. Explicitly "
"calling [`finalize`](@ref) results in an immediate message sent to the "
"remote node to go ahead and remove its reference to the value."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1145
msgid ""
"Once finalized, a reference becomes invalid and cannot be used in any "
"further calls."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:1146
#, no-wrap
msgid "[Shared Arrays](@id man-shared-arrays)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1155
msgid ""
"Shared Arrays use system shared memory to map the same array across many "
"processes. While there are some similarities to a [`DArray`](https://github."
"com/JuliaParallel/DistributedArrays.jl), the behavior of a [`SharedArray`]"
"(@ref) is quite different. In a [`DArray`](https://github.com/JuliaParallel/"
"DistributedArrays.jl), each process has local access to just a chunk of the "
"data, and no two processes share the same chunk; in contrast, in a "
"[`SharedArray`](@ref) each \"participating\" process has access to the "
"entire array.  A [`SharedArray`](@ref) is a good choice when you want to "
"have a large amount of data jointly accessible to two or more processes on "
"the same machine."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1158
msgid ""
"Shared Array support is available via module `SharedArrays` which must be "
"explicitly loaded on all participating workers."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1165
msgid ""
"[`SharedArray`](@ref) indexing (assignment and accessing values) works just "
"as with regular arrays, and is efficient because the underlying memory is "
"available to the local process. Therefore, most algorithms work naturally on "
"[`SharedArray`](@ref)s, albeit in single-process mode. In cases where an "
"algorithm insists on an [`Array`](@ref) input, the underlying array can be "
"retrieved from a [`SharedArray`](@ref) by calling [`sdata`](@ref). For other "
"`AbstractArray` types, [`sdata`](@ref)  just returns the object itself, so "
"it's safe to use [`sdata`](@ref) on any `Array`-type object."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1167
msgid "The constructor for a shared array is of the form:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1171
msgid "```julia SharedArray{T,N}(dims::NTuple; init=false, pids=Int[])  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1176
msgid ""
"which creates an `N`-dimensional shared array of a bits type `T` and size "
"`dims` across the processes specified by `pids`. Unlike distributed arrays, "
"a shared array is accessible only from those participating workers specified "
"by the `pids` named argument (and the creating process too, if it is on the "
"same host)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1180
msgid ""
"If an `init` function, of signature `initfn(S::SharedArray)`, is specified, "
"it is called on all the participating workers. You can specify that each "
"worker runs the `init` function on a distinct portion of the array, thereby "
"parallelizing initialization."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1182
msgid "Here's a brief example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1191
#, no-wrap
msgid ""
"julia> addprocs(3)\n"
"3-element Array{Int64,1}:\n"
" 2\n"
" 3\n"
" 4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1193
#, no-wrap
msgid "julia> @everywhere using SharedArrays\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1199
#, no-wrap
msgid ""
"julia> S = SharedArray{Int,2}((3,4), init = S -> S[localindices(S)] = myid())\n"
"3×4 SharedArray{Int64,2}:\n"
" 2  2  3  4\n"
" 2  3  3  4\n"
" 2  3  4  4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1202
#, no-wrap
msgid ""
"julia> S[3,2] = 7\n"
"7\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1209
#, no-wrap
msgid ""
"julia> S\n"
"3×4 SharedArray{Int64,2}:\n"
" 2  2  3  4\n"
" 2  3  3  4\n"
" 2  7  4  4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1213
msgid ""
"[`SharedArrays.localindices`](@ref) provides disjoint one-dimensional ranges "
"of indices, and is sometimes convenient for splitting up tasks among "
"processes. You can, of course, divide the work any way you wish:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1221
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> S = SharedArray{Int,2}((3,4), init = S -> S[indexpids(S):length(procs(S)):length(S)] = myid())\n"
"3×4 SharedArray{Int64,2}:\n"
" 2  2  2  2\n"
" 3  3  3  3\n"
" 4  4  4  4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1224
msgid ""
"Since all processes have access to the underlying data, you do have to be "
"careful not to set up conflicts. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1234
#, no-wrap
msgid ""
"```julia\n"
"@sync begin\n"
"    for p in procs(S)\n"
"        @async begin\n"
"            remotecall_wait(fill!, p, S, p)\n"
"        end\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1238
msgid ""
"would result in undefined behavior. Because each process fills the *entire* "
"array with its own `pid`, whichever process is the last to execute (for any "
"particular element of `S`) will have its `pid` retained."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1240
msgid ""
"As a more extended and complex example, consider running the following "
"\"kernel\" in parallel:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1244
msgid "```julia q[i,j,t+1] = q[i,j,t] + u[i,j,t] ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1251
msgid ""
"In this case, if we try to split up the work using a one-dimensional index, "
"we are likely to run into trouble: if `q[i,j,t]` is near the end of the "
"block assigned to one worker and `q[i,j,t+1]` is near the beginning of the "
"block assigned to another, it's very likely that `q[i,j,t]` will not be "
"ready at the time it's needed for computing `q[i,j,t+1]`. In such cases, one "
"is better off chunking the array manually. Let's split along the second "
"dimension.  Define a function that returns the `(irange, jrange)` indices "
"assigned to this worker:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1263
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @everywhere function myrange(q::SharedArray)\n"
"           idx = indexpids(q)\n"
"           if idx == 0 # This worker is not assigned a piece\n"
"               return 1:0, 1:0\n"
"           end\n"
"           nchunks = length(procs(q))\n"
"           splits = [round(Int, s) for s in range(0, stop=size(q,2), length=nchunks+1)]\n"
"           1:size(q,1), splits[idx]+1:splits[idx+1]\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1265
msgid "Next, define the kernel:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1275
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @everywhere function advection_chunk!(q, u, irange, jrange, trange)\n"
"           @show (irange, jrange, trange)  # display so we can see what's happening\n"
"           for t in trange, j in jrange, i in irange\n"
"               q[i,j,t+1] = q[i,j,t] + u[i,j,t]\n"
"           end\n"
"           q\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1277
msgid "We also define a convenience wrapper for a `SharedArray` implementation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1282
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @everywhere advection_shared_chunk!(q, u) =\n"
"           advection_chunk!(q, u, myrange(q)..., 1:size(q,3)-1)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1284
msgid ""
"Now let's compare three different versions, one that runs in a single "
"process:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1288
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> advection_serial!(q, u) = advection_chunk!(q, u, 1:size(q,1), 1:size(q,2), 1:size(q,3)-1);\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1290
msgid "one that uses [`@distributed`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1303
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> function advection_parallel!(q, u)\n"
"           for t = 1:size(q,3)-1\n"
"               @sync @distributed for j = 1:size(q,2)\n"
"                   for i = 1:size(q,1)\n"
"                       q[i,j,t+1]= q[i,j,t] + u[i,j,t]\n"
"                   end\n"
"               end\n"
"           end\n"
"           q\n"
"       end;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1305
msgid "and one that delegates in chunks:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1316
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> function advection_shared!(q, u)\n"
"           @sync begin\n"
"               for p in procs(q)\n"
"                   @async remotecall_wait(advection_shared_chunk!, p, q, u)\n"
"               end\n"
"           end\n"
"           q\n"
"       end;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1318
msgid ""
"If we create `SharedArray`s and time these functions, we get the following "
"results (with `julia -p 4`):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1321
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> q = SharedArray{Float64,3}((500,500,500));\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1324
#, no-wrap
msgid ""
"julia> u = SharedArray{Float64,3}((500,500,500));\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1326
msgid ""
"Run the functions once to JIT-compile and [`@time`](@ref) them on the second "
"run:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1331
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @time advection_serial!(q, u);\n"
"(irange,jrange,trange) = (1:500,1:500,1:499)\n"
" 830.220 milliseconds (216 allocations: 13820 bytes)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1334
#, no-wrap
msgid ""
"julia> @time advection_parallel!(q, u);\n"
"   2.495 seconds      (3999 k allocations: 289 MB, 2.09% gc time)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1342
#, no-wrap
msgid ""
"julia> @time advection_shared!(q,u);\n"
"        From worker 2:       (irange,jrange,trange) = (1:500,1:125,1:499)\n"
"        From worker 4:       (irange,jrange,trange) = (1:500,251:375,1:499)\n"
"        From worker 3:       (irange,jrange,trange) = (1:500,126:250,1:499)\n"
"        From worker 5:       (irange,jrange,trange) = (1:500,376:500,1:499)\n"
" 238.119 milliseconds (2264 allocations: 169 KB)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1345
msgid ""
"The biggest advantage of `advection_shared!` is that it minimizes traffic "
"among the workers, allowing each to compute for an extended time on the "
"assigned piece."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/parallel-computing.md:1346
#, no-wrap
msgid "Shared Arrays and Distributed Garbage Collection"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1352
msgid ""
"Like remote references, shared arrays are also dependent on garbage "
"collection on the creating node to release references from all participating "
"workers. Code which creates many short lived shared array objects would "
"benefit from explicitly finalizing these objects as soon as possible.  This "
"results in both memory and file handles mapping the shared segment being "
"released sooner."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:1353
#, no-wrap
msgid "ClusterManagers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1357
msgid ""
"The launching, management and networking of Julia processes into a logical "
"cluster is done via cluster managers. A `ClusterManager` is responsible for"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1361
msgid "launching worker processes in a cluster environment"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1361
msgid "managing events during the lifetime of each worker"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1361
msgid "optionally, providing data transport"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1363
msgid "A Julia cluster has the following characteristics:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1367
msgid ""
"The initial Julia process, also called the `master`, is special and has an "
"`id` of 1."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1367
msgid "Only the `master` process can add or remove worker processes."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1367
msgid "All processes can directly communicate with each other."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1370
msgid ""
"Connections between workers (using the in-built TCP/IP transport) is "
"established in the following manner:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1382
msgid ""
"[`addprocs`](@ref) is called on the master process with a `ClusterManager` "
"object."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1382
msgid ""
"[`addprocs`](@ref) calls the appropriate [`launch`](@ref) method which "
"spawns required number of worker processes on appropriate machines."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1382
msgid ""
"Each worker starts listening on a free port and writes out its host and port "
"information to [`stdout`](@ref)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1382
msgid ""
"The cluster manager captures the [`stdout`](@ref) of each worker and makes "
"it available to the master process."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1382
msgid ""
"The master process parses this information and sets up TCP/IP connections to "
"each worker."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1382
msgid "Every worker is also notified of other workers in the cluster."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1382
msgid ""
"Each worker connects to all workers whose `id` is less than the worker's own "
"`id`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1382
msgid ""
"In this way a mesh network is established, wherein every worker is directly "
"connected with every other worker."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1385
msgid ""
"While the default transport layer uses plain [`TCPSocket`](@ref), it is "
"possible for a Julia cluster to provide its own transport."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1387
msgid "Julia provides two in-built cluster managers:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1390
msgid ""
"`LocalManager`, used when [`addprocs()`](@ref) or [`addprocs(np::Integer)`]"
"(@ref) are called"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1390
msgid ""
"`SSHManager`, used when [`addprocs(hostnames::Array)`](@ref) is called with "
"a list of hostnames"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1393
msgid ""
"`LocalManager` is used to launch additional workers on the same host, "
"thereby leveraging multi-core and multi-processor hardware."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1395
msgid "Thus, a minimal cluster manager would need to:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1400
msgid "be a subtype of the abstract `ClusterManager`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1400
msgid ""
"implement [`launch`](@ref), a method responsible for launching new workers"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1400
msgid ""
"implement [`manage`](@ref), which is called at various events during a "
"worker's lifetime (for example, sending an interrupt signal)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1402
msgid ""
"[`addprocs(manager::FooManager)`](@ref addprocs) requires `FooManager` to "
"implement:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1407
#, no-wrap
msgid ""
"```julia\n"
"function launch(manager::FooManager, params::Dict, launched::Array, c::Condition)\n"
"    [...]\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1412
#, no-wrap
msgid ""
"function manage(manager::FooManager, id::Integer, config::WorkerConfig, op::Symbol)\n"
"    [...]\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1415
msgid ""
"As an example let us see how the `LocalManager`, the manager responsible for "
"starting workers on the same host, is implemented:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1420
#, no-wrap
msgid ""
"```julia\n"
"struct LocalManager <: ClusterManager\n"
"    np::Integer\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1424
#, no-wrap
msgid ""
"function launch(manager::LocalManager, params::Dict, launched::Array, c::Condition)\n"
"    [...]\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1429
#, no-wrap
msgid ""
"function manage(manager::LocalManager, id::Integer, config::WorkerConfig, op::Symbol)\n"
"    [...]\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1431
msgid "The [`launch`](@ref) method takes the following arguments:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1436
msgid ""
"`manager::ClusterManager`: the cluster manager that [`addprocs`](@ref) is "
"called with"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1436
msgid "`params::Dict`: all the keyword arguments passed to [`addprocs`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1436
msgid ""
"`launched::Array`: the array to append one or more `WorkerConfig` objects to"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1436
msgid ""
"`c::Condition`: the condition variable to be notified as and when workers "
"are launched"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1440
msgid ""
"The [`launch`](@ref) method is called asynchronously in a separate task. The "
"termination of this task signals that all requested workers have been "
"launched. Hence the [`launch`](@ref)  function MUST exit as soon as all the "
"requested workers have been launched."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1444
#, no-wrap
msgid ""
"Newly launched workers are connected to each other and the master process in an all-to-all manner.\n"
"Specifying the command line argument `--worker[=<cookie>]` results in the launched processes\n"
"initializing themselves as workers and connections being set up via TCP/IP sockets.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1449
#, no-wrap
msgid ""
"All workers in a cluster share the same [cookie](@ref man-cluster-cookie) as the master. When the cookie is\n"
"unspecified, i.e, with the `--worker` option, the worker tries to read it from its standard input.\n"
" `LocalManager` and `SSHManager` both pass the cookie to newly launched workers via their\n"
" standard inputs.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1453
msgid ""
"By default a worker will listen on a free port at the address returned by a "
"call to [`getipaddr()`](@ref).  A specific address to listen on may be "
"specified by optional argument `--bind-to bind_addr[:port]`.  This is useful "
"for multi-homed hosts."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1457
msgid ""
"As an example of a non-TCP/IP transport, an implementation may choose to use "
"MPI, in which case `--worker` must NOT be specified. Instead, newly launched "
"workers should call `init_worker(cookie)` before using any of the parallel "
"constructs."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1460
msgid ""
"For every worker launched, the [`launch`](@ref) method must add a "
"`WorkerConfig` object (with appropriate fields initialized) to `launched`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1467
#, no-wrap
msgid ""
"```julia\n"
"mutable struct WorkerConfig\n"
"    # Common fields relevant to all cluster managers\n"
"    io::Union{IO, Nothing}\n"
"    host::Union{AbstractString, Nothing}\n"
"    port::Union{Integer, Nothing}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1472
#, no-wrap
msgid ""
"    # Used when launching additional workers at a host\n"
"    count::Union{Int, Symbol, Nothing}\n"
"    exename::Union{AbstractString, Cmd, Nothing}\n"
"    exeflags::Union{Cmd, Nothing}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1476
#, no-wrap
msgid ""
"    # External cluster managers can use this to store information at a per-worker level\n"
"    # Can be a dict if multiple fields need to be stored.\n"
"    userdata::Any\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1482
#, no-wrap
msgid ""
"    # SSHManager / SSH tunnel connections to workers\n"
"    tunnel::Union{Bool, Nothing}\n"
"    bind_addr::Union{AbstractString, Nothing}\n"
"    sshflags::Union{Cmd, Nothing}\n"
"    max_parallel::Union{Integer, Nothing}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1485
#, no-wrap
msgid ""
"    # Used by Local/SSH managers\n"
"    connect_at::Any\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1489
#, no-wrap
msgid ""
"    [...]\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1492
msgid ""
"Most of the fields in `WorkerConfig` are used by the inbuilt managers. "
"Custom cluster managers would typically specify only `io` or `host` / `port`:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1500
msgid ""
"If `io` is specified, it is used to read host/port information. A Julia "
"worker prints out its bind address and port at startup. This allows Julia "
"workers to listen on any free port available instead of requiring worker "
"ports to be configured manually."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1500
msgid "If `io` is not specified, `host` and `port` are used to connect."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1500
msgid ""
"`count`, `exename` and `exeflags` are relevant for launching additional "
"workers from a worker.  For example, a cluster manager may launch a single "
"worker per node, and use that to launch additional workers."
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/parallel-computing.md:1508
msgid "`count` with an integer value `n` will launch a total of `n` workers."
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/parallel-computing.md:1508
msgid ""
"`count` with a value of `:auto` will launch as many workers as the number of "
"CPU threads (logical cores) on that machine."
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/parallel-computing.md:1508
msgid ""
"`exename` is the name of the `julia` executable including the full path."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1508
#, no-wrap
msgid ""
"      * `exeflags` should be set to the required command line arguments for new workers.\n"
"  * `tunnel`, `bind_addr`, `sshflags` and `max_parallel` are used when a ssh tunnel is required to\n"
"    connect to the workers from the master process.\n"
"  * `userdata` is provided for custom cluster managers to store their own worker-specific information.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1511
msgid ""
"`manage(manager::FooManager, id::Integer, config::WorkerConfig, op::Symbol)` "
"is called at different times during the worker's lifetime with appropriate "
"`op` values:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1516
msgid ""
"with `:register`/`:deregister` when a worker is added / removed from the "
"Julia worker pool."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1516
msgid ""
"with `:interrupt` when `interrupt(workers)` is called. The `ClusterManager` "
"should signal the appropriate worker with an interrupt signal."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1516
msgid "with `:finalize` for cleanup purposes."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/parallel-computing.md:1517
#, no-wrap
msgid "Cluster Managers with Custom Transports"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1522
msgid ""
"Replacing the default TCP/IP all-to-all socket connections with a custom "
"transport layer is a little more involved. Each Julia process has as many "
"communication tasks as the workers it is connected to. For example, consider "
"a Julia cluster of 32 processes in an all-to-all mesh network:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1529
msgid "Each Julia process thus has 31 communication tasks."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1529
msgid ""
"Each task handles all incoming messages from a single remote worker in a "
"message-processing loop."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1529
msgid ""
"The message-processing loop waits on an `IO` object (for example, a "
"[`TCPSocket`](@ref) in the default implementation), reads an entire message, "
"processes it and waits for the next one."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1529
msgid ""
"Sending messages to a process is done directly from any Julia task--not just "
"communication tasks--again, via the appropriate `IO` object."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1533
msgid ""
"Replacing the default transport requires the new implementation to set up "
"connections to remote workers and to provide appropriate `IO` objects that "
"the message-processing loops can wait on.  The manager-specific callbacks to "
"be implemented are:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1538
msgid ""
"```julia connect(manager::FooManager, pid::Integer, config::WorkerConfig)  "
"kill(manager::FooManager, pid::Int, config::WorkerConfig)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1540
msgid ""
"The default implementation (which uses TCP/IP sockets) is implemented as "
"`connect(manager::ClusterManager, pid::Integer, config::WorkerConfig)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1545
msgid ""
"`connect` should return a pair of `IO` objects, one for reading data sent "
"from worker `pid`, and the other to write data that needs to be sent to "
"worker `pid`. Custom cluster managers can use an in-memory `BufferStream` as "
"the plumbing to proxy data between the custom, possibly non-`IO` transport "
"and Julia's in-built parallel infrastructure."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1548
msgid ""
"A `BufferStream` is an in-memory [`IOBuffer`](@ref) which behaves like an "
"`IO`--it is a stream which can be handled asynchronously."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1554
msgid ""
"The folder `clustermanager/0mq` in the [Examples repository](https://github."
"com/JuliaAttic/Examples)  contains an example of using ZeroMQ to connect "
"Julia workers in a star topology with a 0MQ broker in the middle. Note: The "
"Julia processes are still all *logically* connected to each other--any "
"worker can message any other worker directly without any awareness of 0MQ "
"being used as the transport layer."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1556
msgid "When using custom transports:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1567
msgid ""
"Julia workers must NOT be started with `--worker`. Starting with `--worker` "
"will result in the newly launched workers defaulting to the TCP/IP socket "
"transport implementation."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1567
msgid ""
"For every incoming logical connection with a worker, `Base."
"process_messages(rd::IO, wr::IO)()` must be called. This launches a new task "
"that handles reading and writing of messages from/to the worker represented "
"by the `IO` objects."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1567
msgid ""
"`init_worker(cookie, manager::FooManager)` *must* be called as part of "
"worker process initialization."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1567
msgid ""
"Field `connect_at::Any` in `WorkerConfig` can be set by the cluster manager "
"when [`launch`](@ref)  is called. The value of this field is passed in in "
"all [`connect`](@ref) callbacks. Typically, it carries information on *how "
"to connect* to a worker. For example, the TCP/IP socket transport uses this "
"field to specify the `(host, port)` tuple at which to connect to a worker."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1571
msgid ""
"`kill(manager, pid, config)` is called to remove a worker from the cluster. "
"On the master process, the corresponding `IO` objects must be closed by the "
"implementation to ensure proper cleanup.  The default implementation simply "
"executes an `exit()` call on the specified remote worker."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1574
msgid ""
"The Examples folder `clustermanager/simple` is an example that shows a "
"simple implementation using UNIX domain sockets for cluster setup."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/parallel-computing.md:1575
#, no-wrap
msgid "Network Requirements for LocalManager and SSHManager"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1580
msgid ""
"Julia clusters are designed to be executed on already secured environments "
"on infrastructure such as local laptops, departmental clusters, or even the "
"cloud. This section covers network security requirements for the inbuilt "
"`LocalManager` and `SSHManager`:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1600
msgid ""
"The master process does not listen on any port. It only connects out to the "
"workers."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1600
msgid ""
"Each worker binds to only one of the local interfaces and listens on an "
"ephemeral port number assigned by the OS."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1600
msgid ""
"`LocalManager`, used by `addprocs(N)`, by default binds only to the loopback "
"interface. This means that workers started later on remote hosts (or by "
"anyone with malicious intentions) are unable to connect to the cluster. An "
"`addprocs(4)` followed by an `addprocs([\"remote_host\"])` will fail.  Some "
"users may need to create a cluster comprising their local system and a few "
"remote systems.  This can be done by explicitly requesting `LocalManager` to "
"bind to an external network interface via the `restrict` keyword argument: "
"`addprocs(4; restrict=false)`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1600
msgid ""
"`SSHManager`, used by `addprocs(list_of_remote_hosts)`, launches workers on "
"remote hosts via SSH.  By default SSH is only used to launch Julia workers. "
"Subsequent master-worker and worker-worker connections use plain, "
"unencrypted TCP/IP sockets. The remote hosts must have passwordless login "
"enabled. Additional SSH flags or credentials may be specified via keyword "
"argument `sshflags`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1600
msgid ""
"`addprocs(list_of_remote_hosts; tunnel=true, sshflags=<ssh keys and other "
"flags>)` is useful when we wish to use SSH connections for master-worker "
"too. A typical scenario for this is a local laptop running the Julia REPL (i."
"e., the master) with the rest of the cluster on the cloud, say on Amazon "
"EC2. In this case only port 22 needs to be opened at the remote cluster "
"coupled with SSH client authenticated via public key infrastructure (PKI). "
"Authentication credentials can be supplied via `sshflags`, for example "
"```sshflags=`-i <keyfile>` ```."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1604
#, no-wrap
msgid ""
"    In an all-to-all topology (the default), all workers connect to each other via plain TCP sockets.\n"
"    The security policy on the cluster nodes must thus ensure free connectivity between workers for\n"
"    the ephemeral port range (varies by OS).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1607
#, no-wrap
msgid ""
"    Securing and encrypting all worker-worker traffic (via SSH) or encrypting individual messages\n"
"    can be done via a custom `ClusterManager`.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/parallel-computing.md:1608
#, no-wrap
msgid "[Cluster Cookie](@id man-cluster-cookie)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1612
msgid ""
"All processes in a cluster share the same cookie which, by default, is a "
"randomly generated string on the master process:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1623
msgid ""
"[`cluster_cookie()`](@ref) returns the cookie, while `cluster_cookie(cookie)"
"()` sets it and returns the new cookie."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1623
msgid ""
"All connections are authenticated on both sides to ensure that only workers "
"started by the master are allowed to connect to each other."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1623
msgid ""
"The cookie may be passed to the workers at startup via argument `--"
"worker=<cookie>`. If argument `--worker` is specified without the cookie, "
"the worker tries to read the cookie from its standard input ([`stdin`]"
"(@ref)). The `stdin` is closed immediately after the cookie is retrieved."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1623
msgid ""
"`ClusterManager`s can retrieve the cookie on the master by calling "
"[`cluster_cookie()`](@ref).  Cluster managers not using the default TCP/IP "
"transport (and hence not specifying `--worker`)  must call "
"`init_worker(cookie, manager)` with the same cookie as on the master."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1626
msgid ""
"Note that environments requiring higher levels of security can implement "
"this via a custom `ClusterManager`.  For example, cookies can be pre-shared "
"and hence not specified as a startup argument."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:1627
#, no-wrap
msgid "Specifying Network Topology (Experimental)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1631
msgid ""
"The keyword argument `topology` passed to `addprocs` is used to specify how "
"the workers must be connected to each other:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1637
msgid "`:all_to_all`, the default: all workers are connected to each other."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1637
msgid ""
"`:master_worker`: only the driver process, i.e. `pid` 1, has connections to "
"the workers."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/parallel-computing.md:1637
msgid ""
"`:custom`: the `launch` method of the cluster manager specifies the "
"connection topology via the fields `ident` and `connect_idents` in "
"`WorkerConfig`. A worker with a cluster-manager-provided identity `ident` "
"will connect to all workers specified in `connect_idents`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1643
msgid ""
"Keyword argument `lazy=true|false` only affects `topology` option `:"
"all_to_all`. If `true`, the cluster starts off with the master connected to "
"all workers. Specific worker-worker connections are established at the first "
"remote invocation between two workers. This helps in reducing initial "
"resources allocated for intra-cluster communication. Connections are setup "
"depending on the runtime requirements of a parallel program. Default value "
"for `lazy` is `true`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1647
msgid ""
"Currently, sending a message between unconnected workers results in an "
"error. This behaviour, as with the functionality and interface, should be "
"considered experimental in nature and may change in future releases."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/parallel-computing.md:1648
#, no-wrap
msgid "Noteworthy external packages"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1654
msgid ""
"Outside of Julia parallelism there are plenty of external packages that "
"should be mentioned.  For example [MPI.jl](https://github.com/JuliaParallel/"
"MPI.jl) is a Julia wrapper for the `MPI` protocol, or [DistributedArrays.jl]"
"(https://github.com/JuliaParallel/Distributedarrays.jl), as presented in "
"[Shared Arrays](@ref).  A mention must be made of Julia's GPU programming "
"ecosystem, which includes:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/parallel-computing.md:1656
msgid ""
"Low-level (C kernel) based operations [OpenCL.jl](https://github.com/"
"JuliaGPU/OpenCL.jl) and [CUDAdrv.jl](https://github.com/JuliaGPU/CUDAdrv.jl) "
"which are respectively an OpenCL interface and a CUDA wrapper."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/parallel-computing.md:1658
msgid ""
"Low-level (Julia Kernel) interfaces like [CUDAnative.jl](https://github.com/"
"JuliaGPU/CUDAnative.jl) which is a Julia native CUDA implementation."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/parallel-computing.md:1660
msgid ""
"High-level vendor-specific abstractions like [CuArrays.jl](https://github."
"com/JuliaGPU/CuArrays.jl) and [CLArrays.jl](https://github.com/JuliaGPU/"
"CLArrays.jl)"
msgstr ""

#. type: Bullet: '4. '
#: ext/julia/doc/src/manual/parallel-computing.md:1662
msgid ""
"High-level libraries like [ArrayFire.jl](https://github.com/JuliaComputing/"
"ArrayFire.jl) and [GPUArrays.jl](https://github.com/JuliaGPU/GPUArrays.jl)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1666
msgid ""
"In the following example we will use both `DistributedArrays.jl` and "
"`CuArrays.jl` to distribute an array across multiple processes by first "
"casting it through `distribute()` and `CuArray()`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1668
msgid ""
"Remember when importing `DistributedArrays.jl` to import it across all "
"processes using [`@everywhere`](@ref)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1672
msgid "```julia-repl $ ./julia -p 4"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1674
#, no-wrap
msgid "julia> addprocs()\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1676
#, no-wrap
msgid "julia> @everywhere using DistributedArrays\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1678
#, no-wrap
msgid "julia> using CuArrays\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1680
#, no-wrap
msgid "julia> B = ones(10_000) ./ 2;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1682
#, no-wrap
msgid "julia> A = ones(10_000) .* π;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1684
#, no-wrap
msgid "julia> C = 2 .* A ./ B;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1687
#, no-wrap
msgid ""
"julia> all(C .≈ 4*π)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1690
#, no-wrap
msgid ""
"julia> typeof(C)\n"
"Array{Float64,1}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1692
#, no-wrap
msgid "julia> dB = distribute(B);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1694
#, no-wrap
msgid "julia> dA = distribute(A);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1696
#, no-wrap
msgid "julia> dC = 2 .* dA ./ dB;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1699
#, no-wrap
msgid ""
"julia> all(dC .≈ 4*π)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1702
#, no-wrap
msgid ""
"julia> typeof(dC)\n"
"DistributedArrays.DArray{Float64,1,Array{Float64,1}}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1704
#, no-wrap
msgid "julia> cuB = CuArray(B);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1706
#, no-wrap
msgid "julia> cuA = CuArray(A);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1708
#, no-wrap
msgid "julia> cuC = 2 .* cuA ./ cuB;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1711
#, no-wrap
msgid ""
"julia> all(cuC .≈ 4*π);\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1716
#, no-wrap
msgid ""
"julia> typeof(cuC)\n"
"CuArray{Float64,1}\n"
"```\n"
"Keep in mind that some Julia features are not currently supported by CUDAnative.jl [^2] , especially some functions like `sin` will need to be replaced with `CUDAnative.sin`(cc: @maleadt).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1719
msgid ""
"In the following example we will use both `DistributedArrays.jl` and "
"`CuArrays.jl` to distribute an array across multiple processes and call a "
"generic function on it."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1726
#, no-wrap
msgid ""
"```julia\n"
"function power_method(M, v)\n"
"    for i in 1:100\n"
"        v = M*v\n"
"        v /= norm(v)\n"
"    end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1730
#, no-wrap
msgid ""
"    return v, norm(M*v) / norm(v)  # or  (M*v) ./ v\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1733
msgid ""
"`power_method` repeatedly creates a new vector and normalizes it. We have "
"not specified any type signature in function declaration, let's see if it "
"works with the aforementioned datatypes:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1736
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> M = [2. 1; 1 1];\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1741
#, no-wrap
msgid ""
"julia> v = rand(2)\n"
"2-element Array{Float64,1}:\n"
"0.40395\n"
"0.445877\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1744
#, no-wrap
msgid ""
"julia> power_method(M,v)\n"
"([0.850651, 0.525731], 2.618033988749895)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1746
#, no-wrap
msgid "julia> cuM = CuArray(M);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1748
#, no-wrap
msgid "julia> cuv = CuArray(v);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1750
#, no-wrap
msgid "julia> curesult = power_method(cuM, cuv);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1753
#, no-wrap
msgid ""
"julia> typeof(curesult)\n"
"CuArray{Float64,1}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1755
#, no-wrap
msgid "julia> dM = distribute(M);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1757
#, no-wrap
msgid "julia> dv = distribute(v);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1759
#, no-wrap
msgid "julia> dC = power_method(dM, dv);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1763
#, no-wrap
msgid ""
"julia> typeof(dC)\n"
"Tuple{DistributedArrays.DArray{Float64,1,Array{Float64,1}},Float64}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1767
msgid ""
"To end this short exposure to external packages, we can consider `MPI.jl`, a "
"Julia wrapper of the MPI protocol. As it would take too long to consider "
"every inner function, it would be better to simply appreciate the approach "
"used to implement the protocol."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1770
msgid ""
"Consider this toy script which simply calls each subprocess, instantiate its "
"rank and when the master process is reached, performs the ranks' sum"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1773
msgid "```julia import MPI"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1775
msgid "MPI.Init()"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1778
msgid "comm = MPI.COMM_WORLD MPI.Barrier(comm)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1781
msgid "root = 0 r = MPI.Comm_rank(comm)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1783
msgid "sr = MPI.Reduce(r, MPI.SUM, root, comm)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1787
#, no-wrap
msgid ""
"if(MPI.Comm_rank(comm) == root)\n"
"   @printf(\"sum of ranks: %s\\n\", sr)\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1790
msgid "MPI.Finalize()  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1794
msgid "``` mpirun -np 4 ./julia example.jl ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1800
#, no-wrap
msgid ""
"[^1]:\n"
"    In this context, MPI refers to the MPI-1 standard. Beginning with MPI-2, the MPI standards committee\n"
"    introduced a new set of communication mechanisms, collectively referred to as Remote Memory Access\n"
"    (RMA). The motivation for adding rma to the MPI standard was to facilitate one-sided communication\n"
"    patterns. For additional information on the latest MPI standard, see <https://mpi-forum.org/docs>.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/parallel-computing.md:1802
#, no-wrap
msgid ""
"[^2]:\n"
"    [Julia GPU man pages](http://juliagpu.github.io/CUDAnative.jl/stable/man/usage.html#Julia-support-1)\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1
#, no-wrap
msgid "Calling C and Fortran Code"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:9
msgid ""
"Though most code can be written in Julia, there are many high-quality, "
"mature libraries for numerical computing already written in C and Fortran. "
"To allow easy use of this existing code, Julia makes it simple and efficient "
"to call C and Fortran functions. Julia has a \"no boilerplate\" philosophy: "
"functions can be called directly from Julia without any \"glue\" code, code "
"generation, or compilation -- even from the interactive prompt. This is "
"accomplished just by making an appropriate call with [`ccall`](@ref) syntax, "
"which looks like an ordinary function call."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:19
msgid ""
"The code to be called must be available as a shared library. Most C and "
"Fortran libraries ship compiled as shared libraries already, but if you are "
"compiling the code yourself using GCC (or Clang), you will need to use the `-"
"shared` and `-fPIC` options. The machine instructions generated by Julia's "
"JIT are the same as a native C call would be, so the resulting overhead is "
"the same as calling a library function from C code. (Non-library function "
"calls in both C and Julia can be inlined and thus may have even less "
"overhead than calls to shared library functions. When both libraries and "
"executables are generated by LLVM, it is possible to perform whole-program "
"optimizations that can even optimize across this boundary, but Julia does "
"not yet support that. In the future, however, it may do so, yielding even "
"greater performance gains.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:24
msgid ""
"Shared libraries and functions are referenced by a tuple of the form `(:"
"function, \"library\")` or `(\"function\", \"library\")` where `function` is "
"the C-exported function name. `library` refers to the shared library name: "
"shared libraries available in the (platform-specific) load path will be "
"resolved by name, and if necessary a direct path may be specified."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:28
msgid ""
"A function name may be used alone in place of the tuple (just `:function` or "
"`\"function\"`). In this case the name is resolved within the current "
"process. This form can be used to call C library functions, functions in the "
"Julia runtime, or functions in an application linked to Julia."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:39
msgid ""
"By default, Fortran compilers [generate mangled names](https://en.wikipedia."
"org/wiki/Name_mangling#Fortran) (for example, converting function names to "
"lowercase or uppercase, often appending an underscore), and so to call a "
"Fortran function via [`ccall`](@ref) you must pass the mangled identifier "
"corresponding to the rule followed by your Fortran compiler.  Also, when "
"calling a Fortran function, all inputs must be passed as pointers to "
"allocated values on the heap or stack. This applies not only to arrays and "
"other mutable objects which are normally heap-allocated, but also to scalar "
"values such as integers and floats which are normally stack-allocated and "
"commonly passed in registers when using C or Julia calling conventions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:42
msgid ""
"Finally, you can use [`ccall`](@ref) to actually generate a call to the "
"library function. Arguments to [`ccall`](@ref) are as follows:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:44
msgid ""
"A `(:function, \"library\")` pair, which must be written as a literal "
"constant,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:46
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:51
#, no-wrap
msgid "   OR\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:49
#, no-wrap
msgid ""
"   a `:function` name symbol or `\"function\"` name string, which is resolved in the\n"
"   current process,\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:53
#, no-wrap
msgid "   a function pointer (for example, from `dlsym`).\n"
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:55
msgid "Return type (see below for mapping the declared C type to Julia)"
msgstr ""

#. type: Bullet: '     * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:57
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:62
msgid ""
"This argument will be evaluated at compile-time, when the containing method "
"is defined."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:60
msgid ""
"A tuple of input types. The input types must be written as a literal tuple, "
"not a tuple-valued variable or expression."
msgstr ""

#. type: Bullet: '4. '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:64
msgid ""
"The following arguments, if any, are the actual argument values passed to "
"the function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:67
msgid ""
"As a complete but simple example, the following calls the `clock` function "
"from the standard C library:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:71
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> t = ccall((:clock, \"libc\"), Int32, ())\n"
"2292761\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:74
#, no-wrap
msgid ""
"julia> t\n"
"2292761\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:78
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Int32\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:82
msgid ""
"`clock` takes no arguments and returns an [`Int32`](@ref). One common gotcha "
"is that a 1-tuple must be written with a trailing comma. For example, to "
"call the `getenv` function to get a pointer to the value of an environment "
"variable, one makes a call like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:86
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> path = ccall((:getenv, \"libc\"), Cstring, (Cstring,), \"SHELL\")\n"
"Cstring(@0x00007fff5fbffc45)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:90
#, no-wrap
msgid ""
"julia> unsafe_string(path)\n"
"\"/bin/bash\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:94
msgid ""
"Note that the argument type tuple must be written as `(Cstring,)`, rather "
"than `(Cstring)`. This is because `(Cstring)` is just the expression "
"`Cstring` surrounded by parentheses, rather than a 1-tuple containing "
"`Cstring`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:98
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> (Cstring)\n"
"Cstring\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:102
#, no-wrap
msgid ""
"julia> (Cstring,)\n"
"(Cstring,)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:109
msgid ""
"In practice, especially when providing reusable functionality, one generally "
"wraps [`ccall`](@ref)  uses in Julia functions that set up arguments and "
"then check for errors in whatever manner the C or Fortran function indicates "
"them, propagating to the Julia caller as exceptions. This is especially "
"important since C and Fortran APIs are notoriously inconsistent about how "
"they indicate error conditions. For example, the `getenv` C library function "
"is wrapped in the following Julia function, which is a simplified version of "
"the actual definition from [`env.jl`](https://github.com/JuliaLang/julia/"
"blob/master/base/env.jl):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:120
#, no-wrap
msgid ""
"```julia\n"
"function getenv(var::AbstractString)\n"
"    val = ccall((:getenv, \"libc\"),\n"
"                Cstring, (Cstring,), var)\n"
"    if val == C_NULL\n"
"        error(\"getenv: undefined variable: \", var)\n"
"    end\n"
"    unsafe_string(val)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:125
msgid ""
"The C `getenv` function indicates an error by returning `NULL`, but other "
"standard C functions indicate errors in various different ways, including by "
"returning -1, 0, 1 and other special values.  This wrapper throws an "
"exception clearly indicating the problem if the caller tries to get a non-"
"existent environment variable:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:129
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> getenv(\"SHELL\")\n"
"\"/bin/bash\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:133
#, no-wrap
msgid ""
"julia> getenv(\"FOOBAR\")\n"
"getenv: undefined variable: FOOBAR\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:135
msgid ""
"Here is a slightly more complex example that discovers the local machine's "
"hostname:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:146
#, no-wrap
msgid ""
"```julia\n"
"function gethostname()\n"
"    hostname = Vector{UInt8}(undef, 128)\n"
"    ccall((:gethostname, \"libc\"), Int32,\n"
"          (Ptr{UInt8}, Csize_t),\n"
"          hostname, sizeof(hostname))\n"
"    hostname[end] = 0; # ensure null-termination\n"
"    return unsafe_string(pointer(hostname))\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:156
msgid ""
"This example first allocates an array of bytes, then calls the C library "
"function `gethostname` to fill the array in with the hostname, takes a "
"pointer to the hostname buffer, and converts the pointer to a Julia string, "
"assuming that it is a NUL-terminated C string. It is common for C libraries "
"to use this pattern of requiring the caller to allocate memory to be passed "
"to the callee and filled in. Allocation of memory from Julia like this is "
"generally accomplished by creating an uninitialized array and passing a "
"pointer to its data to the C function. This is why we don't use the "
"`Cstring` type here: as the array is uninitialized, it could contain NUL "
"bytes. Converting to a `Cstring` as part of the [`ccall`](@ref) checks for "
"contained NUL bytes and could therefore throw a conversion error."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:157
#, no-wrap
msgid "Creating C-Compatible Julia Function Pointers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:161
msgid ""
"It is possible to pass Julia functions to native C functions that accept "
"function pointer arguments.  For example, to match C prototypes of the form:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:165
msgid "```c typedef returntype (*functiontype)(argumenttype, ...)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:168
msgid ""
"The macro [`@cfunction`](@ref) generates the C-compatible function pointer "
"for a call to a Julia function. Arguments to [`@cfunction`](@ref) are as "
"follows:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:172
msgid "A Julia Function"
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:172
msgid "Return type"
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:172
msgid "A literal tuple of input types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:174
msgid ""
"Like ccall, all of these arguments will be evaluated at compile-time, when "
"the containing method is defined."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:179
msgid ""
"Currently, only the platform-default C calling convention is supported. This "
"means that `@cfunction`-generated pointers cannot be used in calls where "
"WINAPI expects `stdcall` function on 32-bit windows, but can be used on "
"WIN64 (where `stdcall` is unified with the C calling convention)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:181
msgid ""
"A classic example is the standard C library `qsort` function, declared as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:186
#, no-wrap
msgid ""
"```c\n"
"void qsort(void *base, size_t nmemb, size_t size,\n"
"           int (*compare)(const void*, const void*));\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:194
#, no-wrap
msgid ""
"The `base` argument is a pointer to an array of length `nmemb`, with elements of `size` bytes\n"
"each. `compare` is a callback function which takes pointers to two elements `a` and `b` and returns\n"
"an integer less/greater than zero if `a` should appear before/after `b` (or zero if any order\n"
"is permitted). Now, suppose that we have a 1d array `A` of values in Julia that we want to sort\n"
"using the `qsort` function (rather than Julia's built-in `sort` function). Before we worry about\n"
"calling `qsort` and passing arguments, we need to write a comparison function that works for some\n"
"arbitrary objects (which define `<`):\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:201
#, no-wrap
msgid ""
"```jldoctest mycompare\n"
"julia> function mycompare(a, b)::Cint\n"
"           return (a < b) ? -1 : ((a > b) ? +1 : 0)\n"
"       end\n"
"mycompare (generic function with 1 method)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:204
msgid ""
"Notice that we have to be careful about the return type: `qsort` expects a "
"function returning a C `int`, so we annotate the return type of the function "
"to be sure it returns a `Cint`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:206
msgid ""
"In order to pass this function to C, we obtain its address using the macro "
"`@cfunction`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:210
#, no-wrap
msgid ""
"```jldoctest mycompare\n"
"julia> mycompare_c = @cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}));\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:214
msgid ""
"[`@cfunction`](@ref) requires three arguments: the Julia function "
"(`mycompare`), the return type (`Cint`), and a literal tuple of the input "
"argument types, in this case to sort an array of `Cdouble` ([`Float64`]"
"(@ref)) elements."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:216
msgid "The final call to `qsort` looks like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:224
#, no-wrap
msgid ""
"```jldoctest mycompare\n"
"julia> A = [1.3, -2.7, 4.4, 3.1]\n"
"4-element Array{Float64,1}:\n"
"  1.3\n"
" -2.7\n"
"  4.4\n"
"  3.1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:227
#, no-wrap
msgid ""
"julia> ccall(:qsort, Cvoid, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Cvoid}),\n"
"             A, length(A), sizeof(eltype(A)), mycompare_c)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:235
#, no-wrap
msgid ""
"julia> A\n"
"4-element Array{Float64,1}:\n"
" -2.7\n"
"  1.3\n"
"  3.1\n"
"  4.4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:241
msgid ""
"As can be seen, `A` is changed to the sorted array `[-2.7, 1.3, 3.1, 4.4]`. "
"Note that Julia knows how to convert an array into a `Ptr{Cdouble}`, how to "
"compute the size of a type in bytes (identical to C's `sizeof` operator), "
"and so on. For fun, try inserting a `println(\"mycompare($a, $b)\")` line "
"into `mycompare`, which will allow you to see the comparisons that `qsort` "
"is performing (and to verify that it is really calling the Julia function "
"that you passed to it)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:242
#, no-wrap
msgid "Mapping C Types to Julia"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:247
msgid ""
"It is critical to exactly match the declared C type with its declaration in "
"Julia. Inconsistencies can cause code that works correctly on one system to "
"fail or produce indeterminate results on a different system."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:252
msgid ""
"Note that no C header files are used anywhere in the process of calling C "
"functions: you are responsible for making sure that your Julia types and "
"call signatures accurately reflect those in the C header file. (The [Clang "
"package](https://github.com/ihnorton/Clang.jl) can be used to auto-generate "
"Julia code from a C header file.)"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:253
#, no-wrap
msgid "Auto-conversion:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:257
msgid ""
"Julia automatically inserts calls to the [`Base.cconvert`](@ref) function to "
"convert each argument to the specified type. For example, the following call:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:261
msgid "```julia ccall((:foo, \"libfoo\"), Cvoid, (Int32, Float64), x, y)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:263
msgid "will behave as if the following were written:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:269
#, no-wrap
msgid ""
"```julia\n"
"ccall((:foo, \"libfoo\"), Cvoid, (Int32, Float64),\n"
"      Base.unsafe_convert(Int32, Base.cconvert(Int32, x)),\n"
"      Base.unsafe_convert(Float64, Base.cconvert(Float64, y)))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:274
msgid ""
"[`Base.cconvert`](@ref) normally just calls [`convert`](@ref), but can be "
"defined to return an arbitrary new object more appropriate for passing to "
"C.  This should be used to perform all allocations of memory that will be "
"accessed by the C code.  For example, this is used to convert an `Array` of "
"objects (e.g. strings) to an array of pointers."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:278
msgid ""
"[`Base.unsafe_convert`](@ref) handles conversion to [`Ptr`](@ref) types. It "
"is considered unsafe because converting an object to a native pointer can "
"hide the object from the garbage collector, causing it to be freed "
"prematurely."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:279
#, no-wrap
msgid "Type Correspondences:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:282
msgid "First, a review of some relevant Julia type terminology:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:294
#, no-wrap
msgid ""
"| Syntax / Keyword              | Example                                     | Description                                                                                                                                                                                                                                                                    |\n"
"|:----------------------------- |:------------------------------------------- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n"
"| `mutable struct`              | `BitSet`                                    | \"Leaf Type\" :: A group of related data that includes a type-tag, is managed by the Julia GC, and is defined by object-identity. The type parameters of a leaf type must be fully defined (no `TypeVars` are allowed) in order for the instance to be constructed.              |\n"
"| `abstract type`               | `Any`, `AbstractArray{T, N}`, `Complex{T}`  | \"Super Type\" :: A super-type (not a leaf-type) that cannot be instantiated, but can be used to describe a group of types.                                                                                                                                                      |\n"
"| `T{A}`                        | `Vector{Int}`                               | \"Type Parameter\" :: A specialization of a type (typically used for dispatch or storage optimization).                                                                                                                                                                          |\n"
"|                               |                                             | \"TypeVar\" :: The `T` in the type parameter declaration is referred to as a TypeVar (short for type variable).                                                                                                                                                                  |\n"
"| `primitive type`              | `Int`, `Float64`                            | \"Primitive Type\" :: A type with no fields, but a size. It is stored and defined by-value.                                                                                                                                                                                           |\n"
"| `struct`                      | `Pair{Int, Int}`                            | \"Struct\" :: A type with all fields defined to be constant. It is defined by-value, and may be stored with a type-tag.                                                                                                                                                       |\n"
"|                               | `ComplexF64` (`isbits`)                     | \"Is-Bits\"   :: A `primitive type`, or a `struct` type where all fields are other `isbits` types. It is defined by-value, and is stored without a type-tag.                                                                                                                       |\n"
"| `struct ...; end`             | `nothing`                                   | \"Singleton\" :: a Leaf Type or Struct with no fields.                                                                                                                                                                                                                        |\n"
"| `(...)` or `tuple(...)`       | `(1, 2, 3)`                                 | \"Tuple\" :: an immutable data-structure similar to an anonymous struct type, or a constant array. Represented as either an array or a struct.                                                                                                                                |\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:295
#, no-wrap
msgid "[Bits Types](@id man-bits-types)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:299
msgid ""
"There are several special types to be aware of, as no other type can be "
"defined to behave the same:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:301
msgid "`Float32`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:303
#, no-wrap
msgid "    Exactly corresponds to the `float` type in C (or `REAL*4` in Fortran).\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:305
msgid "`Float64`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:307
#, no-wrap
msgid "    Exactly corresponds to the `double` type in C (or `REAL*8` in Fortran).\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:309
msgid "`ComplexF32`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:311
#, no-wrap
msgid "    Exactly corresponds to the `complex float` type in C (or `COMPLEX*8` in Fortran).\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:313
msgid "`ComplexF64`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:315
#, no-wrap
msgid "    Exactly corresponds to the `complex double` type in C (or `COMPLEX*16` in Fortran).\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:317
msgid "`Signed`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:320
#, no-wrap
msgid ""
"    Exactly corresponds to the `signed` type annotation in C (or any `INTEGER` type in Fortran).\n"
"    Any Julia type that is not a subtype of [`Signed`](@ref) is assumed to be unsigned.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:323
msgid "`Ref{T}`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:325
#, no-wrap
msgid "    Behaves like a `Ptr{T}` that can manage its memory via the Julia GC.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:328
msgid "`Array{T,N}`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:331
#, no-wrap
msgid ""
"    When an array is passed to C as a `Ptr{T}` argument, it is not reinterpret-cast: Julia requires\n"
"    that the element type of the array matches `T`, and the address of the first element is passed.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:334
#, no-wrap
msgid ""
"    Therefore, if an `Array` contains data in the wrong format, it will have to be explicitly converted\n"
"    using a call such as `trunc(Int32, a)`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:338
#, no-wrap
msgid ""
"    To pass an array `A` as a pointer of a different type *without* converting the data beforehand\n"
"    (for example, to pass a `Float64` array to a function that operates on uninterpreted bytes), you\n"
"    can declare the argument as `Ptr{Cvoid}`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:343
#, no-wrap
msgid ""
"    If an array of eltype `Ptr{T}` is passed as a `Ptr{Ptr{T}}` argument, [`Base.cconvert`](@ref)\n"
"    will attempt to first make a null-terminated copy of the array with each element replaced by its\n"
"    [`Base.cconvert`](@ref) version. This allows, for example, passing an `argv` pointer array of type\n"
"    `Vector{String}` to an argument of type `Ptr{Ptr{Cchar}}`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:348
msgid ""
"On all systems we currently support, basic C/C++ value types may be "
"translated to Julia types as follows. Every C type also has a corresponding "
"Julia type with the same name, prefixed by C.  This can help for writing "
"portable code (and remembering that an `int` in C is not the same as an "
"`Int` in Julia)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:351
#, no-wrap
msgid "**System Independent:**\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:381
#, no-wrap
msgid ""
"| C name                                                  | Fortran name             | Standard Julia Alias | Julia Base Type                                                                                                |\n"
"|:------------------------------------------------------- |:------------------------ |:-------------------- |:-------------------------------------------------------------------------------------------------------------- |\n"
"| `unsigned char`                                         | `CHARACTER`              | `Cuchar`             | `UInt8`                                                                                                        |\n"
"| `bool` (only in C++)                                    |                          | `Cuchar`             | `UInt8`                                                                                                        |\n"
"| `short`                                                 | `INTEGER*2`, `LOGICAL*2` | `Cshort`             | `Int16`                                                                                                        |\n"
"| `unsigned short`                                        |                          | `Cushort`            | `UInt16`                                                                                                       |\n"
"| `int`, `BOOL` (C, typical)                              | `INTEGER*4`, `LOGICAL*4` | `Cint`               | `Int32`                                                                                                        |\n"
"| `unsigned int`                                          |                          | `Cuint`              | `UInt32`                                                                                                       |\n"
"| `long long`                                             | `INTEGER*8`, `LOGICAL*8` | `Clonglong`          | `Int64`                                                                                                        |\n"
"| `unsigned long long`                                    |                          | `Culonglong`         | `UInt64`                                                                                                       |\n"
"| `intmax_t`                                              |                          | `Cintmax_t`          | `Int64`                                                                                                        |\n"
"| `uintmax_t`                                             |                          | `Cuintmax_t`         | `UInt64`                                                                                                       |\n"
"| `float`                                                 | `REAL*4i`                | `Cfloat`             | `Float32`                                                                                                      |\n"
"| `double`                                                | `REAL*8`                 | `Cdouble`            | `Float64`                                                                                                      |\n"
"| `complex float`                                         | `COMPLEX*8`              | `ComplexF32`          | `Complex{Float32}`                                                                                             |\n"
"| `complex double`                                        | `COMPLEX*16`             | `ComplexF64`         | `Complex{Float64}`                                                                                             |\n"
"| `ptrdiff_t`                                             |                          | `Cptrdiff_t`         | `Int`                                                                                                          |\n"
"| `ssize_t`                                               |                          | `Cssize_t`           | `Int`                                                                                                          |\n"
"| `size_t`                                                |                          | `Csize_t`            | `UInt`                                                                                                         |\n"
"| `void`                                                  |                          |                      | `Cvoid`                                                                                                         |\n"
"| `void` and `[[noreturn]]` or `_Noreturn`                |                          |                      | `Union{}`                                                                                                      |\n"
"| `void*`                                                 |                          |                      | `Ptr{Cvoid}`                                                                                                    |\n"
"| `T*` (where T represents an appropriately defined type) |                          |                      | `Ref{T}`                                                                                                       |\n"
"| `char*` (or `char[]`, e.g. a string)                    | `CHARACTER*N`            |                      | `Cstring` if NUL-terminated, or `Ptr{UInt8}` if not                                                            |\n"
"| `char**` (or `*char[]`)                                 |                          |                      | `Ptr{Ptr{UInt8}}`                                                                                              |\n"
"| `jl_value_t*` (any Julia Type)                          |                          |                      | `Any`                                                                                                          |\n"
"| `jl_value_t**` (a reference to a Julia Type)            |                          |                      | `Ref{Any}`                                                                                                     |\n"
"| `va_arg`                                                |                          |                      | Not supported                                                                                                  |\n"
"| `...` (variadic function specification)                 |                          |                      | `T...` (where `T` is one of the above types, variadic functions of different argument types are not supported) |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:390
msgid ""
"The [`Cstring`](@ref) type is essentially a synonym for `Ptr{UInt8}`, except "
"the conversion to `Cstring` throws an error if the Julia string contains any "
"embedded NUL characters (which would cause the string to be silently "
"truncated if the C routine treats NUL as the terminator).  If you are "
"passing a `char*` to a C routine that does not assume NUL termination (e.g. "
"because you pass an explicit string length), or if you know for certain that "
"your Julia string does not contain NUL and want to skip the check, you can "
"use `Ptr{UInt8}` as the argument type. `Cstring` can also be used as the "
"[`ccall`](@ref) return type, but in that case it obviously does not "
"introduce any extra checks and is only meant to improve readability of the "
"call."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:392
#, no-wrap
msgid "**System-dependent:**\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:399
#, no-wrap
msgid ""
"| C name          | Standard Julia Alias | Julia Base Type                              |\n"
"|:--------------- |:-------------------- |:-------------------------------------------- |\n"
"| `char`          | `Cchar`              | `Int8` (x86, x86_64), `UInt8` (powerpc, arm) |\n"
"| `long`          | `Clong`              | `Int` (UNIX), `Int32` (Windows)              |\n"
"| `unsigned long` | `Culong`             | `UInt` (UNIX), `UInt32` (Windows)            |\n"
"| `wchar_t`       | `Cwchar_t`           | `Int32` (UNIX), `UInt16` (Windows)           |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:404
#, no-wrap
msgid ""
"!!! note\n"
"    When calling Fortran, all inputs must be passed by pointers to heap- or stack-allocated\n"
"    values, so all type correspondences above should contain an additional `Ptr{..}` or\n"
"    `Ref{..}` wrapper around their type specification.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:410
#, no-wrap
msgid ""
"!!! warning\n"
"    For string arguments (`char*`) the Julia type should be `Cstring` (if NUL- terminated data is\n"
"    expected) or either `Ptr{Cchar}` or `Ptr{UInt8}` otherwise (these two pointer types have the same\n"
"    effect), as described above, not `String`. Similarly, for array arguments (`T[]` or `T*`), the\n"
"    Julia type should again be `Ptr{T}`, not `Vector{T}`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:414
#, no-wrap
msgid ""
"!!! warning\n"
"    Julia's `Char` type is 32 bits, which is not the same as the wide character type (`wchar_t` or\n"
"    `wint_t`) on all platforms.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:419
#, no-wrap
msgid ""
"!!! warning\n"
"    A return type of `Union{}` means the function will not return i.e. C++11 `[[noreturn]]` or C11\n"
"    `_Noreturn` (e.g. `jl_throw` or `longjmp`). Do not use this for functions that return no value\n"
"    (`void`) but do return, use `Cvoid` instead.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:426
#, no-wrap
msgid ""
"!!! note\n"
"    For `wchar_t*` arguments, the Julia type should be [`Cwstring`](@ref) (if the C routine expects a NUL-terminated\n"
"    string) or `Ptr{Cwchar_t}` otherwise. Note also that UTF-8 string data in Julia is internally\n"
"    NUL-terminated, so it can be passed to C functions expecting NUL-terminated data without making\n"
"    a copy (but using the `Cwstring` type will cause an error to be thrown if the string itself contains\n"
"    NUL characters).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:430
#, no-wrap
msgid ""
"!!! note\n"
"    C functions that take an argument of the type `char**` can be called by using a `Ptr{Ptr{UInt8}}`\n"
"    type within Julia. For example, C functions of the form:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:434
#, no-wrap
msgid ""
"    ```c\n"
"    int main(int argc, char **argv);\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:436
#, no-wrap
msgid "    can be called via the following Julia code:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:441
#, no-wrap
msgid ""
"    ```julia\n"
"    argv = [ \"a.out\", \"arg1\", \"arg2\" ]\n"
"    ccall(:main, Int32, (Int32, Ptr{Ptr{UInt8}}), length(argv), argv)\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:449
#, no-wrap
msgid ""
"!!! note\n"
"    For Fortran functions taking variable length strings of type `character(len=*)` the string lengths\n"
"    are provided as *hidden arguments*. Type and position of these arguments in the list are compiler\n"
"    specific, where compiler vendors usually default to using `Csize_t` as type and append the hidden\n"
"    arguments at the end of the argument list. While this behaviour is fixed for some compilers (GNU),\n"
"    others *optionally* permit placing hidden arguments directly after the character argument (Intel,PGI).\n"
"    For example, Fortran subroutines of the form\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:454
#, no-wrap
msgid ""
"    ```fortran\n"
"    subroutine test(str1, str2)\n"
"    character(len=*) :: str1,str2\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:456
#, no-wrap
msgid "    can be called via the following Julia code, where the lengths are appended\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:463
#, no-wrap
msgid ""
"    ```julia\n"
"    str1 = \"foo\"\n"
"    str2 = \"bar\"\n"
"    ccall(:test, Void, (Ptr{UInt8}, Ptr{UInt8}, Csize_t, Csize_t),\n"
"                        str1, str2, sizeof(str1), sizeof(str2))\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:470
#, no-wrap
msgid ""
"!!! warning\n"
"    Fortran compilers *may* also add other hidden arguments for pointers, assumed-shape (`:`)\n"
"    and assumed-size (`*`) arrays. Such behaviour can be avoided by using `ISO_C_BINDING` and\n"
"    including `bind(c)` in the definition of the subroutine, which is strongly recommended for\n"
"    interoperable code. In this case there will be no hidden arguments, at the cost of some\n"
"    language features (e.g. only `character(len=1)` will be permitted to pass strings).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:473
#, no-wrap
msgid ""
"!!! note\n"
"    A C function declared to return `Cvoid` will return the value `nothing` in Julia.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:474
#, no-wrap
msgid "Struct Type correspondences"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:479
msgid ""
"Composite types, aka `struct` in C or `TYPE` in Fortran90 (or `STRUCTURE` / "
"`RECORD` in some variants of F77), can be mirrored in Julia by creating a "
"`struct` definition with the same field layout."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:485
msgid ""
"When used recursively, `isbits` types are stored inline. All other types are "
"stored as a pointer to the data. When mirroring a struct used by-value "
"inside another struct in C, it is imperative that you do not attempt to "
"manually copy the fields over, as this will not preserve the correct field "
"alignment. Instead, declare an `isbits` struct type and use that instead. "
"Unnamed structs are not possible in the translation to Julia."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:487
msgid "Packed structs and union declarations are not supported by Julia."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:491
msgid ""
"You can get a near approximation of a `union` if you know, a priori, the "
"field that will have the greatest size (potentially including padding). When "
"translating your fields to Julia, declare the Julia field to be only of that "
"type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:493
msgid "Arrays of parameters can be expressed with `NTuple`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:508
#, no-wrap
msgid ""
"in C:\n"
"```c\n"
"struct B {\n"
"    int A[3];\n"
"};\n"
"b_a_2 = B.A[2];\n"
"```\n"
"in Julia:\n"
"```julia\n"
"struct B\n"
"    A::NTuple{3, Cint}\n"
"end\n"
"b_a_2 = B.A[3]  # note the difference in indexing (1-based in Julia, 0-based in C)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:512
msgid ""
"Arrays of unknown size (C99-compliant variable length structs specified by "
"`[]` or `[0]`) are not directly supported.  Often the best way to deal with "
"these is to deal with the byte offsets directly.  For example, if a C "
"library declared a proper string type and returned a pointer to it:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:519
#, no-wrap
msgid ""
"```c\n"
"struct String {\n"
"    int strlen;\n"
"    char data[];\n"
"};\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:521
msgid ""
"In Julia, we can access the parts independently to make a copy of that "
"string:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:527
msgid ""
"```julia str = from_c::Ptr{Cvoid} len = unsafe_load(Ptr{Cint}(str))  "
"unsafe_string(str + Core.sizeof(Cint), len)  ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:528
#, no-wrap
msgid "Type Parameters"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:534
msgid ""
"The type arguments to `ccall` and `@cfunction` are evaluated statically, "
"when the method containing the usage is defined.  They therefore must take "
"the form of a literal tuple, not a variable, and cannot reference local "
"variables."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:538
msgid ""
"This may sound like a strange restriction, but remember that since C is not "
"a dynamic language like Julia, its functions can only accept argument types "
"with a statically-known, fixed signature."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:547
msgid ""
"However, while the type layout must be known statically to compute the "
"intended C ABI, the static parameters of the function are considered to be "
"part of this static environment.  The static parameters of the function may "
"be used as type parameters in the call signature, as long as they don't "
"affect the layout of the type.  For example, `f(x::T) where {T} = ccall(:"
"valid, Ptr{T}, (Ptr{T},), x)` is valid, since `Ptr` is always a word-size "
"primitive type.  But, `g(x::T) where {T} = ccall(:notvalid, T, (T,), x)` is "
"not valid, since the type layout of `T` is not known statically."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:548
#, no-wrap
msgid "SIMD Values"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:551
msgid ""
"Note: This feature is currently implemented on 64-bit x86 and AArch64 "
"platforms only."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:554
msgid ""
"If a C/C++ routine has an argument or return value that is a native SIMD "
"type, the corresponding Julia type is a homogeneous tuple of `VecElement` "
"that naturally maps to the SIMD type.  Specifically:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:559
#, no-wrap
msgid ""
">   * The tuple must be the same size as the SIMD type. For example, a tuple representing an `__m128`\n"
">     on x86 must have a size of 16 bytes.\n"
">   * The element type of the tuple must be an instance of `VecElement{T}` where `T` is a primitive type that\n"
">     is 1, 2, 4 or 8 bytes.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:561
msgid "For instance, consider this C routine that uses AVX intrinsics:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:563
#, no-wrap
msgid "#include <immintrin.h>\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:570
#, no-wrap
msgid ""
"__m256 dist( __m256 a, __m256 b ) {\n"
"    return _mm256_sqrt_ps(_mm256_add_ps(_mm256_mul_ps(a, a),\n"
"                                        _mm256_mul_ps(b, b)));\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:572
msgid "The following Julia code calls `dist` using `ccall`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:575
msgid "```julia const m256 = NTuple{8, VecElement{Float32}}"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:578
#, no-wrap
msgid ""
"a = m256(ntuple(i -> VecElement(sin(Float32(i))), 8))\n"
"b = m256(ntuple(i -> VecElement(cos(Float32(i))), 8))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:582
#, no-wrap
msgid ""
"function call_dist(a::m256, b::m256)\n"
"    ccall((:dist, \"libdist\"), m256, (m256, m256), a, b)\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:585
msgid "println(call_dist(a,b))  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:588
msgid ""
"The host machine must have the requisite SIMD registers.  For example, the "
"code above will not work on hosts without AVX support."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:589
#, no-wrap
msgid "Memory Ownership"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:592
#, no-wrap
msgid "**malloc/free**\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:598
msgid ""
"Memory allocation and deallocation of such objects must be handled by calls "
"to the appropriate cleanup routines in the libraries being used, just like "
"in any C program. Do not try to free an object received from a C library "
"with [`Libc.free`](@ref) in Julia, as this may result in the `free` function "
"being called via the wrong `libc` library and cause Julia to crash. The "
"reverse (passing an object allocated in Julia to be freed by an external "
"library) is equally invalid."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:599
#, no-wrap
msgid "When to use T, Ptr{T} and Ref{T}"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:609
#, no-wrap
msgid ""
"In Julia code wrapping calls to external C routines, ordinary (non-pointer) data should be declared\n"
"to be of type `T` inside the [`ccall`](@ref), as they are passed by value.  For C code accepting\n"
"pointers, [`Ref{T}`](@ref) should generally be used for the types of input arguments, allowing the use\n"
"of pointers to memory managed by either Julia or C through the implicit call to [`Base.cconvert`](@ref).\n"
" In contrast, pointers returned by the C function called should be declared to be of output type\n"
"[`Ptr{T}`](@ref), reflecting that the memory pointed to is managed by C only. Pointers contained in C\n"
"structs should be represented as fields of type `Ptr{T}` within the corresponding Julia struct\n"
"types designed to mimic the internal structure of corresponding C structs.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:614
msgid ""
"In Julia code wrapping calls to external Fortran routines, all input "
"arguments should be declared as of type `Ref{T}`, as Fortran passes all "
"variables by pointers to memory locations. The return type should either be "
"`Cvoid` for Fortran subroutines, or a `T` for Fortran functions returning "
"the type `T`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:615
#, no-wrap
msgid "Mapping C Functions to Julia"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:617
#, no-wrap
msgid "`ccall` / `@cfunction` argument translation guide"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:620
msgid "For translating a C argument list to Julia:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:623
msgid ""
"`T`, where `T` is one of the primitive types: `char`, `int`, `long`, "
"`short`, `float`, `double`, `complex`, `enum` or any of their `typedef` "
"equivalents"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:628
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:674
msgid "`T`, where `T` is an equivalent Julia Bits Type (per the table above)"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:628
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:674
msgid ""
"if `T` is an `enum`, the argument type should be equivalent to `Cint` or "
"`Cuint`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:628
#, no-wrap
msgid ""
"      * argument value will be copied (passed by value)\n"
"  * `struct T` (including typedef to a struct)\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:632
msgid "`T`, where `T` is a Julia leaf type"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:632
#, no-wrap
msgid ""
"      * argument value will be copied (passed by value)\n"
"  * `void*`\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:637
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:683
msgid ""
"depends on how this parameter is used, first translate this to the intended "
"pointer type, then determine the Julia equivalent using the remaining rules "
"in this list"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:637
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:683
#, no-wrap
msgid ""
"      * this argument may be declared as `Ptr{Cvoid}`, if it really is just an unknown pointer\n"
"  * `jl_value_t*`\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:641
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:687
msgid "`Any`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:641
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:687
#, no-wrap
msgid ""
"      * argument value must be a valid Julia object\n"
"  * `jl_value_t**`\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:645
msgid "`Ref{Any}`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:645
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:691
#, no-wrap
msgid ""
"      * argument value must be a valid Julia object (or `C_NULL`)\n"
"  * `T*`\n"
msgstr ""

#. type: Bullet: '          * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:650
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:699
msgid "`Ref{T}`, where `T` is the Julia type corresponding to `T`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:650
#, no-wrap
msgid ""
"      * argument value will be copied if it is an `isbits` type otherwise, the value must be a valid Julia\n"
"        object\n"
"  * `T (*)(...)` (e.g. a pointer to a function)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:653
#, no-wrap
msgid ""
"      * `Ptr{Cvoid}` (you may need to use [`@cfunction`](@ref) explicitly to create this pointer)\n"
"  * `...` (e.g. a vararg)\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:657
msgid "`T...`, where `T` is the Julia type"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:657
#, no-wrap
msgid ""
"      * currently unsupported by `@cfunction`\n"
"  * `va_arg`\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:659
msgid "not supported by `ccall` or `@cfunction`"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:660
#, no-wrap
msgid "`ccall` / `@cfunction` return type translation guide"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:663
msgid "For translating a C return type to Julia:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:665
msgid "`void`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:669
#, no-wrap
msgid ""
"      * `Cvoid` (this will return the singleton instance `nothing::Cvoid`)\n"
"  * `T`, where `T` is one of the primitive types: `char`, `int`, `long`, `short`, `float`, `double`,\n"
"    `complex`, `enum` or any of their `typedef` equivalents\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:674
#, no-wrap
msgid ""
"      * argument value will be copied (returned by-value)\n"
"  * `struct T` (including typedef to a struct)\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:678
msgid "`T`, where `T` is a Julia Leaf Type"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:678
#, no-wrap
msgid ""
"      * argument value will be copied (returned by-value)\n"
"  * `void*`\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:691
msgid "`Ptr{Any}` (`Ref{Any}` is invalid as a return type)"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:693
msgid ""
"If the memory is already owned by Julia, or is an `isbits` type, and is "
"known to be non-null:"
msgstr ""

#. type: Bullet: '          * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:699
msgid ""
"a return type of `Ref{Any}` is invalid, it should either be `Any` "
"(corresponding to `jl_value_t*`)  or `Ptr{Any}` (corresponding to "
"`jl_value_t**`)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:699
#, no-wrap
msgid ""
"          * C **MUST NOT** modify the memory returned via `Ref{T}` if `T` is an `isbits` type\n"
"      * If the memory is owned by C:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:702
#, no-wrap
msgid ""
"          * `Ptr{T}`, where `T` is the Julia type corresponding to `T`\n"
"  * `T (*)(...)` (e.g. a pointer to a function)\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:704
msgid ""
"`Ptr{Cvoid}` (you may need to use [`@cfunction`](@ref) explicitly to create "
"this pointer)"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:705
#, no-wrap
msgid "Passing Pointers for Modifying Inputs"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:711
msgid ""
"Because C doesn't support multiple return values, often C functions will "
"take pointers to data that the function will modify. To accomplish this "
"within a [`ccall`](@ref), you need to first encapsulate the value inside a "
"[`Ref{T}`](@ref) of the appropriate type. When you pass this `Ref` object as "
"an argument, Julia will automatically pass a C pointer to the encapsulated "
"data:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:717
msgid ""
"```julia width = Ref{Cint}(0)  range = Ref{Cfloat}(0)  ccall(:foo, Cvoid, "
"(Ref{Cint}, Ref{Cfloat}), width, range)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:720
msgid ""
"Upon return, the contents of `width` and `range` can be retrieved (if they "
"were changed by `foo`)  by `width[]` and `range[]`; that is, they act like "
"zero-dimensional arrays."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:721
#, no-wrap
msgid "Special Reference Syntax for ccall (deprecated):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:724
msgid "The `&` syntax is deprecated, use the `Ref{T}` argument type instead."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:728
msgid ""
"A prefix `&` is used on an argument to [`ccall`](@ref) to indicate that a "
"pointer to a scalar argument should be passed instead of the scalar value "
"itself (required for all Fortran function arguments, as noted above). The "
"following example computes a dot product using a BLAS function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:741
#, no-wrap
msgid ""
"```julia\n"
"function compute_dot(DX::Vector{Float64}, DY::Vector{Float64})\n"
"    @assert length(DX) == length(DY)\n"
"    n = length(DX)\n"
"    incx = incy = 1\n"
"    product = ccall((:ddot_, \"libLAPACK\"),\n"
"                    Float64,\n"
"                    (Ref{Int32}, Ptr{Float64}, Ref{Int32}, Ptr{Float64}, Ref{Int32}),\n"
"                    n, DX, incx, DY, incy)\n"
"    return product\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:747
msgid ""
"The meaning of prefix `&` is not quite the same as in C. In particular, any "
"changes to the referenced variables will not be visible in Julia unless the "
"type is mutable (declared via `mutable struct`). However, even for immutable "
"structs it will not cause any harm for called functions to attempt such "
"modifications (that is, writing through the passed pointers). Moreover, `&` "
"may be used with any expression, such as `&0` or `&f(x)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:750
msgid ""
"When a scalar value is passed with `&` as an argument of type `Ptr{T}`, the "
"value will first be converted to type `T`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:751
#, no-wrap
msgid "Some Examples of C Wrappers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:754
msgid "Here is a simple example of a C wrapper that returns a `Ptr` type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:758
msgid "```julia mutable struct gsl_permutation end"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:759
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:794
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:822
#, no-wrap
msgid "The corresponding C signature is"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:760
#, no-wrap
msgid "gsl_permutation * gsl_permutation_alloc (size_t n);"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:774
#, no-wrap
msgid ""
"function permutation_alloc(n::Integer)\n"
"    output_ptr = ccall(\n"
"        (:gsl_permutation_alloc, :libgsl), # name of C function and library\n"
"        Ptr{gsl_permutation},              # output type\n"
"        (Csize_t,),                        # tuple of input types\n"
"        n                                  # name of Julia variable to pass in\n"
"    )\n"
"    if output_ptr == C_NULL # Could not allocate memory\n"
"        throw(OutOfMemoryError())\n"
"    end\n"
"    return output_ptr\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:782
msgid ""
"The [GNU Scientific Library](https://www.gnu.org/software/gsl/) (here "
"assumed to be accessible through `:libgsl`) defines an opaque pointer, "
"`gsl_permutation *`, as the return type of the C function "
"`gsl_permutation_alloc`. As user code never has to look inside the "
"`gsl_permutation` struct, the corresponding Julia wrapper simply needs a new "
"type declaration, `gsl_permutation`, that has no internal fields and whose "
"sole purpose is to be placed in the type parameter of a `Ptr` type.  The "
"return type of the [`ccall`](@ref) is declared as `Ptr{gsl_permutation}`, "
"since the memory allocated and pointed to by `output_ptr` is controlled by C "
"(and not Julia)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:790
msgid ""
"The input `n` is passed by value, and so the function's input signature is "
"simply declared as `(Csize_t,)` without any `Ref` or `Ptr` necessary. (If "
"the wrapper was calling a Fortran function instead, the corresponding "
"function input signature should instead be `(Ref{Csize_t},)`, since Fortran "
"variables are passed by pointers.) Furthermore, `n` can be any type that is "
"convertible to a `Csize_t` integer; the [`ccall`](@ref) implicitly calls "
"[`Base.cconvert(Csize_t, n)`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:792
msgid "Here is a second example wrapping the corresponding destructor:"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:795
#, no-wrap
msgid "void gsl_permutation_free (gsl_permutation * p);"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:805
#, no-wrap
msgid ""
"function permutation_free(p::Ref{gsl_permutation})\n"
"    ccall(\n"
"        (:gsl_permutation_free, :libgsl), # name of C function and library\n"
"        Cvoid,                             # output type\n"
"        (Ref{gsl_permutation},),          # tuple of input types\n"
"        p                                 # name of Julia variable to pass in\n"
"    )\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:814
msgid ""
"Here, the input `p` is declared to be of type `Ref{gsl_permutation}`, "
"meaning that the memory that `p` points to may be managed by Julia or by C. "
"A pointer to memory allocated by C should be of type `Ptr{gsl_permutation}`, "
"but it is convertible using [`Base.cconvert`](@ref) and therefore can be "
"used in the same (covariant) context of the input argument to a [`ccall`]"
"(@ref). A pointer to memory allocated by Julia must be of type "
"`Ref{gsl_permutation}`, to ensure that the memory address pointed to is "
"valid and that Julia's garbage collector manages the chunk of memory pointed "
"to correctly. Therefore, the `Ref{gsl_permutation}` declaration allows "
"pointers managed by C or Julia to be used."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:818
msgid ""
"If the C wrapper never expects the user to pass pointers to memory managed "
"by Julia, then using `p::Ptr{gsl_permutation}` for the method signature of "
"the wrapper and similarly in the [`ccall`](@ref)  is also acceptable."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:820
msgid "Here is a third example passing Julia arrays:"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:823
#, no-wrap
msgid "int gsl_sf_bessel_Jn_array (int nmin, int nmax, double x,"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:824
#, no-wrap
msgid "double result_array[])"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:842
#, no-wrap
msgid ""
"function sf_bessel_Jn_array(nmin::Integer, nmax::Integer, x::Real)\n"
"    if nmax < nmin\n"
"        throw(DomainError())\n"
"    end\n"
"    result_array = Vector{Cdouble}(undef, nmax - nmin + 1)\n"
"    errorcode = ccall(\n"
"        (:gsl_sf_bessel_Jn_array, :libgsl), # name of C function and library\n"
"        Cint,                               # output type\n"
"        (Cint, Cint, Cdouble, Ref{Cdouble}),# tuple of input types\n"
"        nmin, nmax, x, result_array         # names of Julia variables to pass in\n"
"    )\n"
"    if errorcode != 0\n"
"        error(\"GSL error code $errorcode\")\n"
"    end\n"
"    return result_array\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:848
msgid ""
"The C function wrapped returns an integer error code; the results of the "
"actual evaluation of the Bessel J function populate the Julia array "
"`result_array`. This variable can only be used with corresponding input type "
"declaration `Ref{Cdouble}`, since its memory is allocated and managed by "
"Julia, not C. The implicit call to [`Base.cconvert(Ref{Cdouble}, "
"result_array)`](@ref) unpacks the Julia pointer to a Julia array data "
"structure into a form understandable by C."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:857
msgid ""
"Note that for this code to work correctly, `result_array` must be declared "
"to be of type `Ref{Cdouble}` and not `Ptr{Cdouble}`. The memory is managed "
"by Julia and the `Ref` signature alerts Julia's garbage collector to keep "
"managing the memory for `result_array` while the [`ccall`](@ref) executes.  "
"If `Ptr{Cdouble}` were used instead, the [`ccall`](@ref) may still work, but "
"Julia's garbage collector would not be aware that the memory declared for "
"`result_array` is being used by the external C function. As a result, the "
"code may produce a memory leak if `result_array` never gets freed by the "
"garbage collector, or if the garbage collector prematurely frees "
"`result_array`, the C function may end up throwing an invalid memory access "
"exception."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:858
#, no-wrap
msgid "Garbage Collection Safety"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:867
msgid ""
"When passing data to a [`ccall`](@ref), it is best to avoid using the "
"[`pointer`](@ref) function.  Instead define a convert method and pass the "
"variables directly to the [`ccall`](@ref). [`ccall`](@ref)  automatically "
"arranges that all of its arguments will be preserved from garbage collection "
"until the call returns. If a C API will store a reference to memory "
"allocated by Julia, after the [`ccall`](@ref)  returns, you must arrange "
"that the object remains visible to the garbage collector. The suggested way "
"to handle this is to make a global variable of type `Array{Ref,1}` to hold "
"these values, until the C library notifies you that it is finished with them."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:873
msgid ""
"Whenever you have created a pointer to Julia data, you must ensure the "
"original data exists until you are done with using the pointer. Many methods "
"in Julia such as [`unsafe_load`](@ref) and [`String`](@ref) make copies of "
"data instead of taking ownership of the buffer, so that it is safe to free "
"(or alter) the original data without affecting Julia. A notable exception is "
"[`unsafe_wrap`](@ref)  which, for performance reasons, shares (or can be "
"told to take ownership of) the underlying buffer."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:878
msgid ""
"The garbage collector does not guarantee any order of finalization. That is, "
"if `a` contained a reference to `b` and both `a` and `b` are due for garbage "
"collection, there is no guarantee that `b` would be finalized after `a`. If "
"proper finalization of `a` depends on `b` being valid, it must be handled in "
"other ways."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:879
#, no-wrap
msgid "Non-constant Function Specifications"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:883
msgid ""
"A `(name, library)` function specification must be a constant expression. "
"However, it is possible to use computed values as function names by staging "
"through [`eval`](@ref) as follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:887
msgid "``` @eval ccall(($(string(\"a\", \"b\")), \"lib\"), ...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:894
msgid ""
"This expression constructs a name using `string`, then substitutes this name "
"into a new [`ccall`](@ref)  expression, which is then evaluated. Keep in "
"mind that `eval` only operates at the top level, so within this expression "
"local variables will not be available (unless their values are substituted "
"with `$`). For this reason, `eval` is typically only used to form top-level "
"definitions, for example when wrapping libraries that contain many similar "
"functions.  A similar example can be constructed for [`@cfunction`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:897
msgid ""
"However, doing this will also be very slow and leak memory, so you should "
"usually avoid this and instead keep reading.  The next section discusses how "
"to use indirect calls to efficiently accomplish a similar effect."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:898
#, no-wrap
msgid "Indirect Calls"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:904
msgid ""
"The first argument to [`ccall`](@ref) can also be an expression evaluated at "
"run time. In this case, the expression must evaluate to a `Ptr`, which will "
"be used as the address of the native function to call. This behavior occurs "
"when the first [`ccall`](@ref) argument contains references to non-"
"constants, such as local variables, function arguments, or non-constant "
"globals."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:907
msgid ""
"For example, you might look up the function via `dlsym`, then cache it in a "
"shared reference for that session. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:921
#, no-wrap
msgid ""
"```julia\n"
"macro dlsym(func, lib)\n"
"    z = Ref{Ptr{Cvoid}}(C_NULL)\n"
"    quote\n"
"        let zlocal = $z[]\n"
"            if zlocal == C_NULL\n"
"                zlocal = dlsym($(esc(lib))::Ptr{Cvoid}, $(esc(func)))::Ptr{Cvoid}\n"
"                $z[] = $zlocal\n"
"            end\n"
"            zlocal\n"
"        end\n"
"    end\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:925
msgid ""
"mylibvar = Libdl.dlopen(\"mylib\")  ccall(@dlsym(\"myfunc\", mylibvar), "
"Cvoid, ())  ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:926
#, no-wrap
msgid "Closure cfunctions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:935
msgid ""
"The first argument to [`@cfunction`](@ref) can be marked with a `$`, in "
"which case the return value will instead be a `struct CFunction` which "
"closes over the argument.  You must ensure that this return object is kept "
"alive until all uses of it are done.  The contents and code at the cfunction "
"pointer will be erased via a [`finalizer`](@ref)  when this reference is "
"dropped and atexit. This is not usually needed, since this functionality is "
"not present in C, but can be useful for dealing with ill-designed APIs which "
"don't provide a separate closure environment parameter."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:952
#, no-wrap
msgid ""
"```julia\n"
"function qsort(a::Vector{T}, cmp) where T\n"
"    isbits(T) || throw(ArgumentError(\"this method can only qsort isbits arrays\"))\n"
"    callback = @cfunction $cmp Cint (Ref{T}, Ref{T})\n"
"    # Here, `callback` isa Base.CFunction, which will be converted to Ptr{Cvoid}\n"
"    # (and protected against finalization) by the ccall\n"
"    ccall(:qsort, Cvoid, (Ptr{T}, Csize_t, Csize_t, Ptr{Cvoid}),\n"
"        a, length(a), Base.elsize(a), callback)\n"
"    # We could instead use:\n"
"    #    GC.@preserve callback begin\n"
"    #        use(Base.unsafe_convert(Ptr{Cvoid}, callback))\n"
"    #    end\n"
"    # if we needed to use it outside of a `ccall`\n"
"    return a\n"
"end\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:954
#, no-wrap
msgid "Closing a Library"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:961
msgid ""
"It is sometimes useful to close (unload) a library so that it can be "
"reloaded.  For instance, when developing C code for use with Julia, one may "
"need to compile, call the C code from Julia, then close the library, make an "
"edit, recompile, and load in the new changes. One can either restart Julia "
"or use the `Libdl` functions to manage the library explicitly, such as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:968
#, no-wrap
msgid ""
"```julia\n"
"lib = Libdl.dlopen(\"./my_lib.so\") # Open the library explicitly.\n"
"sym = Libdl.dlsym(lib, :my_fcn)   # Get a symbol for the function to call.\n"
"ccall(sym, ...) # Use the pointer `sym` instead of the (symbol, library) tuple (remaining arguments are the same).\n"
"Libdl.dlclose(lib) # Close the library explicitly.\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:972
msgid ""
"Note that when using `ccall` with the tuple input (e.g., `ccall((:my_fcn, "
"\"./my_lib.so\"), ...)`), the library is opened implicitly and it may not be "
"explicitly closed."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:973
#, no-wrap
msgid "Calling Convention"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:980
msgid ""
"The second argument to [`ccall`](@ref) can optionally be a calling "
"convention specifier (immediately preceding return type). Without any "
"specifier, the platform-default C calling convention is used.  Other "
"supported conventions are: `stdcall`, `cdecl`, `fastcall`, and `thiscall` "
"(no-op on 64-bit Windows). For example (from `base/libc.jl`) we see the same "
"`gethostname`[`ccall`](@ref) as above, but with the correct signature for "
"Windows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:985
msgid ""
"```julia hn = Vector{UInt8}(undef, 256)  err = ccall(:gethostname, stdcall, "
"Int32, (Ptr{UInt8}, UInt32), hn, length(hn))  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:987
msgid ""
"For more information, please see the [LLVM Language Reference](http://llvm."
"org/docs/LangRef.html#calling-conventions)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:992
msgid ""
"There is one additional special calling convention [`llvmcall`](@ref Base."
"llvmcall), which allows inserting calls to LLVM intrinsics directly.  This "
"can be especially useful when targeting unusual platforms such as GPGPUs.  "
"For example, for [CUDA](http://llvm.org/docs/NVPTXUsage.html), we need to be "
"able to read the thread index:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:996
msgid ""
"```julia ccall(\"llvm.nvvm.read.ptx.sreg.tid.x\", llvmcall, Int32, ())  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1001
msgid ""
"As with any `ccall`, it is essential to get the argument signature exactly "
"correct.  Also, note that there is no compatibility layer that ensures the "
"intrinsic makes sense and works on the current target, unlike the equivalent "
"Julia functions exposed by `Core.Intrinsics`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1002
#, no-wrap
msgid "Accessing Global Variables"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1007
msgid ""
"Global variables exported by native libraries can be accessed by name using "
"the [`cglobal`](@ref)  function. The arguments to [`cglobal`](@ref) are a "
"symbol specification identical to that used by [`ccall`](@ref), and a type "
"describing the value stored in the variable:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1012
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> cglobal((:errno, :libc), Int32)\n"
"Ptr{Int32} @0x00007f418d0816b8\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1015
msgid ""
"The result is a pointer giving the address of the value. The value can be "
"manipulated through this pointer using [`unsafe_load`](@ref) and "
"[`unsafe_store!`](@ref)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1016
#, no-wrap
msgid "Accessing Data through a Pointer"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1020
msgid ""
"The following methods are described as \"unsafe\" because a bad pointer or "
"type declaration can cause Julia to terminate abruptly."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1025
msgid ""
"Given a `Ptr{T}`, the contents of type `T` can generally be copied from the "
"referenced memory into a Julia object using `unsafe_load(ptr, [index])`. The "
"index argument is optional (default is 1), and follows the Julia-convention "
"of 1-based indexing. This function is intentionally similar to the behavior "
"of [`getindex`](@ref) and [`setindex!`](@ref) (e.g. `[]` access syntax)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1028
msgid ""
"The return value will be a new object initialized to contain a copy of the "
"contents of the referenced memory. The referenced memory can safely be freed "
"or released."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1037
msgid ""
"If `T` is `Any`, then the memory is assumed to contain a reference to a "
"Julia object (a `jl_value_t*`), the result will be a reference to this "
"object, and the object will not be copied. You must be careful in this case "
"to ensure that the object was always visible to the garbage collector "
"(pointers do not count, but the new reference does) to ensure the memory is "
"not prematurely freed. Note that if the object was not originally allocated "
"by Julia, the new object will never be finalized by Julia's garbage "
"collector.  If the `Ptr` itself is actually a `jl_value_t*`, it can be "
"converted back to a Julia object reference by "
"[`unsafe_pointer_to_objref(ptr)`](@ref). (Julia values `v` can be converted "
"to `jl_value_t*` pointers, as `Ptr{Cvoid}`, by calling "
"[`pointer_from_objref(v)`](@ref).)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1040
msgid ""
"The reverse operation (writing data to a `Ptr{T}`), can be performed using "
"[`unsafe_store!(ptr, value, [index])`](@ref).  Currently, this is only "
"supported for primitive types or other pointer-free (`isbits`) immutable "
"struct types."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1043
msgid ""
"Any operation that throws an error is probably currently unimplemented and "
"should be posted as a bug so that it can be resolved."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1049
msgid ""
"If the pointer of interest is a plain-data array (primitive type or "
"immutable struct), the function [`unsafe_wrap(Array, ptr,dims, own = false)`]"
"(@ref)  may be more useful. The final parameter should be true if Julia "
"should \"take ownership\" of the underlying buffer and call `free(ptr)` when "
"the returned `Array` object is finalized.  If the `own` parameter is omitted "
"or false, the caller must ensure the buffer remains in existence until all "
"access is complete."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1054
msgid ""
"Arithmetic on the `Ptr` type in Julia (e.g. using `+`) does not behave the "
"same as C's pointer arithmetic. Adding an integer to a `Ptr` in Julia always "
"moves the pointer by some number of *bytes*, not elements. This way, the "
"address values obtained from pointer arithmetic do not depend on the element "
"types of pointers."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1055
#, no-wrap
msgid "Thread-safety"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1061
msgid ""
"Some C libraries execute their callbacks from a different thread, and since "
"Julia isn't thread-safe you'll need to take some extra precautions. In "
"particular, you'll need to set up a two-layered system: the C callback "
"should only *schedule* (via Julia's event loop) the execution of your \"real"
"\" callback. To do this, create an [`AsyncCondition`](@ref Base."
"AsyncCondition) object and [`wait`](@ref) on it:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1066
msgid "```julia cond = Base.AsyncCondition()  wait(cond)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1070
msgid ""
"The callback you pass to C should only execute a [`ccall`](@ref) to `:"
"uv_async_send`, passing `cond.handle` as the argument, taking care to avoid "
"any allocations or other interactions with the Julia runtime."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1073
msgid ""
"Note that events may be coalesced, so multiple calls to `uv_async_send` may "
"result in a single wakeup notification to the condition."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1074
#, no-wrap
msgid "More About Callbacks"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1077
msgid ""
"For more details on how to pass callbacks to C libraries, see this [blog "
"post](https://julialang.org/blog/2013/05/callback)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1078
#, no-wrap
msgid "C++"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/calling-c-and-fortran-code.md:1081
msgid ""
"For direct C++ interfacing, see the [Cxx](https://github.com/Keno/Cxx.jl) "
"package. For tools to create C++ bindings, see the [CxxWrap](https://github."
"com/JuliaInterop/CxxWrap.jl) package."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/missing.md:1
#, no-wrap
msgid "[Missing Values](@id missing)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:11
msgid ""
"Julia provides support for representing missing values in the statistical "
"sense, that is for situations where no value is available for a variable in "
"an observation, but a valid value theoretically exists.  Missing values are "
"represented via the [`missing`](@ref) object, which is the singleton "
"instance of the type [`Missing`](@ref). `missing` is equivalent to [`NULL` "
"in SQL](https://en.wikipedia.org/wiki/NULL_(SQL)) and [`NA` in R](https://"
"cran.r-project.org/doc/manuals/r-release/R-lang.html#NA-handling), and "
"behaves like them in most situations."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/missing.md:12
#, no-wrap
msgid "Propagation of Missing Values"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:22
#, no-wrap
msgid ""
"The behavior of `missing` values follows one basic rule: `missing`\n"
"values *propagate* automatically when passed to standard operators and functions,\n"
"in particular mathematical functions. Uncertainty about the value of one of the operands\n"
"induces uncertainty about the result. In practice, this means an operation involving\n"
"a `missing` value generally returns `missing`\n"
"```jldoctest\n"
"julia> missing + 1\n"
"missing\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:25
#, no-wrap
msgid ""
"julia> \"a\" * missing\n"
"missing\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:29
#, no-wrap
msgid ""
"julia> abs(missing)\n"
"missing\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:39
msgid ""
"As `missing` is a normal Julia object, this propagation rule only works for "
"functions which have opted in to implement this behavior. This can be "
"achieved either via a specific method defined for arguments of type "
"`Missing`, or simply by accepting arguments of this type, and passing them "
"to functions which propagate them (like standard operators). Packages should "
"consider whether it makes sense to propagate missing values when defining "
"new functions, and define methods appropriately if that is the case. Passing "
"a `missing` value to a function for which no method accepting arguments of "
"type `Missing` is defined throws a [`MethodError`](@ref), just like for any "
"other type."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/missing.md:40
#, no-wrap
msgid "Equality and Comparison Operators"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:48
#, no-wrap
msgid ""
"Standard equality and comparison operators follow the propagation rule presented\n"
"above: if any of the operands is `missing`, the result is `missing`.\n"
"Here are a few examples\n"
"```jldoctest\n"
"julia> missing == 1\n"
"missing\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:51
#, no-wrap
msgid ""
"julia> missing == missing\n"
"missing\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:54
#, no-wrap
msgid ""
"julia> missing < 1\n"
"missing\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:58
#, no-wrap
msgid ""
"julia> 2 >= missing\n"
"missing\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:62
msgid ""
"In particular, note that `missing == missing` returns `missing`, so `==` "
"cannot be used to test whether a value is missing. To test whether `x` is "
"`missing`, use [`ismissing(x)`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:70
#, no-wrap
msgid ""
"Special comparison operators [`isequal`](@ref) and [`===`](@ref) are exceptions\n"
"to the propagation rule: they always return a `Bool` value, even in the presence\n"
"of `missing` values, considering `missing` as equal to `missing` and as different\n"
"from any other value. They can therefore be used to test whether a value is `missing`\n"
"```jldoctest\n"
"julia> missing === 1\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:73
#, no-wrap
msgid ""
"julia> isequal(missing, 1)\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:76
#, no-wrap
msgid ""
"julia> missing === missing\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:80
#, no-wrap
msgid ""
"julia> isequal(missing, missing)\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:87
#, no-wrap
msgid ""
"The [`isless`](@ref) operator is another exception: `missing` is considered\n"
"as greater than any other value. This operator is used by [`sort`](@ref),\n"
"which therefore places `missing` values after all other values.\n"
"```jldoctest\n"
"julia> isless(1, missing)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:90
#, no-wrap
msgid ""
"julia> isless(missing, Inf)\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:94
#, no-wrap
msgid ""
"julia> isless(missing, missing)\n"
"false\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/missing.md:95
#, no-wrap
msgid "Logical operators"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:105
msgid ""
"Logical (or boolean) operators [`|`](@ref), [`&`](@ref) and [`xor`](@ref) "
"are another special case, as they only propagate `missing` values when it is "
"logically required. For these operators, whether or not the result is "
"uncertain depends on the particular operation, following the well-"
"established rules of [*three-valued logic*](https://en.wikipedia.org/wiki/"
"Three-valued_logic) which are also implemented by `NULL` in SQL and `NA` in "
"R. This abstract definition actually corresponds to a relatively natural "
"behavior which is best explained via concrete examples."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:113
#, no-wrap
msgid ""
"Let us illustrate this principle with the logical \"or\" operator [`|`](@ref).\n"
"Following the rules of boolean logic, if one of the operands is `true`,\n"
"the value of the other operand does not have an influence on the result,\n"
"which will always be `true`\n"
"```jldoctest\n"
"julia> true | true\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:116
#: ext/julia/doc/src/manual/missing.md:144
#, no-wrap
msgid ""
"julia> true | false\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:120
#, no-wrap
msgid ""
"julia> false | true\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:130
#, no-wrap
msgid ""
"Based on this observation, we can conclude that if one of the operands is `true`\n"
"and the other `missing`, we know that the result is `true` in spite of the\n"
"uncertainty about the actual value of one of the operands. If we had\n"
"been able to observe the actual value of the second operand, it could only be\n"
"`true` or `false`, and in both cases the result would be `true`. Therefore,\n"
"in this particular case, missingness does *not* propagate\n"
"```jldoctest\n"
"julia> true | missing\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:134
#, no-wrap
msgid ""
"julia> missing | true\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:141
#, no-wrap
msgid ""
"On the contrary, if one of the operands is `false`, the result could be either\n"
"`true` or `false` depending on the value of the other operand. Therefore,\n"
"if that operand is `missing`, the result has to be `missing` too\n"
"```jldoctest\n"
"julia> false | true\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:147
#, no-wrap
msgid ""
"julia> false | false\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:150
#, no-wrap
msgid ""
"julia> false | missing\n"
"missing\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:154
#, no-wrap
msgid ""
"julia> missing | false\n"
"missing\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:162
#, no-wrap
msgid ""
"The behavior of the logical \"and\" operator [`&`](@ref) is similar to that of the\n"
"`|` operator, with the difference that missingness does not propagate when\n"
"one of the operands is `false`. For example, when that is the case of the first\n"
"operand\n"
"```jldoctest\n"
"julia> false & false\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:165
#, no-wrap
msgid ""
"julia> false & true\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:169
#, no-wrap
msgid ""
"julia> false & missing\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:175
#, no-wrap
msgid ""
"On the other hand, missingness propagates when one of the operands is `true`,\n"
"for example the first one\n"
"```jldoctest\n"
"julia> true & true\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:178
#, no-wrap
msgid ""
"julia> true & false\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:182
#, no-wrap
msgid ""
"julia> true & missing\n"
"missing\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:187
msgid ""
"Finally, the \"exclusive or\" logical operator [`xor`](@ref) always "
"propagates `missing` values, since both operands always have an effect on "
"the result.  Also note that the negation operator [`!`](@ref) returns "
"`missing` when the operand is `missing` just like other unary operators."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/missing.md:188
#, no-wrap
msgid "Control Flow and Short-Circuiting Operators"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:202
#, no-wrap
msgid ""
"Control flow operators including [`if`](@ref), [`while`](@ref) and the\n"
"[ternary operator](@ref man-conditional-evaluation) `x ? y : z`\n"
"do not allow for missing values. This is because of the uncertainty about whether\n"
"the actual value would be `true` or `false` if we could observe it,\n"
"which implies that we do not know how the program should behave. A [`TypeError`](@ref)\n"
"is thrown as soon as a `missing` value is encountered in this context\n"
"```jldoctest\n"
"julia> if missing\n"
"           println(\"here\")\n"
"       end\n"
"ERROR: TypeError: non-boolean (Missing) used in boolean context\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:210
#, no-wrap
msgid ""
"For the same reason, contrary to logical operators presented above,\n"
"the short-circuiting boolean operators [`&&`](@ref) and [`||`](@ref) do not\n"
"allow for `missing` values in situations where the value of the operand\n"
"determines whether the next operand is evaluated or not. For example\n"
"```jldoctest\n"
"julia> missing || false\n"
"ERROR: TypeError: non-boolean (Missing) used in boolean context\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:213
#, no-wrap
msgid ""
"julia> missing && false\n"
"ERROR: TypeError: non-boolean (Missing) used in boolean context\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:217
#, no-wrap
msgid ""
"julia> true && missing && false\n"
"ERROR: TypeError: non-boolean (Missing) used in boolean context\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:225
#, no-wrap
msgid ""
"On the other hand, no error is thrown when the result can be determined without\n"
"the `missing` values. This is the case when the code short-circuits\n"
"before evaluating the `missing` operand, and when the `missing` operand is the\n"
"last one\n"
"```jldoctest\n"
"julia> true && missing\n"
"missing\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:229
#, no-wrap
msgid ""
"julia> false && missing\n"
"false\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/missing.md:230
#, no-wrap
msgid "Arrays With Missing Values"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:239
#, no-wrap
msgid ""
"Arrays containing missing values can be created like other arrays\n"
"```jldoctest\n"
"julia> [1, missing]\n"
"2-element Array{Union{Missing, Int64},1}:\n"
" 1\n"
"  missing\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:246
msgid ""
"As this example shows, the element type of such arrays is `Union{Missing, T}"
"`, with `T` the type of the non-missing values. This simply reflects the "
"fact that array entries can be either of type `T` (here, `Int64`) or of type "
"`Missing`.  This kind of array uses an efficient memory storage equivalent "
"to an `Array{T}` holding the actual values combined with an `Array{UInt8}` "
"indicating the type of the entry (i.e. whether it is `Missing` or `T`)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:256
#, no-wrap
msgid ""
"Arrays allowing for missing values can be constructed with the standard syntax.\n"
"Use `Array{Union{Missing, T}}(missing, dims)` to create arrays filled with\n"
"missing values:\n"
"```jldoctest\n"
"julia> Array{Union{Missing, String}}(missing, 2, 3)\n"
"2×3 Array{Union{Missing, String},2}:\n"
" missing  missing  missing\n"
" missing  missing  missing\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:266
#, no-wrap
msgid ""
"An array allowing for `missing` values but which does not contain any such value\n"
"can be converted back to an array which does not allow for missing values using\n"
"[`convert`](@ref). If the array contains `missing` values, a `MethodError` is thrown\n"
"during conversion\n"
"```jldoctest\n"
"julia> x = Union{Missing, String}[\"a\", \"b\"]\n"
"2-element Array{Union{Missing, String},1}:\n"
" \"a\"\n"
" \"b\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:271
#, no-wrap
msgid ""
"julia> convert(Array{String}, x)\n"
"2-element Array{String,1}:\n"
" \"a\"\n"
" \"b\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:276
#, no-wrap
msgid ""
"julia> y = Union{Missing, String}[missing, \"b\"]\n"
"2-element Array{Union{Missing, String},1}:\n"
" missing\n"
" \"b\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:280
#, no-wrap
msgid ""
"julia> convert(Array{String}, y)\n"
"ERROR: MethodError: Cannot `convert` an object of type Missing to an object of type String\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/missing.md:280
#, no-wrap
msgid "Skipping Missing Values"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:288
#, no-wrap
msgid ""
"Since `missing` values propagate with standard mathematical operators, reduction\n"
"functions return `missing` when called on arrays which contain missing values\n"
"```jldoctest\n"
"julia> sum([1, missing])\n"
"missing\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:294
#, no-wrap
msgid ""
"In this situation, use the [`skipmissing`](@ref) function to skip missing values\n"
"```jldoctest\n"
"julia> sum(skipmissing([1, missing]))\n"
"1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:300
#, no-wrap
msgid ""
"This convenience function returns an iterator which filters out `missing` values\n"
"efficiently. It can therefore be used with any function which supports iterators\n"
"```jldoctest; setup = :(using Statistics)\n"
"julia> maximum(skipmissing([3, missing, 2, 1]))\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:303
#, no-wrap
msgid ""
"julia> mean(skipmissing([3, missing, 2, 1]))\n"
"2.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:307
#, no-wrap
msgid ""
"julia> mapreduce(sqrt, +, skipmissing([3, missing, 2, 1]))\n"
"4.146264369941973\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:316
#, no-wrap
msgid ""
"Use [`collect`](@ref) to extract non-`missing` values and store them in an array\n"
"```jldoctest\n"
"julia> collect(skipmissing([3, missing, 2, 1]))\n"
"3-element Array{Int64,1}:\n"
" 3\n"
" 2\n"
" 1\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/missing.md:317
#, no-wrap
msgid "Logical Operations on Arrays"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:329
#, no-wrap
msgid ""
"The three-valued logic described above for logical operators is also used\n"
"by logical functions applied to arrays. Thus, array equality tests using\n"
"the [`==`](@ref) operator return `missing` whenever the result cannot be\n"
"determined without knowing the actual value of the `missing` entry. In practice,\n"
"this means that `missing` is returned if all non-missing values of the compared\n"
"arrays are equal, but one or both arrays contain missing values (possibly at\n"
"different positions)\n"
"```jldoctest\n"
"julia> [1, missing] == [2, missing]\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:332
#, no-wrap
msgid ""
"julia> [1, missing] == [1, missing]\n"
"missing\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:336
#, no-wrap
msgid ""
"julia> [1, 2, missing] == [1, missing, 2]\n"
"missing\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:342
#, no-wrap
msgid ""
"As for single values, use [`isequal`](@ref) to treat `missing` values as equal\n"
"to other `missing` values but different from non-missing values\n"
"```jldoctest\n"
"julia> isequal([1, missing], [1, missing])\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:346
#, no-wrap
msgid ""
"julia> isequal([1, 2, missing], [1, missing, 2])\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:352
#, no-wrap
msgid ""
"Functions [`any`](@ref) and [`all`](@ref) also follow the rules of\n"
"three-valued logic, returning `missing` when the result cannot be determined\n"
"```jldoctest\n"
"julia> all([true, missing])\n"
"missing\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:355
#, no-wrap
msgid ""
"julia> all([false, missing])\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:358
#, no-wrap
msgid ""
"julia> any([true, missing])\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/missing.md:361
#, no-wrap
msgid ""
"julia> any([false, missing])\n"
"missing\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/variables-and-scoping.md:1
#, no-wrap
msgid "[Scope of Variables](@id scope-of-variables)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:9
msgid ""
"The *scope* of a variable is the region of code within which a variable is "
"visible. Variable scoping helps avoid variable naming conflicts. The concept "
"is intuitive: two functions can both have arguments called `x` without the "
"two `x`'s referring to the same thing. Similarly, there are many other cases "
"where different blocks of code can use the same name without referring to "
"the same thing. The rules for when the same variable name does or doesn't "
"refer to the same thing are called scope rules; this section spells them out "
"in detail."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:15
msgid ""
"Certain constructs in the language introduce *scope blocks*, which are "
"regions of code that are eligible to be the scope of some set of variables. "
"The scope of a variable cannot be an arbitrary set of source lines; instead, "
"it will always line up with one of these blocks. There are two main types of "
"scopes in Julia, *global scope* and *local scope*. The latter can be nested. "
"The constructs introducing scope blocks are:"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/variables-and-scoping.md:16
#, no-wrap
msgid "[Scope constructs](@id man-scope-table)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:26
#, no-wrap
msgid ""
"Construct | Scope type | Scope blocks it may be nested in\n"
"------------ | -------------  |---------------------------\n"
"[`module`](@ref), [`baremodule`](@ref)            | global | global\n"
"interactive prompt (REPL)                         | global | global\n"
"(mutable) [`struct`](@ref), [`macro`](@ref)       | local  | global\n"
"[`for`](@ref), [`while`](@ref), [`try-catch-finally`](@ref try), [`let`](@ref) |local | global or local\n"
"functions (either syntax, anonymous & do-blocks) | local | global or local\n"
"comprehensions, broadcast-fusing                 | local | global or local\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:31
msgid ""
"Notably missing from this table are [begin blocks](@ref man-compound-"
"expressions) and [if blocks](@ref man-conditional-evaluation)  which do "
"*not* introduce new scopes.  Both types of scopes follow somewhat different "
"rules which will be explained below."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:36
msgid ""
"Julia uses [lexical scoping](https://en.wikipedia.org/wiki/Scope_"
"%28computer_science%29#Lexical_scoping_vs._dynamic_scoping), meaning that a "
"function's scope does not inherit from its caller's scope, but from the "
"scope in which the function was defined. For example, in the following code "
"the `x` inside `foo` refers to the `x` in the global scope of its module "
"`Bar`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:43
#, no-wrap
msgid ""
"```jldoctest moduleBar\n"
"julia> module Bar\n"
"           x = 1\n"
"           foo() = x\n"
"       end;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:45
msgid "and not a `x` in the scope where `foo` is used:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:48
#, no-wrap
msgid ""
"```jldoctest moduleBar\n"
"julia> import .Bar\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:50
#, no-wrap
msgid "julia> x = -1;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:54
#, no-wrap
msgid ""
"julia> Bar.foo()\n"
"1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:56
msgid ""
"Thus *lexical scope* means that the scope of variables can be inferred from "
"the source code alone."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/variables-and-scoping.md:57
#, no-wrap
msgid "Global Scope"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:64
msgid ""
"Each module introduces a new global scope, separate from the global scope of "
"all other modules; there is no all-encompassing global scope. Modules can "
"introduce variables of other modules into their scope through the [using or "
"import](@ref modules) statements or through qualified access using the dot-"
"notation, i.e. each module is a so-called *namespace*. Note that variable "
"bindings can only be changed within their global scope and not from an "
"outside module."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:69
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> module A\n"
"           a = 1 # a global in A's scope\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:79
#, no-wrap
msgid ""
"julia> module B\n"
"           module C\n"
"               c = 2\n"
"           end\n"
"           b = C.c    # can access the namespace of a nested global scope\n"
"                      # through a qualified access\n"
"           import ..A # makes module A available\n"
"           d = A.a\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:84
#, no-wrap
msgid ""
"julia> module D\n"
"           b = a # errors as D's global scope is separate from A's\n"
"       end;\n"
"ERROR: UndefVarError: a not defined\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:91
#, no-wrap
msgid ""
"julia> module E\n"
"           import ..A # make module A available\n"
"           A.a = 2    # throws below error\n"
"       end;\n"
"ERROR: cannot assign variables in other modules\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:93
msgid ""
"Note that the interactive prompt (aka REPL) is in the global scope of the "
"module `Main`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/variables-and-scoping.md:94
#, no-wrap
msgid "Local Scope"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:103
msgid ""
"A new local scope is introduced by most code blocks (see above [table](@ref "
"man-scope-table) for a complete list).  A local scope inherits all the "
"variables from a parent local scope, both for reading and writing.  Unlike "
"global scopes, local scopes are not namespaces, thus variables in an inner "
"scope cannot be retrieved from the parent scope through some sort of "
"qualified access."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:107
msgid ""
"The following rules and examples pertain to local scopes.  A newly "
"introduced variable in a local scope cannot be referenced by a parent "
"scope.  For example, here the ``z`` is not introduced into the top-level "
"scope:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:112
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for i = 1:10\n"
"           z = i\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:116
#, no-wrap
msgid ""
"julia> z\n"
"ERROR: UndefVarError: z not defined\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:120
#, no-wrap
msgid ""
"!!! note\n"
"    In this and all following examples it is assumed that their top-level is a global scope\n"
"    with a clean workspace, for instance a newly started REPL.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:122
msgid ""
"Inner local scopes can, however, update variables in their parent scopes:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:133
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for i = 1:1\n"
"           z = i\n"
"           for j = 1:1\n"
"               z = 0\n"
"           end\n"
"           println(z)\n"
"       end\n"
"0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:135
msgid ""
"Inside a local scope a variable can be forced to be a new local variable "
"using the [`local`](@ref) keyword:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:146
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for i = 1:1\n"
"           x = i + 1\n"
"           for j = 1:1\n"
"               local x = 0\n"
"           end\n"
"           println(x)\n"
"       end\n"
"2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:148
msgid ""
"Inside a local scope a global variable can be assigned to by using the "
"keyword [`global`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:154
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for i = 1:10\n"
"           global z\n"
"           z = i\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:158
#: ext/julia/doc/src/manual/variables-and-scoping.md:171
#, no-wrap
msgid ""
"julia> z\n"
"10\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:161
msgid ""
"The location of both the `local` and `global` keywords within the scope "
"block is irrelevant.  The following is equivalent to the last example "
"(although stylistically worse):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:167
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for i = 1:10\n"
"           z = i\n"
"           global z\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:174
msgid ""
"The `local` and `global` keywords can also be applied to destructuring "
"assignments, e.g.  `local x, y = 1, 2`. In this case the keyword affects all "
"listed variables."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:177
msgid ""
"In a local scope, all variables are inherited from its parent global scope "
"block unless:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/variables-and-scoping.md:180
msgid "an assignment would result in a modified *global* variable, or"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/variables-and-scoping.md:180
msgid "a variable is specifically marked with the keyword `local`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:182
msgid "Thus global variables are only inherited for reading, not for writing:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:185
#: ext/julia/doc/src/manual/variables-and-scoping.md:225
#: ext/julia/doc/src/manual/variables-and-scoping.md:272
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x, y = 1, 2;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:190
#, no-wrap
msgid ""
"julia> function foo()\n"
"           x = 2        # assignment introduces a new local\n"
"           return x + y # y refers to the global\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:193
#, no-wrap
msgid ""
"julia> foo()\n"
"4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:199
msgid "An explicit `global` is needed to assign to a global variable:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:207
#, no-wrap
msgid ""
"!!! sidebar \"Avoiding globals\"\n"
"    Avoiding changing the value of global variables is considered by many\n"
"    to be a programming best-practice.\n"
"    Changing the value of a global variable can cause \"action at a distance\",\n"
"    making the behavior of a program harder to reason about.\n"
"    This is why the scope blocks that introduce local scope require the `global`\n"
"    keyword to declare the intent to modify a global variable.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:210
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = 1;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:214
#, no-wrap
msgid ""
"julia> function foobar()\n"
"           global x = 2\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:216
#, no-wrap
msgid "julia> foobar();\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:220
#, no-wrap
msgid ""
"julia> x\n"
"2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:222
msgid ""
"Note that *nested functions* can modify their parent scope's *local* "
"variables:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:234
#, no-wrap
msgid ""
"julia> function baz()\n"
"           x = 2 # introduces a new local\n"
"           function bar()\n"
"               x = 10       # modifies the parent's x\n"
"               return x + y # y is global\n"
"           end\n"
"           return bar() + x # 12 + 10 (x is modified in call of bar())\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:237
#, no-wrap
msgid ""
"julia> baz()\n"
"22\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:241
#: ext/julia/doc/src/manual/variables-and-scoping.md:289
#, no-wrap
msgid ""
"julia> x, y # verify that global x and y are unchanged\n"
"(1, 2)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:246
msgid ""
"The reason to allow modifying local variables of parent scopes in nested "
"functions is to allow constructing [`closures`](https://en.wikipedia.org/"
"wiki/Closure_%28computer_programming%29)  which have private state, for "
"instance the `state` variable in the following example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:251
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> let state = 0\n"
"           global counter() = (state += 1)\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:254
#, no-wrap
msgid ""
"julia> counter()\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:258
#, no-wrap
msgid ""
"julia> counter()\n"
"2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:264
msgid ""
"See also the closures in the examples in the next two sections. A variable, "
"such as `x` in the first example and `state` in the second, that is "
"inherited from the enclosing scope by the inner function is sometimes called "
"a *captured* variable. Captured variables can present performance challenges "
"discussed in [performance tips](@ref man-performance-tips)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:269
msgid ""
"The distinction between inheriting global scope and nesting local scope can "
"lead to some slight differences between functions defined in local versus "
"global scopes for variable assignments.  Consider the modification of the "
"last example by moving `bar` to the global scope:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:277
#, no-wrap
msgid ""
"julia> function bar()\n"
"           x = 10 # local, no longer a closure variable\n"
"           return x + y\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:282
#, no-wrap
msgid ""
"julia> function quz()\n"
"           x = 2 # local\n"
"           return bar() + x # 12 + 2 (x is not modified)\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:285
#, no-wrap
msgid ""
"julia> quz()\n"
"14\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:293
msgid ""
"Note that the above nesting rules do not pertain to type and macro "
"definitions as they can only appear at the global scope. There are special "
"scoping rules concerning the evaluation of default and keyword function "
"arguments which are described in the [Function section](@ref man-functions)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:296
msgid ""
"An assignment introducing a variable used inside a function, type or macro "
"definition need not come before its inner usage:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:299
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> f = y -> y + a;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:304
#, no-wrap
msgid ""
"julia> f(3)\n"
"ERROR: UndefVarError: a not defined\n"
"Stacktrace:\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:307
#, no-wrap
msgid ""
"julia> a = 1\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:311
#, no-wrap
msgid ""
"julia> f(3)\n"
"4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:318
msgid ""
"This behavior may seem slightly odd for a normal variable, but allows for "
"named functions -- which are just normal variables holding function objects "
"-- to be used before they are defined. This allows functions to be defined "
"in whatever order is intuitive and convenient, rather than forcing bottom up "
"ordering or requiring forward declarations, as long as they are defined by "
"the time they are actually called. As an example, here is an inefficient, "
"mutually recursive way to test if positive integers are even or odd:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:321
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> even(n) = (n == 0) ? true : odd(n - 1);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:323
#, no-wrap
msgid "julia> odd(n) = (n == 0) ? false : even(n - 1);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:326
#, no-wrap
msgid ""
"julia> even(3)\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:330
#, no-wrap
msgid ""
"julia> odd(3)\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:334
msgid ""
"Julia provides built-in, efficient functions to test for oddness and "
"evenness called [`iseven`](@ref)  and [`isodd`](@ref) so the above "
"definitions should only be considered to be examples of scope, not efficient "
"design."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/variables-and-scoping.md:335
#, no-wrap
msgid "Let Blocks"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:342
msgid ""
"Unlike assignments to local variables, `let` statements allocate new "
"variable bindings each time they run. An assignment modifies an existing "
"value location, and `let` creates new locations.  This difference is usually "
"not important, and is only detectable in the case of variables that outlive "
"their scope via closures. The `let` syntax accepts a comma-separated series "
"of assignments and variable names:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:345
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x, y, z = -1, -1, -1;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:353
#, no-wrap
msgid ""
"julia> let x = 1, z\n"
"           println(\"x: $x, y: $y\") # x is local variable, y the global\n"
"           println(\"z: $z\") # errors as z has not been assigned yet but is local\n"
"       end\n"
"x: 1, y: -1\n"
"ERROR: UndefVarError: z not defined\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:358
msgid ""
"The assignments are evaluated in order, with each right-hand side evaluated "
"in the scope before the new variable on the left-hand side has been "
"introduced. Therefore it makes sense to write something like `let x = x` "
"since the two `x` variables are distinct and have separate storage.  Here is "
"an example where the behavior of `let` is needed:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:361
#: ext/julia/doc/src/manual/variables-and-scoping.md:380
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Fs = Vector{Any}(undef, 2); i = 1;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:366
#, no-wrap
msgid ""
"julia> while i <= 2\n"
"           Fs[i] = ()->i\n"
"           global i += 1\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:369
#, no-wrap
msgid ""
"julia> Fs[1]()\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:373
#, no-wrap
msgid ""
"julia> Fs[2]()\n"
"3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:377
msgid ""
"Here we create and store two closures that return variable `i`. However, it "
"is always the same variable `i`, so the two closures behave identically. We "
"can use `let` to create a new binding for `i`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:387
#, no-wrap
msgid ""
"julia> while i <= 2\n"
"           let i = i\n"
"               Fs[i] = ()->i\n"
"           end\n"
"           global i += 1\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:390
#: ext/julia/doc/src/manual/variables-and-scoping.md:427
#, no-wrap
msgid ""
"julia> Fs[1]()\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:394
#: ext/julia/doc/src/manual/variables-and-scoping.md:431
#, no-wrap
msgid ""
"julia> Fs[2]()\n"
"2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:397
msgid ""
"Since the `begin` construct does not introduce a new scope, it can be useful "
"to use a zero-argument `let` to just introduce a new scope block without "
"creating any new bindings:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:408
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> let\n"
"           local x = 1\n"
"           let\n"
"               local x = 2\n"
"           end\n"
"           x\n"
"       end\n"
"1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:411
msgid ""
"Since `let` introduces a new scope block, the inner local `x` is a different "
"variable than the outer local `x`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/variables-and-scoping.md:412
#, no-wrap
msgid "For Loops and Comprehensions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:417
msgid ""
"`for` loops, `while` loops, and [Comprehensions](@ref) have the following "
"behavior: any new variables introduced in their body scopes are freshly "
"allocated for each loop iteration, as if the loop body were surrounded by a "
"`let` block:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:420
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Fs = Vector{Any}(undef, 2);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:424
#, no-wrap
msgid ""
"julia> for j = 1:2\n"
"           Fs[j] = ()->j\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:433
msgid ""
"A `for` loop or comprehension iteration variable is always a new variable:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:441
#, no-wrap
msgid ""
"```julia-repl enable_doctest_when_deprecation_warning_is_removed\n"
"julia> function f()\n"
"           i = 0\n"
"           for i = 1:3\n"
"           end\n"
"           return i\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:445
#, no-wrap
msgid ""
"julia> f()\n"
"0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:448
msgid ""
"However, it is occasionally useful to reuse an existing local variable as "
"the iteration variable.  This can be done conveniently by adding the keyword "
"`outer`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:456
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function f()\n"
"           i = 0\n"
"           for outer i = 1:3\n"
"           end\n"
"           return i\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:460
#, no-wrap
msgid ""
"julia> f()\n"
"3\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/variables-and-scoping.md:461
#, no-wrap
msgid "Constants"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:465
msgid ""
"A common use of variables is giving names to specific, unchanging values. "
"Such variables are only assigned once. This intent can be conveyed to the "
"compiler using the [`const`](@ref) keyword:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:468
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> const e  = 2.71828182845904523536;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:471
#, no-wrap
msgid ""
"julia> const pi = 3.14159265358979323846;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:477
#, no-wrap
msgid ""
"Multiple variables can be declared in a single `const` statement:\n"
"```jldoctest\n"
"julia> const a, b = 1, 2\n"
"(1, 2)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:482
msgid ""
"The `const` declaration should only be used in global scope on globals.  It "
"is difficult for the compiler to optimize code involving global variables, "
"since their values (or even their types) might change at almost any time. If "
"a global variable will not change, adding a `const` declaration solves this "
"performance problem."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:486
msgid ""
"Local constants are quite different. The compiler is able to determine "
"automatically when a local variable is constant, so local constant "
"declarations are not necessary, and in fact are currently not supported."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:489
msgid ""
"Special top-level assignments, such as those performed by the `function` and "
"`struct` keywords, are constant by default."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:493
msgid ""
"Note that `const` only affects the variable binding; the variable may be "
"bound to a mutable object (such as an array), and that object may still be "
"modified. Additionally when one tries to assign a value to a variable that "
"is declared constant the following scenarios are possible:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:498
#, no-wrap
msgid ""
"* if a new value has a different type than the type of the constant then an error is thrown:\n"
"```jldoctest\n"
"julia> const x = 1.0\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:506
#, no-wrap
msgid ""
"julia> x = 1\n"
"ERROR: invalid redefinition of constant x\n"
"```\n"
"* if a new value has the same type as the constant then a warning is printed:\n"
"```jldoctest\n"
"julia> const y = 1.0\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:515
#, no-wrap
msgid ""
"julia> y = 2.0\n"
"WARNING: redefining constant y\n"
"2.0\n"
"```\n"
"* if an assignment would not result in the change of variable value no message is given:\n"
"```jldoctest\n"
"julia> const z = 100\n"
"100\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:523
#, no-wrap
msgid ""
"julia> z = 100\n"
"100\n"
"```\n"
"The last rule applies for immutable objects even if the variable binding would change, e.g.:\n"
"```julia-repl\n"
"julia> const s1 = \"1\"\n"
"\"1\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:526
#, no-wrap
msgid ""
"julia> s2 = \"1\"\n"
"\"1\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:531
#, no-wrap
msgid ""
"julia> pointer.([s1, s2], 1)\n"
"2-element Array{Ptr{UInt8},1}:\n"
" Ptr{UInt8} @0x00000000132c9638\n"
" Ptr{UInt8} @0x0000000013dd3d18\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:534
#, no-wrap
msgid ""
"julia> s1 = s2\n"
"\"1\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:545
#, no-wrap
msgid ""
"julia> pointer.([s1, s2], 1)\n"
"2-element Array{Ptr{UInt8},1}:\n"
" Ptr{UInt8} @0x0000000013dd3d18\n"
" Ptr{UInt8} @0x0000000013dd3d18\n"
"```\n"
"However, for mutable objects the warning is printed as expected:\n"
"```jldoctest\n"
"julia> const a = [1]\n"
"1-element Array{Int64,1}:\n"
" 1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:551
#, no-wrap
msgid ""
"julia> a = [1]\n"
"WARNING: redefining constant a\n"
"1-element Array{Int64,1}:\n"
" 1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:561
#, no-wrap
msgid ""
"Note that although sometimes possible, changing the value of a `const` variable\n"
"is strongly discouraged, and is intended only for convenience during\n"
"interactive use.\n"
"Changing constants can cause various problems or unexpected behaviors.\n"
"For instance, if a method references a constant and is already\n"
"compiled before the constant is changed then it might keep using the old value:\n"
"```jldoctest\n"
"julia> const x = 1\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:564
#, no-wrap
msgid ""
"julia> f() = x\n"
"f (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:567
#, no-wrap
msgid ""
"julia> f()\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:571
#, no-wrap
msgid ""
"julia> x = 2\n"
"WARNING: redefining constant x\n"
"2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables-and-scoping.md:574
#, no-wrap
msgid ""
"julia> f()\n"
"1\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/handling-operating-system-variation.md:1
#, no-wrap
msgid "Handling Operating System Variation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/handling-operating-system-variation.md:8
msgid ""
"When writing cross-platform applications or libraries, it is often necessary "
"to allow for differences between operating systems. The variable `Sys."
"KERNEL` can be used to handle such cases. There are several functions in the "
"`Sys` module intended to make this easier, such as `isunix`, `islinux`, "
"`isapple`, `isbsd`, `isfreebsd`, and `iswindows`. These may be used as "
"follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/handling-operating-system-variation.md:14
#, no-wrap
msgid ""
"```julia\n"
"if Sys.iswindows()\n"
"    windows_specific_thing(a)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/handling-operating-system-variation.md:18
msgid ""
"Note that `islinux`, `isapple`, and `isfreebsd` are mutually exclusive "
"subsets of `isunix`.  Additionally, there is a macro `@static` which makes "
"it possible to use these functions to conditionally hide invalid code, as "
"demonstrated in the following examples."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/handling-operating-system-variation.md:20
msgid "Simple blocks:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/handling-operating-system-variation.md:24
msgid "``` ccall((@static Sys.iswindows() ? :_fopen : :fopen), ...)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/handling-operating-system-variation.md:26
msgid "Complex blocks:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/handling-operating-system-variation.md:34
#, no-wrap
msgid ""
"```julia\n"
"@static if Sys.islinux()\n"
"    linux_specific_thing(a)\n"
"else\n"
"    generic_thing(a)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/handling-operating-system-variation.md:37
msgid ""
"When chaining conditionals (including `if`/`elseif`/`end`), the `@static` "
"must be repeated for each level (parentheses optional, but recommended for "
"readability):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/handling-operating-system-variation.md:41
msgid ""
"```julia @static Sys.iswindows() ? :a : (@static Sys.isapple() ? :b : :c)  "
"```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/variables.md:1
#, no-wrap
msgid "Variables"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:5
msgid ""
"A variable, in Julia, is a name associated (or bound) to a value. It's "
"useful when you want to store a value (that you obtained after some math, "
"for example) for later use. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:7
#: ext/julia/doc/src/manual/types.md:1103
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:63
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:76
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:89
msgid "```julia-repl"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/variables.md:7
#, no-wrap
msgid "Assign the value 10 to the variable x"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:10
#, no-wrap
msgid ""
"julia> x = 10\n"
"10\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/variables.md:11
#, no-wrap
msgid "Doing math with x's value"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:14
#, no-wrap
msgid ""
"julia> x + 1\n"
"11\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/variables.md:15
#, no-wrap
msgid "Reassign x's value"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:18
#, no-wrap
msgid ""
"julia> x = 1 + 1\n"
"2\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/variables.md:19
#, no-wrap
msgid "You can assign values of other types, like strings of text"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:23
#, no-wrap
msgid ""
"julia> x = \"Hello World!\"\n"
"\"Hello World!\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:27
msgid ""
"Julia provides an extremely flexible system for naming variables. Variable "
"names are case-sensitive, and have no semantic meaning (that is, the "
"language will not treat variables differently based on their names)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:31
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = 1.0\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:34
#, no-wrap
msgid ""
"julia> y = -3\n"
"-3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:37
#, no-wrap
msgid ""
"julia> Z = \"My string\"\n"
"\"My string\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:40
#, no-wrap
msgid ""
"julia> customary_phrase = \"Hello world!\"\n"
"\"Hello world!\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:44
#, no-wrap
msgid ""
"julia> UniversalDeclarationOfHumanRightsStart = \"人人生而自由，在尊严和权利上一律平等。\"\n"
"\"人人生而自由，在尊严和权利上一律平等。\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:46
msgid "Unicode names (in UTF-8 encoding) are allowed:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:50
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> δ = 0.00001\n"
"1.0e-5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:54
#, no-wrap
msgid ""
"julia> 안녕하세요 = \"Hello\"\n"
"\"Hello\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:61
msgid ""
"In the Julia REPL and several other Julia editing environments, you can type "
"many Unicode math symbols by typing the backslashed LaTeX symbol name "
"followed by tab. For example, the variable name `δ` can be entered by typing "
"`\\delta`-*tab*, or even `α̂₂` by `\\alpha`-*tab*-`\\hat`- *tab*-`\\_2`-"
"*tab*. (If you find a symbol somewhere, e.g. in someone else's code, that "
"you don't know how to type, the REPL help will tell you: just type `?` and "
"then paste the symbol.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:64
msgid ""
"Julia will even let you redefine built-in constants and functions if needed "
"(although this is not recommended to avoid potential confusions):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:68
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> pi = 3\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:71
#, no-wrap
msgid ""
"julia> pi\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:75
#, no-wrap
msgid ""
"julia> sqrt = 4\n"
"4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:78
msgid ""
"However, if you try to redefine a built-in constant or function already in "
"use, Julia will give you an error:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:82
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> pi\n"
"π = 3.1415926535897...\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:85
#, no-wrap
msgid ""
"julia> pi = 3\n"
"ERROR: cannot assign variable MathConstants.pi from module Main\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:88
#, no-wrap
msgid ""
"julia> sqrt(100)\n"
"10.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:92
#, no-wrap
msgid ""
"julia> sqrt = 4\n"
"ERROR: cannot assign variable Base.sqrt from module Main\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/variables.md:93
#, no-wrap
msgid "Allowed Variable Names"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:102
msgid ""
"Variable names must begin with a letter (A-Z or a-z), underscore, or a "
"subset of Unicode code points greater than 00A0; in particular, [Unicode "
"character categories](http://www.fileformat.info/info/unicode/category/index."
"htm)  Lu/Ll/Lt/Lm/Lo/Nl (letters), Sc/So (currency and other symbols), and a "
"few other letter-like characters (e.g. a subset of the Sm math symbols) are "
"allowed. Subsequent characters may also include ! and digits (0-9 and other "
"characters in categories Nd/No), as well as other Unicode code points: "
"diacritics and other modifying marks (categories Mn/Mc/Me/Sk), some "
"punctuation connectors (category Pc), primes, and a few other characters."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:109
msgid ""
"Operators like `+` are also valid identifiers, but are parsed specially. In "
"some contexts, operators can be used just like variables; for example `(+)` "
"refers to the addition function, and `(+) = f` will reassign it. Most of the "
"Unicode infix operators (in category Sm), such as `⊕`, are parsed as infix "
"operators and are available for user-defined methods (e.g. you can use "
"`const ⊗ = kron` to define `⊗` as an infix Kronecker product).  Operators "
"can also be suffixed with modifying marks, primes, and sub/superscripts, e."
"g. `+̂ₐ″` is parsed as an infix operator with the same precedence as `+`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:111
msgid ""
"The only explicitly disallowed names for variables are the names of built-in "
"statements:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:115
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> else = false\n"
"ERROR: syntax: unexpected \"else\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:119
#, no-wrap
msgid ""
"julia> try = \"No\"\n"
"ERROR: syntax: unexpected \"=\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:126
msgid ""
"Some Unicode characters are considered to be equivalent in identifiers.  "
"Different ways of entering Unicode combining characters (e.g., accents)  are "
"treated as equivalent (specifically, Julia identifiers are NFC-normalized).  "
"The Unicode characters `ɛ` (U+025B: Latin small letter open e)  and `µ` (U"
"+00B5: micro sign) are treated as equivalent to the corresponding Greek "
"letters, because the former are easily accessible via some input methods."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/variables.md:127
#, no-wrap
msgid "Stylistic Conventions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:131
msgid ""
"While Julia imposes few restrictions on valid names, it has become useful to "
"adopt the following conventions:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/variables.md:141
msgid "Names of variables are in lower case."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/variables.md:141
msgid ""
"Word separation can be indicated by underscores (`'_'`), but use of "
"underscores is discouraged unless the name would be hard to read otherwise."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/variables.md:141
msgid ""
"Names of `Type`s and `Module`s begin with a capital letter and word "
"separation is shown with upper camel case instead of underscores."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/variables.md:141
msgid ""
"Names of `function`s and `macro`s are in lower case, without underscores."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/variables.md:141
msgid ""
"Functions that write to their arguments have names that end in `!`. These "
"are sometimes called \"mutating\" or \"in-place\" functions because they are "
"intended to produce changes in their arguments after the function is called, "
"not just return a value."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/variables.md:142
msgid ""
"For more information about stylistic conventions, see the [Style Guide]"
"(@ref)."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/control-flow.md:1
#, no-wrap
msgid "Control Flow"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:4
msgid "Julia provides a variety of control flow constructs:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:11
msgid ""
"[Compound Expressions](@ref man-compound-expressions): `begin` and `(;)`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:11
msgid ""
"[Conditional Evaluation](@ref man-conditional-evaluation): `if`-`elseif`-"
"`else` and `?:` (ternary operator)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:11
msgid "[Short-Circuit Evaluation](@ref): `&&`, `||` and chained comparisons."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:11
msgid "[Repeated Evaluation: Loops](@ref man-loops): `while` and `for`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:11
msgid ""
"[Exception Handling](@ref): `try`-`catch`, [`error`](@ref) and [`throw`]"
"(@ref)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:11
msgid "[Tasks (aka Coroutines)](@ref man-tasks): [`yieldto`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:17
msgid ""
"The first five control flow mechanisms are standard to high-level "
"programming languages. [`Task`](@ref)s are not so standard: they provide non-"
"local control flow, making it possible to switch between temporarily-"
"suspended computations. This is a powerful construct: both exception "
"handling and cooperative multitasking are implemented in Julia using tasks. "
"Everyday programming requires no direct usage of tasks, but certain problems "
"can be solved much more easily by using tasks."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/control-flow.md:18
#, no-wrap
msgid "[Compound Expressions](@id man-compound-expressions)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:24
msgid ""
"Sometimes it is convenient to have a single expression which evaluates "
"several subexpressions in order, returning the value of the last "
"subexpression as its value. There are two Julia constructs that accomplish "
"this: `begin` blocks and `(;)` chains. The value of both compound expression "
"constructs is that of the last subexpression. Here's an example of a `begin` "
"block:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:33
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> z = begin\n"
"           x = 1\n"
"           y = 2\n"
"           x + y\n"
"       end\n"
"3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:36
msgid ""
"Since these are fairly small, simple expressions, they could easily be "
"placed onto a single line, which is where the `(;)` chain syntax comes in "
"handy:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:41
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> z = (x = 1; y = 2; x + y)\n"
"3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:45
msgid ""
"This syntax is particularly useful with the terse single-line function "
"definition form introduced in [Functions](@ref). Although it is typical, "
"there is no requirement that `begin` blocks be multiline or that `(;)` "
"chains be single-line:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:49
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> begin x = 1; y = 2; x + y end\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:55
#, no-wrap
msgid ""
"julia> (x = 1;\n"
"        y = 2;\n"
"        x + y)\n"
"3\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/control-flow.md:56
#, no-wrap
msgid "[Conditional Evaluation](@id man-conditional-evaluation)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:60
msgid ""
"Conditional evaluation allows portions of code to be evaluated or not "
"evaluated depending on the value of a boolean expression. Here is the "
"anatomy of the `if`-`elseif`-`else` conditional syntax:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:70
#, no-wrap
msgid ""
"```julia\n"
"if x < y\n"
"    println(\"x is less than y\")\n"
"elseif x > y\n"
"    println(\"x is greater than y\")\n"
"else\n"
"    println(\"x is equal to y\")\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:74
#, no-wrap
msgid ""
"If the condition expression `x < y` is `true`, then the corresponding block is evaluated; otherwise\n"
"the condition expression `x > y` is evaluated, and if it is `true`, the corresponding block is\n"
"evaluated; if neither expression is true, the `else` block is evaluated. Here it is in action:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:86
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function test(x, y)\n"
"           if x < y\n"
"               println(\"x is less than y\")\n"
"           elseif x > y\n"
"               println(\"x is greater than y\")\n"
"           else\n"
"               println(\"x is equal to y\")\n"
"           end\n"
"       end\n"
"test (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:89
#: ext/julia/doc/src/manual/control-flow.md:222
#, no-wrap
msgid ""
"julia> test(1, 2)\n"
"x is less than y\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:92
#: ext/julia/doc/src/manual/control-flow.md:225
#, no-wrap
msgid ""
"julia> test(2, 1)\n"
"x is greater than y\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:96
#: ext/julia/doc/src/manual/control-flow.md:229
#, no-wrap
msgid ""
"julia> test(1, 1)\n"
"x is equal to y\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:101
msgid ""
"The `elseif` and `else` blocks are optional, and as many `elseif` blocks as "
"desired can be used.  The condition expressions in the `if`-`elseif`-`else` "
"construct are evaluated until the first one evaluates to `true`, after which "
"the associated block is evaluated, and no further condition expressions or "
"blocks are evaluated."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:105
msgid ""
"`if` blocks are \"leaky\", i.e. they do not introduce a local scope. This "
"means that new variables defined inside the `if` clauses can be used after "
"the `if` block, even if they weren't defined before. So, we could have "
"defined the `test` function above as"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:118
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function test(x,y)\n"
"           if x < y\n"
"               relation = \"less than\"\n"
"           elseif x == y\n"
"               relation = \"equal to\"\n"
"           else\n"
"               relation = \"greater than\"\n"
"           end\n"
"           println(\"x is \", relation, \" y.\")\n"
"       end\n"
"test (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:122
#, no-wrap
msgid ""
"julia> test(2, 1)\n"
"x is greater than y.\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:126
msgid ""
"The variable `relation` is declared inside the `if` block, but used outside. "
"However, when depending on this behavior, make sure all possible code paths "
"define a value for the variable. The following change to the above function "
"results in a runtime error"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:137
#, no-wrap
msgid ""
"```jldoctest; filter = r\"Stacktrace:(\\n \\[[0-9]+\\].*)*\"\n"
"julia> function test(x,y)\n"
"           if x < y\n"
"               relation = \"less than\"\n"
"           elseif x == y\n"
"               relation = \"equal to\"\n"
"           end\n"
"           println(\"x is \", relation, \" y.\")\n"
"       end\n"
"test (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:140
#, no-wrap
msgid ""
"julia> test(1,2)\n"
"x is less than y.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:146
#, no-wrap
msgid ""
"julia> test(2,1)\n"
"ERROR: UndefVarError: relation not defined\n"
"Stacktrace:\n"
" [1] test(::Int64, ::Int64) at ./none:7\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:150
msgid ""
"`if` blocks also return a value, which may seem unintuitive to users coming "
"from many other languages.  This value is simply the return value of the "
"last executed statement in the branch that was chosen, so"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:154
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = 3\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:162
#, no-wrap
msgid ""
"julia> if x > 0\n"
"           \"positive!\"\n"
"       else\n"
"           \"negative...\"\n"
"       end\n"
"\"positive!\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:165
msgid ""
"Note that very short conditional statements (one-liners) are frequently "
"expressed using Short-Circuit Evaluation in Julia, as outlined in the next "
"section."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:168
msgid ""
"Unlike C, MATLAB, Perl, Python, and Ruby -- but like Java, and a few other "
"stricter, typed languages -- it is an error if the value of a conditional "
"expression is anything but `true` or `false`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:175
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> if 1\n"
"           println(\"true\")\n"
"       end\n"
"ERROR: TypeError: non-boolean (Int64) used in boolean context\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:178
msgid ""
"This error indicates that the conditional was of the wrong type: [`Int64`]"
"(@ref) rather than the required [`Bool`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:183
msgid ""
"The so-called \"ternary operator\", `?:`, is closely related to the `if`-"
"`elseif`-`else` syntax, but is used where a conditional choice between "
"single expression values is required, as opposed to conditional execution of "
"longer blocks of code. It gets its name from being the only operator in most "
"languages taking three operands:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:187
msgid "```julia a ? b : c ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:193
msgid ""
"The expression `a`, before the `?`, is a condition expression, and the "
"ternary operation evaluates the expression `b`, before the `:`, if the "
"condition `a` is `true` or the expression `c`, after the `:`, if it is "
"`false`. Note that the spaces around `?` and `:` are mandatory: an "
"expression like `a?b:c` is not a valid ternary expression (but a newline is "
"acceptable after both the `?` and the `:`)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:198
msgid ""
"The easiest way to understand this behavior is to see an example. In the "
"previous example, the `println` call is shared by all three branches: the "
"only real choice is which literal string to print. This could be written "
"more concisely using the ternary operator. For the sake of clarity, let's "
"try a two-way version first:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:201
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = 1; y = 2;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:204
#, no-wrap
msgid ""
"julia> println(x < y ? \"less than\" : \"not less than\")\n"
"less than\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:206
#, no-wrap
msgid "julia> x = 1; y = 0;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:210
#, no-wrap
msgid ""
"julia> println(x < y ? \"less than\" : \"not less than\")\n"
"not less than\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:214
#, no-wrap
msgid ""
"If the expression `x < y` is true, the entire ternary operator expression evaluates to the string\n"
"`\"less than\"` and otherwise it evaluates to the string `\"not less than\"`. The original three-way\n"
"example requires chaining multiple uses of the ternary operator together:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:219
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> test(x, y) = println(x < y ? \"x is less than y\"    :\n"
"                            x > y ? \"x is greater than y\" : \"x is equal to y\")\n"
"test (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:231
msgid "To facilitate chaining, the operator associates from right to left."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:234
msgid ""
"It is significant that like `if`-`elseif`-`else`, the expressions before and "
"after the `:` are only evaluated if the condition expression evaluates to "
"`true` or `false`, respectively:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:242
#, no-wrap
msgid ""
"julia> 1 < 2 ? v(\"yes\") : v(\"no\")\n"
"yes\n"
"\"yes\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:247
#, no-wrap
msgid ""
"julia> 1 > 2 ? v(\"yes\") : v(\"no\")\n"
"no\n"
"\"no\"\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/control-flow.md:248
#, no-wrap
msgid "Short-Circuit Evaluation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:255
msgid ""
"Short-circuit evaluation is quite similar to conditional evaluation. The "
"behavior is found in most imperative programming languages having the `&&` "
"and `||` boolean operators: in a series of boolean expressions connected by "
"these operators, only the minimum number of expressions are evaluated as are "
"necessary to determine the final boolean value of the entire chain. "
"Explicitly, this means that:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:258
msgid ""
"In the expression `a && b`, the subexpression `b` is only evaluated if `a` "
"evaluates to `true`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:258
msgid ""
"In the expression `a || b`, the subexpression `b` is only evaluated if `a` "
"evaluates to `false`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:263
msgid ""
"The reasoning is that `a && b` must be `false` if `a` is `false`, regardless "
"of the value of `b`, and likewise, the value of `a || b` must be true if `a` "
"is `true`, regardless of the value of `b`. Both `&&` and `||` associate to "
"the right, but `&&` has higher precedence than `||` does.  It's easy to "
"experiment with this behavior:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:267
#, no-wrap
msgid ""
"```jldoctest tandf\n"
"julia> t(x) = (println(x); true)\n"
"t (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:270
#, no-wrap
msgid ""
"julia> f(x) = (println(x); false)\n"
"f (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:275
#, no-wrap
msgid ""
"julia> t(1) && t(2)\n"
"1\n"
"2\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:280
#, no-wrap
msgid ""
"julia> t(1) && f(2)\n"
"1\n"
"2\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:284
#, no-wrap
msgid ""
"julia> f(1) && t(2)\n"
"1\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:288
#, no-wrap
msgid ""
"julia> f(1) && f(2)\n"
"1\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:292
#, no-wrap
msgid ""
"julia> t(1) || t(2)\n"
"1\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:296
#, no-wrap
msgid ""
"julia> t(1) || f(2)\n"
"1\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:301
#, no-wrap
msgid ""
"julia> f(1) || t(2)\n"
"1\n"
"2\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:307
#, no-wrap
msgid ""
"julia> f(1) || f(2)\n"
"1\n"
"2\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:310
msgid ""
"You can easily experiment in the same way with the associativity and "
"precedence of various combinations of `&&` and `||` operators."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:315
#, no-wrap
msgid ""
"This behavior is frequently used in Julia to form an alternative to very short `if` statements.\n"
"Instead of `if <cond> <statement> end`, one can write `<cond> && <statement>` (which could be\n"
"read as: <cond> *and then* <statement>). Similarly, instead of `if ! <cond> <statement> end`,\n"
"one can write `<cond> || <statement>` (which could be read as: <cond> *or else* <statement>).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:317
msgid "For example, a recursive factorial routine could be defined like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:325
#, no-wrap
msgid ""
"```jldoctest; filter = r\"Stacktrace:(\\n \\[[0-9]+\\].*)*\"\n"
"julia> function fact(n::Int)\n"
"           n >= 0 || error(\"n must be non-negative\")\n"
"           n == 0 && return 1\n"
"           n * fact(n-1)\n"
"       end\n"
"fact (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:328
#, no-wrap
msgid ""
"julia> fact(5)\n"
"120\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:331
#, no-wrap
msgid ""
"julia> fact(0)\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:339
#, no-wrap
msgid ""
"julia> fact(-1)\n"
"ERROR: n must be non-negative\n"
"Stacktrace:\n"
" [1] error at ./error.jl:33 [inlined]\n"
" [2] fact(::Int64) at ./none:2\n"
" [3] top-level scope\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:343
msgid ""
"Boolean operations *without* short-circuit evaluation can be done with the "
"bitwise boolean operators introduced in [Mathematical Operations and "
"Elementary Functions](@ref): `&` and `|`. These are normal functions, which "
"happen to support infix operator syntax, but always evaluate their arguments:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:349
#, no-wrap
msgid ""
"```jldoctest tandf\n"
"julia> f(1) & t(2)\n"
"1\n"
"2\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:355
#, no-wrap
msgid ""
"julia> t(1) | t(2)\n"
"1\n"
"2\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:359
msgid ""
"Just like condition expressions used in `if`, `elseif` or the ternary "
"operator, the operands of `&&` or `||` must be boolean values (`true` or "
"`false`). Using a non-boolean value anywhere except for the last entry in a "
"conditional chain is an error:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:364
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 1 && true\n"
"ERROR: TypeError: non-boolean (Int64) used in boolean context\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:367
msgid ""
"On the other hand, any type of expression can be used at the end of a "
"conditional chain. It will be evaluated and returned depending on the "
"preceding conditionals:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:371
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> true && (x = (1, 2, 3))\n"
"(1, 2, 3)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:375
#, no-wrap
msgid ""
"julia> false && (x = (1, 2, 3))\n"
"false\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/control-flow.md:376
#, no-wrap
msgid "[Repeated Evaluation: Loops](@id man-loops)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:380
msgid ""
"There are two constructs for repeated evaluation of expressions: the `while` "
"loop and the `for` loop. Here is an example of a `while` loop:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:383
#: ext/julia/doc/src/manual/control-flow.md:468
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> i = 1;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:394
#, no-wrap
msgid ""
"julia> while i <= 5\n"
"           println(i)\n"
"           global i += 1\n"
"       end\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:398
#, no-wrap
msgid ""
"The `while` loop evaluates the condition expression (`i <= 5` in this case), and as long it remains\n"
"`true`, keeps also evaluating the body of the `while` loop. If the condition expression is `false`\n"
"when the `while` loop is first reached, the body is never evaluated.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:402
msgid ""
"The `for` loop makes common repeated evaluation idioms easier to write. "
"Since counting up and down like the above `while` loop does is so common, it "
"can be expressed more concisely with a `for` loop:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:413
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for i = 1:5\n"
"           println(i)\n"
"       end\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:421
msgid ""
"Here the `1:5` is a range object, representing the sequence of numbers 1, 2, "
"3, 4, 5. The `for` loop iterates through these values, assigning each one in "
"turn to the variable `i`. One rather important distinction between the "
"previous `while` loop form and the `for` loop form is the scope during which "
"the variable is visible. If the variable `i` has not been introduced in "
"another scope, in the `for` loop form, it is visible only inside of the "
"`for` loop, and not outside/afterwards. You'll either need a new interactive "
"session instance or a different variable name to test this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:431
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for j = 1:5\n"
"           println(j)\n"
"       end\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:435
#, no-wrap
msgid ""
"julia> j\n"
"ERROR: UndefVarError: j not defined\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:438
msgid ""
"See [Scope of Variables](@ref scope-of-variables) for a detailed explanation "
"of variable scope and how it works in Julia."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:442
msgid ""
"In general, the `for` loop construct can iterate over any container. In "
"these cases, the alternative (but fully equivalent) keyword `in` or `∈` is "
"typically used instead of `=`, since it makes the code read more clearly:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:450
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for i in [1,4,0]\n"
"           println(i)\n"
"       end\n"
"1\n"
"4\n"
"0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:458
#, no-wrap
msgid ""
"julia> for s ∈ [\"foo\",\"bar\",\"baz\"]\n"
"           println(s)\n"
"       end\n"
"foo\n"
"bar\n"
"baz\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:461
msgid ""
"Various types of iterable containers will be introduced and discussed in "
"later sections of the manual (see, e.g., [Multi-dimensional Arrays](@ref man-"
"multi-dim-arrays))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:465
msgid ""
"It is sometimes convenient to terminate the repetition of a `while` before "
"the test condition is falsified or stop iterating in a `for` loop before the "
"end of the iterable object is reached.  This can be accomplished with the "
"`break` keyword:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:481
#, no-wrap
msgid ""
"julia> while true\n"
"           println(i)\n"
"           if i >= 5\n"
"               break\n"
"           end\n"
"           global i += 1\n"
"       end\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:494
#, no-wrap
msgid ""
"julia> for j = 1:1000\n"
"           println(j)\n"
"           if j >= 5\n"
"               break\n"
"           end\n"
"       end\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:496
msgid ""
"Without the `break` keyword, the above `while` loop would never terminate on "
"its own, and the `for` loop would iterate up to 1000. These loops are both "
"exited early by using `break`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:499
msgid ""
"In other circumstances, it is handy to be able to stop an iteration and move "
"on to the next one immediately. The `continue` keyword accomplishes this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:511
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for i = 1:10\n"
"           if i % 3 != 0\n"
"               continue\n"
"           end\n"
"           println(i)\n"
"       end\n"
"3\n"
"6\n"
"9\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:516
msgid ""
"This is a somewhat contrived example since we could produce the same "
"behavior more clearly by negating the condition and placing the `println` "
"call inside the `if` block. In realistic usage there is more code to be "
"evaluated after the `continue`, and often there are multiple points from "
"which one calls `continue`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:519
msgid ""
"Multiple nested `for` loops can be combined into a single outer loop, "
"forming the cartesian product of its iterables:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:529
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for i = 1:2, j = 3:4\n"
"           println((i, j))\n"
"       end\n"
"(1, 3)\n"
"(1, 4)\n"
"(2, 3)\n"
"(2, 4)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:535
msgid ""
"With this syntax, iterables may still refer to outer loop variables; e.g. "
"`for i = 1:n, j = 1:i` is valid.  However a `break` statement inside such a "
"loop exits the entire nest of loops, not just the inner one.  Both variables "
"(`i` and `j`) are set to their current iteration values each time the inner "
"loop runs.  Therefore, assignments to `i` will not be visible to subsequent "
"iterations:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:546
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> for i = 1:2, j = 3:4\n"
"           println((i, j))\n"
"           i = 0\n"
"       end\n"
"(1, 3)\n"
"(1, 4)\n"
"(2, 3)\n"
"(2, 4)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:549
msgid ""
"If this example were rewritten to use a `for` keyword for each variable, "
"then the output would be different: the second and fourth values would "
"contain `0`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/control-flow.md:550
#, no-wrap
msgid "Exception Handling"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:556
msgid ""
"When an unexpected condition occurs, a function may be unable to return a "
"reasonable value to its caller. In such cases, it may be best for the "
"exceptional condition to either terminate the program while printing a "
"diagnostic error message, or if the programmer has provided code to handle "
"such exceptional circumstances then allow that code to take the appropriate "
"action."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/control-flow.md:557
#, no-wrap
msgid "Built-in `Exception`s"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:561
msgid ""
"`Exception`s are thrown when an unexpected condition has occurred. The built-"
"in `Exception`s listed below all interrupt the normal flow of control."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:588
#, no-wrap
msgid ""
"| `Exception`                   |\n"
"|:----------------------------- |\n"
"| [`ArgumentError`](@ref)       |\n"
"| [`BoundsError`](@ref)         |\n"
"| [`CompositeException`](@ref)  |\n"
"| [`DivideError`](@ref)         |\n"
"| [`DomainError`](@ref)         |\n"
"| [`EOFError`](@ref)            |\n"
"| [`ErrorException`](@ref)      |\n"
"| [`InexactError`](@ref)        |\n"
"| [`InitError`](@ref)           |\n"
"| [`InterruptException`](@ref)  |\n"
"| `InvalidStateException`       |\n"
"| [`KeyError`](@ref)            |\n"
"| [`LoadError`](@ref)           |\n"
"| [`OutOfMemoryError`](@ref)    |\n"
"| [`ReadOnlyMemoryError`](@ref) |\n"
"| [`RemoteException`](@ref)     |\n"
"| [`MethodError`](@ref)         |\n"
"| [`OverflowError`](@ref)       |\n"
"| [`Meta.ParseError`](@ref)     |\n"
"| [`SystemError`](@ref)         |\n"
"| [`TypeError`](@ref)           |\n"
"| [`UndefRefError`](@ref)       |\n"
"| [`UndefVarError`](@ref)       |\n"
"| [`StringIndexError`](@ref)    |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:591
msgid ""
"For example, the [`sqrt`](@ref) function throws a [`DomainError`](@ref) if "
"applied to a negative real value:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:599
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sqrt(-1)\n"
"ERROR: DomainError with -1.0:\n"
"sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:601
msgid "You may define your own exceptions in the following way:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:605
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> struct MyCustomException <: Exception end\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/control-flow.md:606
#, no-wrap
msgid "The [`throw`](@ref) function"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:611
msgid ""
"Exceptions can be created explicitly with [`throw`](@ref). For example, a "
"function defined only for nonnegative numbers could be written to [`throw`]"
"(@ref) a [`DomainError`](@ref) if the argument is negative:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:615
#, no-wrap
msgid ""
"```jldoctest; filter = r\"Stacktrace:(\\n \\[[0-9]+\\].*)*\"\n"
"julia> f(x) = x>=0 ? exp(-x) : throw(DomainError(x, \"argument must be nonnegative\"))\n"
"f (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:618
#, no-wrap
msgid ""
"julia> f(1)\n"
"0.36787944117144233\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:625
#, no-wrap
msgid ""
"julia> f(-1)\n"
"ERROR: DomainError with -1:\n"
"argument must be nonnegative\n"
"Stacktrace:\n"
" [1] f(::Int64) at ./none:1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:628
msgid ""
"Note that [`DomainError`](@ref) without parentheses is not an exception, but "
"a type of exception.  It needs to be called to obtain an `Exception` object:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:632
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typeof(DomainError(nothing)) <: Exception\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:636
#, no-wrap
msgid ""
"julia> typeof(DomainError) <: Exception\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:638
msgid ""
"Additionally, some exception types take one or more arguments that are used "
"for error reporting:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:643
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> throw(UndefVarError(:x))\n"
"ERROR: UndefVarError: x not defined\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:646
msgid ""
"This mechanism can be implemented easily by custom exception types following "
"the way [`UndefVarError`](@ref)  is written:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:651
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> struct MyUndefVarError <: Exception\n"
"           var::Symbol\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:654
#, no-wrap
msgid ""
"julia> Base.showerror(io::IO, e::MyUndefVarError) = print(io, e.var, \" not defined\")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:658
#, no-wrap
msgid ""
"!!! note\n"
"    When writing an error message, it is preferred to make the first word lowercase. For example,\n"
"    `size(A) == size(B) || throw(DimensionMismatch(\"size of A not equal to size of B\"))`\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:660
#, no-wrap
msgid "    is preferred over\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:662
#, no-wrap
msgid "    `size(A) == size(B) || throw(DimensionMismatch(\"Size of A not equal to size of B\"))`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:665
#, no-wrap
msgid ""
"    However, sometimes it makes sense to keep the uppercase first letter, for instance if an argument\n"
"    to a function is a capital letter: `size(A,1) == size(B,2) || throw(DimensionMismatch(\"A has first dimension...\"))`.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/control-flow.md:666
#: ext/julia/doc/src/base/base.md:304
#, no-wrap
msgid "Errors"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:670
msgid ""
"The [`error`](@ref) function is used to produce an [`ErrorException`](@ref) "
"that interrupts the normal flow of control."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:674
msgid ""
"Suppose we want to stop execution immediately if the square root of a "
"negative number is taken.  To do this, we can define a fussy version of the "
"[`sqrt`](@ref) function that raises an error if its argument is negative:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:678
#, no-wrap
msgid ""
"```jldoctest fussy_sqrt; filter = r\"Stacktrace:(\\n \\[[0-9]+\\].*)*\"\n"
"julia> fussy_sqrt(x) = x >= 0 ? sqrt(x) : error(\"negative x not allowed\")\n"
"fussy_sqrt (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:681
#, no-wrap
msgid ""
"julia> fussy_sqrt(2)\n"
"1.4142135623730951\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:689
#, no-wrap
msgid ""
"julia> fussy_sqrt(-1)\n"
"ERROR: negative x not allowed\n"
"Stacktrace:\n"
" [1] error at ./error.jl:33 [inlined]\n"
" [2] fussy_sqrt(::Int64) at ./none:1\n"
" [3] top-level scope\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:693
msgid ""
"If `fussy_sqrt` is called with a negative value from another function, "
"instead of trying to continue execution of the calling function, it returns "
"immediately, displaying the error message in the interactive session:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:702
#, no-wrap
msgid ""
"```jldoctest fussy_sqrt; filter = r\"Stacktrace:(\\n \\[[0-9]+\\].*)*\"\n"
"julia> function verbose_fussy_sqrt(x)\n"
"           println(\"before fussy_sqrt\")\n"
"           r = fussy_sqrt(x)\n"
"           println(\"after fussy_sqrt\")\n"
"           return r\n"
"       end\n"
"verbose_fussy_sqrt (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:707
#, no-wrap
msgid ""
"julia> verbose_fussy_sqrt(2)\n"
"before fussy_sqrt\n"
"after fussy_sqrt\n"
"1.4142135623730951\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:717
#, no-wrap
msgid ""
"julia> verbose_fussy_sqrt(-1)\n"
"before fussy_sqrt\n"
"ERROR: negative x not allowed\n"
"Stacktrace:\n"
" [1] error at ./error.jl:33 [inlined]\n"
" [2] fussy_sqrt at ./none:1 [inlined]\n"
" [3] verbose_fussy_sqrt(::Int64) at ./none:3\n"
" [4] top-level scope\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/control-flow.md:718
#, no-wrap
msgid "The `try/catch` statement"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:723
msgid ""
"The `try/catch` statement allows for `Exception`s to be tested for. For "
"example, a customized square root function can be written to automatically "
"call either the real or complex square root method on demand using "
"`Exception`s :"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:731
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> f(x) = try\n"
"           sqrt(x)\n"
"       catch\n"
"           sqrt(complex(x, 0))\n"
"       end\n"
"f (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:734
#, no-wrap
msgid ""
"julia> f(1)\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:738
#, no-wrap
msgid ""
"julia> f(-1)\n"
"0.0 + 1.0im\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:741
msgid ""
"It is important to note that in real code computing this function, one would "
"compare `x` to zero instead of catching an exception. The exception is much "
"slower than simply comparing and branching."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:745
msgid ""
"`try/catch` statements also allow the `Exception` to be saved in a variable. "
"The following contrived example calculates the square root of the second "
"element of `x` if `x` is indexable, otherwise assumes `x` is a real number "
"and returns its square root:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:757
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sqrt_second(x) = try\n"
"           sqrt(x[2])\n"
"       catch y\n"
"           if isa(y, DomainError)\n"
"               sqrt(complex(x[2], 0))\n"
"           elseif isa(y, BoundsError)\n"
"               sqrt(x)\n"
"           end\n"
"       end\n"
"sqrt_second (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:760
#, no-wrap
msgid ""
"julia> sqrt_second([1 4])\n"
"2.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:763
#, no-wrap
msgid ""
"julia> sqrt_second([1 -4])\n"
"0.0 + 2.0im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:766
#, no-wrap
msgid ""
"julia> sqrt_second(9)\n"
"3.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:773
#, no-wrap
msgid ""
"julia> sqrt_second(-9)\n"
"ERROR: DomainError with -9.0:\n"
"sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:777
msgid ""
"Note that the symbol following `catch` will always be interpreted as a name "
"for the exception, so care is needed when writing `try/catch` expressions on "
"a single line. The following code will *not* work to return the value of `x` "
"in case of an error:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:781
msgid "```julia try bad() catch x end ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:783
msgid "Instead, use a semicolon or insert a line break after `catch`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:786
msgid "```julia try bad() catch; x end"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:792
#, no-wrap
msgid ""
"try bad()\n"
"catch\n"
"    x\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:798
msgid ""
"The power of the `try/catch` construct lies in the ability to unwind a "
"deeply nested computation immediately to a much higher level in the stack of "
"calling functions. There are situations where no error has occurred, but the "
"ability to unwind the stack and pass a value to a higher level is desirable. "
"Julia provides the [`rethrow`](@ref), [`backtrace`](@ref), "
"[`catch_backtrace`](@ref)  and [`Base.catch_stack`](@ref) functions for more "
"advanced error handling."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/control-flow.md:799
#, no-wrap
msgid "`finally` Clauses"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:806
msgid ""
"In code that performs state changes or uses resources like files, there is "
"typically clean-up work (such as closing files) that needs to be done when "
"the code is finished. Exceptions potentially complicate this task, since "
"they can cause a block of code to exit before reaching its normal end. The "
"`finally` keyword provides a way to run some code when a given block of code "
"exits, regardless of how it exits."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:808
msgid ""
"For example, here is how we can guarantee that an opened file is closed:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:817
#, no-wrap
msgid ""
"```julia\n"
"f = open(\"file\")\n"
"try\n"
"    # operate on file f\n"
"finally\n"
"    close(f)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:822
msgid ""
"When control leaves the `try` block (for example due to a `return`, or just "
"finishing normally), `close(f)` will be executed. If the `try` block exits "
"due to an exception, the exception will continue propagating. A `catch` "
"block may be combined with `try` and `finally` as well. In this case the "
"`finally` block will run after `catch` has handled the error."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/control-flow.md:823
#, no-wrap
msgid "[Tasks (aka Coroutines)](@id man-tasks)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:828
msgid ""
"Tasks are a control flow feature that allows computations to be suspended "
"and resumed in a flexible manner. This feature is sometimes called by other "
"names, such as symmetric coroutines, lightweight threads, cooperative "
"multitasking, or one-shot continuations."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:836
msgid ""
"When a piece of computing work (in practice, executing a particular "
"function) is designated as a [`Task`](@ref), it becomes possible to "
"interrupt it by switching to another [`Task`](@ref).  The original [`Task`]"
"(@ref) can later be resumed, at which point it will pick up right where it "
"left off. At first, this may seem similar to a function call. However there "
"are two key differences.  First, switching tasks does not use any space, so "
"any number of task switches can occur without consuming the call stack. "
"Second, switching among tasks can occur in any order, unlike function calls, "
"where the called function must finish executing before control returns to "
"the calling function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:844
msgid ""
"This kind of control flow can make it much easier to solve certain problems. "
"In some problems, the various pieces of required work are not naturally "
"related by function calls; there is no obvious \"caller\" or \"callee\" "
"among the jobs that need to be done. An example is the producer-consumer "
"problem, where one complex procedure is generating values and another "
"complex procedure is consuming them. The consumer cannot simply call a "
"producer function to get a value, because the producer may have more values "
"to generate and so might not yet be ready to return. With tasks, the "
"producer and consumer can both run as long as they need to, passing values "
"back and forth as necessary."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:848
msgid ""
"Julia provides a [`Channel`](@ref) mechanism for solving this problem.  A "
"[`Channel`](@ref) is a waitable first-in first-out queue which can have "
"multiple tasks reading from and writing to it."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:853
msgid ""
"Let's define a producer task, which produces values via the [`put!`](@ref) "
"call.  To consume values, we need to schedule the producer to run in a new "
"task. A special [`Channel`](@ref)  constructor which accepts a 1-arg "
"function as an argument can be used to run a task bound to a channel.  We "
"can then [`take!`](@ref) values repeatedly from the channel object:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:862
#, no-wrap
msgid ""
"```jldoctest producer\n"
"julia> function producer(c::Channel)\n"
"           put!(c, \"start\")\n"
"           for n=1:4\n"
"               put!(c, 2n)\n"
"           end\n"
"           put!(c, \"stop\")\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:864
#, no-wrap
msgid "julia> chnl = Channel(producer);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:867
#, no-wrap
msgid ""
"julia> take!(chnl)\n"
"\"start\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:870
#, no-wrap
msgid ""
"julia> take!(chnl)\n"
"2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:873
#, no-wrap
msgid ""
"julia> take!(chnl)\n"
"4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:876
#, no-wrap
msgid ""
"julia> take!(chnl)\n"
"6\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:879
#, no-wrap
msgid ""
"julia> take!(chnl)\n"
"8\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:883
#, no-wrap
msgid ""
"julia> take!(chnl)\n"
"\"stop\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:886
msgid ""
"One way to think of this behavior is that `producer` was able to return "
"multiple times. Between calls to [`put!`](@ref), the producer's execution is "
"suspended and the consumer has control."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:889
msgid ""
"The returned [`Channel`](@ref) can be used as an iterable object in a `for` "
"loop, in which case the loop variable takes on all the produced values. The "
"loop is terminated when the channel is closed."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:901
#, no-wrap
msgid ""
"```jldoctest producer\n"
"julia> for x in Channel(producer)\n"
"           println(x)\n"
"       end\n"
"start\n"
"2\n"
"4\n"
"6\n"
"8\n"
"stop\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:906
msgid ""
"Note that we did not have to explicitly close the channel in the producer. "
"This is because the act of binding a [`Channel`](@ref) to a [`Task`](@ref) "
"associates the open lifetime of a channel with that of the bound task. The "
"channel object is closed automatically when the task terminates. Multiple "
"channels can be bound to a task, and vice-versa."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:911
msgid ""
"While the [`Task`](@ref) constructor expects a 0-argument function, the "
"[`Channel`](@ref)  method which creates a channel bound task expects a "
"function that accepts a single argument of type [`Channel`](@ref). A common "
"pattern is for the producer to be parameterized, in which case a partial "
"function application is needed to create a 0 or 1 argument [anonymous "
"function](@ref man-anonymous-functions)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:913
msgid ""
"For [`Task`](@ref) objects this can be done either directly or by use of a "
"convenience macro:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:918
#, no-wrap
msgid ""
"```julia\n"
"function mytask(myarg)\n"
"    ...\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:920
#, no-wrap
msgid "taskHdl = Task(() -> mytask(7))\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/control-flow.md:920
#, no-wrap
msgid "or, equivalently"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:923
msgid "taskHdl = @task mytask(7)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:927
msgid ""
"To orchestrate more advanced work distribution patterns, [`bind`](@ref) and "
"[`schedule`](@ref)  can be used in conjunction with [`Task`](@ref) and "
"[`Channel`](@ref)  constructors to explicitly link a set of channels with a "
"set of producer/consumer tasks."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:930
msgid ""
"Note that currently Julia tasks are not scheduled to run on separate CPU "
"cores.  True kernel threads are discussed under the topic of [Parallel "
"Computing](@ref)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/control-flow.md:931
#, no-wrap
msgid "Core task operations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:939
msgid ""
"Let us explore the low level construct [`yieldto`](@ref) to understand how "
"task switching works.  `yieldto(task,value)` suspends the current task, "
"switches to the specified `task`, and causes that task's last [`yieldto`]"
"(@ref) call to return the specified `value`. Notice that [`yieldto`](@ref)  "
"is the only operation required to use task-style control flow; instead of "
"calling and returning we are always just switching to a different task. This "
"is why this feature is also called \"symmetric coroutines\"; each task is "
"switched to and from using the same mechanism."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:947
msgid ""
"[`yieldto`](@ref) is powerful, but most uses of tasks do not invoke it "
"directly. Consider why this might be. If you switch away from the current "
"task, you will probably want to switch back to it at some point, but knowing "
"when to switch back, and knowing which task has the responsibility of "
"switching back, can require considerable coordination. For example, [`put!`]"
"(@ref) and [`take!`](@ref)  are blocking operations, which, when used in the "
"context of channels maintain state to remember who the consumers are. Not "
"needing to manually keep track of the consuming task is what makes [`put!`]"
"(@ref)  easier to use than the low-level [`yieldto`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:949
msgid ""
"In addition to [`yieldto`](@ref), a few other basic functions are needed to "
"use tasks effectively."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:954
msgid "[`current_task`](@ref) gets a reference to the currently-running task."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:954
msgid "[`istaskdone`](@ref) queries whether a task has exited."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:954
msgid "[`istaskstarted`](@ref) queries whether a task has run yet."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/control-flow.md:954
msgid ""
"[`task_local_storage`](@ref) manipulates a key-value store specific to the "
"current task."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/control-flow.md:955
#, no-wrap
msgid "Tasks and events"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:960
msgid ""
"Most task switches occur as a result of waiting for events such as I/O "
"requests, and are performed by a scheduler included in Julia Base. The "
"scheduler maintains a queue of runnable tasks, and executes an event loop "
"that restarts tasks based on external events such as message arrival."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:965
msgid ""
"The basic function for waiting for an event is [`wait`](@ref). Several "
"objects implement [`wait`](@ref); for example, given a `Process` object, "
"[`wait`](@ref) will wait for it to exit. [`wait`](@ref)  is often implicit; "
"for example, a [`wait`](@ref) can happen inside a call to [`read`](@ref)  to "
"wait for data to be available."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:972
msgid ""
"In all of these cases, [`wait`](@ref) ultimately operates on a [`Condition`]"
"(@ref) object, which is in charge of queueing and restarting tasks. When a "
"task calls [`wait`](@ref) on a [`Condition`](@ref), the task is marked as "
"non-runnable, added to the condition's queue, and switches to the "
"scheduler.  The scheduler will then pick another task to run, or block "
"waiting for external events. If all goes well, eventually an event handler "
"will call [`notify`](@ref) on the condition, which causes tasks waiting for "
"that condition to become runnable again."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:979
msgid ""
"A task created explicitly by calling [`Task`](@ref) is initially not known "
"to the scheduler. This allows you to manage tasks manually using [`yieldto`]"
"(@ref) if you wish. However, when such a task waits for an event, it still "
"gets restarted automatically when the event happens, as you would expect. It "
"is also possible to make the scheduler run a task whenever it can, without "
"necessarily waiting for any events. This is done by calling [`schedule`]"
"(@ref), or using the [`@async`](@ref)  macro (see [Parallel Computing](@ref) "
"for more details)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/control-flow.md:980
#, no-wrap
msgid "Task states"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:984
msgid ""
"Tasks have a `state` field that describes their execution status. A [`Task`]"
"(@ref) `state` is one of the following symbols:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/control-flow.md:991
#, no-wrap
msgid ""
"| Symbol      | Meaning                                            |\n"
"|:----------- |:-------------------------------------------------- |\n"
"| `:runnable` | Currently running, or available to be switched to  |\n"
"| `:waiting`  | Blocked waiting for a specific event               |\n"
"| `:queued`   | In the scheduler's run queue about to be restarted |\n"
"| `:done`     | Successfully finished executing                    |\n"
"| `:failed`   | Finished with an uncaught exception                |\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/documentation.md:1
#, no-wrap
msgid "Documentation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:5
msgid ""
"Julia enables package developers and users to document functions, types and "
"other objects easily via a built-in documentation system since Julia 0.4."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:10
msgid ""
"The basic syntax is simple: any string appearing at the top-level right "
"before an object (function, macro, type or instance) will be interpreted as "
"documenting it (these are called *docstrings*).  Note that no blank lines or "
"comments may intervene between a docstring and the documented object.  Here "
"is a basic example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:15
msgid ""
"```julia \"Tell whether there are too foo items in the array.\" foo(xs::"
"Array) = ...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:20
msgid ""
"Documentation is interpreted as [Markdown](https://en.wikipedia.org/wiki/"
"Markdown), so you can use indentation and code fences to delimit code "
"examples from text. Technically, any object can be associated with any other "
"as metadata; Markdown happens to be the default, but one can construct other "
"string macros and pass them to the `@doc` macro just as well."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:25
#, no-wrap
msgid ""
"!!! note\n"
"    Markdown support is implemented in the `Markdown` standard library\n"
"    and for a full list of supported syntax see the\n"
"    [documentation](@ref Markdown).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:27
msgid "Here is a more complex example, still using Markdown:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:29
msgid "````julia"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:31
#, no-wrap
msgid ""
"\"\"\"\n"
"    bar(x[, y])\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:34
msgid ""
"Compute the Bar index between `x` and `y`. If `y` is missing, compute the "
"Bar index between all pairs of columns of `x`."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/documentation.md:35
#, no-wrap
msgid "Examples"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:40
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> bar([1, 2], [1, 2])\n"
"1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:43
msgid "\"\"\" function bar(x, y) ...  ````"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:45
msgid ""
"As in the example above, we recommend following some simple conventions when "
"writing documentation:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/documentation.md:48
msgid ""
"Always show the signature of a function at the top of the documentation, "
"with a four-space indent so that it is printed as Julia code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:61
#, no-wrap
msgid ""
"   This can be identical to the signature present in the Julia code (like `mean(x::AbstractArray)`),\n"
"   or a simplified form. Optional arguments should be represented with their default values (i.e.\n"
"   `f(x, y=1)`) when possible, following the actual Julia syntax. Optional arguments which do not\n"
"   have a default value should be put in brackets (i.e. `f(x[, y])` and `f(x[, y[, z]])`). An alternative\n"
"   solution is to use several lines: one without optional arguments, the other(s) with them. This\n"
"   solution can also be used to document several related methods of a given function. When a function\n"
"   accepts many keyword arguments, only include a `<keyword arguments>` placeholder in the signature\n"
"   (i.e. `f(x; <keyword arguments>)`), and give the complete list under an `# Arguments` section\n"
"   (see point 4 below).\n"
"2. Include a single one-line sentence describing what the function does or what the object represents\n"
"   after the simplified signature block. If needed, provide more details in a second paragraph, after\n"
"   a blank line.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:68
#, no-wrap
msgid ""
"   The one-line sentence should use the imperative form (\"Do this\", \"Return that\") instead of the\n"
"   third person (do not write \"Returns the length...\") when documenting functions. It should end\n"
"   with a period. If the meaning of a function cannot be summarized easily, splitting it into separate\n"
"   composable parts could be beneficial (this should not be taken as an absolute requirement for\n"
"   every single case though).\n"
"3. Do not repeat yourself.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:73
#, no-wrap
msgid ""
"   Since the function name is given by the signature, there is no need to start the documentation\n"
"   with \"The function `bar`...\": go straight to the point. Similarly, if the signature specifies\n"
"   the types of the arguments, mentioning them in the description is redundant.\n"
"4. Only provide an argument list when really necessary.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:80
#, no-wrap
msgid ""
"   For simple functions, it is often clearer to mention the role of the arguments directly in the\n"
"   description of the function's purpose. An argument list would only repeat information already\n"
"   provided elsewhere. However, providing an argument list can be a good idea for complex functions\n"
"   with many arguments (in particular keyword arguments). In that case, insert it after the general\n"
"   description of the function, under an `# Arguments` header, with one `-` bullet for each argument.\n"
"   The list should mention the types and default values (if any) of the arguments:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:82
#: ext/julia/doc/src/manual/documentation.md:173
#, no-wrap
msgid ""
"   ```julia\n"
"   \"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:88
#, no-wrap
msgid ""
"   ...\n"
"   # Arguments\n"
"   - `n::Integer`: the number of elements to compute.\n"
"   - `dim::Integer=1`: the dimensions along which to perform the computation.\n"
"   ...\n"
"   \"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:91
#, no-wrap
msgid ""
"   ```\n"
"5. Provide hints to related functions.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:94
#, no-wrap
msgid ""
"   Sometimes there are functions of related functionality. To increase discoverability please provide\n"
"   a short list of these in a `See also:` paragraph.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:99
#, no-wrap
msgid ""
"   ```\n"
"   See also: [`bar!`](@ref), [`baz`](@ref), [`baaz`](@ref)\n"
"   ```\n"
"6. Include any code examples in an `# Examples` section.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:103
#, no-wrap
msgid ""
"   Examples should, whenever possible, be written as *doctests*. A *doctest* is a fenced code block\n"
"   (see [Code blocks](@ref)) starting with ````` ```jldoctest````` and contains any number of `julia>`\n"
"   prompts together with inputs and expected outputs that mimic the Julia REPL.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:108
#, no-wrap
msgid ""
"   !!! note\n"
"       Doctests are enabled by [`Documenter.jl`](https://github.com/JuliaDocs/Documenter.jl).\n"
"       For more detailed documentation see Documenter's\n"
"       [manual](https://juliadocs.github.io/Documenter.jl/).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:111
#, no-wrap
msgid ""
"   For example in the following docstring a variable `a` is defined and the expected result, as printed\n"
"   in a Julia REPL, appears afterwards:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:113
#, no-wrap
msgid ""
"   ````julia\n"
"   \"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:115
#, no-wrap
msgid "   Some nice documentation here.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:123
#, no-wrap
msgid ""
"   # Examples\n"
"   ```jldoctest\n"
"   julia> a = [1 2; 3 4]\n"
"   2×2 Array{Int64,2}:\n"
"    1  2\n"
"    3  4\n"
"   ```\n"
"   \"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:125
#, no-wrap
msgid "   ````\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:132
#, no-wrap
msgid ""
"   !!! warning\n"
"       Calling `rand` and other RNG-related functions should be avoided in doctests since they will not\n"
"       produce consistent outputs during different Julia sessions. If you would like to show some random\n"
"       number generation related functionality, one option is to explicitly construct and seed your own\n"
"       [`MersenneTwister`](@ref) (or other pseudorandom number generator) and pass it to the functions you are\n"
"       doctesting.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:135
#, no-wrap
msgid ""
"       Operating system word size ([`Int32`](@ref) or [`Int64`](@ref)) as well as path separator differences\n"
"       (`/` or `\\`) will also affect the reproducibility of some doctests.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:138
#, no-wrap
msgid ""
"       Note that whitespace in your doctest is significant! The doctest will fail if you misalign the\n"
"       output of pretty-printing an array, for example.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:141
#, no-wrap
msgid ""
"   You can then run `make -C doc doctest=true` to run all the doctests in the Julia Manual and API\n"
"   documentation, which will ensure that your example works.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:147
#, no-wrap
msgid ""
"   To indicate that the output result is truncated, you may write\n"
"   `[...]` at the line where checking should stop. This is useful to\n"
"   hide a stacktrace (which contains non-permanent references to lines\n"
"   of julia code) when the doctest shows that an exception is thrown,\n"
"   for example:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:155
#, no-wrap
msgid ""
"   ````julia\n"
"   ```jldoctest\n"
"   julia> div(1, 0)\n"
"   ERROR: DivideError: integer division error\n"
"   [...]\n"
"   ```\n"
"   ````\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:158
#, no-wrap
msgid ""
"   Examples that are untestable should be written within fenced code blocks starting with ````` ```julia`````\n"
"   so that they are highlighted correctly in the generated documentation.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:163
#, no-wrap
msgid ""
"   !!! tip\n"
"       Wherever possible examples should be **self-contained** and **runnable** so that readers are able\n"
"       to try them out without having to include any dependencies.\n"
"7. Use backticks to identify code and equations.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:169
#, no-wrap
msgid ""
"   Julia identifiers and code excerpts should always appear between backticks ``` ` ``` to enable\n"
"   highlighting. Equations in the LaTeX syntax can be inserted between double backticks ``` `` ```.\n"
"   Use Unicode characters rather than their LaTeX escape sequence, i.e. ``` ``α = 1`` ``` rather\n"
"   than ``` ``\\\\alpha = 1`` ```.\n"
"8. Place the starting and ending `\"\"\"` characters on lines by themselves.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:171
#, no-wrap
msgid "   That is, write:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:175
#, no-wrap
msgid "   ...\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:177
#, no-wrap
msgid ""
"   ...\n"
"   \"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:180
#: ext/julia/doc/src/manual/documentation.md:189
#, no-wrap
msgid ""
"   f(x, y) = ...\n"
"   ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:182
#, no-wrap
msgid "   rather than:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:185
#, no-wrap
msgid ""
"   ```julia\n"
"   \"\"\"...\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:186
#, no-wrap
msgid "   ...\"\"\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:192
#, no-wrap
msgid ""
"   This makes it more clear where docstrings start and end.\n"
"9. Respect the line length limit used in the surrounding code.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:200
#, no-wrap
msgid ""
"   Docstrings are edited using the same tools as code. Therefore, the same conventions should apply.\n"
"   It is advised to add line breaks after 92 characters.\n"
"6. Provide information allowing custom types to implement the function in an\n"
"   `# Implementation` section. These implementation details intended for developers\n"
"   rather than users, explaining e.g. which functions should be overridden and which functions\n"
"   automatically use appropriate fallbacks, are better kept separate from the main description of\n"
"   the function's behavior.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/documentation.md:201
#, no-wrap
msgid "Accessing Documentation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:205
msgid ""
"Documentation can be accessed at the REPL or in [IJulia](https://github.com/"
"JuliaLang/IJulia.jl)  by typing `?` followed by the name of a function or "
"macro, and pressing `Enter`. For example,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:211
msgid "```julia ?cos ?@time ?r\"\" ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:214
msgid ""
"will bring up docs for the relevant function, macro or string macro "
"respectively. In [Juno](http://junolab.org)  using `Ctrl-J, Ctrl-D` will "
"bring up documentation for the object under the cursor."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/documentation.md:215
#, no-wrap
msgid "Functions & Methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:223
msgid ""
"Functions in Julia may have multiple implementations, known as methods. "
"While it's good practice for generic functions to have a single purpose, "
"Julia allows methods to be documented individually if necessary. In general, "
"only the most generic method should be documented, or even the function "
"itself (i.e. the object created without any methods by `function bar end`). "
"Specific methods should only be documented if their behaviour differs from "
"the more generic ones. In any case, they should not repeat the information "
"provided elsewhere. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:227
#, no-wrap
msgid ""
"\"\"\"\n"
"    *(x, y, z...)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:230
msgid ""
"Multiplication operator. `x * y * z *...` calls this function with multiple "
"arguments, i.e. `*(x, y, z...)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:234
#, no-wrap
msgid ""
"\"\"\"\n"
"function *(x, y, z...)\n"
"    # ... [implementation sold separately] ...\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:237
#, no-wrap
msgid ""
"\"\"\"\n"
"    *(x::AbstractString, y::AbstractString, z::AbstractString...)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:239
msgid "When applied to strings, concatenates them."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:243
#, no-wrap
msgid ""
"\"\"\"\n"
"function *(x::AbstractString, y::AbstractString, z::AbstractString...)\n"
"    # ... [insert secret sauce here] ...\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:246
#, no-wrap
msgid ""
"help?> *\n"
"search: * .*\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:248
#, no-wrap
msgid "  *(x, y, z...)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:251
#, no-wrap
msgid ""
"  Multiplication operator. x * y * z *... calls this function with multiple\n"
"  arguments, i.e. *(x,y,z...).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:253
#, no-wrap
msgid "  *(x::AbstractString, y::AbstractString, z::AbstractString...)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:256
#, no-wrap
msgid ""
"  When applied to strings, concatenates them.\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:259
msgid ""
"When retrieving documentation for a generic function, the metadata for each "
"method is concatenated with the `catdoc` function, which can of course be "
"overridden for custom types."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/documentation.md:260
#, no-wrap
msgid "Advanced Usage"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:266
msgid ""
"The `@doc` macro associates its first argument with its second in a per-"
"module dictionary called `META`. By default, documentation is expected to be "
"written in Markdown, and the `doc\"\"` string macro simply creates an object "
"representing the Markdown content. In the future it is likely to do more "
"advanced things such as allowing for relative image or link paths."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:271
msgid ""
"To make it easier to write documentation, the parser treats the macro name "
"`@doc` specially: if a call to `@doc` has one argument, but another "
"expression appears after a single line break, then that additional "
"expression is added as an argument to the macro.  Therefore the following "
"syntax is parsed as a 2-argument call to `@doc`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:273
msgid "```julia @doc raw\"\"\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:275
#: ext/julia/doc/src/manual/documentation.md:449
#: ext/julia/doc/src/manual/modules.md:151
#, no-wrap
msgid "..."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:278
msgid "\"\"\" f(x) = x ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:280
msgid ""
"This makes it easy to use an arbitrary object (here a `raw` string) as a "
"docstring."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:286
msgid ""
"When used for retrieving documentation, the `@doc` macro (or equally, the "
"`doc` function) will search all `META` dictionaries for metadata relevant to "
"the given object and return it. The returned object (some Markdown content, "
"for example) will by default display itself intelligently. This design also "
"makes it easy to use the doc system in a programmatic way; for example, to "
"re-use documentation between different versions of a function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:291
msgid "```julia @doc \"...\" foo! @doc (@doc foo!) foo ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:293
msgid "Or for use with Julia's metaprogramming functionality:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:303
#, no-wrap
msgid ""
"```julia\n"
"for (f, op) in ((:add, :+), (:subtract, :-), (:multiply, :*), (:divide, :/))\n"
"    @eval begin\n"
"        $f(a,b) = $op(a,b)\n"
"    end\n"
"end\n"
"@doc \"`add(a,b)` adds `a` and `b` together\" add\n"
"@doc \"`subtract(a,b)` subtracts `b` from `a`\" subtract\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:306
msgid ""
"Documentation written in non-toplevel blocks, such as `begin`, `if`, `for`, "
"and `let`, is added to the documentation system as blocks are evaluated. For "
"example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:313
#, no-wrap
msgid ""
"```julia\n"
"if condition()\n"
"    \"...\"\n"
"    f(x) = x\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:316
msgid ""
"will add documentation to `f(x)` when `condition()` is `true`. Note that "
"even if `f(x)` goes out of scope at the end of the block, its documentation "
"will remain."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/documentation.md:317
#, no-wrap
msgid "Dynamic documentation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:322
msgid ""
"Sometimes the appropriate documentation for an instance of a type depends on "
"the field values of that instance, rather than just on the type itself. In "
"these cases, you can add a method to `Docs.getdoc` for your custom type that "
"returns the documentation on a per-instance basis. For instance,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:327
#, no-wrap
msgid ""
"```julia\n"
"struct MyType\n"
"    value::String\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:329
msgid ""
"Docs.getdoc(t::MyType) = \"Documentation for MyType with value $(t.value)\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:333
msgid "x = MyType(\"x\")  y = MyType(\"y\")  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:336
msgid ""
"`?x` will display \"Documentation for MyType with value x\" while `?y` will "
"display \"Documentation for MyType with value y\"."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/documentation.md:337
#, no-wrap
msgid "Syntax Guide"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:340
msgid "A comprehensive overview of all documentable Julia syntax."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:342
msgid ""
"In the following examples `\"...\"` is used to illustrate an arbitrary "
"docstring."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:345
msgid ""
"`doc\"\"` should only be used when the docstring contains `$` or `\\` "
"characters that should not be parsed by Julia such as LaTeX syntax or Julia "
"source code examples containing interpolation."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/documentation.md:346
#, no-wrap
msgid "Functions and Methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:351
msgid "```julia \"...\" function f end"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:355
msgid "\"...\" f ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:358
msgid ""
"Adds docstring `\"...\"` to the function `f`. The first version is the "
"preferred syntax, however both are equivalent."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:362
msgid "```julia \"...\" f(x) = x"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:367
#, no-wrap
msgid ""
"\"...\"\n"
"function f(x)\n"
"    x\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:371
msgid "\"...\" f(x)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:373
msgid "Adds docstring `\"...\"` to the method `f(::Any)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:378
msgid "```julia \"...\" f(x, y = 1) = x + y ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:380
msgid ""
"Adds docstring `\"...\"` to two `Method`s, namely `f(::Any)` and `f(::Any, ::"
"Any)`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/documentation.md:381
#: ext/julia/doc/src/devdocs/ast.md:409 ext/julia/doc/src/devdocs/ast.md:550
#, no-wrap
msgid "Macros"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:387
msgid "```julia \"...\" macro m(x) end ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:389
msgid "Adds docstring `\"...\"` to the `@m(::Any)` macro definition."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:394
msgid "```julia \"...\" :(@m)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:396
msgid "Adds docstring `\"...\"` to the macro named `@m`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/documentation.md:397
#, no-wrap
msgid "Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:402
msgid "``` \"...\" abstract type T1 end"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:407
#, no-wrap
msgid ""
"\"...\"\n"
"mutable struct T2\n"
"    ...\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:413
#, no-wrap
msgid ""
"\"...\"\n"
"struct T3\n"
"    ...\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:415
msgid "Adds the docstring `\"...\"` to types `T1`, `T2`, and `T3`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:425
#, no-wrap
msgid ""
"```julia\n"
"\"...\"\n"
"struct T\n"
"    \"x\"\n"
"    x\n"
"    \"y\"\n"
"    y\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:428
msgid ""
"Adds docstring `\"...\"` to type `T`, `\"x\"` to field `T.x` and `\"y\"` to "
"field `T.y`. Also applicable to `mutable struct` types."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/documentation.md:429
#, no-wrap
msgid "Modules"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:434
msgid "```julia \"...\" module M end"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:436
msgid "module M"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:439
msgid "\"...\" M"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:445
msgid ""
"Adds docstring `\"...\"` to the `Module``M`. Adding the docstring above the "
"`Module` is the preferred syntax, however both are equivalent."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:449
msgid "```julia \"...\" baremodule M"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:451
msgid "end"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:453
msgid "baremodule M"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:455
msgid "import Base: @doc"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:458
msgid "\"...\" f(x) = x"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:465
msgid ""
"Documenting a `baremodule` by placing a docstring above the expression "
"automatically imports `@doc` into the module. These imports must be done "
"manually when the module expression is not documented. Empty `baremodule`s "
"cannot be documented."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/documentation.md:466
#, no-wrap
msgid "Global Variables"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:471
msgid "```julia \"...\" const a = 1"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:474
msgid "\"...\" b = 2"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:478
msgid "\"...\" global c = 3 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:480
msgid "Adds docstring `\"...\"` to the `Binding`s `a`, `b`, and `c`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:483
msgid ""
"`Binding`s are used to store a reference to a particular `Symbol` in a "
"`Module` without storing the referenced value itself."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:488
#, no-wrap
msgid ""
"!!! note\n"
"    When a `const` definition is only used to define an alias of another definition, such as is the\n"
"    case with the function `div` and its alias `÷` in `Base`, do not document the alias and instead\n"
"    document the actual function.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:491
#, no-wrap
msgid ""
"    If the alias is documented and not the real definition then the docsystem (`?` mode) will not\n"
"    return the docstring attached to the alias when the real definition is searched for.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:493
#, no-wrap
msgid "    For example you should write\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:499
#, no-wrap
msgid ""
"    ```julia\n"
"    \"...\"\n"
"    f(x) = x + 1\n"
"    const alias = f\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:501
#, no-wrap
msgid "    rather than\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:507
#, no-wrap
msgid ""
"    ```julia\n"
"    f(x) = x + 1\n"
"    \"...\"\n"
"    const alias = f\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:512
msgid "```julia \"...\" sym ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:515
msgid ""
"Adds docstring `\"...\"` to the value associated with `sym`. Users should "
"prefer documenting `sym` at its definition."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/documentation.md:516
#, no-wrap
msgid "Multiple Objects"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:522
msgid "```julia \"...\" a, b ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:525
msgid ""
"Adds docstring `\"...\"` to `a` and `b` each of which should be a "
"documentable expression. This syntax is equivalent to"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:529
msgid "```julia \"...\" a"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:533
msgid "\"...\" b ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:536
msgid ""
"Any number of expressions many be documented together in this way. This "
"syntax can be useful when two functions are related, such as non-mutating "
"and mutating versions `f` and `f!`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/documentation.md:537
#, no-wrap
msgid "Macro-generated code"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:543
msgid "```julia \"...\" @m expression ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:547
msgid ""
"Adds docstring `\"...\"` to expression generated by expanding `@m "
"expression`. This allows for expressions decorated with `@inline`, "
"`@noinline`, `@generated`, or any other macro to be documented in the same "
"way as undecorated expressions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:551
msgid ""
"Macro authors should take note that only macros that generate a single "
"expression will automatically support docstrings. If a macro returns a block "
"containing multiple subexpressions then the subexpression that should be "
"documented must be marked using the [`@__doc__`](@ref Core.@__doc__) macro."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:554
msgid ""
"The `@enum` macro makes use of `@__doc__` to allow for documenting `Enum`s. "
"Examining its definition should serve as an example of how to use `@__doc__` "
"correctly."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/documentation.md:557
msgid "```@docs Core.@__doc__ ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/performance-tips.md:1
#, no-wrap
msgid "[Performance Tips](@id man-performance-tips)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:5
msgid ""
"In the following sections, we briefly go through a few techniques that can "
"help make your Julia code run as fast as possible."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:6
#, no-wrap
msgid "Avoid global variables"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:11
msgid ""
"A global variable might have its value, and therefore its type, change at "
"any point. This makes it difficult for the compiler to optimize code using "
"global variables. Variables should be local, or passed as arguments to "
"functions, whenever possible."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:13
msgid ""
"Any code that is performance critical or being benchmarked should be inside "
"a function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:16
msgid ""
"We find that global names are frequently constants, and declaring them as "
"such greatly improves performance:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:20
msgid "```julia const DEFAULT_VAL = 0 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:22
msgid ""
"Uses of non-constant globals can be optimized by annotating their types at "
"the point of use:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:25
msgid "```julia global x = rand(1000)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:34
#, no-wrap
msgid ""
"function loop_over_global()\n"
"    s = 0.0\n"
"    for i in x::Vector{Float64}\n"
"        s += i\n"
"    end\n"
"    return s\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:36
msgid ""
"Passing arguments to functions is better style. It leads to more reusable "
"code and clarifies what the inputs and outputs are."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:41
#, no-wrap
msgid ""
"!!! note\n"
"    All code in the REPL is evaluated in global scope, so a variable defined and assigned\n"
"    at toplevel will be a **global** variable. Variables defined in at top level scope inside\n"
"    modules are also global.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:43
msgid "In the following REPL session:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:47
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> x = 1.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:49
msgid "is equivalent to:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:53
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> global x = 1.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:55
msgid "so all the performance issues discussed previously apply."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:56
#, no-wrap
msgid "Measure performance with [`@time`](@ref) and pay attention to memory allocation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:60
msgid ""
"A useful tool for measuring performance is the [`@time`](@ref) macro. We "
"here repeat the example with the global variable above, but this time with "
"the type annotation removed:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:63
#, no-wrap
msgid ""
"```jldoctest; setup = :(using Random; Random.seed!(1234)), filter = r\"[0-9\\.]+ seconds \\(.*?\\)\"\n"
"julia> x = rand(1000);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:71
#, no-wrap
msgid ""
"julia> function sum_global()\n"
"           s = 0.0\n"
"           for i in x\n"
"               s += i\n"
"           end\n"
"           return s\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:75
#, no-wrap
msgid ""
"julia> @time sum_global()\n"
"  0.017705 seconds (15.28 k allocations: 694.484 KiB)\n"
"496.84883432553846\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:80
#, no-wrap
msgid ""
"julia> @time sum_global()\n"
"  0.000140 seconds (3.49 k allocations: 70.313 KiB)\n"
"496.84883432553846\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:86
msgid ""
"On the first call (`@time sum_global()`) the function gets compiled. (If "
"you've not yet used [`@time`](@ref)  in this session, it will also compile "
"functions needed for timing.)  You should not take the results of this run "
"seriously. For the second run, note that in addition to reporting the time, "
"it also indicated that a significant amount of memory was allocated. We are "
"here just computing a sum over all elements in a vector of 64-bit floats so "
"there should be no need to allocate memory (at least not on the heap which "
"is what `@time` reports)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:92
msgid ""
"Unexpected memory allocation is almost always a sign of some problem with "
"your code, usually a problem with type-stability or creating many small "
"temporary arrays.  Consequently, in addition to the allocation itself, it's "
"very likely that the code generated for your function is far from optimal. "
"Take such indications seriously and follow the advice below."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:96
msgid ""
"If we instead pass `x` as an argument to the function it no longer allocates "
"memory (the allocation reported below is due to running the `@time` macro in "
"global scope)  and is significantly faster after the first call:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:99
#, no-wrap
msgid ""
"```jldoctest sumarg; setup = :(using Random; Random.seed!(1234)), filter = r\"[0-9\\.]+ seconds \\(.*?\\)\"\n"
"julia> x = rand(1000);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:107
#, no-wrap
msgid ""
"julia> function sum_arg(x)\n"
"           s = 0.0\n"
"           for i in x\n"
"               s += i\n"
"           end\n"
"           return s\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:111
#, no-wrap
msgid ""
"julia> @time sum_arg(x)\n"
"  0.007701 seconds (821 allocations: 43.059 KiB)\n"
"496.84883432553846\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:116
#, no-wrap
msgid ""
"julia> @time sum_arg(x)\n"
"  0.000006 seconds (5 allocations: 176 bytes)\n"
"496.84883432553846\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:119
msgid ""
"The 5 allocations seen are from running the `@time` macro itself in global "
"scope. If we instead run the timing in a function, we can see that indeed no "
"allocations are performed:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:122
#, no-wrap
msgid ""
"```jldoctest sumarg; filter = r\"[0-9\\.]+ seconds\"\n"
"julia> time_sum(x) = @time sum_arg(x);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:127
#, no-wrap
msgid ""
"julia> time_sum(x)\n"
"  0.000001 seconds\n"
"496.84883432553846\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:132
msgid ""
"In some situations, your function may need to allocate memory as part of its "
"operation, and this can complicate the simple picture above. In such cases, "
"consider using one of the [tools](@ref tools)  below to diagnose problems, "
"or write a version of your function that separates allocation from its "
"algorithmic aspects (see [Pre-allocating outputs](@ref))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:136
#, no-wrap
msgid ""
"!!! note\n"
"    For more serious benchmarking, consider the [BenchmarkTools.jl](https://github.com/JuliaCI/BenchmarkTools.jl)\n"
"    package which among other things evaluates the function multiple times in order to reduce noise.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:137
#, no-wrap
msgid "[Tools](@id tools)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:141
msgid ""
"Julia and its package ecosystem includes tools that may help you diagnose "
"problems and improve the performance of your code:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:153
msgid ""
"[Profiling](@ref) allows you to measure the performance of your running code "
"and identify lines that serve as bottlenecks. For complex projects, the "
"[ProfileView](https://github.com/timholy/ProfileView.jl)  package can help "
"you visualize your profiling results."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:153
msgid ""
"The [Traceur](https://github.com/MikeInnes/Traceur.jl) package can help you "
"find common performance problems in your code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:153
#, no-wrap
msgid ""
"  * Unexpectedly-large memory allocations--as reported by [`@time`](@ref), [`@allocated`](@ref), or\n"
"    the profiler (through calls to the garbage-collection routines)--hint that there might be issues\n"
"    with your code. If you don't see another reason for the allocations, suspect a type problem.\n"
"     You can also start Julia with the `--track-allocation=user` option and examine the resulting\n"
"    `*.mem` files to see information about where those allocations occur. See [Memory allocation analysis](@ref).\n"
"  * `@code_warntype` generates a representation of your code that can be helpful in finding expressions\n"
"    that result in type uncertainty. See [`@code_warntype`](@ref) below.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:154
#, no-wrap
msgid "Avoid containers with abstract type parameters"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:158
msgid ""
"When working with parameterized types, including arrays, it is best to avoid "
"parameterizing with abstract types where possible."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:160
msgid "Consider the following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:164
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> a = Real[]\n"
"0-element Array{Real,1}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:171
#, no-wrap
msgid ""
"julia> push!(a, 1); push!(a, 2.0); push!(a, π)\n"
"3-element Array{Real,1}:\n"
"  1\n"
"  2.0\n"
" π = 3.1415926535897...\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:177
msgid ""
"Because `a` is a an array of abstract type [`Real`](@ref), it must be able "
"to hold any `Real` value. Since `Real` objects can be of arbitrary size and "
"structure, `a` must be represented as an array of pointers to individually "
"allocated `Real` objects. However, if we instead only allow numbers of the "
"same type, e.g. [`Float64`](@ref), to be stored in `a` these can be stored "
"more efficiently:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:181
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> a = Float64[]\n"
"0-element Array{Float64,1}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:188
#, no-wrap
msgid ""
"julia> push!(a, 1); push!(a, 2.0); push!(a,  π)\n"
"3-element Array{Float64,1}:\n"
" 1.0\n"
" 2.0\n"
" 3.141592653589793\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:191
msgid ""
"Assigning numbers into `a` will now convert them to `Float64` and `a` will "
"be stored as a contiguous block of 64-bit floating-point values that can be "
"manipulated efficiently."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:193
msgid "See also the discussion under [Parametric Types](@ref)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:194
#, no-wrap
msgid "Type declarations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:200
msgid ""
"In many languages with optional type declarations, adding declarations is "
"the principal way to make code run faster. This is *not* the case in Julia. "
"In Julia, the compiler generally knows the types of all function arguments, "
"local variables, and expressions. However, there are a few specific "
"instances where declarations are helpful."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/performance-tips.md:201
#, no-wrap
msgid "Avoid fields with abstract type"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:204
msgid "Types can be declared without specifying the types of their fields:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:210
#, no-wrap
msgid ""
"```jldoctest myambig\n"
"julia> struct MyAmbiguousType\n"
"           a\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:215
msgid ""
"This allows `a` to be of any type. This can often be useful, but it does "
"have a downside: for objects of type `MyAmbiguousType`, the compiler will "
"not be able to generate high-performance code. The reason is that the "
"compiler uses the types of objects, not their values, to determine how to "
"build code. Unfortunately, very little can be inferred about an object of "
"type `MyAmbiguousType`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:219
#, no-wrap
msgid ""
"```jldoctest myambig\n"
"julia> b = MyAmbiguousType(\"Hello\")\n"
"MyAmbiguousType(\"Hello\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:222
#, no-wrap
msgid ""
"julia> c = MyAmbiguousType(17)\n"
"MyAmbiguousType(17)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:225
#, no-wrap
msgid ""
"julia> typeof(b)\n"
"MyAmbiguousType\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:229
#, no-wrap
msgid ""
"julia> typeof(c)\n"
"MyAmbiguousType\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:235
msgid ""
"The values of `b` and `c` have the same type, yet their underlying "
"representation of data in memory is very different. Even if you stored just "
"numeric values in field `a`, the fact that the memory representation of a "
"[`UInt8`](@ref) differs from a [`Float64`](@ref) also means that the CPU "
"needs to handle them using two different kinds of instructions. Since the "
"required information is not available in the type, such decisions have to be "
"made at run-time. This slows performance."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:238
msgid ""
"You can do better by declaring the type of `a`. Here, we are focused on the "
"case where `a` might be any one of several types, in which case the natural "
"solution is to use parameters. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:244
#, no-wrap
msgid ""
"```jldoctest myambig2\n"
"julia> mutable struct MyType{T<:AbstractFloat}\n"
"           a::T\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:246
msgid "This is a better choice than"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:252
#, no-wrap
msgid ""
"```jldoctest myambig2\n"
"julia> mutable struct MyStillAmbiguousType\n"
"           a::AbstractFloat\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:255
msgid ""
"because the first version specifies the type of `a` from the type of the "
"wrapper object. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:259
#, no-wrap
msgid ""
"```jldoctest myambig2\n"
"julia> m = MyType(3.2)\n"
"MyType{Float64}(3.2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:262
#, no-wrap
msgid ""
"julia> t = MyStillAmbiguousType(3.2)\n"
"MyStillAmbiguousType(3.2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:265
#, no-wrap
msgid ""
"julia> typeof(m)\n"
"MyType{Float64}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:269
#, no-wrap
msgid ""
"julia> typeof(t)\n"
"MyStillAmbiguousType\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:272
msgid ""
"The type of field `a` can be readily determined from the type of `m`, but "
"not from the type of `t`. Indeed, in `t` it's possible to change the type of "
"the field `a`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:276
#, no-wrap
msgid ""
"```jldoctest myambig2\n"
"julia> typeof(t.a)\n"
"Float64\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:279
#, no-wrap
msgid ""
"julia> t.a = 4.5f0\n"
"4.5f0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:283
#, no-wrap
msgid ""
"julia> typeof(t.a)\n"
"Float32\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:285
msgid "In contrast, once `m` is constructed, the type of `m.a` cannot change:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:289
#, no-wrap
msgid ""
"```jldoctest myambig2\n"
"julia> m.a = 4.5f0\n"
"4.5f0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:293
#, no-wrap
msgid ""
"julia> typeof(m.a)\n"
"Float64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:297
msgid ""
"The fact that the type of `m.a` is known from `m`'s type—coupled with the "
"fact that its type cannot change mid-function—allows the compiler to "
"generate highly-optimized code for objects like `m` but not for objects like "
"`t`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:300
msgid ""
"Of course, all of this is true only if we construct `m` with a concrete "
"type. We can break this by explicitly constructing it with an abstract type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:304
#, no-wrap
msgid ""
"```jldoctest myambig2\n"
"julia> m = MyType{AbstractFloat}(3.2)\n"
"MyType{AbstractFloat}(3.2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:307
#, no-wrap
msgid ""
"julia> typeof(m.a)\n"
"Float64\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:310
#, no-wrap
msgid ""
"julia> m.a = 4.5f0\n"
"4.5f0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:314
#, no-wrap
msgid ""
"julia> typeof(m.a)\n"
"Float32\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:316
msgid ""
"For all practical purposes, such objects behave identically to those of "
"`MyStillAmbiguousType`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:318
msgid ""
"It's quite instructive to compare the sheer amount code generated for a "
"simple function"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:322
msgid "```julia func(m::MyType) = m.a+1 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:324
msgid "using"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:329
msgid ""
"```julia code_llvm(func, Tuple{MyType{Float64}})  code_llvm(func, "
"Tuple{MyType{AbstractFloat}})  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:333
msgid ""
"For reasons of length the results are not shown here, but you may wish to "
"try this yourself. Because the type is fully-specified in the first case, "
"the compiler doesn't need to generate any code to resolve the type at run-"
"time. This results in shorter and faster code."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/performance-tips.md:334
#, no-wrap
msgid "Avoid fields with abstract containers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:337
msgid "The same best practices also work for container types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:342
#, no-wrap
msgid ""
"```jldoctest containers\n"
"julia> struct MySimpleContainer{A<:AbstractVector}\n"
"           a::A\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:347
#, no-wrap
msgid ""
"julia> struct MyAmbiguousContainer{T}\n"
"           a::AbstractVector{T}\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:352
#, no-wrap
msgid ""
"```jldoctest containers\n"
"julia> c = MySimpleContainer(1:3);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:355
#, no-wrap
msgid ""
"julia> typeof(c)\n"
"MySimpleContainer{UnitRange{Int64}}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:357
#, no-wrap
msgid "julia> c = MySimpleContainer([1:3;]);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:360
#, no-wrap
msgid ""
"julia> typeof(c)\n"
"MySimpleContainer{Array{Int64,1}}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:362
#, no-wrap
msgid "julia> b = MyAmbiguousContainer(1:3);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:365
#, no-wrap
msgid ""
"julia> typeof(b)\n"
"MyAmbiguousContainer{Int64}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:367
#, no-wrap
msgid "julia> b = MyAmbiguousContainer([1:3;]);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:371
#, no-wrap
msgid ""
"julia> typeof(b)\n"
"MyAmbiguousContainer{Int64}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:374
msgid ""
"For `MySimpleContainer`, the object is fully-specified by its type and "
"parameters, so the compiler can generate optimized functions. In most "
"instances, this will probably suffice."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:378
msgid ""
"While the compiler can now do its job perfectly well, there are cases where "
"*you* might wish that your code could do different things depending on the "
"*element type* of `a`. Usually the best way to achieve this is to wrap your "
"specific operation (here, `foo`) in a separate function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:388
#, no-wrap
msgid ""
"```jldoctest containers\n"
"julia> function sumfoo(c::MySimpleContainer)\n"
"           s = 0\n"
"           for x in c.a\n"
"               s += foo(x)\n"
"           end\n"
"           s\n"
"       end\n"
"sumfoo (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:391
#, no-wrap
msgid ""
"julia> foo(x::Integer) = x\n"
"foo (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:395
#, no-wrap
msgid ""
"julia> foo(x::AbstractFloat) = round(x)\n"
"foo (generic function with 2 methods)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:397
msgid ""
"This keeps things simple, while allowing the compiler to generate optimized "
"code in all cases."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:401
msgid ""
"However, there are cases where you may need to declare different versions of "
"the outer function for different element types or types of the "
"`AbstractVector` of the field `a` in `MySimpleContainer`.  You could do it "
"like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:407
#, no-wrap
msgid ""
"```jldoctest containers\n"
"julia> function myfunc(c::MySimpleContainer{<:AbstractArray{<:Integer}})\n"
"           return c.a[1]+1\n"
"       end\n"
"myfunc (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:412
#, no-wrap
msgid ""
"julia> function myfunc(c::MySimpleContainer{<:AbstractArray{<:AbstractFloat}})\n"
"           return c.a[1]+2\n"
"       end\n"
"myfunc (generic function with 2 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:418
#, no-wrap
msgid ""
"julia> function myfunc(c::MySimpleContainer{Vector{T}}) where T <: Integer\n"
"           return c.a[1]+3\n"
"       end\n"
"myfunc (generic function with 3 methods)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:422
#, no-wrap
msgid ""
"```jldoctest containers\n"
"julia> myfunc(MySimpleContainer(1:3))\n"
"2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:425
#, no-wrap
msgid ""
"julia> myfunc(MySimpleContainer(1.0:3))\n"
"3.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:429
#, no-wrap
msgid ""
"julia> myfunc(MySimpleContainer([1:3;]))\n"
"4\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/performance-tips.md:430
#, no-wrap
msgid "Annotate values taken from untyped locations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:435
msgid ""
"It is often convenient to work with data structures that may contain values "
"of any type (arrays of type `Array{Any}`). But, if you're using one of these "
"structures and happen to know the type of an element, it helps to share this "
"knowledge with the compiler:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:443
#, no-wrap
msgid ""
"```julia\n"
"function foo(a::Array{Any,1})\n"
"    x = a[1]::Int32\n"
"    b = x+1\n"
"    ...\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:447
msgid ""
"Here, we happened to know that the first element of `a` would be an [`Int32`]"
"(@ref). Making an annotation like this has the added benefit that it will "
"raise a run-time error if the value is not of the expected type, potentially "
"catching certain bugs earlier."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:455
msgid ""
"In the case that the type of `a[1]` is not known precisely, `x` can be "
"declared via `x = convert(Int32, a[1])::Int32`. The use of the [`convert`]"
"(@ref) function allows `a[1]` to be any object convertible to an `Int32` "
"(such as `UInt8`), thus increasing the genericity of the code by loosening "
"the type requirement. Notice that `convert` itself needs a type annotation "
"in this context in order to achieve type stability. This is because the "
"compiler cannot deduce the type of the return value of a function, even "
"`convert`, unless the types of all the function's arguments are known."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:459
msgid ""
"Type annotation will not enhance (and can actually hinder) performance if "
"the type is constructed at run-time. This is because the compiler cannot use "
"the annotation to specialize the subsequent code, and the type-check itself "
"takes time. For example, in the code:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:468
#, no-wrap
msgid ""
"```julia\n"
"function nr(a, prec)\n"
"    ctype = prec == 32 ? Float32 : Float64\n"
"    b = Complex{ctype}(a)\n"
"    c = (b + 1.0f0)::Complex{ctype}\n"
"    abs(c)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:476
msgid ""
"the annotation of `c` harms performance. To write performant code involving "
"types constructed at run-time, use the [function-barrier technique](@ref "
"kernel-functions) discussed below, and ensure that the constructed type "
"appears among the argument types of the kernel function so that the kernel "
"operations are properly specialized by the compiler. For example, in the "
"above snippet, as soon as `b` is constructed, it can be passed to another "
"function `k`, the kernel. If, for example, function `k` declares `b` as an "
"argument of type `Complex{T}`, where `T` is a type parameter, then a type "
"annotation appearing in an assignment statement within `k` of the form:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:480
msgid "```julia c = (b + 1.0f0)::Complex{T} ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:483
msgid ""
"does not hinder performance (but does not help either) since the compiler "
"can determine the type of `c` at the time `k` is compiled."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:484
#, no-wrap
msgid "Break functions into multiple definitions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:488
msgid ""
"Writing a function as many small definitions allows the compiler to directly "
"call the most applicable code, or even inline it."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:490
msgid ""
"Here is an example of a \"compound function\" that should really be written "
"as multiple definitions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:493
msgid "```julia using LinearAlgebra"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:504
#, no-wrap
msgid ""
"function mynorm(A)\n"
"    if isa(A, Vector)\n"
"        return sqrt(real(dot(A,A)))\n"
"    elseif isa(A, Matrix)\n"
"        return maximum(svdvals(A))\n"
"    else\n"
"        error(\"mynorm: invalid argument\")\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:506
msgid "This can be written more concisely and efficiently as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:511
msgid ""
"```julia norm(x::Vector) = sqrt(real(dot(x, x)))  norm(A::Matrix) = "
"maximum(svdvals(A))  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:514
msgid ""
"It should however be noted that the compiler is quite efficient at "
"optimizing away the dead branches in code written as the `mynorm` example."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:515
#, no-wrap
msgid "Write \"type-stable\" functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:519
msgid ""
"When possible, it helps to ensure that a function always returns a value of "
"the same type. Consider the following definition:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:523
#, no-wrap
msgid ""
"```julia\n"
"pos(x) = x < 0 ? 0 : x\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:528
msgid ""
"Although this seems innocent enough, the problem is that `0` is an integer "
"(of type `Int`) and `x` might be of any type. Thus, depending on the value "
"of `x`, this function might return a value of either of two types. This "
"behavior is allowed, and may be desirable in some cases. But it can easily "
"be fixed as follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:532
#, no-wrap
msgid ""
"```julia\n"
"pos(x) = x < 0 ? zero(x) : x\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:535
msgid ""
"There is also a [`oneunit`](@ref) function, and a more general [`oftype(x, "
"y)`](@ref) function, which returns `y` converted to the type of `x`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:536
#, no-wrap
msgid "Avoid changing the type of a variable"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:539
msgid ""
"An analogous \"type-stability\" problem exists for variables used repeatedly "
"within a function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:549
#, no-wrap
msgid ""
"```julia\n"
"function foo()\n"
"    x = 1\n"
"    for i = 1:10\n"
"        x /= rand()\n"
"    end\n"
"    return x\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:553
msgid ""
"Local variable `x` starts as an integer, and after one loop iteration "
"becomes a floating-point number (the result of [`/`](@ref) operator). This "
"makes it more difficult for the compiler to optimize the body of the loop. "
"There are several possible fixes:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:558
msgid "Initialize `x` with `x = 1.0`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:558
msgid "Declare the type of `x`: `x::Float64 = 1`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:558
msgid "Use an explicit conversion: `x = oneunit(Float64)`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:558
msgid ""
"Initialize with the first loop iteration, to `x = 1 / rand()`, then loop "
"`for i = 2:10`"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:559
#, no-wrap
msgid "[Separate kernel functions (aka, function barriers)](@id kernel-functions)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:565
msgid ""
"Many functions follow a pattern of performing some set-up work, and then "
"running many iterations to perform a core computation. Where possible, it is "
"a good idea to put these core computations in separate functions. For "
"example, the following contrived function returns an array of a randomly-"
"chosen type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:574
#, no-wrap
msgid ""
"```jldoctest; setup = :(using Random; Random.seed!(1234))\n"
"julia> function strange_twos(n)\n"
"           a = Vector{rand(Bool) ? Int64 : Float64}(undef, n)\n"
"           for i = 1:n\n"
"               a[i] = 2\n"
"           end\n"
"           return a\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:581
#: ext/julia/doc/src/manual/performance-tips.md:603
#, no-wrap
msgid ""
"julia> strange_twos(3)\n"
"3-element Array{Float64,1}:\n"
" 2.0\n"
" 2.0\n"
" 2.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:583
msgid "This should be written as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:590
#, no-wrap
msgid ""
"```jldoctest; setup = :(using Random; Random.seed!(1234))\n"
"julia> function fill_twos!(a)\n"
"           for i = eachindex(a)\n"
"               a[i] = 2\n"
"           end\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:596
#, no-wrap
msgid ""
"julia> function strange_twos(n)\n"
"           a = Vector{rand(Bool) ? Int64 : Float64}(undef, n)\n"
"           fill_twos!(a)\n"
"           return a\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:608
msgid ""
"Julia's compiler specializes code for argument types at function boundaries, "
"so in the original implementation it does not know the type of `a` during "
"the loop (since it is chosen randomly).  Therefore the second version is "
"generally faster since the inner loop can be recompiled as part of "
"`fill_twos!` for different types of `a`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:610
msgid ""
"The second form is also often better style and can lead to more code reuse."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:614
msgid ""
"This pattern is used in several places in Julia Base. For example, see "
"`vcat` and `hcat` in [`abstractarray.jl`](https://github.com/JuliaLang/julia/"
"blob/40fe264f4ffaa29b749bcf42239a89abdcbba846/base/abstractarray.jl#L1205-"
"L1206), or the [`fill!`](@ref) function, which we could have used instead of "
"writing our own `fill_twos!`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:617
msgid ""
"Functions like `strange_twos` occur when dealing with data of uncertain "
"type, for example data loaded from an input file that might contain either "
"integers, floats, strings, or something else."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:618
#, no-wrap
msgid "Types with values-as-parameters"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:622
msgid ""
"Let's say you want to create an `N`-dimensional array that has size 3 along "
"each axis. Such arrays can be created like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:630
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> A = fill(5.0, (3, 3))\n"
"3×3 Array{Float64,2}:\n"
" 5.0  5.0  5.0\n"
" 5.0  5.0  5.0\n"
" 5.0  5.0  5.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:635
msgid ""
"This approach works very well: the compiler can figure out that `A` is an "
"`Array{Float64,2}` because it knows the type of the fill value (`5.0::"
"Float64`) and the dimensionality (`(3, 3)::NTuple{2,Int}`).  This implies "
"that the compiler can generate very efficient code for any future usage of "
"`A` in the same function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:638
msgid ""
"But now let's say you want to write a function that creates a 3×3×... array "
"in arbitrary dimensions; you might be tempted to write a function"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:644
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function array3(fillval, N)\n"
"           fill(fillval, ntuple(d->3, N))\n"
"       end\n"
"array3 (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:651
#, no-wrap
msgid ""
"julia> array3(5.0, 2)\n"
"3×3 Array{Float64,2}:\n"
" 5.0  5.0  5.0\n"
" 5.0  5.0  5.0\n"
" 5.0  5.0  5.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:657
msgid ""
"This works, but (as you can verify for yourself using `@code_warntype "
"array3(5.0, 2)`) the problem is that the output type cannot be inferred: the "
"argument `N` is a *value* of type `Int`, and type-inference does not (and "
"cannot) predict its value in advance. This means that code using the output "
"of this function has to be conservative, checking the type on each access of "
"`A`; such code will be very slow."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:662
msgid ""
"Now, one very good way to solve such problems is by using the [function-"
"barrier technique](@ref kernel-functions).  However, in some cases you might "
"want to eliminate the type-instability altogether. In such cases, one "
"approach is to pass the dimensionality as a parameter, for example through "
"`Val{T}()` (see [\"Value types\"](@ref)):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:668
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function array3(fillval, ::Val{N}) where N\n"
"           fill(fillval, ntuple(d->3, Val(N)))\n"
"       end\n"
"array3 (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:675
#, no-wrap
msgid ""
"julia> array3(5.0, Val(2))\n"
"3×3 Array{Float64,2}:\n"
" 5.0  5.0  5.0\n"
" 5.0  5.0  5.0\n"
" 5.0  5.0  5.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:679
msgid ""
"Julia has a specialized version of `ntuple` that accepts a `Val{::Int}` "
"instance as the second parameter; by passing `N` as a type-parameter, you "
"make its \"value\" known to the compiler.  Consequently, this version of "
"`array3` allows the compiler to predict the return type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:682
msgid ""
"However, making use of such techniques can be surprisingly subtle. For "
"example, it would be of no help if you called `array3` from a function like "
"this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:688
#, no-wrap
msgid ""
"```julia\n"
"function call_array3(fillval, n)\n"
"    A = array3(fillval, Val(n))\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:694
msgid ""
"Here, you've created the same problem all over again: the compiler can't "
"guess what `n` is, so it doesn't know the *type* of `Val(n)`. Attempting to "
"use `Val`, but doing so incorrectly, can easily make performance *worse* in "
"many situations. (Only in situations where you're effectively combining "
"`Val` with the function-barrier trick, to make the kernel function more "
"efficient, should code like the above be used.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:696
msgid "An example of correct usage of `Val` would be:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:703
#, no-wrap
msgid ""
"```julia\n"
"function filter3(A::AbstractArray{T,N}) where {T,N}\n"
"    kernel = array3(1, Val(N))\n"
"    filter(A, kernel)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:707
msgid ""
"In this example, `N` is passed as a parameter, so its \"value\" is known to "
"the compiler. Essentially, `Val(T)` works only when `T` is either hard-coded/"
"literal (`Val(3)`) or already specified in the type-domain."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:708
#, no-wrap
msgid "The dangers of abusing multiple dispatch (aka, more on types with values-as-parameters)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:713
msgid ""
"Once one learns to appreciate multiple dispatch, there's an understandable "
"tendency to go overboard and try to use it for everything. For example, you "
"might imagine using it to store information, e.g."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:720
#, no-wrap
msgid ""
"```\n"
"struct Car{Make, Model}\n"
"    year::Int\n"
"    ...more fields...\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:722
msgid "and then dispatch on objects like `Car{:Honda,:Accord}(year, args...)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:724
msgid "This might be worthwhile when either of the following are true:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:730
msgid ""
"You require CPU-intensive processing on each `Car`, and it becomes vastly "
"more efficient if you know the `Make` and `Model` at compile time and the "
"total number of different `Make` or `Model` that will be used is not too "
"large."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:730
msgid ""
"You have homogenous lists of the same type of `Car` to process, so that you "
"can store them all in an `Array{Car{:Honda,:Accord},N}`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:735
msgid ""
"When the latter holds, a function processing such a homogenous array can be "
"productively specialized: Julia knows the type of each element in advance "
"(all objects in the container have the same concrete type), so Julia can "
"\"look up\" the correct method calls when the function is being compiled "
"(obviating the need to check at run-time) and thereby emit efficient code "
"for processing the whole list."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:743
msgid ""
"When these do not hold, then it's likely that you'll get no benefit; worse, "
"the resulting \"combinatorial explosion of types\" will be "
"counterproductive. If `items[i+1]` has a different type than `item[i]`, "
"Julia has to look up the type at run-time, search for the appropriate method "
"in method tables, decide (via type intersection) which one matches, "
"determine whether it has been JIT-compiled yet (and do so if not), and then "
"make the call. In essence, you're asking the full type- system and JIT-"
"compilation machinery to basically execute the equivalent of a switch "
"statement or dictionary lookup in your own code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:746
msgid ""
"Some run-time benchmarks comparing (1) type dispatch, (2) dictionary lookup, "
"and (3) a \"switch\" statement can be found [on the mailing list](https://"
"groups.google.com/forum/#!msg/julia-users/jUMu9A3QKQQ/qjgVWr7vAwAJ)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:754
msgid ""
"Perhaps even worse than the run-time impact is the compile-time impact: "
"Julia will compile specialized functions for each different `Car{Make, Model}"
"`; if you have hundreds or thousands of such types, then every function that "
"accepts such an object as a parameter (from a custom `get_year` function you "
"might write yourself, to the generic `push!` function in Julia Base) will "
"have hundreds or thousands of variants compiled for it. Each of these "
"increases the size of the cache of compiled code, the length of internal "
"lists of methods, etc. Excess enthusiasm for values-as-parameters can easily "
"waste enormous resources."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:755
#, no-wrap
msgid "Access arrays in memory order, along columns"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:760
msgid ""
"Multidimensional arrays in Julia are stored in column-major order. This "
"means that arrays are stacked one column at a time. This can be verified "
"using the `vec` function or the syntax `[:]` as shown below (notice that the "
"array is ordered `[1 3 2 4]`, not `[1 2 3 4]`):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:766
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = [1 2; 3 4]\n"
"2×2 Array{Int64,2}:\n"
" 1  2\n"
" 3  4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:774
#, no-wrap
msgid ""
"julia> x[:]\n"
"4-element Array{Int64,1}:\n"
" 1\n"
" 3\n"
" 2\n"
" 4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:781
msgid ""
"This convention for ordering arrays is common in many languages like "
"Fortran, Matlab, and R (to name a few). The alternative to column-major "
"ordering is row-major ordering, which is the convention adopted by C and "
"Python (`numpy`) among other languages. Remembering the ordering of arrays "
"can have significant performance effects when looping over arrays. A rule of "
"thumb to keep in mind is that with column-major arrays, the first index "
"changes most rapidly. Essentially this means that looping will be faster if "
"the inner-most loop index is the first to appear in a slice expression."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:787
msgid ""
"Consider the following contrived example. Imagine we wanted to write a "
"function that accepts a [`Vector`](@ref) and returns a square [`Matrix`]"
"(@ref) with either the rows or the columns filled with copies of the input "
"vector. Assume that it is not important whether rows or columns are filled "
"with these copies (perhaps the rest of the code can be easily adapted "
"accordingly). We could conceivably do this in at least four ways (in "
"addition to the recommended call to the built-in [`repeat`](@ref)):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:797
#, no-wrap
msgid ""
"```julia\n"
"function copy_cols(x::Vector{T}) where T\n"
"    inds = axes(x, 1)\n"
"    out = similar(Array{T}, inds, inds)\n"
"    for i = inds\n"
"        out[:, i] = x\n"
"    end\n"
"    return out\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:806
#, no-wrap
msgid ""
"function copy_rows(x::Vector{T}) where T\n"
"    inds = axes(x, 1)\n"
"    out = similar(Array{T}, inds, inds)\n"
"    for i = inds\n"
"        out[i, :] = x\n"
"    end\n"
"    return out\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:815
#, no-wrap
msgid ""
"function copy_col_row(x::Vector{T}) where T\n"
"    inds = axes(x, 1)\n"
"    out = similar(Array{T}, inds, inds)\n"
"    for col = inds, row = inds\n"
"        out[row, col] = x[row]\n"
"    end\n"
"    return out\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:825
#, no-wrap
msgid ""
"function copy_row_col(x::Vector{T}) where T\n"
"    inds = axes(x, 1)\n"
"    out = similar(Array{T}, inds, inds)\n"
"    for row = inds, col = inds\n"
"        out[row, col] = x[col]\n"
"    end\n"
"    return out\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:827
msgid ""
"Now we will time each of these functions using the same random `10000` by "
"`1` input vector:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:830
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> x = randn(10000);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:832
#, no-wrap
msgid "julia> fmt(f) = println(rpad(string(f)*\": \", 14, ' '), @elapsed f(x))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:839
#, no-wrap
msgid ""
"julia> map(fmt, Any[copy_cols, copy_rows, copy_col_row, copy_row_col]);\n"
"copy_cols:    0.331706323\n"
"copy_rows:    1.799009911\n"
"copy_col_row: 0.415630047\n"
"copy_row_col: 1.721531501\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:844
msgid ""
"Notice that `copy_cols` is much faster than `copy_rows`. This is expected "
"because `copy_cols` respects the column-based memory layout of the `Matrix` "
"and fills it one column at a time. Additionally, `copy_col_row` is much "
"faster than `copy_row_col` because it follows our rule of thumb that the "
"first element to appear in a slice expression should be coupled with the "
"inner-most loop."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:845
#, no-wrap
msgid "Pre-allocating outputs"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:849
msgid ""
"If your function returns an `Array` or some other complex type, it may have "
"to allocate memory.  Unfortunately, oftentimes allocation and its converse, "
"garbage collection, are substantial bottlenecks."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:852
msgid ""
"Sometimes you can circumvent the need to allocate memory on each function "
"call by preallocating the output. As a trivial example, compare"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:857
#, no-wrap
msgid ""
"```jldoctest prealloc\n"
"julia> function xinc(x)\n"
"           return [x, x+1, x+2]\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:867
#, no-wrap
msgid ""
"julia> function loopinc()\n"
"           y = 0\n"
"           for i = 1:10^7\n"
"               ret = xinc(i)\n"
"               y += ret[2]\n"
"           end\n"
"           return y\n"
"       end;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:869
msgid "with"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:877
#, no-wrap
msgid ""
"```jldoctest prealloc\n"
"julia> function xinc!(ret::AbstractVector{T}, x::T) where T\n"
"           ret[1] = x\n"
"           ret[2] = x+1\n"
"           ret[3] = x+2\n"
"           nothing\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:888
#, no-wrap
msgid ""
"julia> function loopinc_prealloc()\n"
"           ret = Vector{Int}(undef, 3)\n"
"           y = 0\n"
"           for i = 1:10^7\n"
"               xinc!(ret, i)\n"
"               y += ret[2]\n"
"           end\n"
"           return y\n"
"       end;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:890
msgid "Timing results:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:895
#, no-wrap
msgid ""
"```jldoctest prealloc; filter = r\"[0-9\\.]+ seconds \\(.*?\\)\"\n"
"julia> @time loopinc()\n"
"  0.529894 seconds (40.00 M allocations: 1.490 GiB, 12.14% gc time)\n"
"50000015000000\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:900
#, no-wrap
msgid ""
"julia> @time loopinc_prealloc()\n"
"  0.030850 seconds (6 allocations: 288 bytes)\n"
"50000015000000\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:904
msgid ""
"Preallocation has other advantages, for example by allowing the caller to "
"control the \"output\" type from an algorithm. In the example above, we "
"could have passed a `SubArray` rather than an [`Array`](@ref), had we so "
"desired."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:909
msgid ""
"Taken to its extreme, pre-allocation can make your code uglier, so "
"performance measurements and some judgment may be required. However, for "
"\"vectorized\" (element-wise) functions, the convenient syntax `x .= f.(y)` "
"can be used for in-place operations with fused loops and no temporary arrays "
"(see the [dot syntax for vectorizing functions](@ref man-vectorized))."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:910
#, no-wrap
msgid "More dots: Fuse vectorized operations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:919
msgid ""
"Julia has a special [dot syntax](@ref man-vectorized) that converts any "
"scalar function into a \"vectorized\" function call, and any operator into a "
"\"vectorized\" operator, with the special property that nested \"dot calls\" "
"are *fusing*: they are combined at the syntax level into a single loop, "
"without allocating temporary arrays. If you use `.=` and similar assignment "
"operators, the result can also be stored in-place in a pre-allocated array "
"(see above)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:925
msgid ""
"In a linear-algebra context, this means that even though operations like "
"`vector + vector` and `vector * scalar` are defined, it can be advantageous "
"to instead use `vector .+ vector` and `vector .* scalar` because the "
"resulting loops can be fused with surrounding computations. For example, "
"consider the two functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:928
#, no-wrap
msgid ""
"```jldoctest dotfuse\n"
"julia> f(x) = 3x.^2 + 4x + 7x.^3;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:931
#, no-wrap
msgid ""
"julia> fdot(x) = @. 3x^2 + 4x + 7x^3 # equivalent to 3 .* x.^2 .+ 4 .* x .+ 7 .* x.^3;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:935
msgid ""
"Both `f` and `fdot` compute the same thing. However, `fdot` (defined with "
"the help of the [`@.`](@ref @__dot__) macro) is significantly faster when "
"applied to an array:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:938
#, no-wrap
msgid ""
"```jldoctest dotfuse; filter = r\"[0-9\\.]+ seconds \\(.*?\\)\"\n"
"julia> x = rand(10^6);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:941
#, no-wrap
msgid ""
"julia> @time f(x);\n"
"  0.019049 seconds (16 allocations: 45.777 MiB, 18.59% gc time)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:944
#, no-wrap
msgid ""
"julia> @time fdot(x);\n"
"  0.002790 seconds (6 allocations: 7.630 MiB)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:948
#, no-wrap
msgid ""
"julia> @time f.(x);\n"
"  0.002626 seconds (8 allocations: 7.630 MiB)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:956
msgid ""
"That is, `fdot(x)` is ten times faster and allocates 1/6 the memory of "
"`f(x)`, because each `*` and `+` operation in `f(x)` allocates a new "
"temporary array and executes in a separate loop. (Of course, if you just do "
"`f.(x)` then it is as fast as `fdot(x)` in this example, but in many "
"contexts it is more convenient to just sprinkle some dots in your "
"expressions rather than defining a separate function for each vectorized "
"operation.)"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:957
#, no-wrap
msgid "Consider using views for slices"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:968
msgid ""
"In Julia, an array \"slice\" expression like `array[1:5, :]` creates a copy "
"of that data (except on the left-hand side of an assignment, where "
"`array[1:5, :] = ...` assigns in-place to that portion of `array`).  If you "
"are doing many operations on the slice, this can be good for performance "
"because it is more efficient to work with a smaller contiguous copy than it "
"would be to index into the original array.  On the other hand, if you are "
"just doing a few simple operations on the slice, the cost of the allocation "
"and copy operations can be substantial."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:976
msgid ""
"An alternative is to create a \"view\" of the array, which is an array "
"object (a `SubArray`) that actually references the data of the original "
"array in-place, without making a copy. (If you write to a view, it modifies "
"the original array's data as well.)  This can be done for individual slices "
"by calling [`view`](@ref), or more simply for a whole expression or block of "
"code by putting [`@views`](@ref) in front of that expression. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:979
#, no-wrap
msgid ""
"```jldoctest; filter = r\"[0-9\\.]+ seconds \\(.*?\\)\"\n"
"julia> fcopy(x) = sum(x[2:end-1]);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:981
#, no-wrap
msgid "julia> @views fview(x) = sum(x[2:end-1]);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:983
#, no-wrap
msgid "julia> x = rand(10^6);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:986
#, no-wrap
msgid ""
"julia> @time fcopy(x);\n"
"  0.003051 seconds (7 allocations: 7.630 MB)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:990
#, no-wrap
msgid ""
"julia> @time fview(x);\n"
"  0.001020 seconds (6 allocations: 224 bytes)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:993
msgid ""
"Notice both the 3× speedup and the decreased memory allocation of the "
"`fview` version of the function."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:994
#, no-wrap
msgid "Copying data is not always bad"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1000
msgid ""
"Arrays are stored contiguously in memory, lending themselves to CPU "
"vectorization and fewer memory accesses due to caching. These are the same "
"reasons that it is recommended to access arrays in column-major order (see "
"above). Irregular access patterns and non-contiguous views can drastically "
"slow down computations on arrays because of non-sequential memory access."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1005
msgid ""
"Copying irregularly-accessed data into a contiguous array before operating "
"on it can result in a large speedup, such as in the example below. Here, a "
"matrix and a vector are being accessed at 800,000 of their randomly-shuffled "
"indices before being multiplied. Copying the views into plain arrays speeds "
"up the multiplication even with the cost of the copying operation."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1008
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> using Random\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1010
#, no-wrap
msgid "julia> x = randn(1_000_000);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1012
#, no-wrap
msgid "julia> inds = shuffle(1:1_000_000)[1:800000];\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1014
#, no-wrap
msgid "julia> A = randn(50, 1_000_000);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1016
#, no-wrap
msgid "julia> xtmp = zeros(800_000);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1018
#, no-wrap
msgid "julia> Atmp = zeros(50, 800_000);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1022
#, no-wrap
msgid ""
"julia> @time sum(view(A, :, inds) * view(x, inds))\n"
"  0.412156 seconds (14 allocations: 960 bytes)\n"
"-4256.759568345458\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1031
#, no-wrap
msgid ""
"julia> @time begin\n"
"           copyto!(xtmp, view(x, inds))\n"
"           copyto!(Atmp, view(A, :, inds))\n"
"           sum(Atmp * xtmp)\n"
"       end\n"
"  0.285923 seconds (14 allocations: 960 bytes)\n"
"-4256.759568345134\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1034
msgid ""
"Provided there is enough memory for the copies, the cost of copying the view "
"to an array is far outweighed by the speed boost from doing the matrix "
"multiplication on a contiguous array."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:1035
#, no-wrap
msgid "Avoid string interpolation for I/O"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1039
msgid ""
"When writing data to a file (or other I/O device), forming extra "
"intermediate strings is a source of overhead. Instead of:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1043
msgid "```julia println(file, \"$a $b\")  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1045
#: ext/julia/doc/src/manual/style-guide.md:74
#: ext/julia/doc/src/manual/style-guide.md:103
msgid "use:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1049
msgid "```julia println(file, a, \" \", b)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1053
msgid ""
"The first version of the code forms a string, then writes it to the file, "
"while the second version writes values directly to the file. Also notice "
"that in some cases string interpolation can be harder to read. Consider:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1057
msgid "```julia println(file, \"$(f(a))$(f(b))\")  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1059
msgid "versus:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1063
msgid "```julia println(file, f(a), f(b))  ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:1064
#, no-wrap
msgid "Optimize network I/O during parallel execution"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1067
msgid "When executing a remote function in parallel:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1070
#: ext/julia/doc/src/manual/performance-tips.md:1083
msgid "```julia using Distributed"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1078
#, no-wrap
msgid ""
"responses = Vector{Any}(undef, nworkers())\n"
"@sync begin\n"
"    for (idx, pid) in enumerate(workers())\n"
"        @async responses[idx] = remotecall_fetch(foo, pid, args...)\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1080
msgid "is faster than:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1090
#, no-wrap
msgid ""
"refs = Vector{Any}(undef, nworkers())\n"
"for (idx, pid) in enumerate(workers())\n"
"    refs[idx] = @spawnat pid foo(args...)\n"
"end\n"
"responses = [fetch(r) for r in refs]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1095
msgid ""
"The former results in a single network round-trip to every worker, while the "
"latter results in two network calls - first by the [`@spawnat`](@ref) and "
"the second due to the [`fetch`](@ref)  (or even a [`wait`](@ref)).  The "
"[`fetch`](@ref)/[`wait`](@ref) is also being executed serially resulting in "
"an overall poorer performance."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:1096
#, no-wrap
msgid "Fix deprecation warnings"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1101
msgid ""
"A deprecated function internally performs a lookup in order to print a "
"relevant warning only once.  This extra lookup can cause a significant "
"slowdown, so all uses of deprecated functions should be modified as "
"suggested by the warnings."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:1102
#, no-wrap
msgid "Tweaks"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1105
msgid "These are some minor points that might help in tight inner loops."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:1111
msgid ""
"Avoid unnecessary arrays. For example, instead of [`sum([x,y,z])`](@ref) use "
"`x+y+z`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:1111
msgid ""
"Use [`abs2(z)`](@ref) instead of [`abs(z)^2`](@ref) for complex `z`. In "
"general, try to rewrite code to use [`abs2`](@ref) instead of [`abs`](@ref) "
"for complex arguments."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:1111
msgid ""
"Use [`div(x,y)`](@ref) for truncating division of integers instead of "
"[`trunc(x/y)`](@ref), [`fld(x,y)`](@ref)  instead of [`floor(x/y)`](@ref), "
"and [`cld(x,y)`](@ref) instead of [`ceil(x/y)`](@ref)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:1112
#, no-wrap
msgid "[Performance Annotations](@id man-performance-annotations)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1115
msgid ""
"Sometimes you can enable better optimization by promising certain program "
"properties."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:1129
msgid ""
"Use [`@inbounds`](@ref) to eliminate array bounds checking within "
"expressions. Be certain before doing this. If the subscripts are ever out of "
"bounds, you may suffer crashes or silent corruption."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:1129
msgid ""
"Use [`@fastmath`](@ref) to allow floating point optimizations that are "
"correct for real numbers, but lead to differences for IEEE numbers. Be "
"careful when doing this, as this may change numerical results.  This "
"corresponds to the `-ffast-math` option of clang."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/performance-tips.md:1129
msgid ""
"Write [`@simd`](@ref) in front of `for` loops to promise that the iterations "
"are independent and may be reordered.  Note that in many cases, Julia can "
"automatically vectorize code without the `@simd` macro; it is only "
"beneficial in cases where such a transformation would otherwise be illegal, "
"including cases like allowing floating-point re-associativity and ignoring "
"dependent memory accesses (`@simd ivdep`).  Again, be very careful when "
"asserting `@simd` as erroneously annotating a loop with dependent iterations "
"may result in unexpected results. In particular, note that `setindex!` on "
"some `AbstractArray` subtypes is inherently dependent upon iteration order. "
"**This feature is experimental** and could change or disappear in future "
"versions of Julia."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1133
msgid ""
"The common idiom of using 1:n to index into an AbstractArray is not safe if "
"the Array uses unconventional indexing, and may cause a segmentation fault "
"if bounds checking is turned off. Use `LinearIndices(x)` or `eachindex(x)` "
"instead (see also [offset-arrays](https://docs.julialang.org/en/latest/"
"devdocs/offset-arrays/))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1138
#, no-wrap
msgid ""
"!!! note\n"
"    While `@simd` needs to be placed directly in front of an innermost `for` loop, both `@inbounds` and `@fastmath`\n"
"    can be applied to either single expressions or all the expressions that appear within nested blocks of code, e.g.,\n"
"    using `@inbounds begin` or `@inbounds for ...`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1141
msgid ""
"Here is an example with both `@inbounds` and `@simd` markup (we here use "
"`@noinline` to prevent the optimizer from trying to be too clever and defeat "
"our benchmark):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1150
#, no-wrap
msgid ""
"```julia\n"
"@noinline function inner(x, y)\n"
"    s = zero(eltype(x))\n"
"    for i=eachindex(x)\n"
"        @inbounds s += x[i]*y[i]\n"
"    end\n"
"    return s\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1158
#, no-wrap
msgid ""
"@noinline function innersimd(x, y)\n"
"    s = zero(eltype(x))\n"
"    @simd for i = eachindex(x)\n"
"        @inbounds s += x[i] * y[i]\n"
"    end\n"
"    return s\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1172
#, no-wrap
msgid ""
"function timeit(n, reps)\n"
"    x = rand(Float32, n)\n"
"    y = rand(Float32, n)\n"
"    s = zero(Float64)\n"
"    time = @elapsed for j in 1:reps\n"
"        s += inner(x, y)\n"
"    end\n"
"    println(\"GFlop/sec        = \", 2n*reps / time*1E-9)\n"
"    time = @elapsed for j in 1:reps\n"
"        s += innersimd(x, y)\n"
"    end\n"
"    println(\"GFlop/sec (SIMD) = \", 2n*reps / time*1E-9)\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1175
msgid "timeit(1000, 1000)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1177
msgid "On a computer with a 2.4GHz Intel Core i5 processor, this produces:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1182
#, no-wrap
msgid ""
"```\n"
"GFlop/sec        = 1.9467069505224963\n"
"GFlop/sec (SIMD) = 17.578554163920018\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1184
msgid "(`GFlop/sec` measures the performance, and larger numbers are better.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1187
msgid ""
"Here is an example with all three kinds of markup. This program first "
"calculates the finite difference of a one-dimensional array, and then "
"evaluates the L2-norm of the result:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1196
#, no-wrap
msgid ""
"```julia\n"
"function init!(u::Vector)\n"
"    n = length(u)\n"
"    dx = 1.0 / (n-1)\n"
"    @fastmath @inbounds @simd for i in 1:n #by asserting that `u` is a `Vector` we can assume it has 1-based indexing\n"
"        u[i] = sin(2pi*dx*i)\n"
"    end\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1206
#, no-wrap
msgid ""
"function deriv!(u::Vector, du)\n"
"    n = length(u)\n"
"    dx = 1.0 / (n-1)\n"
"    @fastmath @inbounds du[1] = (u[2] - u[1]) / dx\n"
"    @fastmath @inbounds @simd for i in 2:n-1\n"
"        du[i] = (u[i+1] - u[i-1]) / (2*dx)\n"
"    end\n"
"    @fastmath @inbounds du[n] = (u[n] - u[n-1]) / dx\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1216
#, no-wrap
msgid ""
"function mynorm(u::Vector)\n"
"    n = length(u)\n"
"    T = eltype(u)\n"
"    s = zero(T)\n"
"    @fastmath @inbounds @simd for i in 1:n\n"
"        s += u[i]^2\n"
"    end\n"
"    @fastmath @inbounds return sqrt(s)\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1222
#, no-wrap
msgid ""
"function main()\n"
"    n = 2000\n"
"    u = Vector{Float64}(undef, n)\n"
"    init!(u)\n"
"    du = similar(u)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1225
#, no-wrap
msgid ""
"    deriv!(u, du)\n"
"    nu = mynorm(du)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1230
#, no-wrap
msgid ""
"    @time for i in 1:10^6\n"
"        deriv!(u, du)\n"
"        nu = mynorm(du)\n"
"    end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1233
#, no-wrap
msgid ""
"    println(nu)\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1236
msgid "main()  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1238
msgid "On a computer with a 2.7 GHz Intel Core i7 processor, this produces:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1243
#, no-wrap
msgid ""
"```\n"
"$ julia wave.jl;\n"
"  1.207814709 seconds\n"
"4.443986180758249\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1248
#, no-wrap
msgid ""
"$ julia --math-mode=ieee wave.jl;\n"
"  4.487083643 seconds\n"
"4.443986180758249\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1250
msgid ""
"Here, the option `--math-mode=ieee` disables the `@fastmath` macro, so that "
"we can compare results."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1258
msgid ""
"In this case, the speedup due to `@fastmath` is a factor of about 3.7. This "
"is unusually large – in general, the speedup will be smaller. (In this "
"particular example, the working set of the benchmark is small enough to fit "
"into the L1 cache of the processor, so that memory access latency does not "
"play a role, and computing time is dominated by CPU usage. In many real "
"world programs this is not the case.) Also, in this case this optimization "
"does not change the result – in general, the result will be slightly "
"different. In some cases, especially for numerically unstable algorithms, "
"the result can be very different."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1267
msgid ""
"The annotation `@fastmath` re-arranges floating point expressions, e.g. "
"changing the order of evaluation, or assuming that certain special cases "
"(inf, nan) cannot occur. In this case (and on this particular computer), the "
"main difference is that the expression `1 / (2*dx)` in the function `deriv` "
"is hoisted out of the loop (i.e. calculated outside the loop), as if one had "
"written `idx = 1 / (2*dx)`. In the loop, the expression `... / (2*dx)` then "
"becomes `... * idx`, which is much faster to evaluate. Of course, both the "
"actual optimization that is applied by the compiler as well as the resulting "
"speedup depend very much on the hardware. You can examine the change in "
"generated code by using Julia's [`code_native`](@ref) function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1269
msgid ""
"Note that `@fastmath` also assumes that `NaN`s will not occur during the "
"computation, which can lead to surprising behavior:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1272
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> f(x) = isnan(x);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1275
#, no-wrap
msgid ""
"julia> f(NaN)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1277
#, no-wrap
msgid "julia> f_fast(x) = @fastmath isnan(x);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1281
#, no-wrap
msgid ""
"julia> f_fast(NaN)\n"
"false\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:1282
#, no-wrap
msgid "Treat Subnormal Numbers as Zeros"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1289
msgid ""
"Subnormal numbers, formerly called [denormal numbers](https://en.wikipedia."
"org/wiki/Denormal_number), are useful in many contexts, but incur a "
"performance penalty on some hardware. A call [`set_zero_subnormals(true)`]"
"(@ref)  grants permission for floating-point operations to treat subnormal "
"inputs or outputs as zeros, which may improve performance on some hardware. "
"A call [`set_zero_subnormals(false)`](@ref) enforces strict IEEE behavior "
"for subnormal numbers."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1291
msgid ""
"Below is an example where subnormals noticeably impact performance on some "
"hardware:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1302
#, no-wrap
msgid ""
"```julia\n"
"function timestep(b::Vector{T}, a::Vector{T}, Δt::T) where T\n"
"    @assert length(a)==length(b)\n"
"    n = length(b)\n"
"    b[1] = 1                            # Boundary condition\n"
"    for i=2:n-1\n"
"        b[i] = a[i] + (a[i-1] - T(2)*a[i] + a[i+1]) * Δt\n"
"    end\n"
"    b[n] = 0                            # Boundary condition\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1310
#, no-wrap
msgid ""
"function heatflow(a::Vector{T}, nstep::Integer) where T\n"
"    b = similar(a)\n"
"    for t=1:div(nstep,2)                # Assume nstep is even\n"
"        timestep(b,a,T(0.1))\n"
"        timestep(a,b,T(0.1))\n"
"    end\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1318
#, no-wrap
msgid ""
"heatflow(zeros(Float32,10),2)           # Force compilation\n"
"for trial=1:6\n"
"    a = zeros(Float32,1000)\n"
"    set_zero_subnormals(iseven(trial))  # Odd trials use strict IEEE arithmetic\n"
"    @time heatflow(a,1000)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1320
msgid "This gives an output similar to"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1329
#, no-wrap
msgid ""
"```\n"
"  0.002202 seconds (1 allocation: 4.063 KiB)\n"
"  0.001502 seconds (1 allocation: 4.063 KiB)\n"
"  0.002139 seconds (1 allocation: 4.063 KiB)\n"
"  0.001454 seconds (1 allocation: 4.063 KiB)\n"
"  0.002115 seconds (1 allocation: 4.063 KiB)\n"
"  0.001455 seconds (1 allocation: 4.063 KiB)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1331
msgid "Note how each even iteration is significantly faster."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1334
msgid ""
"This example generates many subnormal numbers because the values in `a` "
"become an exponentially decreasing curve, which slowly flattens out over "
"time."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1337
msgid ""
"Treating subnormals as zeros should be used with caution, because doing so "
"breaks some identities, such as `x-y == 0` implies `x == y`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1340
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = 3f-38; y = 2f-38;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1343
#, no-wrap
msgid ""
"julia> set_zero_subnormals(true); (x - y, x == y)\n"
"(0.0f0, false)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1347
#, no-wrap
msgid ""
"julia> set_zero_subnormals(false); (x - y, x == y)\n"
"(1.0000001f-38, false)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1350
#, no-wrap
msgid ""
"In some applications, an alternative to zeroing subnormal numbers is to inject a tiny bit of noise.\n"
" For example, instead of initializing `a` with zeros, initialize it with:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1354
msgid "```julia a = rand(Float32,1000) * 1.f-9 ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:1355
#, no-wrap
msgid "[[`@code_warntype`](@ref)](@id man-code-warntype)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1359
msgid ""
"The macro [`@code_warntype`](@ref) (or its function variant [`code_warntype`]"
"(@ref)) can sometimes be helpful in diagnosing type-related problems. Here's "
"an example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1362
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @noinline pos(x) = x < 0 ? 0 : x;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1367
#, no-wrap
msgid ""
"julia> function f(x)\n"
"           y = pos(x)\n"
"           sin(y*x + 1)\n"
"       end;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1389
#, no-wrap
msgid ""
"julia> @code_warntype f(3.2)\n"
"Body::Float64\n"
"2 1 ─ %1  = invoke Main.pos(%%x::Float64)::UNION{FLOAT64, INT64}\n"
"3 │   %2  = isa(%1, Float64)::Bool\n"
"  └──       goto 3 if not %2\n"
"  2 ─ %4  = π (%1, Float64)\n"
"  │   %5  = Base.mul_float(%4, %%x)::Float64\n"
"  └──       goto 6\n"
"  3 ─ %7  = isa(%1, Int64)::Bool\n"
"  └──       goto 5 if not %7\n"
"  4 ─ %9  = π (%1, Int64)\n"
"  │   %10 = Base.sitofp(Float64, %9)::Float64\n"
"  │   %11 = Base.mul_float(%10, %%x)::Float64\n"
"  └──       goto 6\n"
"  5 ─       Base.error(\"fatal error in type inference (type bound)\")\n"
"  └──       unreachable\n"
"  6 ┄ %15 = φ (2 => %5, 4 => %11)::Float64\n"
"  │   %16 = Base.add_float(%15, 1.0)::Float64\n"
"  │   %17 = invoke Main.sin(%16::Float64)::Float64\n"
"  └──       return %17\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1397
msgid ""
"Interpreting the output of [`@code_warntype`](@ref), like that of its "
"cousins [`@code_lowered`](@ref), [`@code_typed`](@ref), [`@code_llvm`]"
"(@ref), and [`@code_native`](@ref), takes a little practice.  Your code is "
"being presented in form that has been heavily digested on its way to "
"generating compiled machine code. Most of the expressions are annotated by a "
"type, indicated by the `::T` (where `T` might be [`Float64`](@ref), for "
"example). The most important characteristic of [`@code_warntype`](@ref)  is "
"that non-concrete types are displayed in red; in the above example, such "
"output is shown in uppercase."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1407
msgid ""
"At the top, the inferred return type of the function is shown as `Body::"
"Float64`.  The next lines represent the body of `f` in Julia's SSA IR form.  "
"The numbered boxes are labels and represent targets for jumps (via `goto`) "
"in your code.  Looking at the body, you can see that the first thing that "
"happens is that `pos` is called and the return value has been inferred as "
"the `Union` type `UNION{FLOAT64, INT64}` shown in uppercase since it is a "
"non-concrete type. This means that we cannot know the exact return type of "
"`pos` based on the input types. However, the result of `y*x`is a `Float64` "
"no matter if `y` is a `Float64` or `Int64` The net result is that `f(x::"
"Float64)` will not be type-unstable in its output, even if some of the "
"intermediate computations are type-unstable."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1421
msgid ""
"How you use this information is up to you. Obviously, it would be far and "
"away best to fix `pos` to be type-stable: if you did so, all of the "
"variables in `f` would be concrete, and its performance would be optimal. "
"However, there are circumstances where this kind of *ephemeral* type "
"instability might not matter too much: for example, if `pos` is never used "
"in isolation, the fact that `f`'s output is type-stable (for [`Float64`]"
"(@ref) inputs) will shield later code from the propagating effects of type "
"instability. This is particularly relevant in cases where fixing the type "
"instability is difficult or impossible. In such cases, the tips above (e.g., "
"adding type annotations and/or breaking up functions) are your best tools to "
"contain the \"damage\" from type instability.  Also, note that even Julia "
"Base has functions that are type unstable.  For example, the function "
"[`findfirst`](@ref) returns the index into an array where a key is found, or "
"`nothing` if it is not found, a clear type instability. In order to make it "
"easier to find the type instabilities that are likely to be important, "
"`Union`s containing either `missing` or `nothing` are color highlighted in "
"yellow, instead of red."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1423
msgid ""
"The following examples may help you interpret expressions marked as "
"containing non-leaf types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1427
#, no-wrap
msgid ""
"  * Function body starting with `Body::UNION{T1,T2})`\n"
"      * Interpretation: function with unstable return type\n"
"      * Suggestion: make the return value type-stable, even if you have to annotate it\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1431
#, no-wrap
msgid ""
"  * `invoke Main.g(%%x::Int64)::UNION{FLOAT64, INT64}`\n"
"      * Interpretation: call to a type-unstable function `g`.\n"
"      * Suggestion: fix the function, or if necessary annotate the return value\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1436
#, no-wrap
msgid ""
"  * `invoke Base.getindex(%%x::Array{Any,1}, 1::Int64)::ANY`\n"
"      * Interpretation: accessing elements of poorly-typed arrays\n"
"      * Suggestion: use arrays with better-defined types, or if necessary annotate the type of individual\n"
"        element accesses\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1442
#, no-wrap
msgid ""
"  * `Base.getfield(%%x, :(:data))::ARRAY{FLOAT64,N} WHERE N`\n"
"      * Interpretation: getting a field that is of non-leaf type. In this case, `ArrayContainer` had a\n"
"        field `data::Array{T}`. But `Array` needs the dimension `N`, too, to be a concrete type.\n"
"      * Suggestion: use concrete types like `Array{T,3}` or `Array{T,N}`, where `N` is now a parameter\n"
"        of `ArrayContainer`\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/performance-tips.md:1443
#, no-wrap
msgid "[Performance of captured variable](@id man-performance-captured)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1455
#, no-wrap
msgid ""
"Consider the following example that defines an inner function:\n"
"```julia\n"
"function abmult(r::Int)\n"
"    if r < 0\n"
"        r = -r\n"
"    end\n"
"    f = x -> x * r\n"
"    return f\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1460
msgid ""
"Function `abmult` returns a function `f` that multiplies its argument by the "
"absolute value of `r`. The inner function assigned to `f` is called a "
"\"closure\". Inner functions are also used by the language for `do`-blocks "
"and for generator expressions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1470
msgid ""
"This style of code presents performance challenges for the language.  The "
"parser, when translating it into lower-level instructions, substantially "
"reorganizes the above code by extracting the inner function to a separate "
"code block.  \"Captured\" variables such as `r` that are shared by inner "
"functions and their enclosing scope are also extracted into a heap-allocated "
"\"box\" accessible to both inner and outer functions because the language "
"specifies that `r` in the inner scope must be identical to `r` in the outer "
"scope even after the outer scope (or another inner function) modifies `r`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1476
msgid ""
"The discussion in the preceding paragraph referred to the \"parser\", that "
"is, the phase of compilation that takes place when the module containing "
"`abmult` is first loaded, as opposed to the later phase when it is first "
"invoked. The parser does not \"know\" that `Int` is a fixed type, or that "
"the statement `r = -r` transforms an `Int` to another `Int`.  The magic of "
"type inference takes place in the later phase of compilation."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1484
msgid ""
"Thus, the parser does not know that `r` has a fixed type (`Int`).  nor that "
"`r` does not change value once the inner function is created (so that the "
"box is unneeded).  Therefore, the parser emits code for box that holds an "
"object with an abstract type such as `Any`, which requires run-time type "
"dispatch for each occurrence of `r`.  This can be verified by applying "
"`@code_warntype` to the above function.  Both the boxing and the run-time "
"type dispatch can cause loss of performance."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/performance-tips.md:1523
#, no-wrap
msgid ""
"If captured variables are used in a performance-critical section of the code,\n"
"then the following tips help ensure that their use is performant. First, if\n"
"it is known that a captured variable does not change its type, then this can\n"
"be declared explicitly with a type annotation (on the variable, not the\n"
"right-hand side):\n"
"```julia\n"
"function abmult2(r0::Int)\n"
"    r::Int = r0\n"
"    if r < 0\n"
"        r = -r\n"
"    end\n"
"    f = x -> x * r\n"
"    return f\n"
"end\n"
"```\n"
"The type annotation partially recovers lost performance due to capturing because\n"
"the parser can associate a concrete type to the object in the box.\n"
"Going further, if the captured variable does not need to be boxed at all (because it\n"
"will not be reassigned after the closure is created), this can be indicated\n"
"with `let` blocks as follows.\n"
"```julia\n"
"function abmult3(r::Int)\n"
"    if r < 0\n"
"        r = -r\n"
"    end\n"
"    f = let r = r\n"
"            x -> x * r\n"
"    end\n"
"    return f\n"
"end\n"
"```\n"
"The `let` block creates a new variable `r` whose scope is only the\n"
"inner function. The second technique recovers full language performance\n"
"in the presence of captured variables. Note that this is a rapidly\n"
"evolving aspect of the compiler, and it is likely that future releases\n"
"will not require this degree of programmer annotation to attain performance.\n"
"In the mean time, some user-contributed packages like\n"
"[FastClosures](https://github.com/c42f/FastClosures.jl) automate the\n"
"insertion of `let` statements as in `abmult3`.\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/constructors.md:1
#, no-wrap
msgid "[Constructors](@id man-constructors)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:7
msgid ""
"Constructors [^1] are functions that create new objects -- specifically, "
"instances of [Composite Types](@ref).  In Julia, type objects also serve as "
"constructor functions: they create new instances of themselves when applied "
"to an argument tuple as a function. This much was already mentioned briefly "
"when composite types were introduced. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:13
#, no-wrap
msgid ""
"```jldoctest footype\n"
"julia> struct Foo\n"
"           bar\n"
"           baz\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:16
#, no-wrap
msgid ""
"julia> foo = Foo(1, 2)\n"
"Foo(1, 2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:19
#, no-wrap
msgid ""
"julia> foo.bar\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:23
#, no-wrap
msgid ""
"julia> foo.baz\n"
"2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:33
msgid ""
"For many types, forming new objects by binding their field values together "
"is all that is ever needed to create instances. However, in some cases more "
"functionality is required when creating composite objects. Sometimes "
"invariants must be enforced, either by checking arguments or by transforming "
"them. [Recursive data structures](https://en.wikipedia.org/wiki/Recursion_"
"%28computer_science"
"%29#Recursive_data_structures_.28structural_recursion.29), especially those "
"that may be self-referential, often cannot be constructed cleanly without "
"first being created in an incomplete state and then altered programmatically "
"to be made whole, as a separate step from object creation. Sometimes, it's "
"just convenient to be able to construct objects with fewer or different "
"types of parameters than they have fields. Julia's system for object "
"construction addresses all of these cases and more."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:40
#, no-wrap
msgid ""
"[^1]:\n"
"    Nomenclature: while the term \"constructor\" generally refers to the entire function which constructs\n"
"    objects of a type, it is common to abuse terminology slightly and refer to specific constructor\n"
"    methods as \"constructors\". In such situations, it is generally clear from the context that the term\n"
"    is used to mean \"constructor method\" rather than \"constructor function\", especially as it is often\n"
"    used in the sense of singling out a particular method of the constructor from all of the others.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/constructors.md:41
#, no-wrap
msgid "Outer Constructor Methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:48
msgid ""
"A constructor is just like any other function in Julia in that its overall "
"behavior is defined by the combined behavior of its methods. Accordingly, "
"you can add functionality to a constructor by simply defining new methods. "
"For example, let's say you want to add a constructor method for `Foo` "
"objects that takes only one argument and uses the given value for both the "
"`bar` and `baz` fields. This is simple:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:52
#, no-wrap
msgid ""
"```jldoctest footype\n"
"julia> Foo(x) = Foo(x,x)\n"
"Foo\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:56
#, no-wrap
msgid ""
"julia> Foo(1)\n"
"Foo(1, 1)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:59
msgid ""
"You could also add a zero-argument `Foo` constructor method that supplies "
"default values for both of the `bar` and `baz` fields:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:63
#, no-wrap
msgid ""
"```jldoctest footype\n"
"julia> Foo() = Foo(0)\n"
"Foo\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:67
#, no-wrap
msgid ""
"julia> Foo()\n"
"Foo(0, 0)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:73
msgid ""
"Here the zero-argument constructor method calls the single-argument "
"constructor method, which in turn calls the automatically provided two-"
"argument constructor method. For reasons that will become clear very "
"shortly, additional constructor methods declared as normal methods like this "
"are called *outer* constructor methods. Outer constructor methods can only "
"ever create a new instance by calling another constructor method, such as "
"the automatically provided default ones."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/constructors.md:74
#, no-wrap
msgid "Inner Constructor Methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:81
msgid ""
"While outer constructor methods succeed in addressing the problem of "
"providing additional convenience methods for constructing objects, they fail "
"to address the other two use cases mentioned in the introduction of this "
"chapter: enforcing invariants, and allowing construction of self-referential "
"objects. For these problems, one needs *inner* constructor methods. An inner "
"constructor method is like an outer constructor method, except for two "
"differences:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/constructors.md:85
msgid ""
"It is declared inside the block of a type declaration, rather than outside "
"of it like normal methods."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/constructors.md:85
msgid ""
"It has access to a special locally existent function called [`new`](@ref) "
"that creates objects of the block's type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:89
msgid ""
"For example, suppose one wants to declare a type that holds a pair of real "
"numbers, subject to the constraint that the first number is not greater than "
"the second one. One could declare it like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:97
#, no-wrap
msgid ""
"```jldoctest pairtype\n"
"julia> struct OrderedPair\n"
"           x::Real\n"
"           y::Real\n"
"           OrderedPair(x,y) = x > y ? error(\"out of order\") : new(x,y)\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:99
#, no-wrap
msgid "Now `OrderedPair` objects can only be constructed such that `x <= y`:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:103
#, no-wrap
msgid ""
"```jldoctest pairtype; filter = r\"Stacktrace:(\\n \\[[0-9]+\\].*)*\"\n"
"julia> OrderedPair(1, 2)\n"
"OrderedPair(1, 2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:111
#, no-wrap
msgid ""
"julia> OrderedPair(2,1)\n"
"ERROR: out of order\n"
"Stacktrace:\n"
" [1] error at ./error.jl:33 [inlined]\n"
" [2] OrderedPair(::Int64, ::Int64) at ./none:4\n"
" [3] top-level scope\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:120
msgid ""
"If the type were declared `mutable`, you could reach in and directly change "
"the field values to violate this invariant. Of course, messing around with "
"an object's internals uninvited is bad practice.  You (or someone else) can "
"also provide additional outer constructor methods at any later point, but "
"once a type is declared, there is no way to add more inner constructor "
"methods. Since outer constructor methods can only create objects by calling "
"other constructor methods, ultimately, some inner constructor must be called "
"to create an object. This guarantees that all objects of the declared type "
"must come into existence by a call to one of the inner constructor methods "
"provided with the type, thereby giving some degree of enforcement of a "
"type's invariants."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:126
msgid ""
"If any inner constructor method is defined, no default constructor method is "
"provided: it is presumed that you have supplied yourself with all the inner "
"constructors you need. The default constructor is equivalent to writing your "
"own inner constructor method that takes all of the object's fields as "
"parameters (constrained to be of the correct type, if the corresponding "
"field has a type), and passes them to `new`, returning the resulting object:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:133
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> struct Foo\n"
"           bar\n"
"           baz\n"
"           Foo(bar,baz) = new(bar,baz)\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:139
msgid ""
"This declaration has the same effect as the earlier definition of the `Foo` "
"type without an explicit inner constructor method. The following two types "
"are equivalent -- one with a default constructor, the other with an explicit "
"constructor:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:144
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> struct T1\n"
"           x::Int64\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:149
#, no-wrap
msgid ""
"julia> struct T2\n"
"           x::Int64\n"
"           T2(x) = new(x)\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:152
#, no-wrap
msgid ""
"julia> T1(1)\n"
"T1(1)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:155
#, no-wrap
msgid ""
"julia> T2(1)\n"
"T2(1)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:158
#, no-wrap
msgid ""
"julia> T1(1.0)\n"
"T1(1)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:162
#, no-wrap
msgid ""
"julia> T2(1.0)\n"
"T2(1)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:168
msgid ""
"It is good practice to provide as few inner constructor methods as possible: "
"only those taking all arguments explicitly and enforcing essential error "
"checking and transformation. Additional convenience constructor methods, "
"supplying default values or auxiliary transformations, should be provided as "
"outer constructors that call the inner constructors to do the heavy lifting. "
"This separation is typically quite natural."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/constructors.md:169
#, no-wrap
msgid "Incomplete Initialization"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:174
msgid ""
"The final problem which has still not been addressed is construction of self-"
"referential objects, or more generally, recursive data structures. Since the "
"fundamental difficulty may not be immediately obvious, let us briefly "
"explain it. Consider the following recursive type declaration:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:179
#, no-wrap
msgid ""
"```jldoctest selfrefer\n"
"julia> mutable struct SelfReferential\n"
"           obj::SelfReferential\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:184
msgid ""
"This type may appear innocuous enough, until one considers how to construct "
"an instance of it.  If `a` is an instance of `SelfReferential`, then a "
"second instance can be created by the call:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:188
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> b = SelfReferential(a)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:193
msgid ""
"But how does one construct the first instance when no instance exists to "
"provide as a valid value for its `obj` field? The only solution is to allow "
"creating an incompletely initialized instance of `SelfReferential` with an "
"unassigned `obj` field, and using that incomplete instance as a valid value "
"for the `obj` field of another instance, such as, for example, itself."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:200
msgid ""
"To allow for the creation of incompletely initialized objects, Julia allows "
"the [`new`](@ref) function to be called with fewer than the number of fields "
"that the type has, returning an object with the unspecified fields "
"uninitialized. The inner constructor method can then use the incomplete "
"object, finishing its initialization before returning it. Here, for example, "
"is another attempt at defining the `SelfReferential` type, this time using a "
"zero-argument inner constructor returning instances having `obj` fields "
"pointing to themselves:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:206
#, no-wrap
msgid ""
"```jldoctest selfrefer2\n"
"julia> mutable struct SelfReferential\n"
"           obj::SelfReferential\n"
"           SelfReferential() = (x = new(); x.obj = x)\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:210
msgid ""
"We can verify that this constructor works and constructs objects that are, "
"in fact, self-referential:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:213
#, no-wrap
msgid ""
"```jldoctest selfrefer2\n"
"julia> x = SelfReferential();\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:216
#, no-wrap
msgid ""
"julia> x === x\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:219
#, no-wrap
msgid ""
"julia> x === x.obj\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:223
#, no-wrap
msgid ""
"julia> x === x.obj.obj\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:226
msgid ""
"Although it is generally a good idea to return a fully initialized object "
"from an inner constructor, it is possible to return incompletely initialized "
"objects:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:232
#, no-wrap
msgid ""
"```jldoctest incomplete\n"
"julia> mutable struct Incomplete\n"
"           data\n"
"           Incomplete() = new()\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:235
#, no-wrap
msgid ""
"julia> z = Incomplete();\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:238
msgid ""
"While you are allowed to create objects with uninitialized fields, any "
"access to an uninitialized reference is an immediate error:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:243
#, no-wrap
msgid ""
"```jldoctest incomplete\n"
"julia> z.data\n"
"ERROR: UndefRefError: access to undefined reference\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:249
msgid ""
"This avoids the need to continually check for `null` values. However, not "
"all object fields are references. Julia considers some types to be \"plain "
"data\", meaning all of their data is self-contained and does not reference "
"other objects. The plain data types consist of primitive types (e.g. `Int`)  "
"and immutable structs of other plain data types. The initial contents of a "
"plain data type is undefined:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:255
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> struct HasPlain\n"
"           n::Int\n"
"           HasPlain() = new()\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:259
#, no-wrap
msgid ""
"julia> HasPlain()\n"
"HasPlain(438103441441)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:261
msgid "Arrays of plain data types exhibit the same behavior."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:263
msgid ""
"You can pass incomplete objects to other functions from inner constructors "
"to delegate their completion:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:270
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> mutable struct Lazy\n"
"           data\n"
"           Lazy(v) = complete_me(new(), v)\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:274
msgid ""
"As with incomplete objects returned from constructors, if `complete_me` or "
"any of its callees try to access the `data` field of the `Lazy` object "
"before it has been initialized, an error will be thrown immediately."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/constructors.md:275
#, no-wrap
msgid "Parametric Constructors"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:281
msgid ""
"Parametric types add a few wrinkles to the constructor story. Recall from "
"[Parametric Types](@ref)  that, by default, instances of parametric "
"composite types can be constructed either with explicitly given type "
"parameters or with type parameters implied by the types of the arguments "
"given to the constructor. Here are some examples:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:287
#, no-wrap
msgid ""
"```jldoctest parametric; filter = r\"Closest candidates.*\\n  .*\"\n"
"julia> struct Point{T<:Real}\n"
"           x::T\n"
"           y::T\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:290
#, no-wrap
msgid ""
"julia> Point(1,2) ## implicit T ##\n"
"Point{Int64}(1, 2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:293
#, no-wrap
msgid ""
"julia> Point(1.0,2.5) ## implicit T ##\n"
"Point{Float64}(1.0, 2.5)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:298
#, no-wrap
msgid ""
"julia> Point(1,2.5) ## implicit T ##\n"
"ERROR: MethodError: no method matching Point(::Int64, ::Float64)\n"
"Closest candidates are:\n"
"  Point(::T<:Real, ::T<:Real) where T<:Real at none:2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:301
#, no-wrap
msgid ""
"julia> Point{Int64}(1, 2) ## explicit T ##\n"
"Point{Int64}(1, 2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:306
#, no-wrap
msgid ""
"julia> Point{Int64}(1.0,2.5) ## explicit T ##\n"
"ERROR: InexactError: Int64(2.5)\n"
"Stacktrace:\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:309
#, no-wrap
msgid ""
"julia> Point{Float64}(1.0, 2.5) ## explicit T ##\n"
"Point{Float64}(1.0, 2.5)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:313
#, no-wrap
msgid ""
"julia> Point{Float64}(1,2) ## explicit T ##\n"
"Point{Float64}(1.0, 2.0)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:320
msgid ""
"As you can see, for constructor calls with explicit type parameters, the "
"arguments are converted to the implied field types: `Point{Int64}(1,2)` "
"works, but `Point{Int64}(1.0,2.5)` raises an [`InexactError`](@ref) when "
"converting `2.5` to [`Int64`](@ref). When the type is implied by the "
"arguments to the constructor call, as in `Point(1,2)`, then the types of the "
"arguments must agree -- otherwise the `T` cannot be determined -- but any "
"pair of real arguments with matching type may be given to the generic "
"`Point` constructor."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:328
#, no-wrap
msgid ""
"What's really going on here is that `Point`, `Point{Float64}` and `Point{Int64}` are all different\n"
"constructor functions. In fact, `Point{T}` is a distinct constructor function for each type `T`.\n"
"Without any explicitly provided inner constructors, the declaration of the composite type `Point{T<:Real}`\n"
"automatically provides an inner constructor, `Point{T}`, for each possible type `T<:Real`, that\n"
"behaves just like non-parametric default inner constructors do. It also provides a single general\n"
"outer `Point` constructor that takes pairs of real arguments, which must be of the same type.\n"
"This automatic provision of constructors is equivalent to the following explicit declaration:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:335
#, no-wrap
msgid ""
"```jldoctest parametric2\n"
"julia> struct Point{T<:Real}\n"
"           x::T\n"
"           y::T\n"
"           Point{T}(x,y) where {T<:Real} = new(x,y)\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:338
#, no-wrap
msgid ""
"julia> Point(x::T, y::T) where {T<:Real} = Point{T}(x,y);\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:348
msgid ""
"Notice that each definition looks like the form of constructor call that it "
"handles.  The call `Point{Int64}(1,2)` will invoke the definition `Point{T}"
"(x,y)` inside the `struct` block.  The outer constructor declaration, on the "
"other hand, defines a method for the general `Point` constructor which only "
"applies to pairs of values of the same real type. This declaration makes "
"constructor calls without explicit type parameters, like `Point(1,2)` and "
"`Point(1.0,2.5)`, work. Since the method declaration restricts the arguments "
"to being of the same type, calls like `Point(1,2.5)`, with arguments of "
"different types, result in \"no method\" errors."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:352
msgid ""
"Suppose we wanted to make the constructor call `Point(1,2.5)` work by "
"\"promoting\" the integer value `1` to the floating-point value `1.0`. The "
"simplest way to achieve this is to define the following additional outer "
"constructor method:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:356
#, no-wrap
msgid ""
"```jldoctest parametric2\n"
"julia> Point(x::Int64, y::Float64) = Point(convert(Float64,x),y);\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:361
msgid ""
"This method uses the [`convert`](@ref) function to explicitly convert `x` to "
"[`Float64`](@ref)  and then delegates construction to the general "
"constructor for the case where both arguments are [`Float64`](@ref). With "
"this method definition what was previously a [`MethodError`](@ref) now "
"successfully creates a point of type `Point{Float64}`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:365
#, no-wrap
msgid ""
"```jldoctest parametric2\n"
"julia> Point(1,2.5)\n"
"Point{Float64}(1.0, 2.5)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:369
#: ext/julia/doc/src/manual/types.md:655
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Point{Float64}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:371
msgid "However, other similar calls still don't work:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:378
#, no-wrap
msgid ""
"```jldoctest parametric2\n"
"julia> Point(1.5,2)\n"
"ERROR: MethodError: no method matching Point(::Float64, ::Int64)\n"
"Closest candidates are:\n"
"  Point(::T<:Real, !Matched::T<:Real) where T<:Real at none:1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:382
msgid ""
"For a more general way to make all such calls work sensibly, see [Conversion "
"and Promotion](@ref conversion-and-promotion).  At the risk of spoiling the "
"suspense, we can reveal here that all it takes is the following outer method "
"definition to make all calls to the general `Point` constructor work as one "
"would expect:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:386
#, no-wrap
msgid ""
"```jldoctest parametric2\n"
"julia> Point(x::Real, y::Real) = Point(promote(x,y)...);\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:390
msgid ""
"The `promote` function converts all its arguments to a common type -- in "
"this case [`Float64`](@ref).  With this method definition, the `Point` "
"constructor promotes its arguments the same way that numeric operators like "
"[`+`](@ref) do, and works for all kinds of real numbers:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:394
#, no-wrap
msgid ""
"```jldoctest parametric2\n"
"julia> Point(1.5,2)\n"
"Point{Float64}(1.5, 2.0)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:397
#, no-wrap
msgid ""
"julia> Point(1,1//2)\n"
"Point{Rational{Int64}}(1//1, 1//2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:401
#, no-wrap
msgid ""
"julia> Point(1.0,1//2)\n"
"Point{Float64}(1.0, 0.5)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:406
msgid ""
"Thus, while the implicit type parameter constructors provided by default in "
"Julia are fairly strict, it is possible to make them behave in a more "
"relaxed but sensible manner quite easily. Moreover, since constructors can "
"leverage all of the power of the type system, methods, and multiple "
"dispatch, defining sophisticated behavior is typically quite simple."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/constructors.md:407
#, no-wrap
msgid "Case Study: Rational"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:413
msgid ""
"Perhaps the best way to tie all these pieces together is to present a real "
"world example of a parametric composite type and its constructor methods. To "
"that end, we implement our own rational number type `OurRational`, similar "
"to Julia's built-in [`Rational`](@ref) type, defined in [`rational.jl`]"
"(https://github.com/JuliaLang/julia/blob/master/base/rational.jl):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:429
#, no-wrap
msgid ""
"```jldoctest rational\n"
"julia> struct OurRational{T<:Integer} <: Real\n"
"           num::T\n"
"           den::T\n"
"           function OurRational{T}(num::T, den::T) where T<:Integer\n"
"               if num == 0 && den == 0\n"
"                    error(\"invalid rational: 0//0\")\n"
"               end\n"
"               g = gcd(den, num)\n"
"               num = div(num, g)\n"
"               den = div(den, g)\n"
"               new(num, den)\n"
"           end\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:432
#, no-wrap
msgid ""
"julia> OurRational(n::T, d::T) where {T<:Integer} = OurRational{T}(n,d)\n"
"OurRational\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:435
#, no-wrap
msgid ""
"julia> OurRational(n::Integer, d::Integer) = OurRational(promote(n,d)...)\n"
"OurRational\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:438
#, no-wrap
msgid ""
"julia> OurRational(n::Integer) = OurRational(n,one(n))\n"
"OurRational\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:441
#, no-wrap
msgid ""
"julia> ⊘(n::Integer, d::Integer) = OurRational(n,d)\n"
"⊘ (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:444
#, no-wrap
msgid ""
"julia> ⊘(x::OurRational, y::Integer) = x.num ⊘ (x.den*y)\n"
"⊘ (generic function with 2 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:447
#, no-wrap
msgid ""
"julia> ⊘(x::Integer, y::OurRational) = (x*y.den) ⊘ y.num\n"
"⊘ (generic function with 3 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:450
#, no-wrap
msgid ""
"julia> ⊘(x::Complex, y::Real) = complex(real(x) ⊘ y, imag(x) ⊘ y)\n"
"⊘ (generic function with 4 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:453
#, no-wrap
msgid ""
"julia> ⊘(x::Real, y::Complex) = (x*y') ⊘ real(y*y')\n"
"⊘ (generic function with 5 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:461
#, no-wrap
msgid ""
"julia> function ⊘(x::Complex, y::Complex)\n"
"           xy = x*y'\n"
"           yy = real(y*y')\n"
"           complex(real(xy) ⊘ yy, imag(xy) ⊘ yy)\n"
"       end\n"
"⊘ (generic function with 6 methods)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:466
#, no-wrap
msgid ""
"The first line -- `struct OurRational{T<:Integer} <: Real` -- declares that `OurRational` takes one\n"
"type parameter of an integer type, and is itself a real type. The field declarations `num::T`\n"
"and `den::T` indicate that the data held in a `OurRational{T}` object are a pair of integers of type\n"
"`T`, one representing the rational value's numerator and the other representing its denominator.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:475
msgid ""
"Now things get interesting. `OurRational` has a single inner constructor "
"method which checks that both of `num` and `den` aren't zero and ensures "
"that every rational is constructed in \"lowest terms\" with a non-negative "
"denominator. This is accomplished by dividing the given numerator and "
"denominator values by their greatest common divisor, computed using the "
"`gcd` function. Since `gcd` returns the greatest common divisor of its "
"arguments with sign matching the first argument (`den` here), after this "
"division the new value of `den` is guaranteed to be non-negative. Because "
"this is the only inner constructor for `OurRational`, we can be certain that "
"`OurRational` objects are always constructed in this normalized form."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:482
msgid ""
"`OurRational` also provides several outer constructor methods for "
"convenience. The first is the \"standard\" general constructor that infers "
"the type parameter `T` from the type of the numerator and denominator when "
"they have the same type. The second applies when the given numerator and "
"denominator values have different types: it promotes them to a common type "
"and then delegates construction to the outer constructor for arguments of "
"matching type. The third outer constructor turns integer values into "
"rationals by supplying a value of `1` as the denominator."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:495
msgid ""
"Following the outer constructor definitions, we defined a number of methods "
"for the `⊘` operator, which provides a syntax for writing rationals (e.g. `1 "
"⊘ 2`). Julia's `Rational` type uses the [`//`](@ref) operator for this "
"purpose. Before these definitions, `⊘` is a completely undefined operator "
"with only syntax and no meaning. Afterwards, it behaves just as described in "
"[Rational Numbers](@ref) -- its entire behavior is defined in these few "
"lines.  The first and most basic definition just makes `a ⊘ b` construct a "
"`OurRational` by applying the `OurRational` constructor to `a` and `b` when "
"they are integers. When one of the operands of `⊘` is already a rational "
"number, we construct a new rational for the resulting ratio slightly "
"differently; this behavior is actually identical to division of a rational "
"with an integer.  Finally, applying `⊘` to complex integral values creates "
"an instance of `Complex{OurRational}` -- a complex number whose real and "
"imaginary parts are rationals:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:498
#, no-wrap
msgid ""
"```jldoctest rational\n"
"julia> z = (1 + 2im) ⊘ (1 - 2im);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:501
#, no-wrap
msgid ""
"julia> typeof(z)\n"
"Complex{OurRational{Int64}}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:505
#, no-wrap
msgid ""
"julia> typeof(z) <: Complex{OurRational}\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:510
msgid ""
"Thus, although the `⊘` operator usually returns an instance of "
"`OurRational`, if either of its arguments are complex integers, it will "
"return an instance of `Complex{OurRational}` instead.  The interested reader "
"should consider perusing the rest of [`rational.jl`](https://github.com/"
"JuliaLang/julia/blob/master/base/rational.jl): it is short, self-contained, "
"and implements an entire basic Julia type."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/constructors.md:511
#, no-wrap
msgid "Outer-only constructors"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:519
msgid ""
"As we have seen, a typical parametric type has inner constructors that are "
"called when type parameters are known; e.g. they apply to `Point{Int}` but "
"not to `Point`. Optionally, outer constructors that determine type "
"parameters automatically can be added, for example constructing a `Point{Int}"
"` from the call `Point(1,2)`. Outer constructors call inner constructors to "
"actually make instances. However, in some cases one would rather not provide "
"inner constructors, so that specific type parameters cannot be requested "
"manually."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:522
msgid ""
"For example, say we define a type that stores a vector along with an "
"accurate representation of its sum:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:528
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> struct SummedArray{T<:Number,S<:Number}\n"
"           data::Vector{T}\n"
"           sum::S\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:532
#, no-wrap
msgid ""
"julia> SummedArray(Int32[1; 2; 3], Int32(6))\n"
"SummedArray{Int32,Int32}(Int32[1, 2, 3], 6)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:539
msgid ""
"The problem is that we want `S` to be a larger type than `T`, so that we can "
"sum many elements with less information loss. For example, when `T` is "
"[`Int32`](@ref), we would like `S` to be [`Int64`](@ref). Therefore we want "
"to avoid an interface that allows the user to construct instances of the "
"type `SummedArray{Int32,Int32}`. One way to do this is to provide a "
"constructor only for `SummedArray`, but inside the `struct` definition block "
"to suppress generation of default constructors:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:549
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> struct SummedArray{T<:Number,S<:Number}\n"
"           data::Vector{T}\n"
"           sum::S\n"
"           function SummedArray(a::Vector{T}) where T\n"
"               S = widen(T)\n"
"               new{T,S}(a, sum(S, a))\n"
"           end\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:555
#, no-wrap
msgid ""
"julia> SummedArray(Int32[1; 2; 3], Int32(6))\n"
"ERROR: MethodError: no method matching SummedArray(::Array{Int32,1}, ::Int32)\n"
"Closest candidates are:\n"
"  SummedArray(::Array{T,1}) where T at none:5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/constructors.md:559
msgid ""
"This constructor will be invoked by the syntax `SummedArray(a)`. The syntax "
"`new{T,S}` allows specifying parameters for the type to be constructed, i.e. "
"this call will return a `SummedArray{T,S}`.  `new{T,S}` can be used in any "
"constructor definition, but for convenience the parameters to `new{}` are "
"automatically derived from the type being constructed when possible."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/stacktraces.md:1
#, no-wrap
msgid "Stack Traces"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:5
msgid ""
"The `StackTraces` module provides simple stack traces that are both human "
"readable and easy to use programmatically."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/stacktraces.md:6
#, no-wrap
msgid "Viewing a stack trace"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:9
msgid ""
"The primary function used to obtain a stack trace is [`stacktrace`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:19
#, no-wrap
msgid ""
"```julia-repl\n"
"6-element Array{Base.StackTraces.StackFrame,1}:\n"
" top-level scope\n"
" eval at boot.jl:317 [inlined]\n"
" eval(::Module, ::Expr) at REPL.jl:5\n"
" eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85\n"
" macro expansion at REPL.jl:116 [inlined]\n"
" (::getfield(REPL, Symbol(\"##28#29\")){REPL.REPLBackend})() at event.jl:92\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:23
msgid ""
"Calling [`stacktrace()`](@ref) returns a vector of [`StackTraces.StackFrame`]"
"(@ref) s. For ease of use, the alias [`StackTraces.StackTrace`](@ref) can be "
"used in place of `Vector{StackFrame}`. (Examples with `[...]` indicate that "
"output may vary depending on how the code is run.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:27
#: ext/julia/doc/src/manual/stacktraces.md:59
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> example() = stacktrace()\n"
"example (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:34
#, no-wrap
msgid ""
"julia> example()\n"
"7-element Array{Base.StackTraces.StackFrame,1}:\n"
" example() at REPL[1]:1\n"
" top-level scope\n"
" eval at boot.jl:317 [inlined]\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:37
#, no-wrap
msgid ""
"julia> @noinline child() = stacktrace()\n"
"child (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:40
#: ext/julia/doc/src/manual/stacktraces.md:169
#, no-wrap
msgid ""
"julia> @noinline parent() = child()\n"
"parent (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:43
#, no-wrap
msgid ""
"julia> grandparent() = parent()\n"
"grandparent (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:51
#, no-wrap
msgid ""
"julia> grandparent()\n"
"9-element Array{Base.StackTraces.StackFrame,1}:\n"
" child() at REPL[3]:1\n"
" parent() at REPL[4]:1\n"
" grandparent() at REPL[5]:1\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:55
msgid ""
"Note that when calling [`stacktrace()`](@ref) you'll typically see a frame "
"with `eval at boot.jl`.  When calling [`stacktrace()`](@ref) from the REPL "
"you'll also have a few extra frames in the stack from `REPL.jl`, usually "
"looking something like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:70
#, no-wrap
msgid ""
"julia> example()\n"
"7-element Array{Base.StackTraces.StackFrame,1}:\n"
" example() at REPL[1]:1\n"
" top-level scope\n"
" eval at boot.jl:317 [inlined]\n"
" eval(::Module, ::Expr) at REPL.jl:5\n"
" eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85\n"
" macro expansion at REPL.jl:116 [inlined]\n"
" (::getfield(REPL, Symbol(\"##28#29\")){REPL.REPLBackend})() at event.jl:92\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/stacktraces.md:71
#, no-wrap
msgid "Extracting useful information"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:77
msgid ""
"Each [`StackTraces.StackFrame`](@ref) contains the function name, file name, "
"line number, lambda info, a flag indicating whether the frame has been "
"inlined, a flag indicating whether it is a C function (by default C "
"functions do not appear in the stack trace), and an integer representation "
"of the pointer returned by [`backtrace`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:81
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> frame = stacktrace()[3]\n"
"eval(::Module, ::Expr) at REPL.jl:5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:84
#, no-wrap
msgid ""
"julia> frame.func\n"
":eval\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:87
#, no-wrap
msgid ""
"julia> frame.file\n"
"Symbol(\"~/julia/usr/share/julia/stdlib/v0.7/REPL/src/REPL.jl\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:90
#, no-wrap
msgid ""
"julia> frame.line\n"
"5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:93
#, no-wrap
msgid ""
"julia> top_frame.linfo\n"
"MethodInstance for eval(::Module, ::Expr)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:96
#, no-wrap
msgid ""
"julia> top_frame.inlined\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:100
#, no-wrap
msgid ""
"julia> top_frame.from_c\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:105
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> top_frame.pointer\n"
"0x00007f92d6293171\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:108
msgid ""
"This makes stack trace information available programmatically for logging, "
"error handling, and more."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/stacktraces.md:109
#, no-wrap
msgid "Error handling"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:113
msgid ""
"While having easy access to information about the current state of the "
"callstack can be helpful in many places, the most obvious application is in "
"error handling and debugging."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:117
#: ext/julia/doc/src/manual/stacktraces.md:146
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @noinline bad_function() = undeclared_variable\n"
"bad_function (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:124
#, no-wrap
msgid ""
"julia> @noinline example() = try\n"
"           bad_function()\n"
"       catch\n"
"           stacktrace()\n"
"       end\n"
"example (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:132
#, no-wrap
msgid ""
"julia> example()\n"
"7-element Array{Base.StackTraces.StackFrame,1}:\n"
" example() at REPL[2]:4\n"
" top-level scope\n"
" eval at boot.jl:317 [inlined]\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:138
msgid ""
"You may notice that in the example above the first stack frame points points "
"at line 4, where [`stacktrace`](@ref) is called, rather than line 2, where "
"*bad_function* is called, and `bad_function`'s frame is missing entirely. "
"This is understandable, given that [`stacktrace`](@ref) is called from the "
"context of the *catch*. While in this example it's fairly easy to find the "
"actual source of the error, in complex cases tracking down the source of the "
"error becomes nontrivial."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:142
msgid ""
"This can be remedied by passing the result of [`catch_backtrace`](@ref) to "
"[`stacktrace`](@ref).  Instead of returning callstack information for the "
"current context, [`catch_backtrace`](@ref)  returns stack information for "
"the context of the most recent exception:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:153
#, no-wrap
msgid ""
"julia> @noinline example() = try\n"
"           bad_function()\n"
"       catch\n"
"           stacktrace(catch_backtrace())\n"
"       end\n"
"example (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:160
#, no-wrap
msgid ""
"julia> example()\n"
"8-element Array{Base.StackTraces.StackFrame,1}:\n"
" bad_function() at REPL[1]:1\n"
" example() at REPL[2]:2\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:162
msgid ""
"Notice that the stack trace now indicates the appropriate line number and "
"the missing frame."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:166
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @noinline child() = error(\"Whoops!\")\n"
"child (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:179
#, no-wrap
msgid ""
"julia> @noinline function grandparent()\n"
"           try\n"
"               parent()\n"
"           catch err\n"
"               println(\"ERROR: \", err.msg)\n"
"               stacktrace(catch_backtrace())\n"
"           end\n"
"       end\n"
"grandparent (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:189
#, no-wrap
msgid ""
"julia> grandparent()\n"
"ERROR: Whoops!\n"
"10-element Array{Base.StackTraces.StackFrame,1}:\n"
" error at error.jl:33 [inlined]\n"
" child() at REPL[1]:1\n"
" parent() at REPL[2]:1\n"
" grandparent() at REPL[3]:3\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/stacktraces.md:190
#, no-wrap
msgid "Exception stacks and `catch_stack`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:194
#, no-wrap
msgid ""
"!!! compat \"Julia 1.1\"\n"
"    Exception stacks requires at least Julia 1.1.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:199
msgid ""
"While handling an exception further exceptions may be thrown. It can be "
"useful to inspect all these exceptions to identify the root cause of a "
"problem. The julia runtime supports this by pushing each exception onto an "
"internal *exception stack* as it occurs. When the code exits a `catch` "
"normally, any exceptions which were pushed onto the stack in the associated "
"`try` are considered to be successfully handled and are removed from the "
"stack."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:201
msgid ""
"The stack of current exceptions can be accessed using the experimental "
"[`Base.catch_stack`](@ref) function. For example,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:232
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> try\n"
"           error(\"(A) The root cause\")\n"
"       catch\n"
"           try\n"
"               error(\"(B) An exception while handling the exception\")\n"
"           catch\n"
"               for (exc, bt) in Base.catch_stack()\n"
"                   showerror(stdout, exc, bt)\n"
"                   println()\n"
"               end\n"
"           end\n"
"       end\n"
"(A) The root cause\n"
"Stacktrace:\n"
" [1] error(::String) at error.jl:33\n"
" [2] top-level scope at REPL[7]:2\n"
" [3] eval(::Module, ::Any) at boot.jl:319\n"
" [4] eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85\n"
" [5] macro expansion at REPL.jl:117 [inlined]\n"
" [6] (::getfield(REPL, Symbol(\"##26#27\")){REPL.REPLBackend})() at task.jl:259\n"
"(B) An exception while handling the exception\n"
"Stacktrace:\n"
" [1] error(::String) at error.jl:33\n"
" [2] top-level scope at REPL[7]:5\n"
" [3] eval(::Module, ::Any) at boot.jl:319\n"
" [4] eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85\n"
" [5] macro expansion at REPL.jl:117 [inlined]\n"
" [6] (::getfield(REPL, Symbol(\"##26#27\")){REPL.REPLBackend})() at task.jl:259\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:236
msgid ""
"In this example the root cause exception (A) is first on the stack, with a "
"further exception (B) following it. After exiting both catch blocks normally "
"(i.e., without throwing a further exception) all exceptions are removed from "
"the stack and are no longer accessible."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:239
msgid ""
"The exception stack is stored on the `Task` where the exceptions occurred. "
"When a task fails with uncaught exceptions, `catch_stack(task)` may be used "
"to inspect the exception stack for that task."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/stacktraces.md:240
#, no-wrap
msgid "Comparison with [`backtrace`](@ref)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:244
msgid ""
"A call to [`backtrace`](@ref) returns a vector of `Union{Ptr{Nothing}, Base."
"InterpreterIP}`, which may then be passed into [`stacktrace`](@ref) for "
"translation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:260
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> trace = backtrace()\n"
"18-element Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}:\n"
" Ptr{Nothing} @0x00007fd8734c6209\n"
" Ptr{Nothing} @0x00007fd87362b342\n"
" Ptr{Nothing} @0x00007fd87362c136\n"
" Ptr{Nothing} @0x00007fd87362c986\n"
" Ptr{Nothing} @0x00007fd87362d089\n"
" Base.InterpreterIP(CodeInfo(:(begin\n"
"      Core.SSAValue(0) = backtrace()\n"
"      trace = Core.SSAValue(0)\n"
"      return Core.SSAValue(0)\n"
"  end)), 0x0000000000000000)\n"
" Ptr{Nothing} @0x00007fd87362e4cf\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:270
#, no-wrap
msgid ""
"julia> stacktrace(trace)\n"
"6-element Array{Base.StackTraces.StackFrame,1}:\n"
" top-level scope\n"
" eval at boot.jl:317 [inlined]\n"
" eval(::Module, ::Expr) at REPL.jl:5\n"
" eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85\n"
" macro expansion at REPL.jl:116 [inlined]\n"
" (::getfield(REPL, Symbol(\"##28#29\")){REPL.REPLBackend})() at event.jl:92\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:275
msgid ""
"Notice that the vector returned by [`backtrace`](@ref) had 18 elements, "
"while the vector returned by [`stacktrace`](@ref) only has 6. This is "
"because, by default, [`stacktrace`](@ref) removes any lower-level C "
"functions from the stack. If you want to include stack frames from C calls, "
"you can do it like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:301
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> stacktrace(trace, true)\n"
"21-element Array{Base.StackTraces.StackFrame,1}:\n"
" jl_apply_generic at gf.c:2167\n"
" do_call at interpreter.c:324\n"
" eval_value at interpreter.c:416\n"
" eval_body at interpreter.c:559\n"
" jl_interpret_toplevel_thunk_callback at interpreter.c:798\n"
" top-level scope\n"
" jl_interpret_toplevel_thunk at interpreter.c:807\n"
" jl_toplevel_eval_flex at toplevel.c:856\n"
" jl_toplevel_eval_in at builtins.c:624\n"
" eval at boot.jl:317 [inlined]\n"
" eval(::Module, ::Expr) at REPL.jl:5\n"
" jl_apply_generic at gf.c:2167\n"
" eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85\n"
" jl_apply_generic at gf.c:2167\n"
" macro expansion at REPL.jl:116 [inlined]\n"
" (::getfield(REPL, Symbol(\"##28#29\")){REPL.REPLBackend})() at event.jl:92\n"
" jl_fptr_trampoline at gf.c:1838\n"
" jl_apply_generic at gf.c:2167\n"
" jl_apply at julia.h:1540 [inlined]\n"
" start_task at task.c:268\n"
" ip:0xffffffffffffffff\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:304
msgid ""
"Individual pointers returned by [`backtrace`](@ref) can be translated into "
"[`StackTraces.StackFrame`](@ref)  s by passing them into [`StackTraces."
"lookup`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:307
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> pointer = backtrace()[1];\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:311
#, no-wrap
msgid ""
"julia> frame = StackTraces.lookup(pointer)\n"
"1-element Array{Base.StackTraces.StackFrame,1}:\n"
" jl_apply_generic at gf.c:2167\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/stacktraces.md:315
#, no-wrap
msgid ""
"julia> println(\"The top frame is from $(frame[1].func)!\")\n"
"The top frame is from jl_apply_generic!\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/networking-and-streams.md:1
#, no-wrap
msgid "Networking and Streams"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:8
msgid ""
"Julia provides a rich interface to deal with streaming I/O objects such as "
"terminals, pipes and TCP sockets. This interface, though asynchronous at the "
"system level, is presented in a synchronous manner to the programmer and it "
"is usually unnecessary to think about the underlying asynchronous operation. "
"This is achieved by making heavy use of Julia cooperative threading "
"([coroutine](@ref man-tasks))  functionality."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/networking-and-streams.md:9
#, no-wrap
msgid "Basic Stream I/O"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:13
msgid ""
"All Julia streams expose at least a [`read`](@ref) and a [`write`](@ref) "
"method, taking the stream as their first argument, e.g.:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:18
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> write(stdout, \"Hello World\");  # suppress return value 11 with ;\n"
"Hello World\n"
"julia> read(stdin, Char)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:21
msgid "'\\n': ASCII/Unicode U+000a (category Cc: Other, control)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:24
msgid ""
"Note that [`write`](@ref) returns 11, the number of bytes (in `\"Hello World"
"\"`) written to [`stdout`](@ref), but this return value is suppressed with "
"the `;`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:28
msgid ""
"Here Enter was pressed again so that Julia would read the newline. Now, as "
"you can see from this example, [`write`](@ref) takes the data to write as "
"its second argument, while [`read`](@ref)  takes the type of the data to be "
"read as the second argument."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:30
msgid "For example, to read a simple byte array, we could do:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:38
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> x = zeros(UInt8, 4)\n"
"4-element Array{UInt8,1}:\n"
" 0x00\n"
" 0x00\n"
" 0x00\n"
" 0x00\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:47
#, no-wrap
msgid ""
"julia> read!(stdin, x)\n"
"abcd\n"
"4-element Array{UInt8,1}:\n"
" 0x61\n"
" 0x62\n"
" 0x63\n"
" 0x64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:50
msgid ""
"However, since this is slightly cumbersome, there are several convenience "
"methods provided. For example, we could have written the above as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:60
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> read(stdin, 4)\n"
"abcd\n"
"4-element Array{UInt8,1}:\n"
" 0x61\n"
" 0x62\n"
" 0x63\n"
" 0x64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:62
msgid "or if we had wanted to read the entire line instead:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:68
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> readline(stdin)\n"
"abcd\n"
"\"abcd\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:71
msgid ""
"Note that depending on your terminal settings, your TTY may be line buffered "
"and might thus require an additional enter before the data is sent to Julia."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:73
msgid "To read every line from [`stdin`](@ref) you can use [`eachline`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:79
#, no-wrap
msgid ""
"```julia\n"
"for line in eachline(stdin)\n"
"    print(\"Found $line\")\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:81
msgid "or [`read`](@ref) if you wanted to read by character instead:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:88
#, no-wrap
msgid ""
"```julia\n"
"while !eof(stdin)\n"
"    x = read(stdin, Char)\n"
"    println(\"Found: $x\")\n"
"end\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/networking-and-streams.md:89
#: ext/julia/doc/src/base/io-network.md:54
#, no-wrap
msgid "Text I/O"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:93
msgid ""
"Note that the [`write`](@ref) method mentioned above operates on binary "
"streams. In particular, values do not get converted to any canonical text "
"representation but are written out as is:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:98
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> write(stdout, 0x61);  # suppress return value 1 with ;\n"
"a\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:101
msgid ""
"Note that `a` is written to [`stdout`](@ref) by the [`write`](@ref) function "
"and that the returned value is `1` (since `0x61` is one byte)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:104
msgid ""
"For text I/O, use the [`print`](@ref) or [`show`](@ref) methods, depending "
"on your needs (see the documentation for these two methods for a detailed "
"discussion of the difference between them):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:109
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> print(stdout, 0x61)\n"
"97\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:112
msgid ""
"See [Custom pretty-printing](@ref man-custom-pretty-printing) for more "
"information on how to implement display methods for custom types."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/networking-and-streams.md:113
#, no-wrap
msgid "IO Output Contextual Properties"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:120
#, no-wrap
msgid ""
"Sometimes IO output can benefit from the ability to pass contextual information into show methods.\n"
"The [`IOContext`](@ref) object provides this framework for associating arbitrary metadata with an IO object.\n"
"For example, `:compact => true` adds a hinting parameter to the IO object that the invoked show method\n"
"should print a shorter output (if applicable). See the [`IOContext`](@ref) documentation for a list\n"
"of common properties.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/networking-and-streams.md:121
#, no-wrap
msgid "Working with Files"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:126
msgid ""
"Like many other environments, Julia has an [`open`](@ref) function, which "
"takes a filename and returns an `IOStream` object that you can use to read "
"and write things from the file. For example, if we have a file, `hello.txt`, "
"whose contents are `Hello, World!`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:130
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> f = open(\"hello.txt\")\n"
"IOStream(<file hello.txt>)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:135
#, no-wrap
msgid ""
"julia> readlines(f)\n"
"1-element Array{String,1}:\n"
" \"Hello, World!\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:137
msgid ""
"If you want to write to a file, you can open it with the write (`\"w\"`) "
"flag:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:141
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> f = open(\"hello.txt\",\"w\")\n"
"IOStream(<file hello.txt>)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:145
#, no-wrap
msgid ""
"julia> write(f,\"Hello again.\")\n"
"12\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:149
msgid ""
"If you examine the contents of `hello.txt` at this point, you will notice "
"that it is empty; nothing has actually been written to disk yet. This is "
"because the `IOStream` must be closed before the write is actually flushed "
"to disk:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:153
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> close(f)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:155
msgid "Examining `hello.txt` again will show its contents have been changed."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:160
msgid ""
"Opening a file, doing something to its contents, and closing it again is a "
"very common pattern.  To make this easier, there exists another invocation "
"of [`open`](@ref) which takes a function as its first argument and filename "
"as its second, opens the file, calls the function with the file as an "
"argument, and then closes it again. For example, given a function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:166
#, no-wrap
msgid ""
"```julia\n"
"function read_and_capitalize(f::IOStream)\n"
"    return uppercase(read(f, String))\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:168
msgid "You can call:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:173
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> open(read_and_capitalize, \"hello.txt\")\n"
"\"HELLO AGAIN.\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:176
msgid ""
"to open `hello.txt`, call `read_and_capitalize` on it, close `hello.txt` and "
"return the capitalized contents."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:179
msgid ""
"To avoid even having to define a named function, you can use the `do` "
"syntax, which creates an anonymous function on the fly:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:186
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> open(\"hello.txt\") do f\n"
"           uppercase(read(f, String))\n"
"       end\n"
"\"HELLO AGAIN.\"\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/networking-and-streams.md:187
#, no-wrap
msgid "A simple TCP example"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:192
msgid ""
"Let's jump right in with a simple example involving TCP sockets.  This "
"functionality is in a standard library package called `Sockets`.  Let's "
"first create a simple server:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:195
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> using Sockets\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:205
#, no-wrap
msgid ""
"julia> @async begin\n"
"           server = listen(2000)\n"
"           while true\n"
"               sock = accept(server)\n"
"               println(\"Hello World\\n\")\n"
"           end\n"
"       end\n"
"Task (runnable) @0x00007fd31dc11ae0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:210
msgid ""
"To those familiar with the Unix socket API, the method names will feel "
"familiar, though their usage is somewhat simpler than the raw Unix socket "
"API. The first call to [`listen`](@ref) will create a server waiting for "
"incoming connections on the specified port (2000) in this case. The same "
"function may also be used to create various other kinds of servers:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:214
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> listen(2000) # Listens on localhost:2000 (IPv4)\n"
"Sockets.TCPServer(active)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:217
#, no-wrap
msgid ""
"julia> listen(ip\"127.0.0.1\",2000) # Equivalent to the first\n"
"Sockets.TCPServer(active)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:220
#, no-wrap
msgid ""
"julia> listen(ip\"::1\",2000) # Listens on localhost:2000 (IPv6)\n"
"Sockets.TCPServer(active)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:223
#, no-wrap
msgid ""
"julia> listen(IPv4(0),2001) # Listens on port 2001 on all IPv4 interfaces\n"
"Sockets.TCPServer(active)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:226
#, no-wrap
msgid ""
"julia> listen(IPv6(0),2001) # Listens on port 2001 on all IPv6 interfaces\n"
"Sockets.TCPServer(active)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:229
#, no-wrap
msgid ""
"julia> listen(\"testsocket\") # Listens on a UNIX domain socket\n"
"Sockets.PipeServer(active)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:233
#, no-wrap
msgid ""
"julia> listen(\"\\\\\\\\.\\\\pipe\\\\testsocket\") # Listens on a Windows named pipe\n"
"Sockets.PipeServer(active)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:246
msgid ""
"Note that the return type of the last invocation is different. This is "
"because this server does not listen on TCP, but rather on a named pipe "
"(Windows) or UNIX domain socket. Also note that Windows named pipe format "
"has to be a specific pattern such that the name prefix (`\\\\.\\pipe\\`) "
"uniquely identifies the [file type](https://docs.microsoft.com/en-us/windows/"
"desktop/ipc/pipe-names).  The difference between TCP and named pipes or UNIX "
"domain sockets is subtle and has to do with the [`accept`](@ref) and "
"[`connect`](@ref)  methods. The [`accept`](@ref) method retrieves a "
"connection to the client that is connecting on the server we just created, "
"while the [`connect`](@ref) function connects to a server using the "
"specified method. The [`connect`](@ref) function takes the same arguments as "
"[`listen`](@ref), so, assuming the environment (i.e. host, cwd, etc.) is the "
"same you should be able to pass the same arguments to [`connect`](@ref) as "
"you did to listen to establish the connection. So let's try that out (after "
"having created the server above):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:250
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> connect(2000)\n"
"TCPSocket(open, 0 bytes waiting)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:253
#, no-wrap
msgid ""
"julia> Hello World\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:258
msgid ""
"As expected we saw \"Hello World\" printed. So, let's actually analyze what "
"happened behind the scenes. When we called [`connect`](@ref), we connect to "
"the server we had just created. Meanwhile, the accept function returns a "
"server-side connection to the newly created socket and prints \"Hello World"
"\" to indicate that the connection was successful."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:266
msgid ""
"A great strength of Julia is that since the API is exposed synchronously "
"even though the I/O is actually happening asynchronously, we didn't have to "
"worry about callbacks or even making sure that the server gets to run. When "
"we called [`connect`](@ref) the current task waited for the connection to be "
"established and only continued executing after that was done. In this pause, "
"the server task resumed execution (because a connection request was now "
"available), accepted the connection, printed the message and waited for the "
"next client. Reading and writing works in the same way.  To see this, "
"consider the following simple echo server:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:278
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @async begin\n"
"           server = listen(2001)\n"
"           while true\n"
"               sock = accept(server)\n"
"               @async while isopen(sock)\n"
"                   write(sock, readline(sock, keep=true))\n"
"               end\n"
"           end\n"
"       end\n"
"Task (runnable) @0x00007fd31dc12e60\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:281
#, no-wrap
msgid ""
"julia> clientside = connect(2001)\n"
"TCPSocket(RawFD(28) open, 0 bytes waiting)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:286
#, no-wrap
msgid ""
"julia> @async while isopen(clientside)\n"
"           write(stdout, readline(clientside, keep=true))\n"
"       end\n"
"Task (runnable) @0x00007fd31dc11870\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:290
#, no-wrap
msgid ""
"julia> println(clientside,\"Hello World from the Echo Server\")\n"
"Hello World from the Echo Server\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:292
msgid "As with other streams, use [`close`](@ref) to disconnect the socket:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:296
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> close(clientside)\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/networking-and-streams.md:297
#, no-wrap
msgid "Resolving IP Addresses"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:302
msgid ""
"One of the [`connect`](@ref) methods that does not follow the [`listen`]"
"(@ref) methods is `connect(host::String,port)`, which will attempt to "
"connect to the host given by the `host` parameter on the port given by the "
"`port` parameter. It allows you to do things like:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:307
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> connect(\"google.com\", 80)\n"
"TCPSocket(RawFD(30) open, 0 bytes waiting)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:310
msgid ""
"At the base of this functionality is [`getaddrinfo`](@ref), which will do "
"the appropriate address resolution:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/networking-and-streams.md:314
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> getaddrinfo(\"google.com\")\n"
"ip\"74.125.226.225\"\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/getting-started.md:1
#, no-wrap
msgid "[Getting Started](@id man-getting-started)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:5
msgid ""
"Julia installation is straightforward, whether using precompiled binaries or "
"compiling from source.  Download and install Julia by following the "
"instructions at [https://julialang.org/downloads/](https://julialang.org/"
"downloads/)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:9
msgid ""
"The easiest way to learn and experiment with Julia is by starting an "
"interactive session (also known as a read-eval-print loop or \"REPL\") by "
"double-clicking the Julia executable or running `julia` from the command "
"line:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:17
#, no-wrap
msgid ""
"```@eval\n"
"io = IOBuffer()\n"
"Base.banner(io)\n"
"banner = String(take!(io))\n"
"import Markdown\n"
"Markdown.parse(\"```\\n\\$ julia\\n\\n$(banner)\\njulia> 1 + 2\\n3\\n\\njulia> ans\\n3\\n```\")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:25
msgid ""
"To exit the interactive session, type `CTRL-D` (press the Control/`^` key "
"together with the `d` key), or type `exit()`. When run in interactive mode, "
"`julia` displays a banner and prompts the user for input.  Once the user has "
"entered a complete expression, such as `1 + 2`, and hits enter, the "
"interactive session evaluates the expression and shows its value. If an "
"expression is entered into an interactive session with a trailing semicolon, "
"its value is not shown. The variable `ans` is bound to the value of the last "
"evaluated expression whether it is shown or not. The `ans` variable is only "
"bound in interactive sessions, not when Julia code is run in other ways."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:27
msgid ""
"To evaluate expressions written in a source file `file.jl`, write "
"`include(\"file.jl\")`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:30
msgid ""
"To run code in a file non-interactively, you can give it as the first "
"argument to the `julia` command:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:34
msgid "``` $ julia script.jl arg1 arg2...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:41
msgid ""
"As the example implies, the following command-line arguments to `julia` are "
"interpreted as command-line arguments to the program `script.jl`, passed in "
"the global constant `ARGS`. The name of the script itself is passed in as "
"the global `PROGRAM_FILE`. Note that `ARGS` is also set when a Julia "
"expression is given using the `-e` option on the command line (see the "
"`julia` help output below) but `PROGRAM_FILE` will be empty. For example, to "
"just print the arguments given to a script, you could do this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:44
msgid ""
"``` $ julia -e 'println(PROGRAM_FILE); for x in ARGS; println(x); end' foo "
"bar"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:48
msgid "foo bar ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:50
msgid "Or you could put that code into a script and run it:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:58
#, no-wrap
msgid ""
"```\n"
"$ echo 'println(PROGRAM_FILE); for x in ARGS; println(x); end' > script.jl\n"
"$ julia script.jl foo bar\n"
"script.jl\n"
"foo\n"
"bar\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:60
msgid ""
"The `--` delimiter can be used to separate command-line arguments intended "
"for the script file from arguments intended for Julia:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:64
msgid "``` $ julia --color=yes -O -- foo.jl arg1 arg2..  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:66
msgid ""
"See also [Scripting](@ref man-scripting) for more information on writing "
"Julia scripts."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:75
msgid ""
"Julia can be started in parallel mode with either the `-p` or the `--machine-"
"file` options. `-p n` will launch an additional `n` worker processes, while "
"`--machine-file file` will launch a worker for each line in file `file`. The "
"machines defined in `file` must be accessible via a password-less `ssh` "
"login, with Julia installed at the same location as the current host. Each "
"machine definition takes the form `[count*][user@]host[:port] [bind_addr[:"
"port]]`. `user` defaults to current user, `port` to the standard ssh port. "
"`count` is the number of workers to spawn on the node, and defaults to 1. "
"The optional `bind-to bind_addr[:port]` specifies the IP address and port "
"that other workers should use to connect to this worker."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:78
msgid ""
"If you have code that you want executed whenever Julia is run, you can put "
"it in `~/.julia/config/startup.jl`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:83
#, no-wrap
msgid ""
"```\n"
"$ echo 'println(\"Greetings! 你好! 안녕하세요?\")' > ~/.julia/config/startup.jl\n"
"$ julia\n"
"Greetings! 你好! 안녕하세요?\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:86
#: ext/julia/doc/src/devdocs/debuggingtips.md:172
msgid "...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:89
msgid ""
"There are various ways to run Julia code and provide options, similar to "
"those available for the `perl` and `ruby` programs:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:93
msgid "``` julia [switches] -- [programfile] [args...] ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:127
#, no-wrap
msgid ""
"|Switch                                 |Description|\n"
"|:---                                   |:---|\n"
"|`-v`, `--version`                      |Display version information|\n"
"|`-h`, `--help`                         |Print this message|\n"
"|`--project[={<dir>\\|@.}]`              |Set <dir> as the home project/environment. The default @. option will search through parent directories until a Project.toml or JuliaProject.toml file is found.|\n"
"|`-J`, `--sysimage <file>`              |Start up with the given system image file|\n"
"|`-H`, `--home <dir>`                   |Set location of `julia` executable|\n"
"|`--startup-file={yes\\|no}`             |Load `~/.julia/config/startup.jl`|\n"
"|`--handle-signals={yes\\|no}`           |Enable or disable Julia's default signal handlers|\n"
"|`--sysimage-native-code={yes\\|no}`     |Use native code from system image if available|\n"
"|`--compiled-modules={yes\\|no}`         |Enable or disable incremental precompilation of modules|\n"
"|`-e`, `--eval <expr>`                  |Evaluate `<expr>`|\n"
"|`-E`, `--print <expr>`                 |Evaluate `<expr>` and display the result|\n"
"|`-L`, `--load <file>`                  |Load `<file>` immediately on all processors|\n"
"|`-p`, `--procs {N\\|auto`}              |Integer value N launches N additional local worker processes; `auto` launches as many workers as the number of local CPU threads (logical cores)|\n"
"|`--machine-file <file>`                |Run processes on hosts listed in `<file>`|\n"
"|`-i`                                   |Interactive mode; REPL runs and `isinteractive()` is true|\n"
"|`-q`, `--quiet`                        |Quiet startup: no banner, suppress REPL warnings|\n"
"|`--banner={yes\\|no\\|auto}`             |Enable or disable startup banner|\n"
"|`--color={yes\\|no\\|auto}`              |Enable or disable color text|\n"
"|`--history-file={yes\\|no}`             |Load or save history|\n"
"|`--depwarn={yes\\|no\\|error}`           |Enable or disable syntax and method deprecation warnings (`error` turns warnings into errors)|\n"
"|`--warn-overwrite={yes\\|no}`           |Enable or disable method overwrite warnings|\n"
"|`-C`, `--cpu-target <target>`          |Limit usage of CPU features up to `<target>`; set to `help` to see the available options|\n"
"|`-O`, `--optimize={0,1,2,3}`           |Set the optimization level (default level is 2 if unspecified or 3 if used without a level)|\n"
"|`-g`, `-g <level>`                     |Enable / Set the level of debug info generation (default level is 1 if unspecified or 2 if used without a level)|\n"
"|`--inline={yes\\|no}`                   |Control whether inlining is permitted, including overriding `@inline` declarations|\n"
"|`--check-bounds={yes\\|no}`             |Emit bounds checks always or never (ignoring declarations)|\n"
"|`--math-mode={ieee,fast}`              |Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)|\n"
"|`--code-coverage={none\\|user\\|all}`    |Count executions of source lines|\n"
"|`--code-coverage`                      |equivalent to `--code-coverage=user`|\n"
"|`--track-allocation={none\\|user\\|all}` |Count bytes allocated by each source line|\n"
"|`--track-allocation`                   |equivalent to `--track-allocation=user`|\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:132
#, no-wrap
msgid ""
"!!! compat \"Julia 1.1\"\n"
"    In Julia 1.0, the default `--project=@.` option did not search up from the root\n"
"    directory of a Git repository for the `Project.toml` file. From Julia 1.1 forward, it\n"
"    does.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/getting-started.md:133
#, no-wrap
msgid "Resources"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/getting-started.md:135
msgid ""
"A curated list of useful learning resources to help new users get started "
"can be found on the [learning](https://julialang.org/learning/) page of the "
"main Julia web site."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/types.md:1
#, no-wrap
msgid "[Types](@id man-types)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:11
msgid ""
"Type systems have traditionally fallen into two quite different camps: "
"static type systems, where every program expression must have a type "
"computable before the execution of the program, and dynamic type systems, "
"where nothing is known about types until run time, when the actual values "
"manipulated by the program are available. Object orientation allows some "
"flexibility in statically typed languages by letting code be written without "
"the precise types of values being known at compile time. The ability to "
"write code that can operate on different types is called polymorphism.  All "
"code in classic dynamically typed languages is polymorphic: only by "
"explicitly checking types, or when objects fail to support operations at run-"
"time, are the types of any values ever restricted."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:17
msgid ""
"Julia's type system is dynamic, but gains some of the advantages of static "
"type systems by making it possible to indicate that certain values are of "
"specific types. This can be of great assistance in generating efficient "
"code, but even more significantly, it allows method dispatch on the types of "
"function arguments to be deeply integrated with the language. Method "
"dispatch is explored in detail in [Methods](@ref), but is rooted in the type "
"system presented here."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:24
msgid ""
"The default behavior in Julia when types are omitted is to allow values to "
"be of any type. Thus, one can write many useful Julia functions without ever "
"explicitly using types. When additional expressiveness is needed, however, "
"it is easy to gradually introduce explicit type annotations into previously "
"\"untyped\" code. Adding annotations serves three primary purposes: to take "
"advantage of Julia's powerful multiple-dispatch mechanism, to improve human "
"readability, and to catch programmer errors."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:36
msgid ""
"Describing Julia in the lingo of [type systems](https://en.wikipedia.org/"
"wiki/Type_system), it is: dynamic, nominative and parametric. Generic types "
"can be parameterized, and the hierarchical relationships between types are "
"[explicitly declared](https://en.wikipedia.org/wiki/Nominal_type_system), "
"rather than [implied by compatible structure](https://en.wikipedia.org/wiki/"
"Structural_type_system).  One particularly distinctive feature of Julia's "
"type system is that concrete types may not subtype each other: all concrete "
"types are final and may only have abstract types as their supertypes.  While "
"this might at first seem unduly restrictive, it has many beneficial "
"consequences with surprisingly few drawbacks. It turns out that being able "
"to inherit behavior is much more important than being able to inherit "
"structure, and inheriting both causes significant difficulties in "
"traditional object-oriented languages. Other high-level aspects of Julia's "
"type system that should be mentioned up front are:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:49
msgid ""
"There is no division between object and non-object values: all values in "
"Julia are true objects having a type that belongs to a single, fully "
"connected type graph, all nodes of which are equally first-class as types."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:49
msgid ""
"There is no meaningful concept of a \"compile-time type\": the only type a "
"value has is its actual type when the program is running. This is called a "
"\"run-time type\" in object-oriented languages where the combination of "
"static compilation with polymorphism makes this distinction significant."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:49
msgid ""
"Only values, not variables, have types -- variables are simply names bound "
"to values."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:49
msgid ""
"Both abstract and concrete types can be parameterized by other types. They "
"can also be parameterized by symbols, by values of any type for which "
"[`isbits`](@ref) returns true (essentially, things like numbers and bools "
"that are stored like C types or `struct`s with no pointers to other "
"objects), and also by tuples thereof. Type parameters may be omitted when "
"they do not need to be referenced or restricted."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:53
msgid ""
"Julia's type system is designed to be powerful and expressive, yet clear, "
"intuitive and unobtrusive.  Many Julia programmers may never feel the need "
"to write code that explicitly uses types. Some kinds of programming, "
"however, become clearer, simpler, faster and more robust with declared types."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:54
#, no-wrap
msgid "Type Declarations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:58
msgid ""
"The `::` operator can be used to attach type annotations to expressions and "
"variables in programs.  There are two primary reasons to do this:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/types.md:62
msgid ""
"As an assertion to help confirm that your program works the way you expect,"
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/types.md:62
msgid ""
"To provide extra type information to the compiler, which can then improve "
"performance in some cases"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:70
msgid ""
"When appended to an expression computing a value, the `::` operator is read "
"as \"is an instance of\". It can be used anywhere to assert that the value "
"of the expression on the left is an instance of the type on the right. When "
"the type on the right is concrete, the value on the left must have that type "
"as its implementation -- recall that all concrete types are final, so no "
"implementation is a subtype of any other. When the type is abstract, it "
"suffices for the value to be implemented by a concrete type that is a "
"subtype of the abstract type. If the type assertion is not true, an "
"exception is thrown, otherwise, the left-hand value is returned:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:74
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> (1+2)::AbstractFloat\n"
"ERROR: TypeError: in typeassert, expected AbstractFloat, got Int64\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:78
#, no-wrap
msgid ""
"julia> (1+2)::Int\n"
"3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:80
msgid "This allows a type assertion to be attached to any expression in-place."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:85
msgid ""
"When appended to a variable on the left-hand side of an assignment, or as "
"part of a `local` declaration, the `::` operator means something a bit "
"different: it declares the variable to always have the specified type, like "
"a type declaration in a statically-typed language such as C. Every value "
"assigned to the variable will be converted to the declared type using "
"[`convert`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:92
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> function foo()\n"
"           x::Int8 = 100\n"
"           x\n"
"       end\n"
"foo (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:95
#, no-wrap
msgid ""
"julia> foo()\n"
"100\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:99
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Int8\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:102
msgid ""
"This feature is useful for avoiding performance \"gotchas\" that could occur "
"if one of the assignments to a variable changed its type unexpectedly."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:104
msgid "This \"declaration\" behavior only occurs in specific contexts:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:109
#, no-wrap
msgid ""
"```julia\n"
"local x::Int8  # in a local declaration\n"
"x::Int8 = 10   # as the left-hand side of an assignment\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:113
msgid ""
"and applies to the whole current scope, even before the declaration. "
"Currently, type declarations cannot be used in global scope, e.g. in the "
"REPL, since Julia does not yet have constant-type globals."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:115
msgid "Declarations can also be attached to function definitions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:124
#, no-wrap
msgid ""
"```julia\n"
"function sinc(x)::Float64\n"
"    if x == 0\n"
"        return 1\n"
"    end\n"
"    return sin(pi*x)/(pi*x)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:127
msgid ""
"Returning from this function behaves just like an assignment to a variable "
"with a declared type: the value is always converted to `Float64`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:128
#, no-wrap
msgid "Abstract Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:135
msgid ""
"Abstract types cannot be instantiated, and serve only as nodes in the type "
"graph, thereby describing sets of related concrete types: those concrete "
"types which are their descendants. We begin with abstract types even though "
"they have no instantiation because they are the backbone of the type system: "
"they form the conceptual hierarchy which makes Julia's type system more than "
"just a collection of object implementations."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:150
msgid ""
"Recall that in [Integers and Floating-Point Numbers](@ref), we introduced a "
"variety of concrete types of numeric values: [`Int8`](@ref), [`UInt8`]"
"(@ref), [`Int16`](@ref), [`UInt16`](@ref), [`Int32`](@ref), [`UInt32`]"
"(@ref), [`Int64`](@ref), [`UInt64`](@ref), [`Int128`](@ref), [`UInt128`]"
"(@ref), [`Float16`](@ref), [`Float32`](@ref), and [`Float64`](@ref). "
"Although they have different representation sizes, `Int8`, `Int16`, `Int32`, "
"`Int64` and `Int128` all have in common that they are signed integer types. "
"Likewise `UInt8`, `UInt16`, `UInt32`, `UInt64` and `UInt128` are all "
"unsigned integer types, while `Float16`, `Float32` and `Float64` are "
"distinct in being floating-point types rather than integers. It is common "
"for a piece of code to make sense, for example, only if its arguments are "
"some kind of integer, but not really depend on what particular *kind* of "
"integer. For example, the greatest common denominator algorithm works for "
"all kinds of integers, but will not work for floating-point numbers. "
"Abstract types allow the construction of a hierarchy of types, providing a "
"context into which concrete types can fit. This allows you, for example, to "
"easily program to any type that is an integer, without restricting an "
"algorithm to a specific type of integer."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:153
msgid ""
"Abstract types are declared using the [`abstract type`](@ref) keyword. The "
"general syntaxes for declaring an abstract type are:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:158
#, no-wrap
msgid ""
"```\n"
"abstract type «name» end\n"
"abstract type «name» <: «supertype» end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:162
#, no-wrap
msgid ""
"The `abstract type` keyword introduces a new abstract type, whose name is given by `«name»`. This\n"
"name can be optionally followed by [`<:`](@ref) and an already-existing type, indicating that the newly\n"
"declared abstract type is a subtype of this \"parent\" type.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:168
msgid ""
"When no supertype is given, the default supertype is `Any` -- a predefined "
"abstract type that all objects are instances of and all types are subtypes "
"of. In type theory, `Any` is commonly called \"top\" because it is at the "
"apex of the type graph. Julia also has a predefined abstract \"bottom\" "
"type, at the nadir of the type graph, which is written as `Union{}`. It is "
"the exact opposite of `Any`: no object is an instance of `Union{}` and all "
"types are supertypes of `Union{}`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:170
msgid ""
"Let's consider some of the abstract types that make up Julia's numerical "
"hierarchy:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:179
#, no-wrap
msgid ""
"```julia\n"
"abstract type Number end\n"
"abstract type Real     <: Number end\n"
"abstract type AbstractFloat <: Real end\n"
"abstract type Integer  <: Real end\n"
"abstract type Signed   <: Integer end\n"
"abstract type Unsigned <: Integer end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:188
msgid ""
"The [`Number`](@ref) type is a direct child type of `Any`, and [`Real`]"
"(@ref) is its child.  In turn, `Real` has two children (it has more, but "
"only two are shown here; we'll get to the others later): [`Integer`](@ref) "
"and [`AbstractFloat`](@ref), separating the world into representations of "
"integers and representations of real numbers. Representations of real "
"numbers include, of course, floating-point types, but also include other "
"types, such as rationals. Hence, `AbstractFloat` is a proper subtype of "
"`Real`, including only floating-point representations of real numbers. "
"Integers are further subdivided into [`Signed`](@ref) and [`Unsigned`](@ref) "
"varieties."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:193
#, no-wrap
msgid ""
"The `<:` operator in general means \"is a subtype of\", and, used in declarations like this, declares\n"
"the right-hand type to be an immediate supertype of the newly declared type. It can also be used\n"
"in expressions as a subtype operator which returns `true` when its left operand is a subtype of\n"
"its right operand:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:197
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Integer <: Number\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:201
#, no-wrap
msgid ""
"julia> Integer <: AbstractFloat\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:204
msgid ""
"An important use of abstract types is to provide default implementations for "
"concrete types. To give a simple example, consider:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:210
#, no-wrap
msgid ""
"```julia\n"
"function myplus(x,y)\n"
"    x+y\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:215
msgid ""
"The first thing to note is that the above argument declarations are "
"equivalent to `x::Any` and `y::Any`. When this function is invoked, say as "
"`myplus(2,5)`, the dispatcher chooses the most specific method named "
"`myplus` that matches the given arguments. (See [Methods](@ref) for more "
"information on multiple dispatch.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:219
msgid ""
"Assuming no method more specific than the above is found, Julia next "
"internally defines and compiles a method called `myplus` specifically for "
"two `Int` arguments based on the generic function given above, i.e., it "
"implicitly defines and compiles:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:225
#, no-wrap
msgid ""
"```julia\n"
"function myplus(x::Int,y::Int)\n"
"    x+y\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:227
msgid "and finally, it invokes this specific method."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:231
msgid ""
"Thus, abstract types allow programmers to write generic functions that can "
"later be used as the default method by many combinations of concrete types. "
"Thanks to multiple dispatch, the programmer has full control over whether "
"the default or more specific method is used."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:236
msgid ""
"An important point to note is that there is no loss in performance if the "
"programmer relies on a function whose arguments are abstract types, because "
"it is recompiled for each tuple of argument concrete types with which it is "
"invoked. (There may be a performance issue, however, in the case of function "
"arguments that are containers of abstract types; see [Performance Tips](@ref "
"man-performance-tips).)"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:237
#, no-wrap
msgid "Primitive Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:243
msgid ""
"A primitive type is a concrete type whose data consists of plain old bits. "
"Classic examples of primitive types are integers and floating-point values. "
"Unlike most languages, Julia lets you declare your own primitive types, "
"rather than providing only a fixed set of built-in ones. In fact, the "
"standard primitive types are all defined in the language itself:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:248
#, no-wrap
msgid ""
"```julia\n"
"primitive type Float16 <: AbstractFloat 16 end\n"
"primitive type Float32 <: AbstractFloat 32 end\n"
"primitive type Float64 <: AbstractFloat 64 end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:251
#, no-wrap
msgid ""
"primitive type Bool <: Integer 8 end\n"
"primitive type Char <: AbstractChar 32 end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:263
#, no-wrap
msgid ""
"primitive type Int8    <: Signed   8 end\n"
"primitive type UInt8   <: Unsigned 8 end\n"
"primitive type Int16   <: Signed   16 end\n"
"primitive type UInt16  <: Unsigned 16 end\n"
"primitive type Int32   <: Signed   32 end\n"
"primitive type UInt32  <: Unsigned 32 end\n"
"primitive type Int64   <: Signed   64 end\n"
"primitive type UInt64  <: Unsigned 64 end\n"
"primitive type Int128  <: Signed   128 end\n"
"primitive type UInt128 <: Unsigned 128 end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:265
msgid "The general syntaxes for declaring a primitive type are:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:270
#, no-wrap
msgid ""
"```\n"
"primitive type «name» «bits» end\n"
"primitive type «name» <: «supertype» «bits» end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:278
msgid ""
"The number of bits indicates how much storage the type requires and the name "
"gives the new type a name. A primitive type can optionally be declared to be "
"a subtype of some supertype. If a supertype is omitted, then the type "
"defaults to having `Any` as its immediate supertype. The declaration of "
"[`Bool`](@ref) above therefore means that a boolean value takes eight bits "
"to store, and has [`Integer`](@ref) as its immediate supertype. Currently, "
"only sizes that are multiples of 8 bits are supported. Therefore, boolean "
"values, although they really need just a single bit, cannot be declared to "
"be any smaller than eight bits."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:289
msgid ""
"The types [`Bool`](@ref), [`Int8`](@ref) and [`UInt8`](@ref) all have "
"identical representations: they are eight-bit chunks of memory. Since "
"Julia's type system is nominative, however, they are not interchangeable "
"despite having identical structure. A fundamental difference between them is "
"that they have different supertypes: [`Bool`](@ref)'s direct supertype is "
"[`Integer`](@ref), [`Int8`](@ref)'s is [`Signed`](@ref), and [`UInt8`]"
"(@ref)'s is [`Unsigned`](@ref). All other differences between [`Bool`]"
"(@ref), [`Int8`](@ref), and [`UInt8`](@ref) are matters of behavior -- the "
"way functions are defined to act when given objects of these types as "
"arguments. This is why a nominative type system is necessary: if structure "
"determined type, which in turn dictates behavior, then it would be "
"impossible to make [`Bool`](@ref) behave any differently than [`Int8`](@ref) "
"or [`UInt8`](@ref)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:290
#, no-wrap
msgid "Composite Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:297
msgid ""
"[Composite types](https://en.wikipedia.org/wiki/Composite_data_type) are "
"called records, structs, or objects in various languages. A composite type "
"is a collection of named fields, an instance of which can be treated as a "
"single value. In many languages, composite types are the only kind of user-"
"definable type, and they are by far the most commonly used user-defined type "
"in Julia as well."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:311
msgid ""
"In mainstream object oriented languages, such as C++, Java, Python and Ruby, "
"composite types also have named functions associated with them, and the "
"combination is called an \"object\". In purer object-oriented languages, "
"such as Ruby or Smalltalk, all values are objects whether they are "
"composites or not. In less pure object oriented languages, including C++ and "
"Java, some values, such as integers and floating-point values, are not "
"objects, while instances of user-defined composite types are true objects "
"with associated methods. In Julia, all values are objects, but functions are "
"not bundled with the objects they operate on. This is necessary since Julia "
"chooses which method of a function to use by multiple dispatch, meaning that "
"the types of *all* of a function's arguments are considered when selecting a "
"method, rather than just the first one (see [Methods](@ref)  for more "
"information on methods and dispatch). Thus, it would be inappropriate for "
"functions to \"belong\" to only their first argument. Organizing methods "
"into function objects rather than having named bags of methods \"inside\" "
"each object ends up being a highly beneficial aspect of the language design."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:314
msgid ""
"Composite types are introduced with the [`struct`](@ref) keyword followed by "
"a block of field names, optionally annotated with types using the `::` "
"operator:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:322
#, no-wrap
msgid ""
"```jldoctest footype\n"
"julia> struct Foo\n"
"           bar\n"
"           baz::Int\n"
"           qux::Float64\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:324
msgid ""
"Fields with no type annotation default to `Any`, and can accordingly hold "
"any type of value."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:327
msgid ""
"New objects of type `Foo` are created by applying the `Foo` type object like "
"a function to values for its fields:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:331
#, no-wrap
msgid ""
"```jldoctest footype\n"
"julia> foo = Foo(\"Hello, world.\", 23, 1.5)\n"
"Foo(\"Hello, world.\", 23, 1.5)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:335
#, no-wrap
msgid ""
"julia> typeof(foo)\n"
"Foo\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:341
msgid ""
"When a type is applied like a function it is called a *constructor*. Two "
"constructors are generated automatically (these are called *default "
"constructors*). One accepts any arguments and calls [`convert`](@ref) to "
"convert them to the types of the fields, and the other accepts arguments "
"that match the field types exactly. The reason both of these are generated "
"is that this makes it easier to add new definitions without inadvertently "
"replacing a default constructor."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:344
msgid ""
"Since the `bar` field is unconstrained in type, any value will do. However, "
"the value for `baz` must be convertible to `Int`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:351
#, no-wrap
msgid ""
"```jldoctest footype\n"
"julia> Foo((), 23.5, 1)\n"
"ERROR: InexactError: Int64(23.5)\n"
"Stacktrace:\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:353
msgid ""
"You may find a list of field names using the [`fieldnames`](@ref) function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:358
#, no-wrap
msgid ""
"```jldoctest footype\n"
"julia> fieldnames(Foo)\n"
"(:bar, :baz, :qux)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:360
msgid ""
"You can access the field values of a composite object using the traditional "
"`foo.bar` notation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:364
#, no-wrap
msgid ""
"```jldoctest footype\n"
"julia> foo.bar\n"
"\"Hello, world.\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:367
#, no-wrap
msgid ""
"julia> foo.baz\n"
"23\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:371
#, no-wrap
msgid ""
"julia> foo.qux\n"
"1.5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:374
msgid ""
"Composite objects declared with `struct` are *immutable*; they cannot be "
"modified after construction. This may seem odd at first, but it has several "
"advantages:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:379
msgid ""
"It can be more efficient. Some structs can be packed efficiently into "
"arrays, and in some cases the compiler is able to avoid allocating immutable "
"objects entirely."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:379
msgid ""
"It is not possible to violate the invariants provided by the type's "
"constructors."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:379
msgid "Code using immutable objects can be easier to reason about."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:383
msgid ""
"An immutable object might contain mutable objects, such as arrays, as "
"fields. Those contained objects will remain mutable; only the fields of the "
"immutable object itself cannot be changed to point to different objects."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:386
msgid ""
"Where required, mutable composite objects can be declared with the keyword "
"[`mutable struct`](@ref), to be discussed in the next section."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:388
msgid ""
"Immutable composite types with no fields are singletons; there can be only "
"one instance of such types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:392
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> struct NoFields\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:396
#, no-wrap
msgid ""
"julia> NoFields() === NoFields()\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:399
msgid ""
"The [`===`](@ref) function confirms that the \"two\" constructed instances "
"of `NoFields` are actually one and the same. Singleton types are described "
"in further detail [below](@ref man-singleton-types)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:403
msgid ""
"There is much more to say about how instances of composite types are "
"created, but that discussion depends on both [Parametric Types](@ref) and on "
"[Methods](@ref), and is sufficiently important to be addressed in its own "
"section: [Constructors](@ref man-constructors)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:404
#, no-wrap
msgid "Mutable Composite Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:408
msgid ""
"If a composite type is declared with `mutable struct` instead of `struct`, "
"then instances of it can be modified:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:414
#, no-wrap
msgid ""
"```jldoctest bartype\n"
"julia> mutable struct Bar\n"
"           baz\n"
"           qux::Float64\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:416
#, no-wrap
msgid "julia> bar = Bar(\"Hello\", 1.5);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:419
#, no-wrap
msgid ""
"julia> bar.qux = 2.0\n"
"2.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:423
#, no-wrap
msgid ""
"julia> bar.baz = 1//2\n"
"1//2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:433
msgid ""
"In order to support mutation, such objects are generally allocated on the "
"heap, and have stable memory addresses.  A mutable object is like a little "
"container that might hold different values over time, and so can only be "
"reliably identified with its address.  In contrast, an instance of an "
"immutable type is associated with specific field values --- the field values "
"alone tell you everything about the object.  In deciding whether to make a "
"type mutable, ask whether two instances with the same field values would be "
"considered identical, or if they might need to change independently over "
"time. If they would be considered identical, the type should probably be "
"immutable."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:435
msgid "To recap, two essential properties define immutability in Julia:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:452
#, no-wrap
msgid ""
"  * It is not permitted to modify the value of an immutable type.\n"
"    * For bits types this means that the bit pattern of a value once set will never change\n"
"      and that value is the identity of a bits type.\n"
"    * For composite  types, this means that the identity of the values of its fields will\n"
"      never change. When the fields are bits types, that means their bits will never change,\n"
"      for fields whose values are mutable types like arrays, that means the fields will\n"
"      always refer to the same mutable value even though that mutable value's content may\n"
"      itself be modified.\n"
"  * An object with an immutable type may be copied freely by the compiler since its\n"
"    immutability makes it impossible to programmatically distinguish between the original\n"
"    object and a copy.\n"
"    * In particular, this means that small enough immutable values like integers and floats\n"
"      are typically passed to functions in registers (or stack allocated).\n"
"    * Mutable values, on the other hand are heap-allocated and passed to\n"
"      functions as pointers to heap-allocated values except in cases where the compiler\n"
"      is sure that there's no way to tell that this is not what is happening.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:453
#, no-wrap
msgid "Declared Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:457
msgid ""
"The three kinds of types (abstract, primitive, composite) discussed in the "
"previous sections are actually all closely related. They share the same key "
"properties:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:462
msgid "They are explicitly declared."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:462
msgid "They have names."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:462
msgid "They have explicitly declared supertypes."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:462
msgid "They may have parameters."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:465
msgid ""
"Because of these shared properties, these types are internally represented "
"as instances of the same concept, `DataType`, which is the type of any of "
"these types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:469
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typeof(Real)\n"
"DataType\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:473
#, no-wrap
msgid ""
"julia> typeof(Int)\n"
"DataType\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:477
msgid ""
"A `DataType` may be abstract or concrete. If it is concrete, it has a "
"specified size, storage layout, and (optionally) field names. Thus a "
"primitive type is a `DataType` with nonzero size, but no field names. A "
"composite type is a `DataType` that has field names or is empty (zero size)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:479
msgid "Every concrete value in the system is an instance of some `DataType`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:480
#, no-wrap
msgid "Type Unions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:484
msgid ""
"A type union is a special abstract type which includes as objects all "
"instances of any of its argument types, constructed using the special "
"[`Union`](@ref) keyword:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:488
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> IntOrString = Union{Int,AbstractString}\n"
"Union{Int64, AbstractString}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:491
#, no-wrap
msgid ""
"julia> 1 :: IntOrString\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:494
#, no-wrap
msgid ""
"julia> \"Hello!\" :: IntOrString\n"
"\"Hello!\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:498
#, no-wrap
msgid ""
"julia> 1.0 :: IntOrString\n"
"ERROR: TypeError: in typeassert, expected Union{Int64, AbstractString}, got Float64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:503
msgid ""
"The compilers for many languages have an internal union construct for "
"reasoning about types; Julia simply exposes it to the programmer. The Julia "
"compiler is able to generate efficient code in the presence of `Union` types "
"with a small number of types [^1], by generating specialized code in "
"separate branches for each possible type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:510
msgid ""
"A particularly useful case of a `Union` type is `Union{T, Nothing}`, where "
"`T` can be any type and [`Nothing`](@ref) is the singleton type whose only "
"instance is the object [`nothing`](@ref). This pattern is the Julia "
"equivalent of [`Nullable`, `Option` or `Maybe`](https://en.wikipedia.org/"
"wiki/Nullable_type)  types in other languages. Declaring a function argument "
"or a field as `Union{T, Nothing}` allows setting it either to a value of "
"type `T`, or to `nothing` to indicate that there is no value.  See [this FAQ "
"entry](@ref faq-nothing) for more information."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:511
#, no-wrap
msgid "Parametric Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:527
msgid ""
"An important and powerful feature of Julia's type system is that it is "
"parametric: types can take parameters, so that type declarations actually "
"introduce a whole family of new types -- one for each possible combination "
"of parameter values. There are many languages that support some version of "
"[generic programming](https://en.wikipedia.org/wiki/Generic_programming), "
"wherein data structures and algorithms to manipulate them may be specified "
"without specifying the exact types involved.  For example, some form of "
"generic programming exists in ML, Haskell, Ada, Eiffel, C++, Java, C#, F#, "
"and Scala, just to name a few. Some of these languages support true "
"parametric polymorphism (e.g. ML, Haskell, Scala), while others support ad-"
"hoc, template-based styles of generic programming (e.g. C++, Java). With so "
"many different varieties of generic programming and parametric types in "
"various languages, we won't even attempt to compare Julia's parametric types "
"to other languages, but will instead focus on explaining Julia's system in "
"its own right. We will note, however, that because Julia is a dynamically "
"typed language and doesn't need to make all type decisions at compile time, "
"many traditional difficulties encountered in static parametric type systems "
"can be relatively easily handled."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:531
msgid ""
"All declared types (the `DataType` variety) can be parameterized, with the "
"same syntax in each case. We will discuss them in the following order: "
"first, parametric composite types, then parametric abstract types, and "
"finally parametric primitive types."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/types.md:532
#, no-wrap
msgid "Parametric Composite Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:535
msgid ""
"Type parameters are introduced immediately after the type name, surrounded "
"by curly braces:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:542
#, no-wrap
msgid ""
"```jldoctest pointtype\n"
"julia> struct Point{T}\n"
"           x::T\n"
"           y::T\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:550
msgid ""
"This declaration defines a new parametric type, `Point{T}`, holding two "
"\"coordinates\" of type `T`. What, one may ask, is `T`? Well, that's "
"precisely the point of parametric types: it can be any type at all (or a "
"value of any bits type, actually, although here it's clearly used as a "
"type).  `Point{Float64}` is a concrete type equivalent to the type defined "
"by replacing `T` in the definition of `Point` with [`Float64`](@ref). Thus, "
"this single declaration actually declares an unlimited number of types: "
"`Point{Float64}`, `Point{AbstractString}`, `Point{Int64}`, etc. Each of "
"these is now a usable concrete type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:554
#, no-wrap
msgid ""
"```jldoctest pointtype\n"
"julia> Point{Float64}\n"
"Point{Float64}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:558
#, no-wrap
msgid ""
"julia> Point{AbstractString}\n"
"Point{AbstractString}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:561
msgid ""
"The type `Point{Float64}` is a point whose coordinates are 64-bit floating-"
"point values, while the type `Point{AbstractString}` is a \"point\" whose "
"\"coordinates\" are string objects (see [Strings](@ref))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:564
msgid ""
"`Point` itself is also a valid type object, containing all instances "
"`Point{Float64}`, `Point{AbstractString}`, etc. as subtypes:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:568
#, no-wrap
msgid ""
"```jldoctest pointtype\n"
"julia> Point{Float64} <: Point\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:572
#, no-wrap
msgid ""
"julia> Point{AbstractString} <: Point\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:574
msgid "Other types, of course, are not subtypes of it:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:578
#, no-wrap
msgid ""
"```jldoctest pointtype\n"
"julia> Float64 <: Point\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:582
#, no-wrap
msgid ""
"julia> AbstractString <: Point\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:584
msgid ""
"Concrete `Point` types with different values of `T` are never subtypes of "
"each other:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:588
#, no-wrap
msgid ""
"```jldoctest pointtype\n"
"julia> Point{Float64} <: Point{Int64}\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:592
#, no-wrap
msgid ""
"julia> Point{Float64} <: Point{Real}\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:595
#, no-wrap
msgid ""
"!!! warning\n"
"    This last point is *very* important: even though `Float64 <: Real` we **DO NOT** have `Point{Float64} <: Point{Real}`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:600
msgid ""
"In other words, in the parlance of type theory, Julia's type parameters are "
"*invariant*, rather than being [covariant (or even contravariant)](https://"
"en.wikipedia.org/wiki/Covariance_and_contravariance_%28computer_science%29). "
"This is for practical reasons: while any instance of `Point{Float64}` may "
"conceptually be like an instance of `Point{Real}` as well, the two types "
"have different representations in memory:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:607
msgid ""
"An instance of `Point{Float64}` can be represented compactly and efficiently "
"as an immediate pair of 64-bit values;"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:607
msgid ""
"An instance of `Point{Real}` must be able to hold any pair of instances of "
"[`Real`](@ref).  Since objects that are instances of `Real` can be of "
"arbitrary size and structure, in practice an instance of `Point{Real}` must "
"be represented as a pair of pointers to individually allocated `Real` "
"objects."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:615
msgid ""
"The efficiency gained by being able to store `Point{Float64}` objects with "
"immediate values is magnified enormously in the case of arrays: an "
"`Array{Float64}` can be stored as a contiguous memory block of 64-bit "
"floating-point values, whereas an `Array{Real}` must be an array of pointers "
"to individually allocated [`Real`](@ref) objects -- which may well be [boxed]"
"(https://en.wikipedia.org/wiki/Object_type_%28object-oriented_programming"
"%29#Boxing)  64-bit floating-point values, but also might be arbitrarily "
"large, complex objects, which are declared to be implementations of the "
"`Real` abstract type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:618
msgid ""
"Since `Point{Float64}` is not a subtype of `Point{Real}`, the following "
"method can't be applied to arguments of type `Point{Float64}`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:624
#, no-wrap
msgid ""
"```julia\n"
"function norm(p::Point{Real})\n"
"    sqrt(p.x^2 + p.y^2)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:627
msgid ""
"A correct way to define a method that accepts all arguments of type `Point{T}"
"` where `T` is a subtype of [`Real`](@ref) is:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:633
#, no-wrap
msgid ""
"```julia\n"
"function norm(p::Point{<:Real})\n"
"    sqrt(p.x^2 + p.y^2)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:636
#, no-wrap
msgid ""
"(Equivalently, one could define `function norm(p::Point{T} where T<:Real)` or\n"
"`function norm(p::Point{T}) where T<:Real`; see [UnionAll Types](@ref).)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:638
msgid "More examples will be discussed later in [Methods](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:644
msgid ""
"How does one construct a `Point` object? It is possible to define custom "
"constructors for composite types, which will be discussed in detail in "
"[Constructors](@ref man-constructors), but in the absence of any special "
"constructor declarations, there are two default ways of creating new "
"composite objects, one in which the type parameters are explicitly given and "
"the other in which they are implied by the arguments to the object "
"constructor."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:647
msgid ""
"Since the type `Point{Float64}` is a concrete type equivalent to `Point` "
"declared with [`Float64`](@ref)  in place of `T`, it can be applied as a "
"constructor accordingly:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:651
#, no-wrap
msgid ""
"```jldoctest pointtype\n"
"julia> Point{Float64}(1.0, 2.0)\n"
"Point{Float64}(1.0, 2.0)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:657
msgid ""
"For the default constructor, exactly one argument must be supplied for each "
"field:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:662
#, no-wrap
msgid ""
"```jldoctest pointtype\n"
"julia> Point{Float64}(1.0)\n"
"ERROR: MethodError: no method matching Point{Float64}(::Float64)\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:667
#, no-wrap
msgid ""
"julia> Point{Float64}(1.0,2.0,3.0)\n"
"ERROR: MethodError: no method matching Point{Float64}(::Float64, ::Float64, ::Float64)\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:670
msgid ""
"Only one default constructor is generated for parametric types, since "
"overriding it is not possible.  This constructor accepts any arguments and "
"converts them to the field types."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:675
msgid ""
"In many cases, it is redundant to provide the type of `Point` object one "
"wants to construct, since the types of arguments to the constructor call "
"already implicitly provide type information. For that reason, you can also "
"apply `Point` itself as a constructor, provided that the implied value of "
"the parameter type `T` is unambiguous:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:679
#, no-wrap
msgid ""
"```jldoctest pointtype\n"
"julia> Point(1.0,2.0)\n"
"Point{Float64}(1.0, 2.0)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:682
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Point{Float64}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:685
#, no-wrap
msgid ""
"julia> Point(1,2)\n"
"Point{Int64}(1, 2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:689
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Point{Int64}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:692
msgid ""
"In the case of `Point`, the type of `T` is unambiguously implied if and only "
"if the two arguments to `Point` have the same type. When this isn't the "
"case, the constructor will fail with a [`MethodError`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:699
#, no-wrap
msgid ""
"```jldoctest pointtype\n"
"julia> Point(1,2.5)\n"
"ERROR: MethodError: no method matching Point(::Int64, ::Float64)\n"
"Closest candidates are:\n"
"  Point(::T, !Matched::T) where T at none:2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:702
msgid ""
"Constructor methods to appropriately handle such mixed cases can be defined, "
"but that will not be discussed until later on in [Constructors](@ref man-"
"constructors)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/types.md:703
#, no-wrap
msgid "Parametric Abstract Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:707
msgid ""
"Parametric abstract type declarations declare a collection of abstract "
"types, in much the same way:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:711
#, no-wrap
msgid ""
"```jldoctest pointytype\n"
"julia> abstract type Pointy{T} end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:714
msgid ""
"With this declaration, `Pointy{T}` is a distinct abstract type for each type "
"or integer value of `T`. As with parametric composite types, each such "
"instance is a subtype of `Pointy`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:718
#, no-wrap
msgid ""
"```jldoctest pointytype\n"
"julia> Pointy{Int64} <: Pointy\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:722
#, no-wrap
msgid ""
"julia> Pointy{1} <: Pointy\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:724
msgid ""
"Parametric abstract types are invariant, much as parametric composite types "
"are:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:728
#, no-wrap
msgid ""
"```jldoctest pointytype\n"
"julia> Pointy{Float64} <: Pointy{Real}\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:732
#, no-wrap
msgid ""
"julia> Pointy{Real} <: Pointy{Float64}\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:739
#, no-wrap
msgid ""
"The notation `Pointy{<:Real}` can be used to express the Julia analogue of a\n"
"*covariant* type, while `Pointy{>:Int}` the analogue of a *contravariant* type,\n"
"but technically these represent *sets* of types (see [UnionAll Types](@ref)).\n"
"```jldoctest pointytype\n"
"julia> Pointy{Float64} <: Pointy{<:Real}\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:743
#, no-wrap
msgid ""
"julia> Pointy{Real} <: Pointy{>:Int}\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:747
msgid ""
"Much as plain old abstract types serve to create a useful hierarchy of types "
"over concrete types, parametric abstract types serve the same purpose with "
"respect to parametric composite types. We could, for example, have declared "
"`Point{T}` to be a subtype of `Pointy{T}` as follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:754
#, no-wrap
msgid ""
"```jldoctest pointytype\n"
"julia> struct Point{T} <: Pointy{T}\n"
"           x::T\n"
"           y::T\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:756
msgid ""
"Given such a declaration, for each choice of `T`, we have `Point{T}` as a "
"subtype of `Pointy{T}`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:760
#, no-wrap
msgid ""
"```jldoctest pointytype\n"
"julia> Point{Float64} <: Pointy{Float64}\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:763
#, no-wrap
msgid ""
"julia> Point{Real} <: Pointy{Real}\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:767
#, no-wrap
msgid ""
"julia> Point{AbstractString} <: Pointy{AbstractString}\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:769
msgid "This relationship is also invariant:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:773
#, no-wrap
msgid ""
"```jldoctest pointytype\n"
"julia> Point{Float64} <: Pointy{Real}\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:777
#, no-wrap
msgid ""
"julia> Point{Float64} <: Pointy{<:Real}\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:781
msgid ""
"What purpose do parametric abstract types like `Pointy` serve? Consider if "
"we create a point-like implementation that only requires a single coordinate "
"because the point is on the diagonal line *x = y*:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:787
#, no-wrap
msgid ""
"```jldoctest pointytype\n"
"julia> struct DiagPoint{T} <: Pointy{T}\n"
"           x::T\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:793
msgid ""
"Now both `Point{Float64}` and `DiagPoint{Float64}` are implementations of "
"the `Pointy{Float64}` abstraction, and similarly for every other possible "
"choice of type `T`. This allows programming to a common interface shared by "
"all `Pointy` objects, implemented for both `Point` and `DiagPoint`.  This "
"cannot be fully demonstrated, however, until we have introduced methods and "
"dispatch in the next section, [Methods](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:796
msgid ""
"There are situations where it may not make sense for type parameters to "
"range freely over all possible types. In such situations, one can constrain "
"the range of `T` like so:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:800
#, no-wrap
msgid ""
"```jldoctest realpointytype\n"
"julia> abstract type Pointy{T<:Real} end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:803
msgid ""
"With such a declaration, it is acceptable to use any type that is a subtype "
"of [`Real`](@ref) in place of `T`, but not types that are not subtypes of "
"`Real`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:807
#, no-wrap
msgid ""
"```jldoctest realpointytype\n"
"julia> Pointy{Float64}\n"
"Pointy{Float64}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:810
#, no-wrap
msgid ""
"julia> Pointy{Real}\n"
"Pointy{Real}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:813
#, no-wrap
msgid ""
"julia> Pointy{AbstractString}\n"
"ERROR: TypeError: in Pointy, in T, expected T<:Real, got Type{AbstractString}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:817
#, no-wrap
msgid ""
"julia> Pointy{1}\n"
"ERROR: TypeError: in Pointy, in T, expected T<:Real, got Int64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:819
msgid ""
"Type parameters for parametric composite types can be restricted in the same "
"manner:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:826
#, no-wrap
msgid ""
"```julia\n"
"struct Point{T<:Real} <: Pointy{T}\n"
"    x::T\n"
"    y::T\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:830
msgid ""
"To give a real-world example of how all this parametric type machinery can "
"be useful, here is the actual definition of Julia's [`Rational`](@ref) "
"immutable type (except that we omit the constructor here for simplicity), "
"representing an exact ratio of integers:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:837
#, no-wrap
msgid ""
"```julia\n"
"struct Rational{T<:Integer} <: Real\n"
"    num::T\n"
"    den::T\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:841
msgid ""
"It only makes sense to take ratios of integer values, so the parameter type "
"`T` is restricted to being a subtype of [`Integer`](@ref), and a ratio of "
"integers represents a value on the real number line, so any [`Rational`]"
"(@ref) is an instance of the [`Real`](@ref) abstraction."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/types.md:842
#, no-wrap
msgid "Tuple Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:848
msgid ""
"Tuples are an abstraction of the arguments of a function -- without the "
"function itself. The salient aspects of a function's arguments are their "
"order and their types. Therefore a tuple type is similar to a parameterized "
"immutable type where each parameter is the type of one field. For example, a "
"2-element tuple type resembles the following immutable type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:855
#, no-wrap
msgid ""
"```julia\n"
"struct Tuple2{A,B}\n"
"    a::A\n"
"    b::B\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:857
msgid "However, there are three key differences:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:863
msgid "Tuple types may have any number of parameters."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:863
msgid ""
"Tuple types are *covariant* in their parameters: `Tuple{Int}` is a subtype "
"of `Tuple{Any}`. Therefore `Tuple{Any}` is considered an abstract type, and "
"tuple types are only concrete if their parameters are."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/types.md:863
msgid "Tuples do not have field names; fields are only accessed by index."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:866
msgid ""
"Tuple values are written with parentheses and commas. When a tuple is "
"constructed, an appropriate tuple type is generated on demand:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:871
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typeof((1,\"foo\",2.5))\n"
"Tuple{Int64,String,Float64}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:873
msgid "Note the implications of covariance:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:877
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Tuple{Int,AbstractString} <: Tuple{Real,Any}\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:880
#, no-wrap
msgid ""
"julia> Tuple{Int,AbstractString} <: Tuple{Real,Real}\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:884
#, no-wrap
msgid ""
"julia> Tuple{Int,AbstractString} <: Tuple{Real,}\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:887
msgid ""
"Intuitively, this corresponds to the type of a function's arguments being a "
"subtype of the function's signature (when the signature matches)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/types.md:888
#, no-wrap
msgid "Vararg Tuple Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:892
msgid ""
"The last parameter of a tuple type can be the special type [`Vararg`](@ref), "
"which denotes any number of trailing elements:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:896
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> mytupletype = Tuple{AbstractString,Vararg{Int}}\n"
"Tuple{AbstractString,Vararg{Int64,N} where N}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:899
#, no-wrap
msgid ""
"julia> isa((\"1\",), mytupletype)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:902
#, no-wrap
msgid ""
"julia> isa((\"1\",1), mytupletype)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:905
#, no-wrap
msgid ""
"julia> isa((\"1\",1,2), mytupletype)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:909
#, no-wrap
msgid ""
"julia> isa((\"1\",1,2,3.0), mytupletype)\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:912
msgid ""
"Notice that `Vararg{T}` corresponds to zero or more elements of type `T`. "
"Vararg tuple types are used to represent the arguments accepted by varargs "
"methods (see [Varargs Functions](@ref))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:915
msgid ""
"The type `Vararg{T,N}` corresponds to exactly `N` elements of type `T`.  "
"`NTuple{N,T}` is a convenient alias for `Tuple{Vararg{T,N}}`, i.e. a tuple "
"type containing exactly `N` elements of type `T`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/types.md:916
#, no-wrap
msgid "Named Tuple Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:920
msgid ""
"Named tuples are instances of the [`NamedTuple`](@ref) type, which has two "
"parameters: a tuple of symbols giving the field names, and a tuple type "
"giving the field types."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:925
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typeof((a=1,b=\"hello\"))\n"
"NamedTuple{(:a, :b),Tuple{Int64,String}}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:929
msgid ""
"A `NamedTuple` type can be used as a constructor, accepting a single tuple "
"argument.  The constructed `NamedTuple` type can be either a concrete type, "
"with both parameters specified, or a type that specifies only field names:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:933
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> NamedTuple{(:a, :b),Tuple{Float32, String}}((1,\"\"))\n"
"(a = 1.0f0, b = \"\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:937
#, no-wrap
msgid ""
"julia> NamedTuple{(:a, :b)}((1,\"\"))\n"
"(a = 1, b = \"\")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:940
msgid ""
"If field types are specified, the arguments are converted. Otherwise the "
"types of the arguments are used directly."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/types.md:941
#, no-wrap
msgid "[Singleton Types](@id man-singleton-types)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:946
msgid ""
"There is a special kind of abstract parametric type that must be mentioned "
"here: singleton types.  For each type, `T`, the \"singleton type\" `Type{T}` "
"is an abstract type whose only instance is the object `T`. Since the "
"definition is a little difficult to parse, let's look at some examples:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:950
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> isa(Float64, Type{Float64})\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:953
#, no-wrap
msgid ""
"julia> isa(Real, Type{Float64})\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:956
#, no-wrap
msgid ""
"julia> isa(Real, Type{Real})\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:960
#, no-wrap
msgid ""
"julia> isa(Float64, Type{Real})\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:964
msgid ""
"In other words, [`isa(A,Type{B})`](@ref) is true if and only if `A` and `B` "
"are the same object and that object is a type. Without the parameter, `Type` "
"is simply an abstract type which has all type objects as its instances, "
"including, of course, singleton types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:968
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> isa(Type{Float64}, Type)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:971
#, no-wrap
msgid ""
"julia> isa(Float64, Type)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:975
#, no-wrap
msgid ""
"julia> isa(Real, Type)\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:977
msgid "Any object that is not a type is not an instance of `Type`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:981
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> isa(1, Type)\n"
"false\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:985
#, no-wrap
msgid ""
"julia> isa(\"foo\", Type)\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:991
msgid ""
"Until we discuss [Parametric Methods](@ref) and [conversions](@ref "
"conversion-and-promotion), it is difficult to explain the utility of the "
"singleton type construct, but in short, it allows one to specialize function "
"behavior on specific type *values*. This is useful for writing methods "
"(especially parametric ones) whose behavior depends on a type that is given "
"as an explicit argument rather than implied by the type of one of its "
"arguments."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:996
msgid ""
"A few popular languages have singleton types, including Haskell, Scala and "
"Ruby. In general usage, the term \"singleton type\" refers to a type whose "
"only instance is a single value. This meaning applies to Julia's singleton "
"types, but with that caveat that only type objects have singleton types."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/types.md:997
#, no-wrap
msgid "Parametric Primitive Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1001
msgid ""
"Primitive types can also be declared parametrically. For example, pointers "
"are represented as primitive types which would be declared in Julia like "
"this:"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/types.md:1003
#: ext/julia/doc/src/manual/types.md:1103
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:63
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:76
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:89
#, no-wrap
msgid "32-bit system:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1005
msgid "primitive type Ptr{T} 32 end"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/types.md:1006
#: ext/julia/doc/src/manual/types.md:1107
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:67
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:80
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:95
#, no-wrap
msgid "64-bit system:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1009
msgid "primitive type Ptr{T} 64 end ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1016
msgid ""
"The slightly odd feature of these declarations as compared to typical "
"parametric composite types, is that the type parameter `T` is not used in "
"the definition of the type itself -- it is just an abstract tag, essentially "
"defining an entire family of types with identical structure, differentiated "
"only by their type parameter. Thus, `Ptr{Float64}` and `Ptr{Int64}` are "
"distinct types, even though they have identical representations. And of "
"course, all specific pointer types are subtypes of the umbrella [`Ptr`]"
"(@ref) type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1020
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Ptr{Float64} <: Ptr\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1024
#, no-wrap
msgid ""
"julia> Ptr{Int64} <: Ptr\n"
"true\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:1025
#, no-wrap
msgid "UnionAll Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1032
msgid ""
"We have said that a parametric type like `Ptr` acts as a supertype of all "
"its instances (`Ptr{Int64}` etc.). How does this work? `Ptr` itself cannot "
"be a normal data type, since without knowing the type of the referenced data "
"the type clearly cannot be used for memory operations.  The answer is that "
"`Ptr` (or other parametric types like `Array`) is a different kind of type "
"called a [`UnionAll`](@ref) type. Such a type expresses the *iterated union* "
"of types for all values of some parameter."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1039
msgid ""
"`UnionAll` types are usually written using the keyword `where`. For example "
"`Ptr` could be more accurately written as `Ptr{T} where T`, meaning all "
"values whose type is `Ptr{T}` for some value of `T`. In this context, the "
"parameter `T` is also often called a \"type variable\" since it is like a "
"variable that ranges over types.  Each `where` introduces a single type "
"variable, so these expressions are nested for types with multiple "
"parameters, for example `Array{T,N} where N where T`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1048
msgid ""
"The type application syntax `A{B,C}` requires `A` to be a `UnionAll` type, "
"and first substitutes `B` for the outermost type variable in `A`.  The "
"result is expected to be another `UnionAll` type, into which `C` is then "
"substituted.  So `A{B,C}` is equivalent to `A{B}{C}`.  This explains why it "
"is possible to partially instantiate a type, as in `Array{Float64}`: the "
"first parameter value has been fixed, but the second still ranges over all "
"possible values.  Using explicit `where` syntax, any subset of parameters "
"can be fixed. For example, the type of all 1-dimensional arrays can be "
"written as `Array{T,1} where T`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1058
#, no-wrap
msgid ""
"Type variables can be restricted with subtype relations.\n"
"`Array{T} where T<:Integer` refers to all arrays whose element type is some kind of\n"
"[`Integer`](@ref).\n"
"The syntax `Array{<:Integer}` is a convenient shorthand for `Array{T} where T<:Integer`.\n"
"Type variables can have both lower and upper bounds.\n"
"`Array{T} where Int<:T<:Number` refers to all arrays of [`Number`](@ref)s that are able to\n"
"contain `Int`s (since `T` must be at least as big as `Int`).\n"
"The syntax `where T>:Int` also works to specify only the lower bound of a type variable,\n"
"and `Array{>:Int}` is equivalent to `Array{T} where T>:Int`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1063
#, no-wrap
msgid ""
"Since `where` expressions nest, type variable bounds can refer to outer type variables.\n"
"For example `Tuple{T,Array{S}} where S<:AbstractArray{T} where T<:Real` refers to 2-tuples\n"
"whose first element is some [`Real`](@ref), and whose second element is an `Array` of any\n"
"kind of array whose element type contains the type of the first tuple element.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1066
msgid ""
"The `where` keyword itself can be nested inside a more complex declaration. "
"For example, consider the two types created by the following declarations:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1070
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> const T1 = Array{Array{T,1} where T, 1}\n"
"Array{Array{T,1} where T,1}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1074
#, no-wrap
msgid ""
"julia> const T2 = Array{Array{T,1}, 1} where T\n"
"Array{Array{T,1},1} where T\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1079
#, no-wrap
msgid ""
"Type `T1` defines a 1-dimensional array of 1-dimensional arrays; each\n"
"of the inner arrays consists of objects of the same type, but this type may vary from one inner array to the next.\n"
"On the other hand, type `T2` defines a 1-dimensional array of 1-dimensional arrays all of whose inner arrays must have the\n"
"same type.  Note that `T2` is an abstract type, e.g., `Array{Array{Int,1},1} <: T2`, whereas `T1` is a concrete type. As a consequence, `T1` can be constructed with a zero-argument constructor `a=T1()` but `T2` cannot.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1082
msgid ""
"There is a convenient syntax for naming such types, similar to the short "
"form of function definition syntax:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1086
msgid "```julia Vector{T} = Array{T,1} ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1094
msgid ""
"This is equivalent to `const Vector = Array{T,1} where T`.  Writing "
"`Vector{Float64}` is equivalent to writing `Array{Float64,1}`, and the "
"umbrella type `Vector` has as instances all `Array` objects where the second "
"parameter -- the number of array dimensions -- is 1, regardless of what the "
"element type is. In languages where parametric types must always be "
"specified in full, this is not especially helpful, but in Julia, this allows "
"one to write just `Vector` for the abstract type including all one-"
"dimensional dense arrays of any element type."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:1095
#, no-wrap
msgid "Type Aliases"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1101
msgid ""
"Sometimes it is convenient to introduce a new name for an already "
"expressible type.  This can be done with a simple assignment statement.  For "
"example, `UInt` is aliased to either [`UInt32`](@ref) or [`UInt64`](@ref) as "
"is appropriate for the size of pointers on the system:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1106
#, no-wrap
msgid ""
"julia> UInt\n"
"UInt32\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1111
#, no-wrap
msgid ""
"julia> UInt\n"
"UInt64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1113
msgid "This is accomplished via the following code in `base/boot.jl`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1121
#, no-wrap
msgid ""
"```julia\n"
"if Int === Int64\n"
"    const UInt = UInt64\n"
"else\n"
"    const UInt = UInt32\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1124
msgid ""
"Of course, this depends on what `Int` is aliased to -- but that is "
"predefined to be the correct type -- either [`Int32`](@ref) or [`Int64`]"
"(@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1129
msgid ""
"(Note that unlike `Int`, `Float` does not exist as a type alias for a "
"specific sized [`AbstractFloat`](@ref). Unlike with integer registers, where "
"the size of `Int` reflects the size of a native pointer on that machine, the "
"floating point register sizes are specified by the IEEE-754 standard.)"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:1130
#, no-wrap
msgid "Operations on Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1136
#, no-wrap
msgid ""
"Since types in Julia are themselves objects, ordinary functions can operate on them. Some functions\n"
"that are particularly useful for working with or exploring types have already been introduced,\n"
"such as the `<:` operator, which indicates whether its left hand operand is a subtype of its right\n"
"hand operand.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1138
msgid ""
"The [`isa`](@ref) function tests if an object is of a given type and returns "
"true or false:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1142
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> isa(1, Int)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1146
#, no-wrap
msgid ""
"julia> isa(1, AbstractFloat)\n"
"false\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1150
msgid ""
"The [`typeof`](@ref) function, already used throughout the manual in "
"examples, returns the type of its argument. Since, as noted above, types are "
"objects, they also have types, and we can ask what their types are:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1154
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typeof(Rational{Int})\n"
"DataType\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1158
#, no-wrap
msgid ""
"julia> typeof(Union{Real,String})\n"
"Union\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1161
msgid ""
"What if we repeat the process? What is the type of a type of a type? As it "
"happens, types are all composite values and thus all have a type of "
"`DataType`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1165
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typeof(DataType)\n"
"DataType\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1169
#, no-wrap
msgid ""
"julia> typeof(Union)\n"
"DataType\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1171
msgid "`DataType` is its own type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1174
msgid ""
"Another operation that applies to some types is [`supertype`](@ref), which "
"reveals a type's supertype. Only declared types (`DataType`) have "
"unambiguous supertypes:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1178
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> supertype(Float64)\n"
"AbstractFloat\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1181
#, no-wrap
msgid ""
"julia> supertype(Number)\n"
"Any\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1184
#, no-wrap
msgid ""
"julia> supertype(AbstractString)\n"
"Any\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1188
#, no-wrap
msgid ""
"julia> supertype(Any)\n"
"Any\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1191
msgid ""
"If you apply [`supertype`](@ref) to other type objects (or non-type "
"objects), a [`MethodError`](@ref)  is raised:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1199
#, no-wrap
msgid ""
"```jldoctest; filter = r\"Closest candidates.*\"s\n"
"julia> supertype(Union{Float64,Int64})\n"
"ERROR: MethodError: no method matching supertype(::Type{Union{Float64, Int64}})\n"
"Closest candidates are:\n"
"  supertype(!Matched::DataType) at operators.jl:42\n"
"  supertype(!Matched::UnionAll) at operators.jl:47\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:1200
#, no-wrap
msgid "[Custom pretty-printing](@id man-custom-pretty-printing)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1205
msgid ""
"Often, one wants to customize how instances of a type are displayed.  This "
"is accomplished by overloading the [`show`](@ref) function.  For example, "
"suppose we define a type to represent complex numbers in polar form:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1211
#, no-wrap
msgid ""
"```jldoctest polartype\n"
"julia> struct Polar{T<:Real} <: Number\n"
"           r::T\n"
"           Θ::T\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1215
#, no-wrap
msgid ""
"julia> Polar(r::Real,Θ::Real) = Polar(promote(r,Θ)...)\n"
"Polar\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1223
msgid ""
"Here, we've added a custom constructor function so that it can take "
"arguments of different [`Real`](@ref) types and promote them to a common "
"type (see [Constructors](@ref man-constructors)  and [Conversion and "
"Promotion](@ref conversion-and-promotion)).  (Of course, we would have to "
"define lots of other methods, too, to make it act like a [`Number`](@ref), e."
"g. `+`, `*`, `one`, `zero`, promotion rules and so on.) By default, "
"instances of this type display rather simply, with information about the "
"type name and the field values, as e.g. `Polar{Float64}(3.0,4.0)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1227
msgid ""
"If we want it to display instead as `3.0 * exp(4.0im)`, we would define the "
"following method to print the object to a given output object `io` "
"(representing a file, terminal, buffer, etcetera; see [Networking and "
"Streams](@ref)):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1231
#, no-wrap
msgid ""
"```jldoctest polartype\n"
"julia> Base.show(io::IO, z::Polar) = print(io, z.r, \" * exp(\", z.Θ, \"im)\")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1239
msgid ""
"More fine-grained control over display of `Polar` objects is possible. In "
"particular, sometimes one wants both a verbose multi-line printing format, "
"used for displaying a single object in the REPL and other interactive "
"environments, and also a more compact single-line format used for [`print`]"
"(@ref) or for displaying the object as part of another object (e.g. in an "
"array). Although by default the `show(io, z)` function is called in both "
"cases, you can define a *different* multi-line format for displaying an "
"object by overloading a three-argument form of `show` that takes the `text/"
"plain` MIME type as its second argument (see [Multimedia I/O](@ref)), for "
"example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1244
#, no-wrap
msgid ""
"```jldoctest polartype\n"
"julia> Base.show(io::IO, ::MIME\"text/plain\", z::Polar{T}) where{T} =\n"
"           print(io, \"Polar{$T} complex number:\\n   \", z)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1246
msgid ""
"(Note that `print(..., z)` here will call the 2-argument `show(io, z)` "
"method.) This results in:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1251
#, no-wrap
msgid ""
"```jldoctest polartype\n"
"julia> Polar(3, 4.0)\n"
"Polar{Float64} complex number:\n"
"   3.0 * exp(4.0im)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1257
#, no-wrap
msgid ""
"julia> [Polar(3, 4.0), Polar(4.0,5.3)]\n"
"2-element Array{Polar{Float64},1}:\n"
" 3.0 * exp(4.0im)\n"
" 4.0 * exp(5.3im)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1262
#, no-wrap
msgid ""
"where the single-line `show(io, z)` form is still used for an array of `Polar` values.   Technically,\n"
"the REPL calls `display(z)` to display the result of executing a line, which defaults to `show(stdout, MIME(\"text/plain\"), z)`,\n"
"which in turn defaults to `show(stdout, z)`, but you should *not* define new [`display`](@ref)\n"
"methods unless you are defining a new multimedia display handler (see [Multimedia I/O](@ref)).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1266
#, no-wrap
msgid ""
"Moreover, you can also define `show` methods for other MIME types in order to enable richer display\n"
"(HTML, images, etcetera) of objects in environments that support this (e.g. IJulia).   For example,\n"
"we can define formatted HTML display of `Polar` objects, with superscripts and italics, via:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1272
#, no-wrap
msgid ""
"```jldoctest polartype\n"
"julia> Base.show(io::IO, ::MIME\"text/html\", z::Polar{T}) where {T} =\n"
"           println(io, \"<code>Polar{$T}</code> complex number: \",\n"
"                   z.r, \" <i>e</i><sup>\", z.Θ, \" <i>i</i></sup>\")\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1275
msgid ""
"A `Polar` object will then display automatically using HTML in an "
"environment that supports HTML display, but you can call `show` manually to "
"get HTML output if you want:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1280
#, no-wrap
msgid ""
"```jldoctest polartype\n"
"julia> show(stdout, \"text/html\", Polar(3.0,4.0))\n"
"<code>Polar{Float64}</code> complex number: 3.0 <i>e</i><sup>4.0 <i>i</i></sup>\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1284
#, no-wrap
msgid ""
"```@raw html\n"
"<p>An HTML renderer would display this as: <code>Polar{Float64}</code> complex number: 3.0 <i>e</i><sup>4.0 <i>i</i></sup></p>\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1290
msgid ""
"As a rule of thumb, the single-line `show` method should print a valid Julia "
"expression for creating the shown object.  When this `show` method contains "
"infix operators, such as the multiplication operator (`*`) in our single-"
"line `show` method for `Polar` above, it may not parse correctly when "
"printed as part of another object.  To see this, consider the expression "
"object (see [Program representation](@ref)) which takes the square of a "
"specific instance of our `Polar` type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1295
#, no-wrap
msgid ""
"```jldoctest polartype\n"
"julia> a = Polar(3, 4.0)\n"
"Polar{Float64} complex number:\n"
"   3.0 * exp(4.0im)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1299
#, no-wrap
msgid ""
"julia> print(:($a^2))\n"
"3.0 * exp(4.0im) ^ 2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1305
msgid ""
"Because the operator `^` has higher precedence than `*` (see [Operator "
"Precedence and Associativity](@ref)), this output does not faithfully "
"represent the expression `a ^ 2` which should be equal to `(3.0 * "
"exp(4.0im)) ^ 2`.  To solve this issue, we must make a custom method for "
"`Base.show_unquoted(io::IO, z::Polar, indent::Int, precedence::Int)`, which "
"is called internally by the expression object when printing:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1316
#, no-wrap
msgid ""
"```jldoctest polartype\n"
"julia> function Base.show_unquoted(io::IO, z::Polar, ::Int, precedence::Int)\n"
"           if Base.operator_precedence(:*) <= precedence\n"
"               print(io, \"(\")\n"
"               show(io, z)\n"
"               print(io, \")\")\n"
"           else\n"
"               show(io, z)\n"
"           end\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1320
#, no-wrap
msgid ""
"julia> :($a^2)\n"
":((3.0 * exp(4.0im)) ^ 2)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1325
msgid ""
"The method defined above adds parentheses around the call to `show` when the "
"precedence of the calling operator is higher than or equal to the precedence "
"of multiplication.  This check allows expressions which parse correctly "
"without the parentheses (such as `:($a + 2)` and `:($a == 2)`) to omit them "
"when printing:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1329
#, no-wrap
msgid ""
"```jldoctest polartype\n"
"julia> :($a + 2)\n"
":(3.0 * exp(4.0im) + 2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1333
#, no-wrap
msgid ""
"julia> :($a == 2)\n"
":(3.0 * exp(4.0im) == 2)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1349
#, no-wrap
msgid ""
"In some cases, it is useful to adjust the behavior of `show` methods depending\n"
"on the context. This can be achieved via the [`IOContext`](@ref) type, which allows\n"
"passing contextual properties together with a wrapped IO stream.\n"
"For example, we can build a shorter representation in our `show` method\n"
"when the `:compact` property is set to `true`, falling back to the long\n"
"representation if the property is `false` or absent:\n"
"```jldoctest polartype\n"
"julia> function Base.show(io::IO, z::Polar)\n"
"           if get(io, :compact, false)\n"
"               print(io, z.r, \"ℯ\", z.Θ, \"im\")\n"
"           else\n"
"               print(io, z.r, \" * exp(\", z.Θ, \"im)\")\n"
"           end\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1356
#, no-wrap
msgid ""
"This new compact representation will be used when the passed IO stream is an `IOContext`\n"
"object with the `:compact` property set. In particular, this is the case when printing\n"
"arrays with multiple columns (where horizontal space is limited):\n"
"```jldoctest polartype\n"
"julia> show(IOContext(stdout, :compact=>true), Polar(3, 4.0))\n"
"3.0ℯ4.0im\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1361
#, no-wrap
msgid ""
"julia> [Polar(3, 4.0) Polar(4.0,5.3)]\n"
"1×2 Array{Polar{Float64},2}:\n"
" 3.0ℯ4.0im  4.0ℯ5.3im\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1364
msgid ""
"See the [`IOContext`](@ref) documentation for a list of common properties "
"which can be used to adjust printing."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/types.md:1365
#, no-wrap
msgid "\"Value types\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1371
msgid ""
"In Julia, you can't dispatch on a *value* such as `true` or `false`. "
"However, you can dispatch on parametric types, and Julia allows you to "
"include \"plain bits\" values (Types, Symbols, Integers, floating-point "
"numbers, tuples, etc.) as type parameters.  A common example is the "
"dimensionality parameter in `Array{T,N}`, where `T` is a type (e.g., "
"[`Float64`](@ref)) but `N` is just an `Int`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1376
msgid ""
"You can create your own custom types that take values as parameters, and use "
"them to control dispatch of custom types. By way of illustration of this "
"idea, let's introduce a parametric type, `Val{x}`, and a constructor `Val(x) "
"= Val{x}()`, which serves as a customary way to exploit this technique for "
"cases where you don't need a more elaborate hierarchy."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1378
msgid "[`Val`](@ref) is defined as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1382
#, no-wrap
msgid ""
"```jldoctest valtype\n"
"julia> struct Val{x}\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1386
#, no-wrap
msgid ""
"julia> Val(x) = Val{x}()\n"
"Val\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1390
#, no-wrap
msgid ""
"There is no more to the implementation of `Val` than this.  Some functions in Julia's standard\n"
"library accept `Val` instances as arguments, and you can also use it to write your own functions.\n"
" For example:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1394
#, no-wrap
msgid ""
"```jldoctest valtype\n"
"julia> firstlast(::Val{true}) = \"First\"\n"
"firstlast (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1397
#, no-wrap
msgid ""
"julia> firstlast(::Val{false}) = \"Last\"\n"
"firstlast (generic function with 2 methods)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1400
#, no-wrap
msgid ""
"julia> firstlast(Val(true))\n"
"\"First\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1404
#, no-wrap
msgid ""
"julia> firstlast(Val(false))\n"
"\"Last\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1407
msgid ""
"For consistency across Julia, the call site should always pass a "
"`Val`*instance* rather than using a *type*, i.e., use `foo(Val(:bar))` "
"rather than `foo(Val{:bar})`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1412
#, no-wrap
msgid ""
"It's worth noting that it's extremely easy to mis-use parametric \"value\" types, including `Val`;\n"
"in unfavorable cases, you can easily end up making the performance of your code much *worse*.\n"
" In particular, you would never want to write actual code as illustrated above.  For more information\n"
"about the proper (and improper) uses of `Val`, please read the more extensive discussion in [the performance tips](@ref man-performance-tips).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/types.md:1413
msgid ""
"[^1]: \"Small\" is defined by the `MAX_UNION_SPLITTING` constant, which is "
"currently set to 4."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/modules.md:1
#, no-wrap
msgid "[Modules](@id modules)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:8
msgid ""
"Modules in Julia are separate variable workspaces, i.e. they introduce a new "
"global scope. They are delimited syntactically, inside `module Name ... "
"end`. Modules allow you to create top-level definitions (aka global "
"variables) without worrying about name conflicts when your code is used "
"together with somebody else's. Within a module, you can control which names "
"from other modules are visible (via importing), and specify which of your "
"names are intended to be public (via exporting)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:11
msgid ""
"The following example demonstrates the major features of modules. It is not "
"meant to be run, but is shown for illustrative purposes:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:15
msgid "```julia module MyModule using Lib"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:17
msgid "using BigLib: thing1, thing2"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:19
msgid "import Base.show"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:21
msgid "export MyType, foo"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:25
#, no-wrap
msgid ""
"struct MyType\n"
"    x\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:28
msgid "bar(x) = 2x foo(a::MyType) = bar(a.x) + 1"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:32
msgid "show(io::IO, a::MyType) = print(io, \"MyType $(a.x)\")  end ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:35
msgid ""
"Note that the style is not to indent the body of the module, since that "
"would typically lead to whole files being indented."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:38
msgid ""
"This module defines a type `MyType`, and two functions. Function `foo` and "
"type `MyType` are exported, and so will be available for importing into "
"other modules.  Function `bar` is private to `MyModule`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:44
msgid ""
"The statement `using Lib` means that a module called `Lib` will be available "
"for resolving names as needed. When a global variable is encountered that "
"has no definition in the current module, the system will search for it among "
"variables exported by `Lib` and import it if it is found there.  This means "
"that all uses of that global within the current module will resolve to the "
"definition of that variable in `Lib`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:48
msgid ""
"The statement `using BigLib: thing1, thing2` brings just the identifiers "
"`thing1` and `thing2` into scope from module `BigLib`. If these names refer "
"to functions, adding methods to them will not be allowed (you may only \"use"
"\" them, not extend them)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:52
msgid ""
"The `import` keyword supports the same syntax as `using`, but only operates "
"on a single name at a time. It does not add modules to be searched the way "
"`using` does. `import` also differs from `using` in that functions imported "
"using `import` can be extended with new methods."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:55
msgid ""
"In `MyModule` above we wanted to add a method to the standard `show` "
"function, so we had to write `import Base.show`. Functions whose names are "
"only visible via `using` cannot be extended."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:59
msgid ""
"Once a variable is made visible via `using` or `import`, a module may not "
"create its own variable with the same name. Imported variables are read-"
"only; assigning to a global variable always affects a variable owned by the "
"current module, or else raises an error."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/modules.md:60
#, no-wrap
msgid "Summary of module usage"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:64
msgid ""
"To load a module, two main keywords can be used: `using` and `import`. To "
"understand their differences, consider the following example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:67
msgid "```julia module MyModule"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:69
msgid "export x, y"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:73
msgid "x() = \"x\" y() = \"y\" p() = \"p\""
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:80
msgid ""
"In this module we export the `x` and `y` functions (with the keyword "
"`export`), and also have the non-exported function `p`. There are several "
"different ways to load the Module and its inner functions into the current "
"workspace:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:88
#, no-wrap
msgid ""
"| Import Command                  | What is brought into scope                                                      | Available for method extension              |\n"
"|:------------------------------- |:------------------------------------------------------------------------------- |:------------------------------------------- |\n"
"| `using MyModule`                | All `export`ed names (`x` and `y`), `MyModule.x`, `MyModule.y` and `MyModule.p` | `MyModule.x`, `MyModule.y` and `MyModule.p` |\n"
"| `using MyModule: x, p`          | `x` and `p`                                                                     |                                             |\n"
"| `import MyModule`               | `MyModule.x`, `MyModule.y` and `MyModule.p`                                     | `MyModule.x`, `MyModule.y` and `MyModule.p` |\n"
"| `import MyModule.x, MyModule.p` | `x` and `p`                                                                     | `x` and `p`                                 |\n"
"| `import MyModule: x, p`         | `x` and `p`                                                                     | `x` and `p`                                 |\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/modules.md:89
#, no-wrap
msgid "Modules and files"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:93
msgid ""
"Files and file names are mostly unrelated to modules; modules are associated "
"only with module expressions. One can have multiple files per module, and "
"multiple modules per file:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:96
msgid "```julia module Foo"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:99
msgid "include(\"file1.jl\")  include(\"file2.jl\")"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:106
msgid ""
"Including the same code in different modules provides mixin-like behavior. "
"One could use this to run the same code with different base definitions, for "
"example testing code by running it with \"safe\" versions of some operators:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:111
msgid "```julia module Normal include(\"mycode.jl\")  end"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:117
msgid ""
"module Testing include(\"safe_operators.jl\")  include(\"mycode.jl\")  end "
"```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/modules.md:118
#, no-wrap
msgid "Standard modules"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:121
msgid "There are three important standard modules: Main, Core, and Base."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:124
msgid ""
"Main is the top-level module, and Julia starts with Main set as the current "
"module.  Variables defined at the prompt go in Main, and `varinfo()` lists "
"variables in Main."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:128
msgid ""
"Core contains all identifiers considered \"built in\" to the language, i.e. "
"part of the core language and not libraries. Every module implicitly "
"specifies `using Core`, since you can't do anything without those "
"definitions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:131
msgid ""
"Base is a module that contains basic functionality (the contents of base/). "
"All modules implicitly contain `using Base`, since this is needed in the "
"vast majority of cases."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/modules.md:132
#, no-wrap
msgid "Default top-level definitions and bare modules"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:137
msgid ""
"In addition to `using Base`, modules also automatically contain definitions "
"of the `eval` and `include` functions, which evaluate expressions/files "
"within the global scope of that module."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:141
msgid ""
"If these default definitions are not wanted, modules can be defined using "
"the keyword `baremodule` instead (note: `Core` is still imported, as per "
"above). In terms of `baremodule`, a standard `module` looks like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:144
msgid "``` baremodule Mod"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:146
msgid "using Base"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:149
msgid "eval(x) = Core.eval(Mod, x)  include(p) = Base.include(Mod, p)"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/modules.md:155
#, no-wrap
msgid "Relative and absolute module paths"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:160
msgid ""
"Given the statement `using Foo`, the system consults an internal table of "
"top-level modules to look for one named `Foo`. If the module does not exist, "
"the system attempts to `require(:Foo)`, which typically results in loading "
"code from an installed package."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:165
msgid ""
"However, some modules contain submodules, which means you sometimes need to "
"access a non-top-level module. There are two ways to do this. The first is "
"to use an absolute path, for example `using Base.Sort`. The second is to use "
"a relative path, which makes it easier to import submodules of the current "
"module or any of its enclosing modules:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:168
msgid "``` module Parent"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:172
msgid "module Utils ...  end"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:174
msgid "using .Utils"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:178
msgid "...  end ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:183
msgid ""
"Here module `Parent` contains a submodule `Utils`, and code in `Parent` "
"wants the contents of `Utils` to be visible. This is done by starting the "
"`using` path with a period. Adding more leading periods moves up additional "
"levels in the module hierarchy. For example `using ..Utils` would look for "
"`Utils` in `Parent`'s enclosing module rather than in `Parent` itself."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:185
msgid ""
"Note that relative-import qualifiers are only valid in `using` and `import` "
"statements."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/modules.md:186
#, no-wrap
msgid "Module file paths"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:190
msgid ""
"The global variable [`LOAD_PATH`](@ref) contains the directories Julia "
"searches for modules when calling `require`. It can be extended using [`push!"
"`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:194
msgid "```julia push!(LOAD_PATH, \"/Path/To/My/Module/\")  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:198
msgid ""
"Putting this statement in the file `~/.julia/config/startup.jl` will extend "
"[`LOAD_PATH`](@ref) on every Julia startup. Alternatively, the module load "
"path can be extended by defining the environment variable `JULIA_LOAD_PATH`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/modules.md:199
#, no-wrap
msgid "Namespace miscellanea"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:207
msgid ""
"If a name is qualified (e.g. `Base.sin`), then it can be accessed even if it "
"is not exported.  This is often useful when debugging. It can also have "
"methods added to it by using the qualified name as the function name. "
"However, due to syntactic ambiguities that arise, if you wish to add methods "
"to a function in a different module whose name contains only symbols, such "
"as an operator, `Base.+` for example, you must use `Base.:+` to refer to it. "
"If the operator is more than one character in length you must surround it in "
"brackets, such as: `Base.:(==)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:210
msgid ""
"Macro names are written with `@` in import and export statements, e.g. "
"`import Mod.@mac`. Macros in other modules can be invoked as `Mod.@mac` or "
"`@Mod.mac`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:213
msgid ""
"The syntax `M.x = y` does not work to assign a global in another module; "
"global assignment is always module-local."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:216
msgid ""
"A variable name can be \"reserved\" without assigning to it by declaring it "
"as `global x`.  This prevents name conflicts for globals initialized after "
"load time."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/modules.md:217
#, no-wrap
msgid "Module initialization and precompilation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:222
msgid ""
"Large modules can take several seconds to load because executing all of the "
"statements in a module often involves compiling a large amount of code.  "
"Julia creates precompiled caches of the module to reduce this time."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:230
msgid ""
"The incremental precompiled module file are created and used automatically "
"when using `import` or `using` to load a module.  This will cause it to be "
"automatically compiled the first time it is imported. Alternatively, you can "
"manually call `Base.compilecache(modulename)`. The resulting cache files "
"will be stored in `DEPOT_PATH[1]/compiled/`. Subsequently, the module is "
"automatically recompiled upon `using` or `import` whenever any of its "
"dependencies change; dependencies are modules it imports, the Julia build, "
"files it includes, or explicit dependencies declared by "
"`include_dependency(path)` in the module file(s)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:239
msgid ""
"For file dependencies, a change is determined by examining whether the "
"modification time (mtime)  of each file loaded by `include` or added "
"explicitly by `include_dependency` is unchanged, or equal to the "
"modification time truncated to the nearest second (to accommodate systems "
"that can't copy mtime with sub-second accuracy). It also takes into account "
"whether the path to the file chosen by the search logic in `require` matches "
"the path that had created the precompile file. It also takes into account "
"the set of dependencies already loaded into the current process and won't "
"recompile those modules, even if their files change or disappear, in order "
"to avoid creating incompatibilities between the running system and the "
"precompile cache."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:246
msgid ""
"If you know that a module is *not* safe to precompile your module (for "
"example, for one of the reasons described below), you should put "
"`__precompile__(false)` in the module file (typically placed at the top).  "
"This will cause `Base.compilecache` to throw an error, and will cause "
"`using` / `import` to load it directly into the current process and skip the "
"precompile and caching.  This also thereby prevents the module from being "
"imported by any other precompiled module."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:260
msgid ""
"You may need to be aware of certain behaviors inherent in the creation of "
"incremental shared libraries which may require care when writing your "
"module. For example, external state is not preserved.  To accommodate this, "
"explicitly separate any initialization steps that must occur at *runtime* "
"from steps that can occur at *compile time*.  For this purpose, Julia allows "
"you to define an `__init__()` function in your module that executes any "
"initialization steps that must occur at runtime.  This function will not be "
"called during compilation (`--output-*`).  Effectively, you can assume it "
"will be run exactly once in the lifetime of the code.  You may, of course, "
"call it manually if necessary, but the default is to assume this function "
"deals with computing state for the local machine, which does not need to be "
"– or even should not be – captured in the compiled image. It will be called "
"after the module is loaded into a process, including if it is being loaded "
"into an incremental compile (`--output-incremental=yes`), but not if it is "
"being loaded into a full-compilation process."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:267
msgid ""
"In particular, if you define a `function __init__()` in a module, then Julia "
"will call `__init__()` immediately *after* the module is loaded (e.g., by "
"`import`, `using`, or `require`) at runtime for the *first* time (i.e., "
"`__init__` is only called once, and only after all statements in the module "
"have been executed). Because it is called after the module is fully "
"imported, any submodules or other imported modules have their `__init__` "
"functions called *before* the `__init__` of the enclosing module."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:275
msgid ""
"Two typical uses of `__init__` are calling runtime initialization functions "
"of external C libraries and initializing global constants that involve "
"pointers returned by external libraries.  For example, suppose that we are "
"calling a C library `libfoo` that requires us to call a `foo_init()` "
"initialization function at runtime. Suppose that we also want to define a "
"global constant `foo_data_ptr` that holds the return value of a `void "
"*foo_data()` function defined by `libfoo` -- this constant must be "
"initialized at runtime (not at compile time) because the pointer address "
"will change from run to run.  You could accomplish this by defining the "
"following `__init__` function in your module:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:284
#, no-wrap
msgid ""
"```julia\n"
"const foo_data_ptr = Ref{Ptr{Cvoid}}(0)\n"
"function __init__()\n"
"    ccall((:foo_init, :libfoo), Cvoid, ())\n"
"    foo_data_ptr[] = ccall((:foo_data, :libfoo), Ptr{Cvoid}, ())\n"
"    nothing\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:290
msgid ""
"Notice that it is perfectly possible to define a global inside a function "
"like `__init__`; this is one of the advantages of using a dynamic language. "
"But by making it a constant at global scope, we can ensure that the type is "
"known to the compiler and allow it to generate better optimized code. "
"Obviously, any other globals in your module that depends on `foo_data_ptr` "
"would also have to be initialized in `__init__`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:297
msgid ""
"Constants involving most Julia objects that are not produced by `ccall` do "
"not need to be placed in `__init__`: their definitions can be precompiled "
"and loaded from the cached module image. This includes complicated heap-"
"allocated objects like arrays. However, any routine that returns a raw "
"pointer value must be called at runtime for precompilation to work (Ptr "
"objects will turn into null pointers unless they are hidden inside an isbits "
"object). This includes the return values of the Julia functions `cfunction` "
"and `pointer`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:308
msgid ""
"Dictionary and set types, or in general anything that depends on the output "
"of a `hash(key)` method, are a trickier case.  In the common case where the "
"keys are numbers, strings, symbols, ranges, `Expr`, or compositions of these "
"types (via arrays, tuples, sets, pairs, etc.) they are safe to precompile.  "
"However, for a few other key types, such as `Function` or `DataType` and "
"generic user-defined types where you haven't defined a `hash` method, the "
"fallback `hash` method depends on the memory address of the object (via its "
"`objectid`) and hence may change from run to run.  If you have one of these "
"key types, or if you aren't sure, to be safe you can initialize this "
"dictionary from within your `__init__` function. Alternatively, you can use "
"the `IdDict` dictionary type, which is specially handled by precompilation "
"so that it is safe to initialize at compile-time."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:313
msgid ""
"When using precompilation, it is important to keep a clear sense of the "
"distinction between the compilation phase and the execution phase. In this "
"mode, it will often be much more clearly apparent that Julia is a compiler "
"which allows execution of arbitrary Julia code, not a standalone interpreter "
"that also generates compiled code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:315
msgid "Other known potential failure scenarios include:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/modules.md:318
msgid ""
"Global counters (for example, for attempting to uniquely identify objects) "
"Consider the following code snippet:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:327
#, no-wrap
msgid ""
"   ```julia\n"
"   mutable struct UniquedById\n"
"       myid::Int\n"
"       let counter = 0\n"
"           UniquedById() = new(counter += 1)\n"
"       end\n"
"   end\n"
"   ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:331
#, no-wrap
msgid ""
"   while the intent of this code was to give every instance a unique id, the counter value is recorded\n"
"   at the end of compilation. All subsequent usages of this incrementally compiled module will start\n"
"   from that same counter value.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:334
#, no-wrap
msgid ""
"   Note that `objectid` (which works by hashing the memory pointer) has similar issues (see notes\n"
"   on `Dict` usage below).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:344
#, no-wrap
msgid ""
"   One alternative is to use a macro to capture [`@__MODULE__`](@ref) and store it alone with the current `counter` value,\n"
"   however, it may be better to redesign the code to not depend on this global state.\n"
"2. Associative collections (such as `Dict` and `Set`) need to be re-hashed in `__init__`. (In the\n"
"   future, a mechanism may be provided to register an initializer function.)\n"
"3. Depending on compile-time side-effects persisting through load-time. Example include: modifying\n"
"   arrays or other variables in other Julia modules; maintaining handles to open files or devices;\n"
"   storing pointers to other system resources (including memory);\n"
"4. Creating accidental \"copies\" of global state from another module, by referencing it directly instead\n"
"   of via its lookup path. For example, (in global scope):\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:352
#, no-wrap
msgid ""
"   ```julia\n"
"   #mystdout = Base.stdout #= will not work correctly, since this will copy Base.stdout into this module =#\n"
"   # instead use accessor functions:\n"
"   getstdout() = Base.stdout #= best option =#\n"
"   # or move the assignment into the runtime:\n"
"   __init__() = global mystdout = Base.stdout #= also works =#\n"
"   ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:355
msgid ""
"Several additional restrictions are placed on the operations that can be "
"done while precompiling code to help the user avoid other wrong-behavior "
"situations:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/modules.md:361
msgid ""
"Calling [`eval`](@ref) to cause a side-effect in another module. This will "
"also cause a warning to be emitted when the incremental precompile flag is "
"set."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/modules.md:361
msgid ""
"`global const` statements from local scope after `__init__()` has been "
"started (see issue #12010 for plans to add an error for this)"
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/modules.md:361
msgid ""
"Replacing a module is a runtime error while doing an incremental precompile."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:363
msgid "A few other points to be aware of:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/modules.md:379
msgid ""
"No code reload / cache invalidation is performed after changes are made to "
"the source files themselves, (including by [`Pkg.update`], and no cleanup is "
"done after [`Pkg.rm`]"
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/modules.md:379
msgid ""
"The memory sharing behavior of a reshaped array is disregarded by "
"precompilation (each view gets its own copy)"
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/modules.md:379
msgid ""
"Expecting the filesystem to be unchanged between compile-time and runtime e."
"g. [`@__FILE__`](@ref)/`source_path()` to find resources at runtime, or the "
"BinDeps `@checked_lib` macro. Sometimes this is unavoidable.  However, when "
"possible, it can be good practice to copy resources into the module at "
"compile-time so they won't need to be found at runtime."
msgstr ""

#. type: Bullet: '4. '
#: ext/julia/doc/src/manual/modules.md:379
msgid ""
"`WeakRef` objects and finalizers are not currently handled properly by the "
"serializer (this will be fixed in an upcoming release)."
msgstr ""

#. type: Bullet: '5. '
#: ext/julia/doc/src/manual/modules.md:379
msgid ""
"It is usually best to avoid capturing references to instances of internal "
"metadata objects such as `Method`, `MethodInstance`, `MethodTable`, "
"`TypeMapLevel`, `TypeMapEntry` and fields of those objects, as this can "
"confuse the serializer and may not lead to the outcome you desire. It is not "
"necessarily an error to do this, but you simply need to be prepared that the "
"system will try to copy some of these and to create a single unique instance "
"of others."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/modules.md:385
msgid ""
"It is sometimes helpful during module development to turn off incremental "
"precompilation. The command line flag `--compiled-modules={yes|no}` enables "
"you to toggle module precompilation on and off. When Julia is started with "
"`--compiled-modules=no` the serialized modules in the compile cache are "
"ignored when loading modules and module dependencies. `Base.compilecache` "
"can still be called manually. The state of this command line flag is passed "
"to `Pkg.build` to disable automatic precompilation triggering when "
"installing, updating, and explicitly building packages."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/arrays.md:1
#, no-wrap
msgid "[Multi-dimensional Arrays](@id man-multi-dim-arrays)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:10
msgid ""
"Julia, like most technical computing languages, provides a first-class array "
"implementation. Most technical computing languages pay a lot of attention to "
"their array implementation at the expense of other containers. Julia does "
"not treat arrays in any special way. The array library is implemented almost "
"completely in Julia itself, and derives its performance from the compiler, "
"just like any other code written in Julia. As such, it's also possible to "
"define custom array types by inheriting from [`AbstractArray`](@ref). See "
"the [manual section on the AbstractArray interface](@ref man-interface-"
"array) for more details on implementing a custom array type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:14
msgid ""
"An array is a collection of objects stored in a multi-dimensional grid. In "
"the most general case, an array may contain objects of type [`Any`](@ref). "
"For most computational purposes, arrays should contain objects of a more "
"specific type, such as [`Float64`](@ref) or [`Int32`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:19
msgid ""
"In general, unlike many other technical computing languages, Julia does not "
"expect programs to be written in a vectorized style for performance. Julia's "
"compiler uses type inference and generates optimized code for scalar array "
"indexing, allowing programs to be written in a style that is convenient and "
"readable, without sacrificing performance, and using less memory at times."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:31
msgid ""
"In Julia, all arguments to functions are [passed by sharing](https://en."
"wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing)  (i.e. by pointers). "
"Some technical computing languages pass arrays by value, and while this "
"prevents accidental modification by callees of a value in the caller, it "
"makes avoiding unwanted copying of arrays difficult. By convention, a "
"function name ending with a `!` indicates that it will mutate or destroy the "
"value of one or more of its arguments (compare, for example, [`sort`](@ref) "
"and [`sort!`](@ref)).  Callees must make explicit copies to ensure that they "
"don't modify inputs that they don't intend to change. Many non- mutating "
"functions are implemented by calling a function of the same name with an "
"added `!` at the end on an explicit copy of the input, and returning that "
"copy."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:32
#, no-wrap
msgid "Basic Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:46
#, no-wrap
msgid ""
"| Function               | Description                                                                      |\n"
"|:---------------------- |:-------------------------------------------------------------------------------- |\n"
"| [`eltype(A)`](@ref)    | the type of the elements contained in `A`                                        |\n"
"| [`length(A)`](@ref)    | the number of elements in `A`                                                    |\n"
"| [`ndims(A)`](@ref)     | the number of dimensions of `A`                                                  |\n"
"| [`size(A)`](@ref)      | a tuple containing the dimensions of `A`                                         |\n"
"| [`size(A,n)`](@ref)    | the size of `A` along dimension `n`                                              |\n"
"| [`axes(A)`](@ref)      | a tuple containing the valid indices of `A`                                      |\n"
"| [`axes(A,n)`](@ref)    | a range expressing the valid indices along dimension `n`                         |\n"
"| [`eachindex(A)`](@ref) | an efficient iterator for visiting each position in `A`                          |\n"
"| [`stride(A,k)`](@ref)  | the stride (linear index distance between adjacent elements) along dimension `k` |\n"
"| [`strides(A)`](@ref)   | a tuple of the strides in each dimension                                         |\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:47
#, no-wrap
msgid "Construction and Initialization"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:54
msgid ""
"Many functions for constructing and initializing arrays are provided. In the "
"following list of such functions, calls with a `dims...` argument can either "
"take a single tuple of dimension sizes or a series of dimension sizes passed "
"as a variable number of arguments. Most of these functions also accept a "
"first input `T`, which is the element type of the array. If the type `T` is "
"omitted it will default to [`Float64`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:73
#, no-wrap
msgid ""
"| Function                           | Description                                                                                                                                                                                                                                  |\n"
"|:---------------------------------- |:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n"
"| [`Array{T}(undef, dims...)`](@ref)             | an uninitialized dense [`Array`](@ref)                                                                                                                                                                                                              |\n"
"| [`zeros(T, dims...)`](@ref)                    | an `Array` of all zeros                                                                                                                                                                                                                      |\n"
"| [`ones(T, dims...)`](@ref)                     | an `Array` of all ones                                                                                                                                                                                                                       |\n"
"| [`trues(dims...)`](@ref)                       | a [`BitArray`](@ref) with all values `true`                                                                                                                                                                                                  |\n"
"| [`falses(dims...)`](@ref)                      | a `BitArray` with all values `false`                                                                                                                                                                                                         |\n"
"| [`reshape(A, dims...)`](@ref)                  | an array containing the same data as `A`, but with different dimensions                                                                                                                                                                      |\n"
"| [`copy(A)`](@ref)                              | copy `A`                                                                                                                                                                                                                                     |\n"
"| [`deepcopy(A)`](@ref)                          | copy `A`, recursively copying its elements                                                                                                                                                                                                   |\n"
"| [`similar(A, T, dims...)`](@ref)               | an uninitialized array of the same type as `A` (dense, sparse, etc.), but with the specified element type and dimensions. The second and third arguments are both optional, defaulting to the element type and dimensions of `A` if omitted. |\n"
"| [`reinterpret(T, A)`](@ref)                    | an array with the same binary data as `A`, but with element type `T`                                                                                                                                                                         |\n"
"| [`rand(T, dims...)`](@ref)                     | an `Array` with random, iid [^1] and uniformly distributed values in the half-open interval ``[0, 1)``                                                                                                                                       |\n"
"| [`randn(T, dims...)`](@ref)                    | an `Array` with random, iid and standard normally distributed values                                                                                                                                                                         |\n"
"| [`Matrix{T}(I, m, n)`](@ref)                   | `m`-by-`n` identity matrix                                                                                                                                                                                                                   |\n"
"| [`range(start, stop=stop, length=n)`](@ref)    | range of `n` linearly spaced elements from `start` to `stop`                                                                                                                                                                                 |\n"
"| [`fill!(A, x)`](@ref)                          | fill the array `A` with the value `x`                                                                                                                                                                                                        |\n"
"| [`fill(x, dims...)`](@ref)                     | an `Array` filled with the value `x`                                                                                                                                                                                                         |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:75
msgid "[^1]: *iid*, independently and identically distributed."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:79
msgid ""
"The syntax `[A, B, C, ...]` constructs a 1-d array (i.e., a vector) of its "
"arguments. If all arguments have a common [promotion type](@ref conversion-"
"and-promotion) then they get converted to that type using [`convert`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:86
#, no-wrap
msgid ""
"To see the various ways we can pass dimensions to these constructors, consider the following examples:\n"
"```jldoctest\n"
"julia> zeros(Int8, 2, 3)\n"
"2×3 Array{Int8,2}:\n"
" 0  0  0\n"
" 0  0  0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:91
#, no-wrap
msgid ""
"julia> zeros(Int8, (2, 3))\n"
"2×3 Array{Int8,2}:\n"
" 0  0  0\n"
" 0  0  0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:98
#, no-wrap
msgid ""
"julia> zeros((2, 3))\n"
"2×3 Array{Float64,2}:\n"
" 0.0  0.0  0.0\n"
" 0.0  0.0  0.0\n"
"```\n"
"Here, `(2, 3)` is a [`Tuple`](@ref).\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:99
#, no-wrap
msgid "Concatenation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:102
msgid ""
"Arrays can be constructed and also concatenated using the following "
"functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:108
#, no-wrap
msgid ""
"| Function                    | Description                                     |\n"
"|:--------------------------- |:----------------------------------------------- |\n"
"| [`cat(A...; dims=k)`](@ref) | concatenate input arrays along dimension(s) `k` |\n"
"| [`vcat(A...)`](@ref)        | shorthand for `cat(A...; dims=1)`               |\n"
"| [`hcat(A...)`](@ref)        | shorthand for `cat(A...; dims=2)`               |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:116
#, no-wrap
msgid ""
"Scalar values passed to these functions are treated as 1-element arrays. For example,\n"
"```jldoctest\n"
"julia> vcat([1, 2], 3)\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:121
#, no-wrap
msgid ""
"julia> hcat([1 2], 3)\n"
"1×3 Array{Int64,2}:\n"
" 1  2  3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:123
msgid ""
"The concatenation functions are used so often that they have special syntax:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:129
#, no-wrap
msgid ""
"| Expression        | Calls             |\n"
"|:----------------- |:----------------- |\n"
"| `[A; B; C; ...]`  | [`vcat`](@ref)  |\n"
"| `[A B C ...]`     | [`hcat`](@ref)  |\n"
"| `[A B; C D; ...]` | [`hvcat`](@ref) |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:139
#, no-wrap
msgid ""
"[`hvcat`](@ref) concatenates in both dimension 1 (with semicolons) and dimension 2 (with spaces).\n"
"Consider these examples of this syntax:\n"
"```jldoctest\n"
"julia> [[1; 2]; [3, 4]]\n"
"4-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
" 4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:143
#, no-wrap
msgid ""
"julia> [[1 2] [3 4]]\n"
"1×4 Array{Int64,2}:\n"
" 1  2  3  4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:149
#, no-wrap
msgid ""
"julia> [[1 2]; [3 4]]\n"
"2×2 Array{Int64,2}:\n"
" 1  2\n"
" 3  4\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:150
#, no-wrap
msgid "Typed array initializers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:155
msgid ""
"An array with a specific element type can be constructed using the syntax "
"`T[A, B, C, ...]`. This will construct a 1-d array with element type `T`, "
"initialized to contain elements `A`, `B`, `C`, etc. For example, `Any[x, y, "
"z]` constructs a heterogeneous array that can contain any values."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:158
msgid ""
"Concatenation syntax can similarly be prefixed with a type to specify the "
"element type of the result."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:163
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> [[1 2] [3 4]]\n"
"1×4 Array{Int64,2}:\n"
" 1  2  3  4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:168
#, no-wrap
msgid ""
"julia> Int8[[1 2] [3 4]]\n"
"1×4 Array{Int8,2}:\n"
" 1  2  3  4\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:169
#, no-wrap
msgid "Comprehensions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:173
msgid ""
"Comprehensions provide a general and powerful way to construct arrays. "
"Comprehension syntax is similar to set construction notation in mathematics:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:177
msgid "``` A = [ F(x,y,...) for x=rx, y=ry, ... ] ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:183
msgid ""
"The meaning of this form is that `F(x,y,...)` is evaluated with the "
"variables `x`, `y`, etc. taking on each value in their given list of values. "
"Values can be specified as any iterable object, but will commonly be ranges "
"like `1:n` or `2:(n-1)`, or explicit arrays of values like `[1.2, 3.4, "
"5.7]`.  The result is an N-d dense array with dimensions that are the "
"concatenation of the dimensions of the variable ranges `rx`, `ry`, etc. and "
"each `F(x,y,...)` evaluation returns a scalar."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:186
msgid ""
"The following example computes a weighted average of the current element and "
"its left and right neighbor along a 1-d grid. :"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:198
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> x = rand(8)\n"
"8-element Array{Float64,1}:\n"
" 0.843025\n"
" 0.869052\n"
" 0.365105\n"
" 0.699456\n"
" 0.977653\n"
" 0.994953\n"
" 0.41084\n"
" 0.809411\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:208
#, no-wrap
msgid ""
"julia> [ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]\n"
"6-element Array{Float64,1}:\n"
" 0.736559\n"
" 0.57468\n"
" 0.685417\n"
" 0.912429\n"
" 0.8446\n"
" 0.656511\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:212
msgid ""
"The resulting array type depends on the types of the computed elements. In "
"order to control the type explicitly, a type can be prepended to the "
"comprehension. For example, we could have requested the result in single "
"precision by writing:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:216
msgid ""
"```julia Float32[ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ] "
"```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:217
#, no-wrap
msgid "Generator Expressions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:223
msgid ""
"Comprehensions can also be written without the enclosing square brackets, "
"producing an object known as a generator. This object can be iterated to "
"produce values on demand, instead of allocating an array and storing them in "
"advance (see [Iteration](@ref)). For example, the following expression sums "
"a series without allocating memory:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:228
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sum(1/n^2 for n=1:1000)\n"
"1.6439345666815615\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:231
msgid ""
"When writing a generator expression with multiple dimensions inside an "
"argument list, parentheses are needed to separate the generator from "
"subsequent arguments:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:236
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> map(tuple, 1/(i+j) for i=1:2, j=1:2, [1:4;])\n"
"ERROR: syntax: invalid iteration specification\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:239
msgid ""
"All comma-separated expressions after `for` are interpreted as ranges. "
"Adding parentheses lets us add a third argument to [`map`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:246
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> map(tuple, (1/(i+j) for i=1:2, j=1:2), [1 3; 2 4])\n"
"2×2 Array{Tuple{Float64,Int64},2}:\n"
" (0.5, 1)       (0.333333, 3)\n"
" (0.333333, 2)  (0.25, 4)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:253
msgid ""
"Generators are implemented via inner functions. Just like inner functions "
"used elsewhere in the language, variables from the enclosing scope can be "
"\"captured\" in the inner function.  For example, `sum(p[i] - q[i] for i=1:"
"n)` captures the three variables `p`, `q` and `n` from the enclosing scope.  "
"Captured variables can present performance challenges; see [performance tips]"
"(@ref man-performance-tips)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:257
msgid ""
"Ranges in generators and comprehensions can depend on previous ranges by "
"writing multiple `for` keywords:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:268
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> [(i,j) for i=1:3 for j=1:i]\n"
"6-element Array{Tuple{Int64,Int64},1}:\n"
" (1, 1)\n"
" (2, 1)\n"
" (2, 2)\n"
" (3, 1)\n"
" (3, 2)\n"
" (3, 3)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:270
msgid "In such cases, the result is always 1-d."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:272
msgid "Generated values can be filtered using the `if` keyword:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:279
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> [(i,j) for i=1:3 for j=1:i if i+j == 4]\n"
"2-element Array{Tuple{Int64,Int64},1}:\n"
" (2, 2)\n"
" (3, 1)\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:280
#, no-wrap
msgid "[Indexing](@id man-array-indexing)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:283
msgid "The general syntax for indexing into an n-dimensional array `A` is:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:287
msgid "``` X = A[I_1, I_2, ..., I_n] ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:293
#: ext/julia/doc/src/manual/arrays.md:413
msgid ""
"where each `I_k` may be a scalar integer, an array of integers, or any other "
"[supported index](@ref man-supported-index-types). This includes [`Colon`]"
"(@ref) (`:`) to select all indices within the entire dimension, ranges of "
"the form `a:c` or `a:b:c` to select contiguous or strided subsections, and "
"arrays of booleans to select elements at their `true` indices."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:297
msgid ""
"If all the indices are scalars, then the result `X` is a single element from "
"the array `A`. Otherwise, `X` is an array with the same number of dimensions "
"as the sum of the dimensionalities of all the indices."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:300
msgid ""
"If all indices `I_k` are vectors, for example, then the shape of `X` would "
"be `(length(I_1), length(I_2), ..., length(I_n))`, with location `i_1, "
"i_2, ..., i_n` of `X` containing the value `A[I_1[i_1], I_2[i_2], ..., "
"I_n[i_n]]`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:302
#: ext/julia/doc/src/manual/arrays.md:352
#: ext/julia/doc/src/manual/arrays.md:380
#: ext/julia/doc/src/manual/arrays.md:442
msgid "Example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:309
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> A = reshape(collect(1:16), (2, 2, 2, 2))\n"
"2×2×2×2 Array{Int64,4}:\n"
"[:, :, 1, 1] =\n"
" 1  3\n"
" 2  4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:313
#, no-wrap
msgid ""
"[:, :, 2, 1] =\n"
" 5  7\n"
" 6  8\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:317
#, no-wrap
msgid ""
"[:, :, 1, 2] =\n"
"  9  11\n"
" 10  12\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:321
#, no-wrap
msgid ""
"[:, :, 2, 2] =\n"
" 13  15\n"
" 14  16\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:324
#, no-wrap
msgid ""
"julia> A[1, 2, 1, 1] # all scalar indices\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:330
#, no-wrap
msgid ""
"julia> A[[1, 2], [1], [1, 2], [1]] # all vector indices\n"
"2×1×2×1 Array{Int64,4}:\n"
"[:, :, 1, 1] =\n"
" 1\n"
" 2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:334
#, no-wrap
msgid ""
"[:, :, 2, 1] =\n"
" 5\n"
" 6\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:340
#, no-wrap
msgid ""
"julia> A[[1, 2], [1], [1, 2], 1] # a mix of index types\n"
"2×1×2 Array{Int64,3}:\n"
"[:, :, 1] =\n"
" 1\n"
" 2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:345
#, no-wrap
msgid ""
"[:, :, 2] =\n"
" 5\n"
" 6\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:347
msgid ""
"Note how the size of the resulting array is different in the last two cases."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:350
msgid ""
"If `I_1` is changed to a two-dimensional matrix, then `X` becomes an `n+1`-"
"dimensional array of shape `(size(I_1, 1), size(I_1, 2), length(I_2), ..., "
"length(I_n))`. The matrix adds a dimension."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:355
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> A = reshape(collect(1:16), (2, 2, 2, 2));\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:360
#, no-wrap
msgid ""
"julia> A[[1 2; 1 2]]\n"
"2×2 Array{Int64,2}:\n"
" 1  2\n"
" 1  2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:366
#, no-wrap
msgid ""
"julia> A[[1 2; 1 2], 1, 2, 1]\n"
"2×2 Array{Int64,2}:\n"
" 5  6\n"
" 5  6\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:370
msgid ""
"The location `i_1, i_2, i_3, ..., i_{n+1}` contains the value at `A[I_1[i_1, "
"i_2], I_2[i_3], ..., I_n[i_{n+1}]]`.  All dimensions indexed with scalars "
"are dropped. For example, if `J` is an array of indices, then the result of "
"`A[2, J, 3]` is an array with size `size(J)`. Its `j`th element is populated "
"by `A[2, J[j], 3]`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:374
msgid ""
"As a special part of this syntax, the `end` keyword may be used to represent "
"the last index of each dimension within the indexing brackets, as determined "
"by the size of the innermost array being indexed. Indexing syntax without "
"the `end` keyword is equivalent to a call to [`getindex`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:378
msgid "``` X = getindex(A, I_1, I_2, ..., I_n)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:388
#: ext/julia/doc/src/manual/arrays.md:618
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = reshape(1:16, 4, 4)\n"
"4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:\n"
" 1  5   9  13\n"
" 2  6  10  14\n"
" 3  7  11  15\n"
" 4  8  12  16\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:393
#, no-wrap
msgid ""
"julia> x[2:3, 2:end-1]\n"
"2×2 Array{Int64,2}:\n"
" 6  10\n"
" 7  11\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:399
#, no-wrap
msgid ""
"julia> x[1, [2 3; 4 1]]\n"
"2×2 Array{Int64,2}:\n"
"  5  9\n"
" 13  1\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:400
#, no-wrap
msgid "Assignment"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:403
msgid ""
"The general syntax for assigning values in an n-dimensional array `A` is:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:407
msgid "``` A[I_1, I_2, ..., I_n] = X ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:417
msgid ""
"If all indices `I_k` are integers, then the value in location `I_1, "
"I_2, ..., I_n` of `A` is overwritten with the value of `X`, [`convert`]"
"(@ref)ing to the [`eltype`](@ref) of `A` if necessary."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:425
msgid ""
"If any index `I_k` selects more than one location, then the right hand side "
"`X` must be an array with the same shape as the result of indexing `A[I_1, "
"I_2, ..., I_n]` or a vector with the same number of elements. The value in "
"location `I_1[i_1], I_2[i_2], ..., I_n[i_n]` of `A` is overwritten with the "
"value `X[I_1, I_2, ..., I_n]`, converting if necessary. The element-wise "
"assignment operator `.=` may be used to [broadcast](@ref Broadcasting) `X` "
"across the selected locations:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:430
msgid "``` A[I_1, I_2, ..., I_n] .= X ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:436
msgid ""
"Just as in [Indexing](@ref man-array-indexing), the `end` keyword may be "
"used to represent the last index of each dimension within the indexing "
"brackets, as determined by the size of the array being assigned into. "
"Indexed assignment syntax without the `end` keyword is equivalent to a call "
"to [`setindex!`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:440
msgid "``` setindex!(A, X, I_1, I_2, ..., I_n)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:449
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = collect(reshape(1:9, 3, 3))\n"
"3×3 Array{Int64,2}:\n"
" 1  4  7\n"
" 2  5  8\n"
" 3  6  9\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:451
#, no-wrap
msgid "julia> x[3, 3] = -9;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:453
#, no-wrap
msgid "julia> x[1:2, 1:2] = [-1 -4; -2 -5];\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:460
#, no-wrap
msgid ""
"julia> x\n"
"3×3 Array{Int64,2}:\n"
" -1  -4   7\n"
" -2  -5   8\n"
"  3   6  -9\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:461
#, no-wrap
msgid "[Supported index types](@id man-supported-index-types)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:466
msgid ""
"In the expression `A[I_1, I_2, ..., I_n]`, each `I_k` may be a scalar index, "
"an array of scalar indices, or an object that represents an array of scalar "
"indices and can be converted to such by [`to_indices`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:479
#, no-wrap
msgid ""
"1. A scalar index. By default this includes:\n"
"    * Non-boolean integers\n"
"    * [`CartesianIndex{N}`](@ref)s, which behave like an `N`-tuple of integers spanning multiple dimensions (see below for more details)\n"
"2. An array of scalar indices. This includes:\n"
"    * Vectors and multidimensional arrays of integers\n"
"    * Empty arrays like `[]`, which select no elements\n"
"    * Ranges like `a:c` or `a:b:c`, which select contiguous or strided subsections from `a` to `c` (inclusive)\n"
"    * Any custom array of scalar indices that is a subtype of `AbstractArray`\n"
"    * Arrays of `CartesianIndex{N}` (see below for more details)\n"
"3. An object that represents an array of scalar indices and can be converted to such by [`to_indices`](@ref). By default this includes:\n"
"    * [`Colon()`](@ref) (`:`), which represents all indices within an entire dimension or across the entire array\n"
"    * Arrays of booleans, which select elements at their `true` indices (see below for more details)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:487
#, no-wrap
msgid ""
"Some examples:\n"
"```jldoctest\n"
"julia> A = reshape(collect(1:2:18), (3, 3))\n"
"3×3 Array{Int64,2}:\n"
" 1   7  13\n"
" 3   9  15\n"
" 5  11  17\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:490
#, no-wrap
msgid ""
"julia> A[4]\n"
"7\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:496
#, no-wrap
msgid ""
"julia> A[[2, 5, 8]]\n"
"3-element Array{Int64,1}:\n"
"  3\n"
"  9\n"
" 15\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:501
#, no-wrap
msgid ""
"julia> A[[1 4; 3 8]]\n"
"2×2 Array{Int64,2}:\n"
" 1   7\n"
" 5  15\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:504
#, no-wrap
msgid ""
"julia> A[[]]\n"
"0-element Array{Int64,1}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:510
#, no-wrap
msgid ""
"julia> A[1:2:5]\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 5\n"
" 9\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:516
#, no-wrap
msgid ""
"julia> A[2, :]\n"
"3-element Array{Int64,1}:\n"
"  3\n"
"  9\n"
" 15\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:523
#, no-wrap
msgid ""
"julia> A[:, 3]\n"
"3-element Array{Int64,1}:\n"
" 13\n"
" 15\n"
" 17\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/arrays.md:524
#, no-wrap
msgid "Cartesian indices"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:528
msgid ""
"The special `CartesianIndex{N}` object represents a scalar index that "
"behaves like an `N`-tuple of integers spanning multiple dimensions.  For "
"example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:531
#, no-wrap
msgid ""
"```jldoctest cartesianindex\n"
"julia> A = reshape(1:32, 4, 4, 2);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:534
#, no-wrap
msgid ""
"julia> A[3, 2, 1]\n"
"7\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:538
#, no-wrap
msgid ""
"julia> A[CartesianIndex(3, 2, 1)] == A[3, 2, 1] == 7\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:546
msgid ""
"Considered alone, this may seem relatively trivial; `CartesianIndex` simply "
"gathers multiple integers together into one object that represents a single "
"multidimensional index. When combined with other indexing forms and "
"iterators that yield `CartesianIndex`es, however, this can produce very "
"elegant and efficient code. See [Iteration](@ref) below, and for some more "
"advanced examples, see [this blog post on multidimensional algorithms and "
"iteration](https://julialang.org/blog/2016/02/iteration)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:551
msgid ""
"Arrays of `CartesianIndex{N}` are also supported. They represent a "
"collection of scalar indices that each span `N` dimensions, enabling a form "
"of indexing that is sometimes referred to as pointwise indexing. For "
"example, it enables accessing the diagonal elements from the first \"page\" "
"of `A` from above:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:559
#, no-wrap
msgid ""
"```jldoctest cartesianindex\n"
"julia> page = A[:,:,1]\n"
"4×4 Array{Int64,2}:\n"
" 1  5   9  13\n"
" 2  6  10  14\n"
" 3  7  11  15\n"
" 4  8  12  16\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:570
#, no-wrap
msgid ""
"julia> page[[CartesianIndex(1,1),\n"
"             CartesianIndex(2,2),\n"
"             CartesianIndex(3,3),\n"
"             CartesianIndex(4,4)]]\n"
"4-element Array{Int64,1}:\n"
"  1\n"
"  6\n"
" 11\n"
" 16\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:575
msgid ""
"This can be expressed much more simply with [dot broadcasting](@ref man-"
"vectorized)  and by combining it with a normal integer index (instead of "
"extracting the first `page` from `A` as a separate step). It can even be "
"combined with a `:` to extract both diagonals from the two pages at the same "
"time:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:583
#, no-wrap
msgid ""
"```jldoctest cartesianindex\n"
"julia> A[CartesianIndex.(axes(A, 1), axes(A, 2)), 1]\n"
"4-element Array{Int64,1}:\n"
"  1\n"
"  6\n"
" 11\n"
" 16\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:591
#, no-wrap
msgid ""
"julia> A[CartesianIndex.(axes(A, 1), axes(A, 2)), :]\n"
"4×2 Array{Int64,2}:\n"
"  1  17\n"
"  6  22\n"
" 11  27\n"
" 16  32\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:593
#: ext/julia/doc/src/manual/unicode-input.md:11
msgid "!!! warning"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:597
#, no-wrap
msgid ""
"    `CartesianIndex` and arrays of `CartesianIndex` are not compatible with the\n"
"    `end` keyword to represent the last index of a dimension. Do not use `end`\n"
"    in indexing expressions that may contain either `CartesianIndex` or arrays thereof.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/arrays.md:598
#, no-wrap
msgid "Logical indexing"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:610
msgid ""
"Often referred to as logical indexing or indexing with a logical mask, "
"indexing by a boolean array selects elements at the indices where its values "
"are `true`.  Indexing by a boolean vector `B` is effectively the same as "
"indexing by the vector of integers that is returned by [`findall(B)`](@ref). "
"Similarly, indexing by a `N`-dimensional boolean array is effectively the "
"same as indexing by the vector of `CartesianIndex{N}`s where its values are "
"`true`. A logical index must be a vector of the same length as the dimension "
"it indexes into, or it must be the only index provided and match the size "
"and dimensionality of the array it indexes into. It is generally more "
"efficient to use boolean arrays as indices directly instead of first calling "
"[`findall`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:623
#, no-wrap
msgid ""
"julia> x[[false, true, true, false], :]\n"
"2×4 Array{Int64,2}:\n"
" 2  6  10  14\n"
" 3  7  11  15\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:630
#, no-wrap
msgid ""
"julia> mask = map(ispow2, x)\n"
"4×4 Array{Bool,2}:\n"
"  true  false  false  false\n"
"  true  false  false  false\n"
" false  false  false  false\n"
"  true   true  false   true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:639
#, no-wrap
msgid ""
"julia> x[mask]\n"
"5-element Array{Int64,1}:\n"
"  1\n"
"  2\n"
"  4\n"
"  8\n"
" 16\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/arrays.md:640
#, no-wrap
msgid "Number of indices"
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/manual/arrays.md:642
#, no-wrap
msgid "Cartesian indexing"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:648
msgid ""
"The ordinary way to index into an `N`-dimensional array is to use exactly "
"`N` indices; each index selects the position(s) in its particular dimension. "
"For example, in the three-dimensional array `A = rand(4, 3, 2)`, `A[2, 3, "
"1]` will select the number in the second row of the third column in the "
"first \"page\" of the array. This is often referred to as _cartesian "
"indexing_."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/arrays.md:649
#: ext/julia/doc/src/devdocs/subarrays.md:122
#, no-wrap
msgid "Linear indexing"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:656
msgid ""
"When exactly one index `i` is provided, that index no longer represents a "
"location in a particular dimension of the array. Instead, it selects the "
"`i`th element using the column-major iteration order that linearly spans the "
"entire array. This is known as _linear indexing_. It essentially treats the "
"array as though it had been reshaped into a one-dimensional vector with "
"[`vec`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:663
#, no-wrap
msgid ""
"```jldoctest linindexing\n"
"julia> A = [2 6; 4 7; 3 1]\n"
"3×2 Array{Int64,2}:\n"
" 2  6\n"
" 4  7\n"
" 3  1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:666
#, no-wrap
msgid ""
"julia> A[5]\n"
"7\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:670
#, no-wrap
msgid ""
"julia> vec(A)[5]\n"
"7\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:675
msgid ""
"A linear index into the array `A` can be converted to a `CartesianIndex` for "
"cartesian indexing with `CartesianIndices(A)[i]` (see [`CartesianIndices`]"
"(@ref)), and a set of `N` cartesian indices can be converted to a linear "
"index with `LinearIndices(A)[i_1, i_2, ..., i_N]` (see [`LinearIndices`]"
"(@ref))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:679
#, no-wrap
msgid ""
"```jldoctest linindexing\n"
"julia> CartesianIndices(A)[5]\n"
"CartesianIndex(2, 2)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:683
#, no-wrap
msgid ""
"julia> LinearIndices(A)[2, 2]\n"
"5\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:696
msgid ""
"It's important to note that there's a very large assymmetry in the "
"performance of these conversions. Converting a linear index to a set of "
"cartesian indices requires dividing and taking the remainder, whereas going "
"the other way is just multiplies and adds. In modern processors, integer "
"division can be 10-50 times slower than multiplication. While some arrays — "
"like [`Array`](@ref) itself — are implemented using a linear chunk of memory "
"and directly use a linear index in their implementations, other arrays — "
"like [`Diagonal`](@ref) — need the full set of cartesian indices to do their "
"lookup (see [`IndexStyle`](@ref) to introspect which is which). As such, "
"when iterating over an entire array, it's much better to iterate over "
"[`eachindex(A)`](@ref) instead of `1:length(A)`.  Not only will the former "
"be much faster in cases where `A` is `IndexCartesian`, but it will also "
"support OffsetArrays, too."
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/manual/arrays.md:697
#, no-wrap
msgid "Omitted and extra indices"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:701
msgid ""
"In addition to linear indexing, an `N`-dimensional array may be indexed with "
"fewer or more than `N` indices in certain situations."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:709
msgid ""
"Indices may be omitted if the trailing dimensions that are not indexed into "
"are all length one. In other words, trailing indices can be omitted only if "
"there is only one possible value that those omitted indices could be for an "
"in-bounds indexing expression. For example, a four-dimensional array with "
"size `(3, 4, 2, 1)` may be indexed with only three indices as the dimension "
"that gets skipped (the fourth dimension) has length one. Note that linear "
"indexing takes precedence over this rule."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:717
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> A = reshape(1:24, 3, 4, 2, 1)\n"
"3×4×2×1 reshape(::UnitRange{Int64}, 3, 4, 2, 1) with eltype Int64:\n"
"[:, :, 1, 1] =\n"
" 1  4  7  10\n"
" 2  5  8  11\n"
" 3  6  9  12\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:722
#, no-wrap
msgid ""
"[:, :, 2, 1] =\n"
" 13  16  19  22\n"
" 14  17  20  23\n"
" 15  18  21  24\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:725
#, no-wrap
msgid ""
"julia> A[1, 3, 2] # Omits the fourth dimension (length 1)\n"
"19\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:728
#, no-wrap
msgid ""
"julia> A[1, 3] # Attempts to omit dimensions 3 & 4 (lengths 2 and 1)\n"
"ERROR: BoundsError: attempt to access 3×4×2×1 reshape(::UnitRange{Int64}, 3, 4, 2, 1) with eltype Int64 at index [1, 3]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:732
#, no-wrap
msgid ""
"julia> A[19] # Linear indexing\n"
"19\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:736
msgid ""
"When omitting _all_ indices with `A[]`, this semantic provides a simple "
"idiom to retrieve the only element in an array and simultaneously ensure "
"that there was only one element."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:741
msgid ""
"Similarly, more than `N` indices may be provided if all the indices beyond "
"the dimensionality of the array are `1` (or more generally are the first and "
"only element of `axes(A, d)` where `d` is that particular dimension number). "
"This allows vectors to be indexed like one-column matrices, for example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:748
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> A = [8,6,7]\n"
"3-element Array{Int64,1}:\n"
" 8\n"
" 6\n"
" 7\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:752
#, no-wrap
msgid ""
"julia> A[2,1]\n"
"6\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:753
#, no-wrap
msgid "Iteration"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:756
msgid "The recommended ways to iterate over a whole array are"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:761
#, no-wrap
msgid ""
"```julia\n"
"for a in A\n"
"    # Do something with the element a\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:766
#, no-wrap
msgid ""
"for i in eachindex(A)\n"
"    # Do something with i and/or A[i]\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:770
msgid ""
"The first construct is used when you need the value, but not index, of each "
"element. In the second construct, `i` will be an `Int` if `A` is an array "
"type with fast linear indexing; otherwise, it will be a `CartesianIndex`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:773
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> A = rand(4,3);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:775
#, no-wrap
msgid "julia> B = view(A, 1:3, 2:3);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:786
#, no-wrap
msgid ""
"julia> for i in eachindex(B)\n"
"           @show i\n"
"       end\n"
"i = CartesianIndex(1, 1)\n"
"i = CartesianIndex(2, 1)\n"
"i = CartesianIndex(3, 1)\n"
"i = CartesianIndex(1, 2)\n"
"i = CartesianIndex(2, 2)\n"
"i = CartesianIndex(3, 2)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:789
msgid ""
"In contrast with `for i = 1:length(A)`, iterating with [`eachindex`](@ref) "
"provides an efficient way to iterate over any array type."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:790
#, no-wrap
msgid "Array traits"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:793
msgid ""
"If you write a custom [`AbstractArray`](@ref) type, you can specify that it "
"has fast linear indexing using"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:797
#, no-wrap
msgid ""
"```julia\n"
"Base.IndexStyle(::Type{<:MyArray}) = IndexLinear()\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:800
msgid ""
"This setting will cause `eachindex` iteration over a `MyArray` to use "
"integers. If you don't specify this trait, the default value "
"`IndexCartesian()` is used."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:801
#, no-wrap
msgid "Array and Vectorized Operators and Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:804
msgid "The following operators are supported for arrays:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/arrays.md:808
msgid "Unary arithmetic -- `-`, `+`"
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/arrays.md:808
msgid "Binary arithmetic -- `-`, `+`, `*`, `/`, `\\`, `^`"
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/arrays.md:808
msgid "Comparison -- `==`, `!=`, `≈` ([`isapprox`](@ref)), `≉`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:814
msgid ""
"To enable convenient vectorization of mathematical and other operations, "
"Julia [provides the dot syntax](@ref man-vectorized) `f.(args...)`, e.g. "
"`sin.(x)` or `min.(x,y)`, for elementwise operations over arrays or mixtures "
"of arrays and scalars (a [Broadcasting](@ref) operation); these have the "
"additional advantage of \"fusing\" into a single loop when combined with "
"other dot calls, e.g. `sin.(cos.(x))`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:818
msgid ""
"Also, *every* binary operator supports a [dot version](@ref man-dot-"
"operators)  that can be applied to arrays (and combinations of arrays and "
"scalars) in such [fused broadcasting operations](@ref man-vectorized), e.g. "
"`z .== sin.(x .* y)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:822
#, no-wrap
msgid ""
"Note that comparisons such as `==` operate on whole arrays, giving a single boolean\n"
"answer. Use dot operators like `.==` for elementwise comparisons. (For comparison\n"
"operations like `<`, *only* the elementwise `.<` version is applicable to arrays.)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:826
msgid ""
"Also notice the difference between `max.(a,b)`, which [`broadcast`](@ref)s "
"[`max`](@ref)  elementwise over `a` and `b`, and [`maximum(a)`](@ref), which "
"finds the largest value within `a`. The same relationship holds for `min.(a,"
"b)` and `minimum(a)`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:827
#, no-wrap
msgid "Broadcasting"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:832
msgid ""
"It is sometimes useful to perform element-by-element binary operations on "
"arrays of different sizes, such as adding a vector to each column of a "
"matrix. An inefficient way to do this would be to replicate the vector to "
"the size of the matrix:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:835
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> a = rand(2,1); A = rand(2,3);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:841
#, no-wrap
msgid ""
"julia> repeat(a,1,3)+A\n"
"2×3 Array{Float64,2}:\n"
" 1.20813  1.82068  1.25387\n"
" 1.56851  1.86401  1.67846\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:845
msgid ""
"This is wasteful when dimensions get large, so Julia provides [`broadcast`]"
"(@ref), which expands singleton dimensions in array arguments to match the "
"corresponding dimension in the other array without using extra memory, and "
"applies the given function elementwise:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:851
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> broadcast(+, a, A)\n"
"2×3 Array{Float64,2}:\n"
" 1.20813  1.82068  1.25387\n"
" 1.56851  1.86401  1.67846\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:855
#, no-wrap
msgid ""
"julia> b = rand(1,2)\n"
"1×2 Array{Float64,2}:\n"
" 0.867535  0.00457906\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:861
#, no-wrap
msgid ""
"julia> broadcast(+, a, b)\n"
"2×2 Array{Float64,2}:\n"
" 1.71056  0.847604\n"
" 1.73659  0.873631\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:869
msgid ""
"[Dotted operators](@ref man-dot-operators) such as `.+` and `.*` are "
"equivalent to `broadcast` calls (except that they fuse, as described below). "
"There is also a [`broadcast!`](@ref) function to specify an explicit "
"destination (which can also be accessed in a fusing fashion by `.=` "
"assignment). In fact, `f.(args...)` is equivalent to `broadcast(f, "
"args...)`, providing a convenient syntax to broadcast any function ([dot "
"syntax](@ref man-vectorized)). Nested \"dot calls\" `f.(...)` (including "
"calls to `.+` etcetera)  [automatically fuse](@ref man-dot-operators) into a "
"single `broadcast` call."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:873
msgid ""
"Additionally, [`broadcast`](@ref) is not limited to arrays (see the function "
"documentation), it also handles tuples and treats any argument that is not "
"an array, tuple or [`Ref`](@ref)  (except for [`Ptr`](@ref)) as a \"scalar\"."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:879
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> convert.(Float32, [1, 2])\n"
"2-element Array{Float32,1}:\n"
" 1.0\n"
" 2.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:884
#, no-wrap
msgid ""
"julia> ceil.((UInt8,), [1.2 3.4; 5.6 6.7])\n"
"2×2 Array{UInt8,2}:\n"
" 0x02  0x04\n"
" 0x06  0x07\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:891
#, no-wrap
msgid ""
"julia> string.(1:3, \". \", [\"First\", \"Second\", \"Third\"])\n"
"3-element Array{String,1}:\n"
" \"1. First\"\n"
" \"2. Second\"\n"
" \"3. Third\"\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/arrays.md:892
#, no-wrap
msgid "Implementation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:899
msgid ""
"The base array type in Julia is the abstract type [`AbstractArray{T,N}`]"
"(@ref). It is parameterized by the number of dimensions `N` and the element "
"type `T`. [`AbstractVector`](@ref) and [`AbstractMatrix`](@ref) are aliases "
"for the 1-d and 2-d cases. Operations on `AbstractArray` objects are defined "
"using higher level operators and functions, in a way that is independent of "
"the underlying storage. These operations generally work correctly as a "
"fallback for any specific array implementation."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:912
msgid ""
"The `AbstractArray` type includes anything vaguely array-like, and "
"implementations of it might be quite different from conventional arrays. For "
"example, elements might be computed on request rather than stored. However, "
"any concrete `AbstractArray{T,N}` type should generally implement at least "
"[`size(A)`](@ref) (returning an `Int` tuple), [`getindex(A,i)`](@ref) and "
"[`getindex(A,i1,...,iN)`](@ref getindex); mutable arrays should also "
"implement [`setindex!`](@ref). It is recommended that these operations have "
"nearly constant time complexity, or technically Õ(1) complexity, as "
"otherwise some array functions may be unexpectedly slow. Concrete types "
"should also typically provide a [`similar(A,T=eltype(A),dims=size(A))`]"
"(@ref)  method, which is used to allocate a similar array for [`copy`](@ref) "
"and other out-of-place operations. No matter how an `AbstractArray{T,N}` is "
"represented internally, `T` is the type of object returned by *integer* "
"indexing (`A[1, ..., 1]`, when `A` is not empty) and `N` should be the "
"length of the tuple returned by [`size`](@ref). For more details on defining "
"custom `AbstractArray` implementations, see the [array interface guide in "
"the interfaces chapter](@ref man-interface-array)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:920
msgid ""
"`DenseArray` is an abstract subtype of `AbstractArray` intended to include "
"all arrays where elements are stored contiguously in column-major order (see "
"additional notes in [Performance Tips](@ref man-performance-tips)). The "
"[`Array`](@ref) type is a specific instance of `DenseArray`; [`Vector`]"
"(@ref) and [`Matrix`](@ref) are aliases for the 1-d and 2-d cases.  Very few "
"operations are implemented specifically for `Array` beyond those that are "
"required for all `AbstractArray`s; much of the array library is implemented "
"in a generic manner that allows all custom arrays to behave similarly."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:931
msgid ""
"`SubArray` is a specialization of `AbstractArray` that performs indexing by "
"sharing memory with the original array rather than by copying it. A "
"`SubArray` is created with the [`view`](@ref) function, which is called the "
"same way as [`getindex`](@ref) (with an array and a series of index "
"arguments). The result of [`view`](@ref) looks the same as the result of "
"[`getindex`](@ref), except the data is left in place. [`view`](@ref) stores "
"the input index vectors in a `SubArray` object, which can later be used to "
"index the original array indirectly.  By putting the [`@views`](@ref) macro "
"in front of an expression or block of code, any `array[...]` slice in that "
"expression will be converted to create a `SubArray` view instead."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:935
msgid ""
"[`BitArray`](@ref)s are space-efficient \"packed\" boolean arrays, which "
"store one bit per boolean value.  They can be used similarly to `Array{Bool}"
"` arrays (which store one byte per boolean value), and can be converted to/"
"from the latter via `Array(bitarray)` and `BitArray(array)`, respectively."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:950
msgid ""
"A \"strided\" array is stored in memory with elements laid out in regular "
"offsets such that an instance with a supported `isbits` element type can be "
"passed to external C and Fortran functions that expect this memory layout. "
"Strided arrays must define a [`strides(A)`](@ref) method that returns a "
"tuple of \"strides\" for each dimension; a provided [`stride(A,k)`](@ref) "
"method accesses the `k`th element within this tuple. Increasing the index of "
"dimension `k` by `1` should increase the index `i` of [`getindex(A,i)`]"
"(@ref) by [`stride(A,k)`](@ref). If a pointer conversion method [`Base."
"unsafe_convert(Ptr{T}, A)`](@ref) is provided, the memory layout must "
"correspond in the same way to these strides. `DenseArray` is a very specific "
"example of a strided array where the elements are arranged contiguously, "
"thus it provides its subtypes with the appropriate definition of `strides`. "
"More concrete examples can be found within the [interface guide for strided "
"arrays](@ref man-interface-strided-arrays).  [`StridedVector`](@ref) and "
"[`StridedMatrix`](@ref) are convenient aliases for many of the builtin array "
"types that are considered strided arrays, allowing them to dispatch to "
"select specialized implementations that call highly tuned and optimized BLAS "
"and LAPACK functions using just the pointer and strides."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:954
msgid ""
"The following example computes the QR decomposition of a small section of a "
"larger array, without creating any temporaries, and by calling the "
"appropriate LAPACK function with the right leading dimension size and stride "
"parameters."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:968
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> a = rand(10, 10)\n"
"10×10 Array{Float64,2}:\n"
" 0.517515  0.0348206  0.749042   0.0979679  …  0.75984     0.950481   0.579513\n"
" 0.901092  0.873479   0.134533   0.0697848     0.0586695   0.193254   0.726898\n"
" 0.976808  0.0901881  0.208332   0.920358      0.288535    0.705941   0.337137\n"
" 0.657127  0.0317896  0.772837   0.534457      0.0966037   0.700694   0.675999\n"
" 0.471777  0.144969   0.0718405  0.0827916     0.527233    0.173132   0.694304\n"
" 0.160872  0.455168   0.489254   0.827851   …  0.62226     0.0995456  0.946522\n"
" 0.291857  0.769492   0.68043    0.629461      0.727558    0.910796   0.834837\n"
" 0.775774  0.700731   0.700177   0.0126213     0.00822304  0.327502   0.955181\n"
" 0.9715    0.64354    0.848441   0.241474      0.591611    0.792573   0.194357\n"
" 0.646596  0.575456   0.0995212  0.038517      0.709233    0.477657   0.0507231\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:975
#, no-wrap
msgid ""
"julia> b = view(a, 2:2:8,2:2:4)\n"
"4×2 view(::Array{Float64,2}, 2:2:8, 2:2:4) with eltype Float64:\n"
" 0.873479   0.0697848\n"
" 0.0317896  0.534457\n"
" 0.455168   0.827851\n"
" 0.700731   0.0126213\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:977
#, no-wrap
msgid "julia> (q, r) = qr(b);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:984
#, no-wrap
msgid ""
"julia> q\n"
"4×4 LinearAlgebra.QRCompactWYQ{Float64,Array{Float64,2}}:\n"
" -0.722358    0.227524  -0.247784    -0.604181\n"
" -0.0262896  -0.575919  -0.804227     0.144377\n"
" -0.376419   -0.75072    0.540177    -0.0541979\n"
" -0.579497    0.230151  -0.00552346   0.781782\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/arrays.md:989
#, no-wrap
msgid ""
"julia> r\n"
"2×2 Array{Float64,2}:\n"
" -1.20921  -0.383393\n"
"  0.0      -0.910506\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/conversion-and-promotion.md:1
#, no-wrap
msgid "[Conversion and Promotion](@id conversion-and-promotion)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:9
msgid ""
"Julia has a system for promoting arguments of mathematical operators to a "
"common type, which has been mentioned in various other sections, including "
"[Integers and Floating-Point Numbers](@ref), [Mathematical Operations and "
"Elementary Functions](@ref), [Types](@ref man-types), and [Methods](@ref).  "
"In this section, we explain how this promotion system works, as well as how "
"to extend it to new types and apply it to functions besides built-in "
"mathematical operators. Traditionally, programming languages fall into two "
"camps with respect to promotion of arithmetic arguments:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/conversion-and-promotion.md:28
msgid ""
"**Automatic promotion for built-in arithmetic types and operators.** In most "
"languages, built-in numeric types, when used as operands to arithmetic "
"operators with infix syntax, such as `+`, `-`, `*`, and `/`, are "
"automatically promoted to a common type to produce the expected results.  C, "
"Java, Perl, and Python, to name a few, all correctly compute the sum `1 + "
"1.5` as the floating-point value `2.5`, even though one of the operands to `"
"+` is an integer. These systems are convenient and designed carefully enough "
"that they are generally all-but-invisible to the programmer: hardly anyone "
"consciously thinks of this promotion taking place when writing such an "
"expression, but compilers and interpreters must perform conversion before "
"addition since integers and floating-point values cannot be added as-is. "
"Complex rules for such automatic conversions are thus inevitably part of "
"specifications and implementations for such languages."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/conversion-and-promotion.md:28
msgid ""
"**No automatic promotion.** This camp includes Ada and ML -- very \"strict\" "
"statically typed languages.  In these languages, every conversion must be "
"explicitly specified by the programmer. Thus, the example expression `1 + "
"1.5` would be a compilation error in both Ada and ML. Instead one must write "
"`real(1) + 1.5`, explicitly converting the integer `1` to a floating-point "
"value before performing addition. Explicit conversion everywhere is so "
"inconvenient, however, that even Ada has some degree of automatic "
"conversion: integer literals are promoted to the expected integer type "
"automatically, and floating-point literals are similarly promoted to "
"appropriate floating-point types."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:41
msgid ""
"In a sense, Julia falls into the \"no automatic promotion\" category: "
"mathematical operators are just functions with special syntax, and the "
"arguments of functions are never automatically converted.  However, one may "
"observe that applying mathematical operations to a wide variety of mixed "
"argument types is just an extreme case of polymorphic multiple dispatch -- "
"something which Julia's dispatch and type systems are particularly well-"
"suited to handle. \"Automatic\" promotion of mathematical operands simply "
"emerges as a special application: Julia comes with pre-defined catch-all "
"dispatch rules for mathematical operators, invoked when no specific "
"implementation exists for some combination of operand types. These catch-all "
"rules first promote all operands to a common type using user-definable "
"promotion rules, and then invoke a specialized implementation of the "
"operator in question for the resulting values, now of the same type. User-"
"defined types can easily participate in this promotion system by defining "
"methods for conversion to and from other types, and providing a handful of "
"promotion rules defining what types they should promote to when mixed with "
"other types."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/conversion-and-promotion.md:42
#, no-wrap
msgid "Conversion"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:51
msgid ""
"The standard way to obtain a value of a certain type `T` is to call the "
"type's constructor, `T(x)`.  However, there are cases where it's convenient "
"to convert a value from one type to another without the programmer asking "
"for it explicitly.  One example is assigning a value into an array: if `A` "
"is a `Vector{Float64}`, the expression `A[1] = 2` should work by "
"automatically converting the `2` from `Int` to `Float64`, and storing the "
"result in the array.  This is done via the `convert` function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:55
msgid ""
"The `convert` function generally takes two arguments: the first is a type "
"object and the second is a value to convert to that type. The returned value "
"is the value converted to an instance of given type.  The simplest way to "
"understand this function is to see it in action:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:59
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = 12\n"
"12\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:62
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:563
#, no-wrap
msgid ""
"julia> typeof(x)\n"
"Int64\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:65
#, no-wrap
msgid ""
"julia> convert(UInt8, x)\n"
"0x0c\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:68
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:121
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:162
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:168
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"UInt8\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:71
#, no-wrap
msgid ""
"julia> convert(AbstractFloat, x)\n"
"12.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:74
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Float64\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:79
#, no-wrap
msgid ""
"julia> a = Any[1 2 3; 4 5 6]\n"
"2×3 Array{Any,2}:\n"
" 1  2  3\n"
" 4  5  6\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:85
#, no-wrap
msgid ""
"julia> convert(Array{Float64}, a)\n"
"2×3 Array{Float64,2}:\n"
" 1.0  2.0  3.0\n"
" 4.0  5.0  6.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:88
msgid ""
"Conversion isn't always possible, in which case a no method error is thrown "
"indicating that `convert` doesn't know how to perform the requested "
"conversion:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:94
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> convert(AbstractFloat, \"foo\")\n"
"ERROR: MethodError: Cannot `convert` an object of type String to an object of type AbstractFloat\n"
"[...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:100
msgid ""
"Some languages consider parsing strings as numbers or formatting numbers as "
"strings to be conversions (many dynamic languages will even perform "
"conversion for you automatically), however Julia does not: even though some "
"strings can be parsed as numbers, most strings are not valid representations "
"of numbers, and only a very limited subset of them are. Therefore in Julia "
"the dedicated `parse` function must be used to perform this operation, "
"making it more explicit."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/conversion-and-promotion.md:101
#, no-wrap
msgid "When is `convert` called?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:104
msgid "The following language constructs call `convert`:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/conversion-and-promotion.md:111
msgid "Assigning to an array converts to the array's element type."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/conversion-and-promotion.md:111
msgid ""
"Assigning to a field of an object converts to the declared type of the field."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/conversion-and-promotion.md:111
msgid ""
"Constructing an object with `new` converts to the object's declared field "
"types."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/conversion-and-promotion.md:111
msgid ""
"Assigning to a variable with a declared type (e.g. `local x::T`) converts to "
"that type."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/conversion-and-promotion.md:111
msgid ""
"A function with a declared return type converts its return value to that "
"type."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/conversion-and-promotion.md:111
msgid ""
"Passing a value to `ccall` converts it to the corresponding argument type."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/conversion-and-promotion.md:112
#, no-wrap
msgid "Conversion vs. Construction"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:122
msgid ""
"Note that the behavior of `convert(T, x)` appears to be nearly identical to "
"`T(x)`.  Indeed, it usually is.  However, there is a key semantic "
"difference: since `convert` can be called implicitly, its methods are "
"restricted to cases that are considered \"safe\" or \"unsurprising\".  "
"`convert` will only convert between types that represent the same basic kind "
"of thing (e.g. different representations of numbers, or different string "
"encodings).  It is also usually lossless; converting a value to a different "
"type and back again should result in the exact same value."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:124
msgid ""
"There are four general kinds of cases where constructors differ from "
"`convert`:"
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/manual/conversion-and-promotion.md:125
#, no-wrap
msgid "Constructors for types unrelated to their arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:130
msgid ""
"Some constructors don't implement the concept of \"conversion\".  For "
"example, `Timer(2)` creates a 2-second timer, which is not really a "
"\"conversion\" from an integer to a timer."
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/manual/conversion-and-promotion.md:131
#, no-wrap
msgid "Mutable collections"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:136
msgid ""
"`convert(T, x)` is expected to return the original `x` if `x` is already of "
"type `T`.  In contrast, if `T` is a mutable collection type then `T(x)` "
"should always make a new collection (copying elements from `x`)."
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/manual/conversion-and-promotion.md:137
#, no-wrap
msgid "Wrapper types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:147
msgid ""
"For some types which \"wrap\" other values, the constructor may wrap its "
"argument inside a new object even if it is already of the requested type.  "
"For example `Some(x)` wraps `x` to indicate that a value is present (in a "
"context where the result might be a `Some` or `nothing`).  However, `x` "
"itself might be the object `Some(y)`, in which case the result is "
"`Some(Some(y))`, with two levels of wrapping.  `convert(Some, x)`, on the "
"other hand, would just return `x` since it is already a `Some`."
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/manual/conversion-and-promotion.md:148
#, no-wrap
msgid "Constructors that don't return instances of their own type"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:156
msgid ""
"In *very rare* cases it might make sense for the constructor `T(x)` to "
"return an object not of type `T`.  This could happen if a wrapper type is "
"its own inverse (e.g. `Flip(Flip(x)) === x`), or to support an old calling "
"syntax for backwards compatibility when a library is restructured.  But "
"`convert(T, x)` should always return a value of type `T`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/conversion-and-promotion.md:157
#, no-wrap
msgid "Defining New Conversions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:166
msgid ""
"When defining a new type, initially all ways of creating it should be "
"defined as constructors.  If it becomes clear that implicit conversion would "
"be useful, and that some constructors meet the above \"safety\" criteria, "
"then `convert` methods can be added.  These methods are typically quite "
"simple, as they only need to call the appropriate constructor.  Such a "
"definition might look like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:170
msgid "```julia convert(::Type{MyType}, x) = MyType(x)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:178
msgid ""
"The type of the first argument of this method is a [singleton type](@ref man-"
"singleton-types), `Type{MyType}`, the only instance of which is `MyType`. "
"Thus, this method is only invoked when the first argument is the type value "
"`MyType`. Notice the syntax used for the first argument: the argument name "
"is omitted prior to the `::` symbol, and only the type is given.  This is "
"the syntax in Julia for a function argument whose type is specified but "
"whose value does not need to be referenced by name. In this example, since "
"the type is a singleton, we already know its value without referring to an "
"argument name."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:183
msgid ""
"All instances of some abstract types are by default considered "
"\"sufficiently similar\" that a universal `convert` definition is provided "
"in Julia Base.  For example, this definition states that it's valid to "
"`convert` any `Number` type to any other by calling a 1-argument constructor:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:187
#, no-wrap
msgid ""
"```julia\n"
"convert(::Type{T}, x::Number) where {T<:Number} = T(x)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:192
msgid ""
"This means that new `Number` types only need to define constructors, since "
"this definition will handle `convert` for them.  An identity conversion is "
"also provided to handle the case where the argument is already of the "
"requested type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:196
#, no-wrap
msgid ""
"```julia\n"
"convert(::Type{T}, x::T) where {T<:Number} = x\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:198
msgid ""
"Similar definitions exist for `AbstractString`, `AbstractArray`, and "
"`AbstractDict`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/conversion-and-promotion.md:199
#, no-wrap
msgid "Promotion"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:210
msgid ""
"Promotion refers to converting values of mixed types to a single common "
"type. Although it is not strictly necessary, it is generally implied that "
"the common type to which the values are converted can faithfully represent "
"all of the original values. In this sense, the term \"promotion\" is "
"appropriate since the values are converted to a \"greater\" type -- i.e. one "
"which can represent all of the input values in a single common type. It is "
"important, however, not to confuse this with object-oriented (structural) "
"super-typing, or Julia's notion of abstract super-types: promotion has "
"nothing to do with the type hierarchy, and everything to do with converting "
"between alternate representations.  For instance, although every [`Int32`]"
"(@ref) value can also be represented as a [`Float64`](@ref) value, `Int32` "
"is not a subtype of `Float64`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:215
msgid ""
"Promotion to a common \"greater\" type is performed in Julia by the "
"`promote` function, which takes any number of arguments, and returns a tuple "
"of the same number of values, converted to a common type, or throws an "
"exception if promotion is not possible. The most common use case for "
"promotion is to convert numeric arguments to a common type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:219
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> promote(1, 2.5)\n"
"(1.0, 2.5)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:222
#, no-wrap
msgid ""
"julia> promote(1, 2.5, 3)\n"
"(1.0, 2.5, 3.0)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:225
#, no-wrap
msgid ""
"julia> promote(2, 3//4)\n"
"(2//1, 3//4)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:228
#, no-wrap
msgid ""
"julia> promote(1, 2.5, 3, 3//4)\n"
"(1.0, 2.5, 3.0, 0.75)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:231
#, no-wrap
msgid ""
"julia> promote(1.5, im)\n"
"(1.5 + 0.0im, 0.0 + 1.0im)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:235
#, no-wrap
msgid ""
"julia> promote(1 + 2im, 3//4)\n"
"(1//1 + 2//1*im, 3//4 + 0//1*im)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:242
msgid ""
"Floating-point values are promoted to the largest of the floating-point "
"argument types. Integer values are promoted to the larger of either the "
"native machine word size or the largest integer argument type. Mixtures of "
"integers and floating-point values are promoted to a floating-point type big "
"enough to hold all the values. Integers mixed with rationals are promoted to "
"rationals.  Rationals mixed with floats are promoted to floats. Complex "
"values mixed with real values are promoted to the appropriate kind of "
"complex value."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:247
msgid ""
"That is really all there is to using promotions. The rest is just a matter "
"of clever application, the most typical \"clever\" application being the "
"definition of catch-all methods for numeric operations like the arithmetic "
"operators `+`, `-`, `*` and `/`. Here are some of the catch-all method "
"definitions given in [`promotion.jl`](https://github.com/JuliaLang/julia/"
"blob/master/base/promotion.jl):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:254
msgid ""
"```julia +(x::Number, y::Number) = +(promote(x,y)...)  -(x::Number, y::"
"Number) = -(promote(x,y)...)  *(x::Number, y::Number) = *(promote(x,y)...)  /"
"(x::Number, y::Number) = /(promote(x,y)...)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:266
msgid ""
"These method definitions say that in the absence of more specific rules for "
"adding, subtracting, multiplying and dividing pairs of numeric values, "
"promote the values to a common type and then try again. That's all there is "
"to it: nowhere else does one ever need to worry about promotion to a common "
"numeric type for arithmetic operations -- it just happens automatically. "
"There are definitions of catch-all promotion methods for a number of other "
"arithmetic and mathematical functions in [`promotion.jl`](https://github.com/"
"JuliaLang/julia/blob/master/base/promotion.jl), but beyond that, there are "
"hardly any calls to `promote` required in Julia Base. The most common usages "
"of `promote` occur in outer constructors methods, provided for convenience, "
"to allow constructor calls with mixed types to delegate to an inner type "
"with fields promoted to an appropriate common type. For example, recall that "
"[`rational.jl`](https://github.com/JuliaLang/julia/blob/master/base/rational."
"jl)  provides the following outer constructor method:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:270
msgid ""
"```julia Rational(n::Integer, d::Integer) = Rational(promote(n,d)...)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:272
msgid "This allows calls like the following to work:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:276
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Rational(Int8(15),Int32(-5))\n"
"-3//1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:280
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Rational{Int32}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:284
msgid ""
"For most user-defined types, it is better practice to require programmers to "
"supply the expected types to constructor functions explicitly, but "
"sometimes, especially for numeric problems, it can be convenient to do "
"promotion automatically."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/conversion-and-promotion.md:285
#, no-wrap
msgid "Defining Promotion Rules"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:293
msgid ""
"Although one could, in principle, define methods for the `promote` function "
"directly, this would require many redundant definitions for all possible "
"permutations of argument types. Instead, the behavior of `promote` is "
"defined in terms of an auxiliary function called `promote_rule`, which one "
"can provide methods for. The `promote_rule` function takes a pair of type "
"objects and returns another type object, such that instances of the argument "
"types will be promoted to the returned type. Thus, by defining the rule:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:297
msgid "```julia promote_rule(::Type{Float64}, ::Type{Float32}) = Float64 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:301
msgid ""
"one declares that when 64-bit and 32-bit floating-point values are promoted "
"together, they should be promoted to 64-bit floating-point. The promotion "
"type does not need to be one of the argument types, however; the following "
"promotion rules both occur in Julia Base:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:306
msgid ""
"```julia promote_rule(::Type{BigInt}, ::Type{Float64}) = BigFloat "
"promote_rule(::Type{BigInt}, ::Type{Int8}) = BigInt ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:312
msgid ""
"In the latter case, the result type is [`BigInt`](@ref) since `BigInt` is "
"the only type large enough to hold integers for arbitrary-precision integer "
"arithmetic. Also note that one does not need to define both `promote_rule(::"
"Type{A}, ::Type{B})` and `promote_rule(::Type{B}, ::Type{A})` -- the "
"symmetry is implied by the way `promote_rule` is used in the promotion "
"process."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:317
msgid ""
"The `promote_rule` function is used as a building block to define a second "
"function called `promote_type`, which, given any number of type objects, "
"returns the common type to which those values, as arguments to `promote` "
"should be promoted. Thus, if one wants to know, in absence of actual values, "
"what type a collection of values of certain types would promote to, one can "
"use `promote_type`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:322
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> promote_type(Int8, Int64)\n"
"Int64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:327
msgid ""
"Internally, `promote_type` is used inside of `promote` to determine what "
"type argument values should be converted to for promotion. It can, however, "
"be useful in its own right. The curious reader can read the code in "
"[`promotion.jl`](https://github.com/JuliaLang/julia/blob/master/base/"
"promotion.jl), which defines the complete promotion mechanism in about 35 "
"lines."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/conversion-and-promotion.md:328
#, no-wrap
msgid "Case Study: Rational Promotions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:332
msgid ""
"Finally, we finish off our ongoing case study of Julia's rational number "
"type, which makes relatively sophisticated use of the promotion mechanism "
"with the following promotion rules:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:338
#, no-wrap
msgid ""
"```julia\n"
"promote_rule(::Type{Rational{T}}, ::Type{S}) where {T<:Integer,S<:Integer} = Rational{promote_type(T,S)}\n"
"promote_rule(::Type{Rational{T}}, ::Type{Rational{S}}) where {T<:Integer,S<:Integer} = Rational{promote_type(T,S)}\n"
"promote_rule(::Type{Rational{T}}, ::Type{S}) where {T<:Integer,S<:AbstractFloat} = promote_type(T,S)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:345
msgid ""
"The first rule says that promoting a rational number with any other integer "
"type promotes to a rational type whose numerator/denominator type is the "
"result of promotion of its numerator/denominator type with the other integer "
"type. The second rule applies the same logic to two different types of "
"rational numbers, resulting in a rational of the promotion of their "
"respective numerator/denominator types. The third and final rule dictates "
"that promoting a rational with a float results in the same type as promoting "
"the numerator/denominator type with the float."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/conversion-and-promotion.md:350
msgid ""
"This small handful of promotion rules, together with the type's constructors "
"and the default `convert` method for numbers, are sufficient to make "
"rational numbers interoperate completely naturally with all of Julia's other "
"numeric types -- integers, floating-point numbers, and complex numbers. By "
"providing appropriate conversion methods and promotion rules in the same "
"manner, any user-defined numeric type can interoperate just as naturally "
"with Julia's predefined numerics."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:1
#, no-wrap
msgid "Integers and Floating-Point Numbers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:8
msgid ""
"Integers and floating-point values are the basic building blocks of "
"arithmetic and computation.  Built-in representations of such values are "
"called numeric primitives, while representations of integers and floating-"
"point numbers as immediate values in code are known as numeric literals.  "
"For example, `1` is an integer literal, while `1.0` is a floating-point "
"literal; their binary in-memory representations as objects are numeric "
"primitives."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:16
msgid ""
"Julia provides a broad range of primitive numeric types, and a full "
"complement of arithmetic and bitwise operators as well as standard "
"mathematical functions are defined over them. These map directly onto "
"numeric types and operations that are natively supported on modern "
"computers, thus allowing Julia to take full advantage of computational "
"resources. Additionally, Julia provides software support for [Arbitrary "
"Precision Arithmetic](@ref), which can handle operations on numeric values "
"that cannot be represented effectively in native hardware representations, "
"but at the cost of relatively slower performance."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:18
msgid "The following are Julia's primitive numeric types:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:20
msgid "**Integer types:**"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:34
#, no-wrap
msgid ""
"| Type              | Signed? | Number of bits | Smallest value | Largest value |\n"
"|:----------------- |:------- |:-------------- |:-------------- |:------------- |\n"
"| [`Int8`](@ref)    | ✓       | 8              | -2^7           | 2^7 - 1       |\n"
"| [`UInt8`](@ref)   |         | 8              | 0              | 2^8 - 1       |\n"
"| [`Int16`](@ref)   | ✓       | 16             | -2^15          | 2^15 - 1      |\n"
"| [`UInt16`](@ref)  |         | 16             | 0              | 2^16 - 1      |\n"
"| [`Int32`](@ref)   | ✓       | 32             | -2^31          | 2^31 - 1      |\n"
"| [`UInt32`](@ref)  |         | 32             | 0              | 2^32 - 1      |\n"
"| [`Int64`](@ref)   | ✓       | 64             | -2^63          | 2^63 - 1      |\n"
"| [`UInt64`](@ref)  |         | 64             | 0              | 2^64 - 1      |\n"
"| [`Int128`](@ref)  | ✓       | 128            | -2^127         | 2^127 - 1     |\n"
"| [`UInt128`](@ref) |         | 128            | 0              | 2^128 - 1     |\n"
"| [`Bool`](@ref)    | N/A     | 8              | `false` (0)    | `true` (1)    |\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:36
msgid "**Floating-point types:**"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:42
#, no-wrap
msgid ""
"| Type              | Precision                                                                      | Number of bits |\n"
"|:----------------- |:------------------------------------------------------------------------------ |:-------------- |\n"
"| [`Float16`](@ref) | [half](https://en.wikipedia.org/wiki/Half-precision_floating-point_format)     | 16             |\n"
"| [`Float32`](@ref) | [single](https://en.wikipedia.org/wiki/Single_precision_floating-point_format) | 32             |\n"
"| [`Float64`](@ref) | [double](https://en.wikipedia.org/wiki/Double_precision_floating-point_format) | 64             |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:46
msgid ""
"Additionally, full support for [Complex and Rational Numbers](@ref) is built "
"on top of these primitive numeric types. All numeric types interoperate "
"naturally without explicit casting, thanks to a flexible, user-extensible "
"[type promotion system](@ref conversion-and-promotion)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:47
#: ext/julia/doc/src/base/numbers.md:99
#, no-wrap
msgid "Integers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:50
msgid "Literal integers are represented in the standard manner:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:54
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 1\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:58
#, no-wrap
msgid ""
"julia> 1234\n"
"1234\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:61
msgid ""
"The default type for an integer literal depends on whether the target system "
"has a 32-bit architecture or a 64-bit architecture:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:66
#, no-wrap
msgid ""
"julia> typeof(1)\n"
"Int32\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:71
#, no-wrap
msgid ""
"julia> typeof(1)\n"
"Int64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:74
msgid ""
"The Julia internal variable [`Sys.WORD_SIZE`](@ref) indicates whether the "
"target system is 32-bit or 64-bit:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:79
#, no-wrap
msgid ""
"julia> Sys.WORD_SIZE\n"
"32\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:84
#, no-wrap
msgid ""
"julia> Sys.WORD_SIZE\n"
"64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:87
msgid ""
"Julia also defines the types `Int` and `UInt`, which are aliases for the "
"system's signed and unsigned native integer types respectively:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:94
#, no-wrap
msgid ""
"julia> Int\n"
"Int32\n"
"julia> UInt\n"
"UInt32\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:101
#, no-wrap
msgid ""
"julia> Int\n"
"Int64\n"
"julia> UInt\n"
"UInt64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:104
msgid ""
"Larger integer literals that cannot be represented using only 32 bits but "
"can be represented in 64 bits always create 64-bit integers, regardless of "
"the system type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:106
#: ext/julia/doc/src/devdocs/inference.md:97
msgid "```jldoctest"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:106
#, no-wrap
msgid "32-bit or 64-bit system:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:110
#, no-wrap
msgid ""
"julia> typeof(3000000000)\n"
"Int64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:114
msgid ""
"Unsigned integers are input and output using the `0x` prefix and hexadecimal "
"(base 16) digits `0-9a-f` (the capitalized digits `A-F` also work for "
"input). The size of the unsigned value is determined by the number of hex "
"digits used:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:118
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 0x1\n"
"0x01\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:124
#, no-wrap
msgid ""
"julia> 0x123\n"
"0x0123\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:127
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"UInt16\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:130
#, no-wrap
msgid ""
"julia> 0x1234567\n"
"0x01234567\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:133
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"UInt32\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:136
#, no-wrap
msgid ""
"julia> 0x123456789abcdef\n"
"0x0123456789abcdef\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:139
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"UInt64\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:142
#, no-wrap
msgid ""
"julia> 0x11112222333344445555666677778888\n"
"0x11112222333344445555666677778888\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:146
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:175
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"UInt128\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:150
msgid ""
"This behavior is based on the observation that when one uses unsigned hex "
"literals for integer values, one typically is using them to represent a "
"fixed numeric byte sequence, rather than just an integer value."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:153
msgid ""
"Recall that the variable [`ans`](@ref) is set to the value of the last "
"expression evaluated in an interactive session. This does not occur when "
"Julia code is run in other ways."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:155
msgid "Binary and octal literals are also supported:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:159
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 0b10\n"
"0x02\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:165
#, no-wrap
msgid ""
"julia> 0o010\n"
"0x08\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:171
#, no-wrap
msgid ""
"julia> 0x00000000000000001111222233334444\n"
"0x00000000000000001111222233334444\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:182
msgid ""
"As for hexadecimal literals, binary and octal literals produce unsigned "
"integer types. The size of the binary data item is the minimal needed size, "
"if the leading digit of the literal is not `0`. In the case of leading "
"zeros, the size is determined by the minimal needed size for a literal, "
"which has the same length but leading digit `1`. That allows the user to "
"control the size.  Values which cannot be stored in `UInt128` cannot be "
"written as such literals."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:186
msgid ""
"Binary, octal, and hexadecimal literals may be signed by a `-` immediately "
"preceding the unsigned literal. They produce an unsigned integer of the same "
"size as the unsigned literal would do, with the two's complement of the "
"value:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:190
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> -0x2\n"
"0xfe\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:194
#, no-wrap
msgid ""
"julia> -0x0002\n"
"0xfffe\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:197
msgid ""
"The minimum and maximum representable values of primitive numeric types such "
"as integers are given by the [`typemin`](@ref) and [`typemax`](@ref) "
"functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:201
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> (typemin(Int32), typemax(Int32))\n"
"(-2147483648, 2147483647)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:216
#, no-wrap
msgid ""
"julia> for T in [Int8,Int16,Int32,Int64,Int128,UInt8,UInt16,UInt32,UInt64,UInt128]\n"
"           println(\"$(lpad(T,7)): [$(typemin(T)),$(typemax(T))]\")\n"
"       end\n"
"   Int8: [-128,127]\n"
"  Int16: [-32768,32767]\n"
"  Int32: [-2147483648,2147483647]\n"
"  Int64: [-9223372036854775808,9223372036854775807]\n"
" Int128: [-170141183460469231731687303715884105728,170141183460469231731687303715884105727]\n"
"  UInt8: [0,255]\n"
" UInt16: [0,65535]\n"
" UInt32: [0,4294967295]\n"
" UInt64: [0,18446744073709551615]\n"
"UInt128: [0,340282366920938463463374607431768211455]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:221
msgid ""
"The values returned by [`typemin`](@ref) and [`typemax`](@ref) are always of "
"the given argument type. (The above expression uses several features that "
"have yet to be introduced, including [for loops](@ref man-loops), [Strings]"
"(@ref man-strings), and [Interpolation](@ref), but should be easy enough to "
"understand for users with some existing programming experience.)"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:222
#, no-wrap
msgid "Overflow behavior"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:225
msgid ""
"In Julia, exceeding the maximum representable value of a given type results "
"in a wraparound behavior:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:229
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = typemax(Int64)\n"
"9223372036854775807\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:232
#, no-wrap
msgid ""
"julia> x + 1\n"
"-9223372036854775808\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:236
#, no-wrap
msgid ""
"julia> x + 1 == typemin(Int64)\n"
"true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:242
msgid ""
"Thus, arithmetic with Julia integers is actually a form of [modular "
"arithmetic](https://en.wikipedia.org/wiki/Modular_arithmetic).  This "
"reflects the characteristics of the underlying arithmetic of integers as "
"implemented on modern computers. In applications where overflow is possible, "
"explicit checking for wraparound produced by overflow is essential; "
"otherwise, the [`BigInt`](@ref) type in [Arbitrary Precision Arithmetic]"
"(@ref)  is recommended instead."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:243
#, no-wrap
msgid "Division errors"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:249
msgid ""
"Integer division (the `div` function) has two exceptional cases: dividing by "
"zero, and dividing the lowest negative number ([`typemin`](@ref)) by -1. "
"Both of these cases throw a [`DivideError`](@ref).  The remainder and "
"modulus functions (`rem` and `mod`) throw a [`DivideError`](@ref) when their "
"second argument is zero."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:250
#, no-wrap
msgid "Floating-Point Numbers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:254
msgid ""
"Literal floating-point numbers are represented in the standard formats, "
"using [E-notation](https://en.wikipedia.org/wiki/Scientific_notation#E-"
"notation) when necessary:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:258
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 1.0\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:261
#, no-wrap
msgid ""
"julia> 1.\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:264
#, no-wrap
msgid ""
"julia> 0.5\n"
"0.5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:267
#, no-wrap
msgid ""
"julia> .5\n"
"0.5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:270
#, no-wrap
msgid ""
"julia> -1.23\n"
"-1.23\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:273
#, no-wrap
msgid ""
"julia> 1e10\n"
"1.0e10\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:277
#, no-wrap
msgid ""
"julia> 2.5e-4\n"
"0.00025\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:280
msgid ""
"The above results are all [`Float64`](@ref) values. Literal [`Float32`]"
"(@ref) values can be entered by writing an `f` in place of `e`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:284
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 0.5f0\n"
"0.5f0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:287
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Float32\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:291
#, no-wrap
msgid ""
"julia> 2.5f-4\n"
"0.00025f0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:293
msgid "Values can be converted to [`Float32`](@ref) easily:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:297
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Float32(-1.5)\n"
"-1.5f0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:301
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Float32\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:304
msgid ""
"Hexadecimal floating-point literals are also valid, but only as [`Float64`]"
"(@ref) values, with `p` preceding the base-2 exponent:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:308
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 0x1p0\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:311
#, no-wrap
msgid ""
"julia> 0x1.8p3\n"
"12.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:314
#, no-wrap
msgid ""
"julia> 0x.4p-1\n"
"0.125\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:318
#, no-wrap
msgid ""
"julia> typeof(ans)\n"
"Float64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:321
msgid ""
"Half-precision floating-point numbers are also supported ([`Float16`]"
"(@ref)), but they are implemented in software and use [`Float32`](@ref) for "
"calculations."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:325
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sizeof(Float16(4.))\n"
"2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:329
#, no-wrap
msgid ""
"julia> 2*Float16(4.)\n"
"Float16(8.0)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:331
msgid "The underscore `_` can be used as digit separator:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:336
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 10_000, 0.000_000_005, 0xdead_beef, 0b1011_0010\n"
"(10000, 5.0e-9, 0xdeadbeef, 0xb2)\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:337
#, no-wrap
msgid "Floating-point zero"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:342
msgid ""
"Floating-point numbers have [two zeros](https://en.wikipedia.org/wiki/"
"Signed_zero), positive zero and negative zero. They are equal to each other "
"but have different binary representations, as can be seen using the "
"[`bitstring`](@ref) function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:346
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 0.0 == -0.0\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:349
#, no-wrap
msgid ""
"julia> bitstring(0.0)\n"
"\"0000000000000000000000000000000000000000000000000000000000000000\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:353
#, no-wrap
msgid ""
"julia> bitstring(-0.0)\n"
"\"1000000000000000000000000000000000000000000000000000000000000000\"\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:354
#, no-wrap
msgid "Special floating-point values"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:358
msgid ""
"There are three specified standard floating-point values that do not "
"correspond to any point on the real number line:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:364
#, no-wrap
msgid ""
"| `Float16` | `Float32` | `Float64` | Name              | Description                                                     |\n"
"|:--------- |:--------- |:--------- |:----------------- |:--------------------------------------------------------------- |\n"
"| `Inf16`   | `Inf32`   | `Inf`     | positive infinity | a value greater than all finite floating-point values           |\n"
"| `-Inf16`  | `-Inf32`  | `-Inf`    | negative infinity | a value less than all finite floating-point values              |\n"
"| `NaN16`   | `NaN32`   | `NaN`     | not a number      | a value not `==` to any floating-point value (including itself) |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:368
msgid ""
"For further discussion of how these non-finite floating-point values are "
"ordered with respect to each other and other floats, see [Numeric "
"Comparisons](@ref). By the [IEEE 754 standard](https://en.wikipedia.org/wiki/"
"IEEE_754-2008), these floating-point values are the results of certain "
"arithmetic operations:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:372
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> 1/Inf\n"
"0.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:375
#, no-wrap
msgid ""
"julia> 1/0\n"
"Inf\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:378
#, no-wrap
msgid ""
"julia> -5/0\n"
"-Inf\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:381
#, no-wrap
msgid ""
"julia> 0.000001/0\n"
"Inf\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:384
#, no-wrap
msgid ""
"julia> 0/0\n"
"NaN\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:387
#, no-wrap
msgid ""
"julia> 500 + Inf\n"
"Inf\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:390
#, no-wrap
msgid ""
"julia> 500 - Inf\n"
"-Inf\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:393
#, no-wrap
msgid ""
"julia> Inf + Inf\n"
"Inf\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:396
#, no-wrap
msgid ""
"julia> Inf - Inf\n"
"NaN\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:399
#, no-wrap
msgid ""
"julia> Inf * Inf\n"
"Inf\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:402
#, no-wrap
msgid ""
"julia> Inf / Inf\n"
"NaN\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:406
#, no-wrap
msgid ""
"julia> 0 * Inf\n"
"NaN\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:408
msgid ""
"The [`typemin`](@ref) and [`typemax`](@ref) functions also apply to floating-"
"point types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:412
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> (typemin(Float16),typemax(Float16))\n"
"(-Inf16, Inf16)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:415
#, no-wrap
msgid ""
"julia> (typemin(Float32),typemax(Float32))\n"
"(-Inf32, Inf32)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:419
#, no-wrap
msgid ""
"julia> (typemin(Float64),typemax(Float64))\n"
"(-Inf, Inf)\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:420
#, no-wrap
msgid "Machine epsilon"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:425
msgid ""
"Most real numbers cannot be represented exactly with floating-point numbers, "
"and so for many purposes it is important to know the distance between two "
"adjacent representable floating-point numbers, which is often known as "
"[machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:428
msgid ""
"Julia provides [`eps`](@ref), which gives the distance between `1.0` and the "
"next larger representable floating-point value:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:432
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> eps(Float32)\n"
"1.1920929f-7\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:435
#, no-wrap
msgid ""
"julia> eps(Float64)\n"
"2.220446049250313e-16\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:439
#, no-wrap
msgid ""
"julia> eps() # same as eps(Float64)\n"
"2.220446049250313e-16\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:445
msgid ""
"These values are `2.0^-23` and `2.0^-52` as [`Float32`](@ref) and [`Float64`]"
"(@ref) values, respectively. The [`eps`](@ref) function can also take a "
"floating-point value as an argument, and gives the absolute difference "
"between that value and the next representable floating point value. That is, "
"`eps(x)` yields a value of the same type as `x` such that `x + eps(x)` is "
"the next representable floating-point value larger than `x`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:449
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> eps(1.0)\n"
"2.220446049250313e-16\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:452
#, no-wrap
msgid ""
"julia> eps(1000.)\n"
"1.1368683772161603e-13\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:455
#, no-wrap
msgid ""
"julia> eps(1e-27)\n"
"1.793662034335766e-43\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:459
#, no-wrap
msgid ""
"julia> eps(0.0)\n"
"5.0e-324\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:465
msgid ""
"The distance between two adjacent representable floating-point numbers is "
"not constant, but is smaller for smaller values and larger for larger "
"values. In other words, the representable floating-point numbers are densest "
"in the real number line near zero, and grow sparser exponentially as one "
"moves farther away from zero. By definition, `eps(1.0)` is the same as "
"`eps(Float64)` since `1.0` is a 64-bit floating-point value."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:468
msgid ""
"Julia also provides the [`nextfloat`](@ref) and [`prevfloat`](@ref) "
"functions which return the next largest or smallest representable floating-"
"point number to the argument respectively:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:472
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = 1.25f0\n"
"1.25f0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:475
#, no-wrap
msgid ""
"julia> nextfloat(x)\n"
"1.2500001f0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:478
#, no-wrap
msgid ""
"julia> prevfloat(x)\n"
"1.2499999f0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:481
#, no-wrap
msgid ""
"julia> bitstring(prevfloat(x))\n"
"\"00111111100111111111111111111111\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:484
#, no-wrap
msgid ""
"julia> bitstring(x)\n"
"\"00111111101000000000000000000000\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:488
#, no-wrap
msgid ""
"julia> bitstring(nextfloat(x))\n"
"\"00111111101000000000000000000001\"\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:491
msgid ""
"This example highlights the general principle that the adjacent "
"representable floating-point numbers also have adjacent binary integer "
"representations."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:492
#, no-wrap
msgid "Rounding modes"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:498
msgid ""
"If a number doesn't have an exact floating-point representation, it must be "
"rounded to an appropriate representable value. However, the manner in which "
"this rounding is done can be changed if required according to the rounding "
"modes presented in the [IEEE 754 standard](https://en.wikipedia.org/wiki/"
"IEEE_754-2008)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:501
msgid ""
"The default mode used is always [`RoundNearest`](@ref), which rounds to the "
"nearest representable value, with ties rounded towards the nearest value "
"with an even least significant bit."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:502
#, no-wrap
msgid "Background and References"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:507
msgid ""
"Floating-point arithmetic entails many subtleties which can be surprising to "
"users who are unfamiliar with the low-level implementation details. However, "
"these subtleties are described in detail in most books on scientific "
"computation, and also in the following references:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:522
msgid ""
"The definitive guide to floating point arithmetic is the [IEEE 754-2008 "
"Standard](https://standards.ieee.org/standard/754-2008.html); however, it is "
"not available for free online."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:522
msgid ""
"For a brief but lucid presentation of how floating-point numbers are "
"represented, see John D.  Cook's [article](https://www.johndcook.com/"
"blog/2009/04/06/anatomy-of-a-floating-point-number/)  on the subject as well "
"as his [introduction](https://www.johndcook.com/blog/2009/04/06/numbers-are-"
"a-leaky-abstraction/)  to some of the issues arising from how this "
"representation differs in behavior from the idealized abstraction of real "
"numbers."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:522
msgid ""
"Also recommended is Bruce Dawson's [series of blog posts on floating-point "
"numbers](https://randomascii.wordpress.com/2012/05/20/thats-not-normalthe-"
"performance-of-odd-floats/)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:522
msgid ""
"For an excellent, in-depth discussion of floating-point numbers and issues "
"of numerical accuracy encountered when computing with them, see David "
"Goldberg's paper [What Every Computer Scientist Should Know About Floating-"
"Point Arithmetic](http://citeseerx.ist.psu.edu/viewdoc/download?"
"doi=10.1.1.22.6768&rep=rep1&type=pdf)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:522
msgid ""
"For even more extensive documentation of the history of, rationale for, and "
"issues with floating-point numbers, as well as discussion of many other "
"topics in numerical computing, see the [collected writings](https://people."
"eecs.berkeley.edu/~wkahan/)  of [William Kahan](https://en.wikipedia.org/"
"wiki/William_Kahan), commonly known as the \"Father of Floating-Point\". Of "
"particular interest may be [An Interview with the Old Man of Floating-Point]"
"(https://people.eecs.berkeley.edu/~wkahan/ieee754status/754story.html)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:523
#, no-wrap
msgid "Arbitrary Precision Arithmetic"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:529
msgid ""
"To allow computations with arbitrary-precision integers and floating point "
"numbers, Julia wraps the [GNU Multiple Precision Arithmetic Library (GMP)]"
"(https://gmplib.org) and the [GNU MPFR Library](https://www.mpfr.org), "
"respectively. The [`BigInt`](@ref) and [`BigFloat`](@ref) types are "
"available in Julia for arbitrary precision integer and floating point "
"numbers respectively."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:533
msgid ""
"Constructors exist to create these types from primitive numerical types, and "
"[`parse`](@ref)  can be used to construct them from `AbstractString`s.  Once "
"created, they participate in arithmetic with all other numeric types thanks "
"to Julia's [type promotion and conversion mechanism](@ref conversion-and-"
"promotion):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:537
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> BigInt(typemax(Int64)) + 1\n"
"9223372036854775808\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:540
#, no-wrap
msgid ""
"julia> parse(BigInt, \"123456789012345678901234567890\") + 1\n"
"123456789012345678901234567891\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:543
#, no-wrap
msgid ""
"julia> parse(BigFloat, \"1.23456789012345678901\")\n"
"1.234567890123456789010000000000000000000000000000000000000000000000000000000004\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:546
#, no-wrap
msgid ""
"julia> BigFloat(2.0^66) / 3\n"
"2.459565876494606882133333333333333333333333333333333333333333333333333333333344e+19\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:550
#, no-wrap
msgid ""
"julia> factorial(BigInt(40))\n"
"815915283247897734345611269596115894272000000000\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:553
msgid ""
"However, type promotion between the primitive types above and [`BigInt`]"
"(@ref)/[`BigFloat`](@ref)  is not automatic and must be explicitly stated."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:557
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> x = typemin(Int64)\n"
"-9223372036854775808\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:560
#, no-wrap
msgid ""
"julia> x = x - 1\n"
"9223372036854775807\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:566
#, no-wrap
msgid ""
"julia> y = BigInt(typemin(Int64))\n"
"-9223372036854775808\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:569
#, no-wrap
msgid ""
"julia> y = y - 1\n"
"-9223372036854775809\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:573
#, no-wrap
msgid ""
"julia> typeof(y)\n"
"BigInt\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:579
msgid ""
"The default precision (in number of bits of the significand) and rounding "
"mode of [`BigFloat`](@ref)  operations can be changed globally by calling "
"[`setprecision`](@ref) and [`setrounding`](@ref), and all further "
"calculations will take these changes in account.  Alternatively, the "
"precision or the rounding can be changed only within the execution of a "
"particular block of code by using the same functions with a `do` block:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:585
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> setrounding(BigFloat, RoundUp) do\n"
"           BigFloat(1) + parse(BigFloat, \"0.1\")\n"
"       end\n"
"1.100000000000000000000000000000000000000000000000000000000000000000000000000003\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:590
#, no-wrap
msgid ""
"julia> setrounding(BigFloat, RoundDown) do\n"
"           BigFloat(1) + parse(BigFloat, \"0.1\")\n"
"       end\n"
"1.099999999999999999999999999999999999999999999999999999999999999999999999999986\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:596
#, no-wrap
msgid ""
"julia> setprecision(40) do\n"
"           BigFloat(1) + parse(BigFloat, \"0.1\")\n"
"       end\n"
"1.1000000000004\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:597
#, no-wrap
msgid "[Numeric Literal Coefficients](@id man-numeric-literal-coefficients)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:602
msgid ""
"To make common numeric formulae and expressions clearer, Julia allows "
"variables to be immediately preceded by a numeric literal, implying "
"multiplication. This makes writing polynomial expressions much cleaner:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:606
#, no-wrap
msgid ""
"```jldoctest numeric-coefficients\n"
"julia> x = 3\n"
"3\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:609
#, no-wrap
msgid ""
"julia> 2x^2 - 3x + 1\n"
"10\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:613
#, no-wrap
msgid ""
"julia> 1.5x^2 - .5x + 1\n"
"13.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:615
msgid "It also makes writing exponential functions more elegant:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:620
#, no-wrap
msgid ""
"```jldoctest numeric-coefficients\n"
"julia> 2^2x\n"
"64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:627
msgid ""
"The precedence of numeric literal coefficients is slightly lower than that "
"of unary operators such as negation.  So `-2x` is parsed as `(-2) * x` and "
"`√2x` is parsed as `(√2) * x`.  However, numeric literal coefficients parse "
"similarly to unary operators when combined with exponentiation.  For example "
"`2^3x` is parsed as `2^(3x)`, and `2x^3` is parsed as `2*(x^3)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:629
msgid ""
"Numeric literals also work as coefficients to parenthesized expressions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:639
#, no-wrap
msgid ""
"```jldoctest numeric-coefficients\n"
"julia> 2(x-1)^2 - 3(x-1) + 1\n"
"3\n"
"```\n"
"!!! note\n"
"    The precedence of numeric literal coefficients used for implicit\n"
"    multiplication is higher than other binary operators such as multiplication\n"
"    (`*`), and division (`/`, `\\`, and `//`).  This means, for example, that\n"
"    `1 / 2im` equals `-0.5im` and `6 // 2(2 + 1)` equals `1 // 1`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:642
msgid ""
"Additionally, parenthesized expressions can be used as coefficients to "
"variables, implying multiplication of the expression by the variable:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:647
#, no-wrap
msgid ""
"```jldoctest numeric-coefficients\n"
"julia> (x-1)x\n"
"6\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:650
msgid ""
"Neither juxtaposition of two parenthesized expressions, nor placing a "
"variable before a parenthesized expression, however, can be used to imply "
"multiplication:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:654
#, no-wrap
msgid ""
"```jldoctest numeric-coefficients\n"
"julia> (x-1)(x+1)\n"
"ERROR: MethodError: objects of type Int64 are not callable\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:658
#, no-wrap
msgid ""
"julia> x(x+1)\n"
"ERROR: MethodError: objects of type Int64 are not callable\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:663
msgid ""
"Both expressions are interpreted as function application: any expression "
"that is not a numeric literal, when immediately followed by a parenthetical, "
"is interpreted as a function applied to the values in parentheses (see "
"[Functions](@ref) for more about functions). Thus, in both of these cases, "
"an error occurs since the left-hand value is not a function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:667
msgid ""
"The above syntactic enhancements significantly reduce the visual noise "
"incurred when writing common mathematical formulae. Note that no whitespace "
"may come between a numeric literal coefficient and the identifier or "
"parenthesized expression which it multiplies."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:668
#, no-wrap
msgid "Syntax Conflicts"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:673
msgid ""
"Juxtaposed literal coefficient syntax may conflict with two numeric literal "
"syntaxes: hexadecimal integer literals and engineering notation for floating-"
"point literals. Here are some situations where syntactic conflicts arise:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:680
msgid ""
"The hexadecimal integer literal expression `0xff` could be interpreted as "
"the numeric literal `0` multiplied by the variable `xff`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:680
msgid ""
"The floating-point literal expression `1e10` could be interpreted as the "
"numeric literal `1` multiplied by the variable `e10`, and similarly with the "
"equivalent `E` form."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:680
msgid ""
"The 32-bit floating-point literal expression `1.5f22` could be interpreted "
"as the numeric literal `1.5` multiplied by the variable `f22`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:682
msgid ""
"In all cases the ambiguity is resolved in favor of interpretation as numeric "
"literals:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:686
msgid "Expressions starting with `0x` are always hexadecimal literals."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:686
msgid ""
"Expressions starting with a numeric literal followed by `e` or `E` are "
"always floating-point literals."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:686
msgid ""
"Expressions starting with a numeric literal followed by `f` are always 32-"
"bit floating-point literals."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:691
msgid ""
"Unlike `E`, which is equivalent to `e` in numeric literals for historical "
"reasons, `F` is just another letter and does not behave like `f` in numeric "
"literals. Hence, expressions starting with a numeric literal followed by `F` "
"are interpreted as the numerical literal multiplied by a variable, which "
"means that, for example, `1.5F22` is equal to `1.5 * F22`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:692
#, no-wrap
msgid "Literal zero and one"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:696
msgid ""
"Julia provides functions which return literal 0 and 1 corresponding to a "
"specified type or the type of a given variable."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:701
#, no-wrap
msgid ""
"| Function          | Description                                      |\n"
"|:----------------- |:------------------------------------------------ |\n"
"| [`zero(x)`](@ref) | Literal zero of type `x` or type of variable `x` |\n"
"| [`one(x)`](@ref)  | Literal one of type `x` or type of variable `x`  |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:704
msgid ""
"These functions are useful in [Numeric Comparisons](@ref) to avoid overhead "
"from unnecessary [type conversion](@ref conversion-and-promotion)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:706
msgid "Examples:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:710
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> zero(Float32)\n"
"0.0f0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:713
#, no-wrap
msgid ""
"julia> zero(1.0)\n"
"0.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:716
#, no-wrap
msgid ""
"julia> one(Int32)\n"
"1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/integers-and-floating-point-numbers.md:719
#, no-wrap
msgid ""
"julia> one(BigFloat)\n"
"1.0\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/style-guide.md:1
#, no-wrap
msgid "Style Guide"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:6
msgid ""
"The following sections explain a few aspects of idiomatic Julia coding "
"style. None of these rules are absolute; they are only suggestions to help "
"familiarize you with the language and to help you choose among alternative "
"designs."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:7
#, no-wrap
msgid "Write functions, not just scripts"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:14
msgid ""
"Writing code as a series of steps at the top level is a quick way to get "
"started solving a problem, but you should try to divide a program into "
"functions as soon as possible. Functions are more reusable and testable, and "
"clarify what steps are being done and what their inputs and outputs are. "
"Furthermore, code inside functions tends to run much faster than top level "
"code, due to how Julia's compiler works."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:17
msgid ""
"It is also worth emphasizing that functions should take arguments, instead "
"of operating directly on global variables (aside from constants like [`pi`]"
"(@ref))."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:18
#, no-wrap
msgid "Avoid writing overly-specific types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:21
msgid "Code should be as generic as possible. Instead of writing:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:25
msgid "```julia Complex{Float64}(x)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:27
msgid "it's better to use available generic functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:31
msgid "```julia complex(float(x))  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:33
msgid ""
"The second version will convert `x` to an appropriate type, instead of "
"always the same type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:41
msgid ""
"This style point is especially relevant to function arguments. For example, "
"don't declare an argument to be of type `Int` or [`Int32`](@ref) if it "
"really could be any integer, expressed with the abstract type [`Integer`]"
"(@ref). In fact, in many cases you can omit the argument type altogether, "
"unless it is needed to disambiguate from other method definitions, since a "
"[`MethodError`](@ref) will be thrown anyway if a type is passed that does "
"not support any of the requisite operations. (This is known as [duck typing]"
"(https://en.wikipedia.org/wiki/Duck_typing).)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:44
msgid ""
"For example, consider the following definitions of a function `addone` that "
"returns one plus its argument:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:51
#, no-wrap
msgid ""
"```julia\n"
"addone(x::Int) = x + 1                 # works only for Int\n"
"addone(x::Integer) = x + oneunit(x)    # any integer type\n"
"addone(x::Number) = x + oneunit(x)     # any numeric type\n"
"addone(x) = x + oneunit(x)             # any type supporting + and oneunit\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:60
msgid ""
"The last definition of `addone` handles any type supporting [`oneunit`]"
"(@ref) (which returns 1 in the same type as `x`, which avoids unwanted type "
"promotion) and the [`+`](@ref) function with those arguments. The key thing "
"to realize is that there is *no performance penalty* to defining *only* the "
"general `addone(x) = x + oneunit(x)`, because Julia will automatically "
"compile specialized versions as needed. For example, the first time you call "
"`addone(12)`, Julia will automatically compile a specialized `addone` "
"function for `x::Int` arguments, with the call to `oneunit` replaced by its "
"inlined value `1`. Therefore, the first three definitions of `addone` above "
"are completely redundant with the fourth definition."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:61
#, no-wrap
msgid "Handle excess argument diversity in the caller"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:64
#: ext/julia/doc/src/manual/style-guide.md:92
msgid "Instead of:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:72
#, no-wrap
msgid ""
"```julia\n"
"function foo(x, y)\n"
"    x = Int(x); y = Int(y)\n"
"    ...\n"
"end\n"
"foo(x, y)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:81
#, no-wrap
msgid ""
"```julia\n"
"function foo(x::Int, y::Int)\n"
"    ...\n"
"end\n"
"foo(Int(x), Int(y))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:84
msgid ""
"This is better style because `foo` does not really accept numbers of all "
"types; it really needs `Int` s."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:88
msgid ""
"One issue here is that if a function inherently requires integers, it might "
"be better to force the caller to decide how non-integers should be converted "
"(e.g. floor or ceiling). Another issue is that declaring more specific types "
"leaves more \"space\" for future method definitions."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:89
#, no-wrap
msgid "Append `!` to names of functions that modify their arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:101
#, no-wrap
msgid ""
"```julia\n"
"function double(a::AbstractArray{<:Number})\n"
"    for i = firstindex(a):lastindex(a)\n"
"        a[i] *= 2\n"
"    end\n"
"    return a\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:112
#, no-wrap
msgid ""
"```julia\n"
"function double!(a::AbstractArray{<:Number})\n"
"    for i = firstindex(a):lastindex(a)\n"
"        a[i] *= 2\n"
"    end\n"
"    return a\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:117
msgid ""
"Julia Base uses this convention throughout and contains examples of "
"functions with both copying and modifying forms (e.g., [`sort`](@ref) and "
"[`sort!`](@ref)), and others which are just modifying (e.g., [`push!`]"
"(@ref), [`pop!`](@ref), [`splice!`](@ref)).  It is typical for such "
"functions to also return the modified array for convenience."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:118
#, no-wrap
msgid "Avoid strange type `Union`s"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:121
msgid ""
"Types such as `Union{Function,AbstractString}` are often a sign that some "
"design could be cleaner."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:122
#, no-wrap
msgid "Avoid elaborate container types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:125
msgid "It is usually not much help to construct arrays like the following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:129
msgid ""
"```julia a = Vector{Union{Int,AbstractString,Tuple,Array}}(undef, n)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:132
msgid ""
"In this case `Vector{Any}(undef, n)` is better. It is also more helpful to "
"the compiler to annotate specific uses (e.g. `a[i]::Int`) than to try to "
"pack many alternatives into one type."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:133
#, no-wrap
msgid "Use naming conventions consistent with Julia `base/`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/style-guide.md:142
msgid ""
"modules and type names use capitalization and camel case: `module "
"SparseArrays`, `struct UnitRange`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/style-guide.md:142
msgid ""
"functions are lowercase ([`maximum`](@ref), [`convert`](@ref)) and, when "
"readable, with multiple words squashed together ([`isequal`](@ref), "
"[`haskey`](@ref)). When necessary, use underscores as word separators. "
"Underscores are also used to indicate a combination of concepts "
"([`remotecall_fetch`](@ref)  as a more efficient implementation of "
"`fetch(remotecall(...))`) or as modifiers."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/style-guide.md:142
msgid ""
"conciseness is valued, but avoid abbreviation ([`indexin`](@ref) rather than "
"`indxin`) as it becomes difficult to remember whether and how particular "
"words are abbreviated."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:145
msgid ""
"If a function name requires multiple words, consider whether it might "
"represent more than one concept and might be better split into pieces."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:146
#, no-wrap
msgid "Write functions with argument ordering similar to Julia Base"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:150
msgid ""
"As a general rule, the Base library uses the following order of arguments to "
"functions, as applicable:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/manual/style-guide.md:154
msgid ""
"**Function argument**.  Putting a function argument first permits the use of "
"[`do`](@ref) blocks for passing multiline anonymous functions."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/manual/style-guide.md:158
msgid ""
"**I/O stream**.  Specifying the `IO` object first permits passing the "
"function to functions such as [`sprint`](@ref), e.g. `sprint(show, x)`."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/manual/style-guide.md:162
msgid ""
"**Input being mutated**.  For example, in [`fill!(x, v)`](@ref fill!), `x` "
"is the object being mutated and it appears before the value to be inserted "
"into `x`."
msgstr ""

#. type: Bullet: '4. '
#: ext/julia/doc/src/manual/style-guide.md:169
msgid ""
"**Type**.  Passing a type typically means that the output will have the "
"given type.  In [`parse(Int, \"1\")`](@ref parse), the type comes before the "
"string to parse.  There are many such examples where the type appears first, "
"but it's useful to note that in [`read(io, String)`](@ref read), the `IO` "
"argument appears before the type, which is in keeping with the order "
"outlined here."
msgstr ""

#. type: Bullet: '5. '
#: ext/julia/doc/src/manual/style-guide.md:172
msgid ""
"**Input not being mutated**.  In `fill!(x, v)`, `v` is *not* being mutated "
"and it comes after `x`."
msgstr ""

#. type: Bullet: '6. '
#: ext/julia/doc/src/manual/style-guide.md:176
msgid ""
"**Key**.  For associative collections, this is the key of the key-value "
"pair(s).  For other indexed collections, this is the index."
msgstr ""

#. type: Bullet: '7. '
#: ext/julia/doc/src/manual/style-guide.md:180
msgid ""
"**Value**.  For associative collections, this is the value of the key-value "
"pair(s).  In cases like `fill!(x, v)`, this is `v`."
msgstr ""

#. type: Bullet: '8. '
#: ext/julia/doc/src/manual/style-guide.md:183
msgid "**Everything else**.  Any other arguments."
msgstr ""

#. type: Bullet: '9. '
#: ext/julia/doc/src/manual/style-guide.md:189
msgid ""
"**Varargs**.  This refers to arguments that can be listed indefinitely at "
"the end of a function call.  For example, in `Matrix{T}(undef, dims)`, the "
"dimensions can be given as a [`Tuple`](@ref), e.g. `Matrix{T}(undef, "
"(1,2))`, or as [`Vararg`](@ref)s, e.g. `Matrix{T}(undef, 1, 2)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:193
#, no-wrap
msgid ""
"10. **Keyword arguments**.\n"
"   In Julia keyword arguments have to come last anyway in function definitions; they're\n"
"   listed here for the sake of completeness.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:197
msgid ""
"The vast majority of functions will not take every kind of argument listed "
"above; the numbers merely denote the precedence that should be used for any "
"applicable arguments to a function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:202
msgid ""
"There are of course a few exceptions.  For example, in [`convert`](@ref), "
"the type should always come first.  In [`setindex!`](@ref), the value comes "
"before the indices so that the indices can be provided as varargs."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:205
msgid ""
"When designing APIs, adhering to this general order as much as possible is "
"likely to give users of your functions a more consistent experience."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:206
#, no-wrap
msgid "Don't overuse try-catch"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:209
msgid "It is better to avoid errors than to rely on catching them."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:210
#, no-wrap
msgid "Don't parenthesize conditions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:213
msgid ""
"Julia doesn't require parens around conditions in `if` and `while`. Write:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:217
msgid "```julia if a == b ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:219
msgid "instead of:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:223
msgid "```julia if (a == b)  ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:224
#, no-wrap
msgid "Don't overuse `...`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:229
msgid ""
"Splicing function arguments can be addictive. Instead of `[a..., b...]`, use "
"simply `[a; b]`, which already concatenates arrays. [`collect(a)`](@ref) is "
"better than `[a...]`, but since `a` is already iterable it is often even "
"better to leave it alone, and not convert it to an array."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:230
#, no-wrap
msgid "Don't use unnecessary static parameters"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:233
msgid "A function signature:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:237
#, no-wrap
msgid ""
"```julia\n"
"foo(x::T) where {T<:Real} = ...\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:239
msgid "should be written as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:243
msgid "```julia foo(x::Real) = ...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:247
msgid ""
"instead, especially if `T` is not used in the function body. Even if `T` is "
"used, it can be replaced with [`typeof(x)`](@ref) if convenient. There is no "
"performance difference. Note that this is not a general caution against "
"static parameters, just against uses where they are not needed."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:250
msgid ""
"Note also that container types, specifically may need type parameters in "
"function calls. See the FAQ [Avoid fields with abstract containers](@ref) "
"for more information."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:251
#, no-wrap
msgid "Avoid confusion about whether something is an instance or a type"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:254
msgid "Sets of definitions like the following are confusing:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:259
msgid "```julia foo(::Type{MyType}) = ...  foo(::MyType) = foo(MyType)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:262
msgid ""
"Decide whether the concept in question will be written as `MyType` or "
"`MyType()`, and stick to it."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:265
msgid ""
"The preferred style is to use instances by default, and only add methods "
"involving `Type{MyType}` later if they become necessary to solve some "
"problem."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:270
msgid ""
"If a type is effectively an enumeration, it should be defined as a single "
"(ideally immutable struct or primitive)  type, with the enumeration values "
"being instances of it. Constructors and conversions can check whether values "
"are valid. This design is preferred over making the enumeration an abstract "
"type, with the \"values\" as subtypes."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:271
#, no-wrap
msgid "Don't overuse macros"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:274
msgid "Be aware of when a macro could really be a function instead."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:278
msgid ""
"Calling [`eval`](@ref) inside a macro is a particularly dangerous warning "
"sign; it means the macro will only work when called at the top level. If "
"such a macro is written as a function instead, it will naturally have access "
"to the run-time values it needs."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:279
#, no-wrap
msgid "Don't expose unsafe operations at the interface level"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:282
msgid "If you have a type that uses a native pointer:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:289
#, no-wrap
msgid ""
"```julia\n"
"mutable struct NativeType\n"
"    p::Ptr{UInt8}\n"
"    ...\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:291
msgid "don't write definitions like the following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:295
msgid "```julia getindex(x::NativeType, i) = unsafe_load(x.p, i)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:298
msgid ""
"The problem is that users of this type can write `x[i]` without realizing "
"that the operation is unsafe, and then be susceptible to memory bugs."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:301
msgid ""
"Such a function should either check the operation to ensure it is safe, or "
"have `unsafe` somewhere in its name to alert callers."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:302
#, no-wrap
msgid "Don't overload methods of base container types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:305
msgid "It is possible to write definitions like the following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:309
msgid "```julia show(io::IO, v::Vector{MyType}) = ...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:313
msgid ""
"This would provide custom showing of vectors with a specific new element "
"type. While tempting, this should be avoided. The trouble is that users will "
"expect a well-known type like `Vector()` to behave in a certain way, and "
"overly customizing its behavior can make it harder to work with."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:314
#, no-wrap
msgid "Avoid type piracy"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:322
msgid ""
"\"Type piracy\" refers to the practice of extending or redefining methods in "
"Base or other packages on types that you have not defined. In some cases, "
"you can get away with type piracy with little ill effect. In extreme cases, "
"however, you can even crash Julia (e.g. if your method extension or "
"redefinition causes invalid input to be passed to a `ccall`). Type piracy "
"can complicate reasoning about code, and may introduce incompatibilities "
"that are hard to predict and diagnose."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:324
msgid ""
"As an example, suppose you wanted to define multiplication on symbols in a "
"module:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:331
msgid ""
"```julia module A import Base.* *(x::Symbol, y::Symbol) = Symbol(x,y)  end "
"```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:336
msgid ""
"The problem is that now any other module that uses `Base.*` will also see "
"this definition.  Since `Symbol` is defined in Base and is used by other "
"modules, this can change the behavior of unrelated code unexpectedly. There "
"are several alternatives here, including using a different function name, or "
"wrapping the `Symbol`s in another type that you define."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:344
msgid ""
"Sometimes, coupled packages may engage in type piracy to separate features "
"from definitions, especially when the packages were designed by "
"collaborating authors, and when the definitions are reusable. For example, "
"one package might provide some types useful for working with colors; another "
"package could define methods for those types that enable conversions between "
"color spaces. Another example might be a package that acts as a thin wrapper "
"for some C code, which another package might then pirate to implement a "
"higher-level, Julia-friendly API."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:345
#, no-wrap
msgid "Be careful with type equality"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:350
#, no-wrap
msgid ""
"You generally want to use [`isa`](@ref) and [`<:`](@ref) for testing types,\n"
"not `==`. Checking types for exact equality typically only makes sense when comparing to a known\n"
"concrete type (e.g. `T == Float64`), or if you *really, really* know what you're doing.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:351
#, no-wrap
msgid "Do not write `x->f(x)`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:356
#, no-wrap
msgid ""
"Since higher-order functions are often called with anonymous functions, it is easy to conclude\n"
"that this is desirable or even necessary. But any function can be passed directly, without being\n"
"\"wrapped\" in an anonymous function. Instead of writing `map(x->f(x), a)`, write [`map(f, a)`](@ref).\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/style-guide.md:357
#, no-wrap
msgid "Avoid using floats for numeric literals in generic code when possible"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:362
msgid ""
"If you write generic code which handles numbers, and which can be expected "
"to run with many different numeric type arguments, try using literals of a "
"numeric type that will affect the arguments as little as possible through "
"promotion."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:364
msgid "For example,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:368
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> f(x) = 2.0 * x\n"
"f (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:371
#, no-wrap
msgid ""
"julia> f(1//2)\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:374
#, no-wrap
msgid ""
"julia> f(1/2)\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:378
#, no-wrap
msgid ""
"julia> f(1)\n"
"2.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:380
msgid "while"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:384
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> g(x) = 2 * x\n"
"g (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:387
#, no-wrap
msgid ""
"julia> g(1//2)\n"
"1//1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:390
#, no-wrap
msgid ""
"julia> g(1/2)\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:394
#, no-wrap
msgid ""
"julia> g(1)\n"
"2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:399
msgid ""
"As you can see, the second version, where we used an `Int` literal, "
"preserved the type of the input argument, while the first didn't. This is "
"because e.g. `promote_type(Int, Float64) == Float64`, and promotion happens "
"with the multiplication. Similarly, [`Rational`](@ref) literals are less "
"type disruptive than [`Float64`](@ref) literals, but more disruptive than "
"`Int`s:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:403
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> h(x) = 2//1 * x\n"
"h (generic function with 1 method)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:406
#, no-wrap
msgid ""
"julia> h(1//2)\n"
"1//1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:409
#, no-wrap
msgid ""
"julia> h(1/2)\n"
"1.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:413
#, no-wrap
msgid ""
"julia> h(1)\n"
"2//1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/style-guide.md:415
msgid ""
"Thus, use `Int` literals when possible, with `Rational{Int}` for literal non-"
"integer numbers, in order to make it easier to use your code."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/profile.md:1
#, no-wrap
msgid "Profiling"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:7
msgid ""
"The `Profile` module provides tools to help developers improve the "
"performance of their code. When used, it takes measurements on running code, "
"and produces output that helps you understand how much time is spent on "
"individual line(s). The most common usage is to identify \"bottlenecks\" as "
"targets for optimization."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:12
#, no-wrap
msgid ""
"`Profile` implements what is known as a \"sampling\" or [statistical profiler](https://en.wikipedia.org/wiki/Profiling_(computer_programming)).\n"
" It works by periodically taking a backtrace during the execution of any task. Each backtrace\n"
"captures the currently-running function and line number, plus the complete chain of function calls\n"
"that led to this line, and hence is a \"snapshot\" of the current state of execution.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:17
msgid ""
"If much of your run time is spent executing a particular line of code, this "
"line will show up frequently in the set of all backtraces. In other words, "
"the \"cost\" of a given line--or really, the cost of the sequence of "
"function calls up to and including this line--is proportional to how often "
"it appears in the set of all backtraces."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:23
msgid ""
"A sampling profiler does not provide complete line-by-line coverage, because "
"the backtraces occur at intervals (by default, 1 ms on Unix systems and 10 "
"ms on Windows, although the actual scheduling is subject to operating system "
"load). Moreover, as discussed further below, because samples are collected "
"at a sparse subset of all execution points, the data collected by a sampling "
"profiler is subject to statistical noise."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:25
msgid ""
"Despite these limitations, sampling profilers have substantial strengths:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/profile.md:31
msgid ""
"You do not have to make any modifications to your code to take timing "
"measurements (in contrast to the alternative [instrumenting profiler]"
"(https://github.com/timholy/IProfile.jl))."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/profile.md:31
msgid ""
"It can profile into Julia's core code and even (optionally) into C and "
"Fortran libraries."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/profile.md:31
msgid ""
"By running \"infrequently\" there is very little performance overhead; while "
"profiling, your code can run at nearly native speed."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:34
msgid ""
"For these reasons, it's recommended that you try using the built-in sampling "
"profiler before considering any alternatives."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/profile.md:35
#, no-wrap
msgid "Basic usage"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:38
msgid "Let's work with a simple test case:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:45
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> function myfunc()\n"
"           A = rand(200, 200, 400)\n"
"           maximum(A)\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:48
msgid ""
"It's a good idea to first run the code you intend to profile at least once "
"(unless you want to profile Julia's JIT-compiler):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:52
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> myfunc() # run once to force compilation\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:54
msgid "Now we're ready to profile this function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:57
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> using Profile\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:60
#, no-wrap
msgid ""
"julia> @profile myfunc()\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:63
msgid ""
"To see the profiling results, there is a [graphical browser](https://github."
"com/timholy/ProfileView.jl)  available, but here we'll use the text-based "
"display that comes with the standard library:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:84
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> Profile.print()\n"
"80 ./event.jl:73; (::Base.REPL.##1#2{Base.REPL.REPLBackend})()\n"
" 80 ./REPL.jl:97; macro expansion\n"
"  80 ./REPL.jl:66; eval_user_input(::Any, ::Base.REPL.REPLBackend)\n"
"   80 ./boot.jl:235; eval(::Module, ::Any)\n"
"    80 ./<missing>:?; anonymous\n"
"     80 ./profile.jl:23; macro expansion\n"
"      52 ./REPL[1]:2; myfunc()\n"
"       38 ./random.jl:431; rand!(::MersenneTwister, ::Array{Float64,3}, ::Int64, ::Type{B...\n"
"        38 ./dSFMT.jl:84; dsfmt_fill_array_close_open!(::Base.dSFMT.DSFMT_state, ::Ptr{F...\n"
"       14 ./random.jl:278; rand\n"
"        14 ./random.jl:277; rand\n"
"         14 ./random.jl:366; rand\n"
"          14 ./random.jl:369; rand\n"
"      28 ./REPL[1]:3; myfunc()\n"
"       28 ./reduce.jl:270; _mapreduce(::Base.#identity, ::Base.#scalarmax, ::IndexLinear,...\n"
"        3  ./reduce.jl:426; mapreduce_impl(::Base.#identity, ::Base.#scalarmax, ::Array{F...\n"
"        25 ./reduce.jl:428; mapreduce_impl(::Base.#identity, ::Base.#scalarmax, ::Array{F...\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:92
msgid ""
"Each line of this display represents a particular spot (line number) in the "
"code. Indentation is used to indicate the nested sequence of function calls, "
"with more-indented lines being deeper in the sequence of calls. In each "
"line, the first \"field\" is the number of backtraces (samples) taken *at "
"this line or in any functions executed by this line*.  The second field is "
"the file name and line number and the third field is the function name.  "
"Note that the specific line numbers may change as Julia's code changes; if "
"you want to follow along, it's best to run this example yourself."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:99
msgid ""
"In this example, we can see that the top level function called is in the "
"file `event.jl`. This is the function that runs the REPL when you launch "
"Julia. If you examine line 97 of `REPL.jl`, you'll see this is where the "
"function `eval_user_input()` is called. This is the function that evaluates "
"what you type at the REPL, and since we're working interactively these "
"functions were invoked when we entered `@profile myfunc()`. The next line "
"reflects actions taken in the [`@profile`](@ref)  macro."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:104
msgid ""
"The first line shows that 80 backtraces were taken at line 73 of `event.jl`, "
"but it's not that this line was \"expensive\" on its own: the third line "
"reveals that all 80 of these backtraces were actually triggered inside its "
"call to `eval_user_input`, and so on. To find out which operations are "
"actually taking the time, we need to look deeper in the call chain."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:106
msgid "The first \"important\" line in this output is this one:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:110
msgid "``` 52 ./REPL[1]:2; myfunc()  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:116
msgid ""
"`REPL` refers to the fact that we defined `myfunc` in the REPL, rather than "
"putting it in a file; if we had used a file, this would show the file name. "
"The `[1]` shows that the function `myfunc` was the first expression "
"evaluated in this REPL session. Line 2 of `myfunc()` contains the call to "
"`rand`, and there were 52 (out of 80) backtraces that occurred at this line. "
"Below that, you can see a call to `dsfmt_fill_array_close_open!` inside "
"`dSFMT.jl`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:118
msgid "A little further down, you see:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:122
msgid "``` 28 ./REPL[1]:3; myfunc()  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:126
msgid ""
"Line 3 of `myfunc` contains the call to `maximum`, and there were 28 (out of "
"80) backtraces taken here. Below that, you can see the specific places in "
"`base/reduce.jl` that carry out the time-consuming operations in the "
"`maximum` function for this type of input data."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:130
msgid ""
"Overall, we can tentatively conclude that generating the random numbers is "
"approximately twice as expensive as finding the maximum element. We could "
"increase our confidence in this result by collecting more samples:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:133
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @profile (for i = 1:100; myfunc(); end)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:145
#, no-wrap
msgid ""
"julia> Profile.print()\n"
"[....]\n"
" 3821 ./REPL[1]:2; myfunc()\n"
"  3511 ./random.jl:431; rand!(::MersenneTwister, ::Array{Float64,3}, ::Int64, ::Type...\n"
"   3511 ./dSFMT.jl:84; dsfmt_fill_array_close_open!(::Base.dSFMT.DSFMT_state, ::Ptr...\n"
"  310  ./random.jl:278; rand\n"
"   [....]\n"
" 2893 ./REPL[1]:3; myfunc()\n"
"  2893 ./reduce.jl:270; _mapreduce(::Base.#identity, ::Base.#scalarmax, ::IndexLinea...\n"
"   [....]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:151
msgid ""
"In general, if you have `N` samples collected at a line, you can expect an "
"uncertainty on the order of `sqrt(N)` (barring other sources of noise, like "
"how busy the computer is with other tasks).  The major exception to this "
"rule is garbage collection, which runs infrequently but tends to be quite "
"expensive. (Since Julia's garbage collector is written in C, such events can "
"be detected using the `C=true` output mode described below, or by using "
"[ProfileView.jl](https://github.com/timholy/ProfileView.jl).)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:154
msgid ""
"This illustrates the default \"tree\" dump; an alternative is the \"flat\" "
"dump, which accumulates counts independent of their nesting:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:179
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> Profile.print(format=:flat)\n"
" Count File          Line Function\n"
"  6714 ./<missing>     -1 anonymous\n"
"  6714 ./REPL.jl       66 eval_user_input(::Any, ::Base.REPL.REPLBackend)\n"
"  6714 ./REPL.jl       97 macro expansion\n"
"  3821 ./REPL[1]        2 myfunc()\n"
"  2893 ./REPL[1]        3 myfunc()\n"
"  6714 ./REPL[7]        1 macro expansion\n"
"  6714 ./boot.jl      235 eval(::Module, ::Any)\n"
"  3511 ./dSFMT.jl      84 dsfmt_fill_array_close_open!(::Base.dSFMT.DSFMT_s...\n"
"  6714 ./event.jl      73 (::Base.REPL.##1#2{Base.REPL.REPLBackend})()\n"
"  6714 ./profile.jl    23 macro expansion\n"
"  3511 ./random.jl    431 rand!(::MersenneTwister, ::Array{Float64,3}, ::In...\n"
"   310 ./random.jl    277 rand\n"
"   310 ./random.jl    278 rand\n"
"   310 ./random.jl    366 rand\n"
"   310 ./random.jl    369 rand\n"
"  2893 ./reduce.jl    270 _mapreduce(::Base.#identity, ::Base.#scalarmax, :...\n"
"     5 ./reduce.jl    420 mapreduce_impl(::Base.#identity, ::Base.#scalarma...\n"
"   253 ./reduce.jl    426 mapreduce_impl(::Base.#identity, ::Base.#scalarma...\n"
"  2592 ./reduce.jl    428 mapreduce_impl(::Base.#identity, ::Base.#scalarma...\n"
"    43 ./reduce.jl    429 mapreduce_impl(::Base.#identity, ::Base.#scalarma...\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:182
msgid ""
"If your code has recursion, one potentially-confusing point is that a line "
"in a \"child\" function can accumulate more counts than there are total "
"backtraces. Consider the following function definitions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:187
msgid ""
"```julia dumbsum(n::Integer) = n == 1 ? 1 : 1 + dumbsum(n-1)  dumbsum3() = "
"dumbsum(3)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:190
msgid ""
"If you were to profile `dumbsum3`, and a backtrace was taken while it was "
"executing `dumbsum(1)`, the backtrace would look like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:197
#, no-wrap
msgid ""
"```julia\n"
"dumbsum3\n"
"    dumbsum(3)\n"
"        dumbsum(2)\n"
"            dumbsum(1)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:201
msgid ""
"Consequently, this child function gets 3 counts, even though the parent only "
"gets one. The \"tree\" representation makes this much clearer, and for this "
"reason (among others) is probably the most useful way to view the results."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/profile.md:202
#, no-wrap
msgid "Accumulation and clearing"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:207
msgid ""
"Results from [`@profile`](@ref) accumulate in a buffer; if you run multiple "
"pieces of code under [`@profile`](@ref), then [`Profile.print()`](@ref) will "
"show you the combined results. This can be very useful, but sometimes you "
"want to start fresh; you can do so with [`Profile.clear()`](@ref)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/profile.md:208
#, no-wrap
msgid "Options for controlling the display of profile results"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:211
msgid ""
"[`Profile.print`](@ref) has more options than we've described so far. Let's "
"see the full declaration:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:215
msgid ""
"```julia function print(io::IO = stdout, data = fetch(); kwargs...)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:217
msgid ""
"Let's first discuss the two positional arguments, and later the keyword "
"arguments:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/profile.md:223
msgid ""
"`io` -- Allows you to save the results to a buffer, e.g. a file, but the "
"default is to print to `stdout` (the console)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/manual/profile.md:223
msgid ""
"`data` -- Contains the data you want to analyze; by default that is obtained "
"from [`Profile.fetch()`](@ref), which pulls out the backtraces from a pre-"
"allocated buffer. For example, if you want to profile the profiler, you "
"could say:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:230
#, no-wrap
msgid ""
"    ```julia\n"
"    data = copy(Profile.fetch())\n"
"    Profile.clear()\n"
"    @profile Profile.print(stdout, data) # Prints the previous results\n"
"    Profile.print()                      # Prints results from Profile.print()\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:232
msgid "The keyword arguments can be any combination of:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:252
#, no-wrap
msgid ""
"  * `format` -- Introduced above, determines whether backtraces are printed\n"
"     with (default, `:tree`) or without (`:flat`) indentation indicating tree\n"
"     structure.\n"
"  * `C` -- If `true`, backtraces from C and Fortran code are shown (normally they are excluded). Try running the introductory\n"
"    example with `Profile.print(C = true)`. This can be extremely helpful in deciding whether it's\n"
"    Julia code or C code that is causing a bottleneck; setting `C = true` also improves the interpretability\n"
"    of the nesting, at the cost of longer profile dumps.\n"
"  * `combine` -- Some lines of code contain multiple operations; for example, `s += A[i]` contains both an array\n"
"    reference (`A[i]`) and a sum operation. These correspond to different lines in the generated\n"
"    machine code, and hence there may be two or more different addresses captured during backtraces\n"
"    on this line. `combine = true` lumps them together, and is probably what you typically want, but\n"
"    you can generate an output separately for each unique instruction pointer with `combine = false`.\n"
"  * `maxdepth` -- Limits frames at a depth higher than `maxdepth` in the `:tree` format.\n"
"  * `sortedby` -- Controls the order in `:flat` format. `:filefuncline` (default) sorts by the source\n"
"    line, whereas `:count` sorts in order of number of collected samples.\n"
"  * `noisefloor` -- Limits frames that are below the heuristic noise floor of the sample (only applies to format `:tree`).\n"
"    A suggested value to try for this is 2.0 (the default is 0). This parameter hides samples for which `n <= noisefloor * √N`,\n"
"    where `n` is the number of samples on this line, and `N` is the number of samples for the callee.\n"
"  * `mincount` -- Limits frames with less than `mincount` occurrences.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:257
msgid ""
"File/function names are sometimes truncated (with `...`), and indentation is "
"truncated with a `+n` at the beginning, where `n` is the number of extra "
"spaces that would have been inserted, had there been room. If you want a "
"complete profile of deeply-nested code, often a good idea is to save to a "
"file using a wide `displaysize` in an [`IOContext`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:263
#, no-wrap
msgid ""
"```julia\n"
"open(\"/tmp/prof.txt\", \"w\") do s\n"
"    Profile.print(IOContext(s, :displaysize => (24, 500)))\n"
"end\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/profile.md:264
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:271
msgid ""
"[`@profile`](@ref) just accumulates backtraces, and the analysis happens "
"when you call [`Profile.print()`](@ref).  For a long-running computation, "
"it's entirely possible that the pre-allocated buffer for storing backtraces "
"will be filled. If that happens, the backtraces stop but your computation "
"continues.  As a consequence, you may miss some important profiling data "
"(you will get a warning when that happens)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:273
msgid "You can obtain and configure the relevant parameters this way:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:278
msgid ""
"```julia Profile.init() # returns the current settings Profile.init(n = "
"10^7, delay = 0.01)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:282
msgid ""
"`n` is the total number of instruction pointers you can store, with a "
"default value of `10^6`.  If your typical backtrace is 20 instruction "
"pointers, then you can collect 50000 backtraces, which suggests a "
"statistical uncertainty of less than 1%. This may be good enough for most "
"applications."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:289
msgid ""
"Consequently, you are more likely to need to modify `delay`, expressed in "
"seconds, which sets the amount of time that Julia gets between snapshots to "
"perform the requested computations. A very long-running job might not need "
"frequent backtraces. The default setting is `delay = 0.001`.  Of course, you "
"can decrease the delay as well as increase it; however, the overhead of "
"profiling grows once the delay becomes similar to the amount of time needed "
"to take a backtrace (~30 microseconds on the author's laptop)."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/profile.md:290
#, no-wrap
msgid "Memory allocation analysis"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:297
msgid ""
"One of the most common techniques to improve performance is to reduce memory "
"allocation. The total amount of allocation can be measured with [`@time`]"
"(@ref) and [`@allocated`](@ref), and specific lines triggering allocation "
"can often be inferred from profiling via the cost of garbage collection that "
"these lines incur. However, sometimes it is more efficient to directly "
"measure the amount of memory allocated by each line of code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:306
#, no-wrap
msgid ""
"To measure allocation line-by-line, start Julia with the `--track-allocation=<setting>` command-line\n"
"option, for which you can choose `none` (the default, do not measure allocation), `user` (measure\n"
"memory allocation everywhere except Julia's core code), or `all` (measure memory allocation at\n"
"each line of Julia code). Allocation gets measured for each line of compiled code. When you quit\n"
"Julia, the cumulative results are written to text files with `.mem` appended after the file name,\n"
"residing in the same directory as the source file. Each line lists the total number of bytes\n"
"allocated. The [`Coverage` package](https://github.com/JuliaCI/Coverage.jl) contains some elementary\n"
"analysis tools, for example to sort the lines in order of number of bytes allocated.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:315
#, no-wrap
msgid ""
"In interpreting the results, there are a few important details. Under the `user` setting, the\n"
"first line of any function directly called from the REPL will exhibit allocation due to events\n"
"that happen in the REPL code itself. More significantly, JIT-compilation also adds to allocation\n"
"counts, because much of Julia's compiler is written in Julia (and compilation usually requires\n"
"memory allocation). The recommended procedure is to force compilation by executing all the commands\n"
"you want to analyze, then call [`Profile.clear_malloc_data()`](@ref) to reset all allocation counters.\n"
" Finally, execute the desired commands and quit Julia to trigger the generation of the `.mem`\n"
"files.\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/profile.md:316
#, no-wrap
msgid "External Profiling"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:319
msgid ""
"Currently Julia supports `Intel VTune`, `OProfile` and `perf` as external "
"profiling tools."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:322
msgid ""
"Depending on the tool you choose, compile with `USE_INTEL_JITEVENTS`, "
"`USE_OPROFILE_JITEVENTS` and `USE_PERF_JITEVENTS` set to 1 in `Make.user`. "
"Multiple flags are supported."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:324
msgid ""
"Before running Julia set the environment variable `ENABLE_JITPROFILING` to 1."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:327
msgid ""
"Now you have a multitude of ways to employ those tools! For example with "
"`OProfile` you can try a simple recording :"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:332
#, no-wrap
msgid ""
"```\n"
">ENABLE_JITPROFILING=1 sudo operf -Vdebug ./julia test/fastmath.jl\n"
">opreport -l `which ./julia`\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:334
msgid "Or similary with with `perf` :"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:339
msgid ""
"``` $ ENABLE_JITPROFILING=1 perf record -o /tmp/perf.data --call-graph "
"dwarf ./julia /test/fastmath.jl $ perf report --call-graph -G ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:342
msgid ""
"There are many more interesting things that you can measure about your "
"program, to get a comprehensive list please read the [Linux perf examples "
"page](http://www.brendangregg.com/perf.html)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/profile.md:345
msgid ""
"Remember that perf saves for each execution a `perf.data` file that, even "
"for small programs, can get quite large. Also the perf LLVM module saves "
"temporarily debug objects in `~/.debug/jit`, remember to clean that folder "
"frequently."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/unicode-input.md:1
#, no-wrap
msgid "Unicode Input"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/unicode-input.md:9
msgid ""
"The following table lists Unicode characters that can be entered via tab "
"completion of LaTeX-like abbreviations in the Julia REPL (and in various "
"other editing environments).  You can also get information on how to type a "
"symbol by entering it in the REPL help, i.e. by typing `?` and then entering "
"the symbol in the REPL (e.g., by copy-paste from somewhere you saw the "
"symbol)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/unicode-input.md:17
#, no-wrap
msgid ""
"    This table may appear to contain missing characters in the second column, or even\n"
"    show characters that are inconsistent with the characters as they are rendered in\n"
"    the Julia REPL. In these cases, users are strongly advised to check their choice\n"
"    of fonts in their browser and REPL environment, as there are known issues with\n"
"    glyphs in many fonts.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/unicode-input.md:19
msgid "```@eval"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/unicode-input.md:19
#: ext/julia/doc/src/manual/unicode-input.md:21
#, no-wrap
msgid "#\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/unicode-input.md:20
#, no-wrap
msgid "Generate a table containing all LaTeX and Emoji tab completions available in the REPL."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/unicode-input.md:24
msgid "import REPL, Markdown const NBSP = '\\u00A0'"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/unicode-input.md:32
#, no-wrap
msgid ""
"function tab_completions(symbols...)\n"
"    completions = Dict{String, Vector{String}}()\n"
"    for each in symbols, (k, v) in each\n"
"        completions[v] = push!(get!(completions, v, String[]), k)\n"
"    end\n"
"    return completions\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/unicode-input.md:46
#, no-wrap
msgid ""
"function unicode_data()\n"
"    file = normpath(@__DIR__, \"..\", \"..\", \"..\", \"..\", \"..\", \"doc\", \"UnicodeData.txt\")\n"
"    names = Dict{UInt32, String}()\n"
"    open(file) do unidata\n"
"        for line in readlines(unidata)\n"
"            id, name, desc = split(line, \";\")[[1, 2, 11]]\n"
"            codepoint = parse(UInt32, \"0x$id\")\n"
"            names[codepoint] = titlecase(lowercase(\n"
"                name == \"\" ? desc : desc == \"\" ? name : \"$name / $desc\"))\n"
"        end\n"
"    end\n"
"    return names\n"
"end\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/unicode-input.md:47
#, no-wrap
msgid "Surround combining characters with no-break spaces (i.e '\\u00A0'). Follows the same format"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/unicode-input.md:48
#, no-wrap
msgid "for how unicode is displayed on the unicode.org website:"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/unicode-input.md:49
#, no-wrap
msgid "http://unicode.org/cldr/utility/character.jsp?a=0300"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/unicode-input.md:54
#, no-wrap
msgid ""
"function fix_combining_chars(char)\n"
"    cat = Base.Unicode.category_code(char)\n"
"    return cat == 6 || cat == 8 ? \"$NBSP$char$NBSP\" : \"$char\"\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/unicode-input.md:75
#, no-wrap
msgid ""
"function table_entries(completions, unicode_dict)\n"
"    entries = [[\n"
"        \"Code point(s)\", \"Character(s)\",\n"
"        \"Tab completion sequence(s)\", \"Unicode name(s)\"\n"
"    ]]\n"
"    for (chars, inputs) in sort!(collect(completions), by = first)\n"
"        code_points, unicode_names, characters = String[], String[], String[]\n"
"        for char in chars\n"
"            push!(code_points, \"U+$(uppercase(string(UInt32(char), base = 16, pad = 5)))\")\n"
"            push!(unicode_names, get(unicode_dict, UInt32(char), \"(No Unicode name)\"))\n"
"            push!(characters, isempty(characters) ? fix_combining_chars(char) : \"$char\")\n"
"        end\n"
"        push!(entries, [\n"
"            join(code_points, \" + \"), join(characters),\n"
"            join(inputs, \", \"), join(unicode_names, \" + \")\n"
"        ])\n"
"    end\n"
"    return Markdown.Table(entries, [:l, :l, :l, :l])\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/unicode-input.md:83
#, no-wrap
msgid ""
"table_entries(\n"
"    tab_completions(\n"
"        REPL.REPLCompletions.latex_symbols,\n"
"        REPL.REPLCompletions.emoji_symbols\n"
"    ),\n"
"    unicode_data()\n"
")\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/manual/interfaces.md:1
#, no-wrap
msgid "Interfaces"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:7
#, no-wrap
msgid ""
"A lot of the power and extensibility in Julia comes from a collection of informal interfaces.\n"
" By extending a few specific methods to work for a custom type, objects of that type not only\n"
"receive those functionalities, but they are also able to be used in other methods that are written\n"
"to generically build upon those behaviors.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/interfaces.md:8
#, no-wrap
msgid "[Iteration](@id man-interface-iteration)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:20
#, no-wrap
msgid ""
"| Required methods               |                        | Brief description                                                                     |\n"
"|:------------------------------ |:---------------------- |:------------------------------------------------------------------------------------- |\n"
"| `iterate(iter)`                |                        | Returns either a tuple of the first item and initial state or [`nothing`](@ref) if empty        |\n"
"| `iterate(iter, state)`         |                        | Returns either a tuple of the next item and next state or `nothing` if no items remain  |\n"
"| **Important optional methods** | **Default definition** | **Brief description**                                                                 |\n"
"| `IteratorSize(IterType)`       | `HasLength()`          | One of `HasLength()`, `HasShape{N}()`, `IsInfinite()`, or `SizeUnknown()` as appropriate |\n"
"| `IteratorEltype(IterType)`     | `HasEltype()`          | Either `EltypeUnknown()` or `HasEltype()` as appropriate                              |\n"
"| `eltype(IterType)`             | `Any`                  | The type of the first entry of the tuple returned by `iterate()`                      |\n"
"| `length(iter)`                 | (*undefined*)          | The number of items, if known                                                         |\n"
"| `size(iter, [dim])`            | (*undefined*)          | The number of items in each dimension, if known                                       |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:27
#, no-wrap
msgid ""
"| Value returned by `IteratorSize(IterType)` | Required Methods                           |\n"
"|:------------------------------------------ |:------------------------------------------ |\n"
"| `HasLength()`                              | [`length(iter)`](@ref)                     |\n"
"| `HasShape{N}()`                            | `length(iter)`  and `size(iter, [dim])`    |\n"
"| `IsInfinite()`                             | (*none*)                                   |\n"
"| `SizeUnknown()`                            | (*none*)                                   |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:32
#, no-wrap
msgid ""
"| Value returned by `IteratorEltype(IterType)` | Required Methods   |\n"
"|:-------------------------------------------- |:------------------ |\n"
"| `HasEltype()`                                | `eltype(IterType)` |\n"
"| `EltypeUnknown()`                            | (*none*)           |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:39
msgid ""
"Sequential iteration is implemented by the [`iterate`](@ref) function. "
"Instead of mutating objects as they are iterated over, Julia iterators may "
"keep track of the iteration state externally from the object. The return "
"value from iterate is always either a tuple of a value and a state, or "
"`nothing` if no elements remain.  The state object will be passed back to "
"the iterate function on the next iteration and is generally considered an "
"implementation detail private to the iterable object."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:42
msgid ""
"Any object that defines this function is iterable and can be used in the "
"[many functions that rely upon iteration](@ref lib-collections-iteration).  "
"It can also be used directly in a [`for`](@ref) loop since the syntax:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:48
#: ext/julia/doc/src/base/collections.md:13
#, no-wrap
msgid ""
"```julia\n"
"for i in iter   # or  \"for i = iter\"\n"
"    # body\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:50
#: ext/julia/doc/src/base/collections.md:15
msgid "is translated into:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:59
#: ext/julia/doc/src/base/collections.md:24
#, no-wrap
msgid ""
"```julia\n"
"next = iterate(iter)\n"
"while next !== nothing\n"
"    (i, state) = next\n"
"    # body\n"
"    next = iterate(iter, state)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:61
msgid ""
"A simple example is an iterable sequence of square numbers with a defined "
"length:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:66
#, no-wrap
msgid ""
"```jldoctest squaretype\n"
"julia> struct Squares\n"
"           count::Int\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:69
#, no-wrap
msgid ""
"julia> Base.iterate(S::Squares, state=1) = state > S.count ? nothing : (state*state, state+1)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:72
msgid ""
"With only [`iterate`](@ref) definition, the `Squares` type is already pretty "
"powerful.  We can iterate over all the elements:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:85
#, no-wrap
msgid ""
"```jldoctest squaretype\n"
"julia> for i in Squares(7)\n"
"           println(i)\n"
"       end\n"
"1\n"
"4\n"
"9\n"
"16\n"
"25\n"
"36\n"
"49\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:89
msgid ""
"We can use many of the builtin methods that work with iterables, like [`in`]"
"(@ref), or [`mean`](@ref) and [`std`](@ref) from the `Statistics` standard "
"library module:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:93
#, no-wrap
msgid ""
"```jldoctest squaretype\n"
"julia> 25 in Squares(10)\n"
"true\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:95
#, no-wrap
msgid "julia> using Statistics\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:98
#, no-wrap
msgid ""
"julia> mean(Squares(100))\n"
"3383.5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:102
#, no-wrap
msgid ""
"julia> std(Squares(100))\n"
"3024.355854282583\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:108
msgid ""
"There are a few more methods we can extend to give Julia more information "
"about this iterable collection.  We know that the elements in a `Squares` "
"sequence will always be `Int`. By extending the [`eltype`](@ref) method, we "
"can give that information to Julia and help it make more specialized code in "
"the more complicated methods. We also know the number of elements in our "
"sequence, so we can extend [`length`](@ref), too:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:111
#, no-wrap
msgid ""
"```jldoctest squaretype\n"
"julia> Base.eltype(::Type{Squares}) = Int # Note that this is defined for the type\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:114
#, no-wrap
msgid ""
"julia> Base.length(S::Squares) = S.count\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:117
msgid ""
"Now, when we ask Julia to [`collect`](@ref) all the elements into an array "
"it can preallocate a `Vector{Int}` of the right size instead of blindly "
"[`push!`](@ref)ing each element into a `Vector{Any}`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:126
#, no-wrap
msgid ""
"```jldoctest squaretype\n"
"julia> collect(Squares(4))\n"
"4-element Array{Int64,1}:\n"
"  1\n"
"  4\n"
"  9\n"
" 16\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:130
msgid ""
"While we can rely upon generic implementations, we can also extend specific "
"methods where we know there is a simpler algorithm. For example, there's a "
"formula to compute the sum of squares, so we can override the generic "
"iterative version with a more performant solution:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:133
#, no-wrap
msgid ""
"```jldoctest squaretype\n"
"julia> Base.sum(S::Squares) = (n = S.count; return n*(n+1)*(2n+1)÷6)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:137
#, no-wrap
msgid ""
"julia> sum(Squares(1803))\n"
"1955361914\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:142
msgid ""
"This is a very common pattern throughout Julia Base: a small set of required "
"methods define an informal interface that enable many fancier behaviors. In "
"some cases, types will want to additionally specialize those extra behaviors "
"when they know a more efficient algorithm can be used in their specific case."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:149
msgid ""
"It is also often useful to allow iteration over a collection in *reverse "
"order* by iterating over [`Iterators.reverse(iterator)`](@ref).  To actually "
"support reverse-order iteration, however, an iterator type `T` needs to "
"implement `iterate` for `Iterators.Reverse{T}`.  (Given `r::Iterators."
"Reverse{T}`, the underling iterator of type `T` is `r.itr`.)  In our "
"`Squares` example, we would implement `Iterators.Reverse{Squares}` methods:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:152
#, no-wrap
msgid ""
"```jldoctest squaretype\n"
"julia> Base.iterate(rS::Iterators.Reverse{Squares}, state=rS.itr.count) = state < 1 ? nothing : (state*state, state-1)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:160
#, no-wrap
msgid ""
"julia> collect(Iterators.reverse(Squares(4)))\n"
"4-element Array{Int64,1}:\n"
" 16\n"
"  9\n"
"  4\n"
"  1\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/interfaces.md:161
#, no-wrap
msgid "Indexing"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:169
#, no-wrap
msgid ""
"| Methods to implement | Brief description                |\n"
"|:-------------------- |:-------------------------------- |\n"
"| `getindex(X, i)`     | `X[i]`, indexed element access   |\n"
"| `setindex!(X, v, i)` | `X[i] = v`, indexed assignment   |\n"
"| `firstindex(X)`      | The first index                  |\n"
"| `lastindex(X)`        | The last index, used in `X[end]` |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:173
msgid ""
"For the `Squares` iterable above, we can easily compute the `i`th element of "
"the sequence by squaring it.  We can expose this as an indexing expression "
"`S[i]`. To opt into this behavior, `Squares` simply needs to define "
"[`getindex`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:179
#, no-wrap
msgid ""
"```jldoctest squaretype\n"
"julia> function Base.getindex(S::Squares, i::Int)\n"
"           1 <= i <= S.count || throw(BoundsError(S, i))\n"
"           return i*i\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:183
#, no-wrap
msgid ""
"julia> Squares(100)[23]\n"
"529\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:186
msgid ""
"Additionally, to support the syntax `S[end]`, we must define [`lastindex`]"
"(@ref) to specify the last valid index. It is recommended to also define "
"[`firstindex`](@ref) to specify the first valid index:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:189
#, no-wrap
msgid ""
"```jldoctest squaretype\n"
"julia> Base.firstindex(S::Squares) = 1\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:191
#, no-wrap
msgid "julia> Base.lastindex(S::Squares) = length(S)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:195
#, no-wrap
msgid ""
"julia> Squares(23)[end]\n"
"529\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:199
msgid ""
"Note, though, that the above *only* defines [`getindex`](@ref) with one "
"integer index. Indexing with anything other than an `Int` will throw a "
"[`MethodError`](@ref) saying that there was no matching method.  In order to "
"support indexing with ranges or vectors of `Int`s, separate methods must be "
"written:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:202
#, no-wrap
msgid ""
"```jldoctest squaretype\n"
"julia> Base.getindex(S::Squares, i::Number) = S[convert(Int, i)]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:204
#, no-wrap
msgid "julia> Base.getindex(S::Squares, I) = [S[i] for i in I]\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:211
#, no-wrap
msgid ""
"julia> Squares(10)[[3,4.,5]]\n"
"3-element Array{Int64,1}:\n"
"  9\n"
" 16\n"
" 25\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:216
msgid ""
"While this is starting to support more of the [indexing operations supported "
"by some of the builtin types](@ref man-array-indexing), there's still quite "
"a number of behaviors missing. This `Squares` sequence is starting to look "
"more and more like a vector as we've added behaviors to it. Instead of "
"defining all these behaviors ourselves, we can officially define it as a "
"subtype of an [`AbstractArray`](@ref)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/interfaces.md:217
#, no-wrap
msgid "[Abstract Arrays](@id man-interface-array)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:240
#, no-wrap
msgid ""
"| Methods to implement                            |                                        | Brief description                                                                     |\n"
"|:----------------------------------------------- |:-------------------------------------- |:------------------------------------------------------------------------------------- |\n"
"| `size(A)`                                       |                                        | Returns a tuple containing the dimensions of `A`                                      |\n"
"| `getindex(A, i::Int)`                           |                                        | (if `IndexLinear`) Linear scalar indexing                                             |\n"
"| `getindex(A, I::Vararg{Int, N})`                |                                        | (if `IndexCartesian`, where `N = ndims(A)`) N-dimensional scalar indexing             |\n"
"| `setindex!(A, v, i::Int)`                       |                                        | (if `IndexLinear`) Scalar indexed assignment                                          |\n"
"| `setindex!(A, v, I::Vararg{Int, N})`            |                                        | (if `IndexCartesian`, where `N = ndims(A)`) N-dimensional scalar indexed assignment   |\n"
"| **Optional methods**                            | **Default definition**                 | **Brief description**                                                                 |\n"
"| `IndexStyle(::Type)`                            | `IndexCartesian()`                     | Returns either `IndexLinear()` or `IndexCartesian()`. See the description below.      |\n"
"| `getindex(A, I...)`                             | defined in terms of scalar `getindex`  | [Multidimensional and nonscalar indexing](@ref man-array-indexing)                    |\n"
"| `setindex!(A, I...)`                            | defined in terms of scalar `setindex!` | [Multidimensional and nonscalar indexed assignment](@ref man-array-indexing)          |\n"
"| `iterate`                                       | defined in terms of scalar `getindex`  | Iteration                                                                             |\n"
"| `length(A)`                                     | `prod(size(A))`                        | Number of elements                                                                    |\n"
"| `similar(A)`                                    | `similar(A, eltype(A), size(A))`       | Return a mutable array with the same shape and element type                           |\n"
"| `similar(A, ::Type{S})`                         | `similar(A, S, size(A))`               | Return a mutable array with the same shape and the specified element type             |\n"
"| `similar(A, dims::Dims)`                        | `similar(A, eltype(A), dims)`          | Return a mutable array with the same element type and size *dims*                     |\n"
"| `similar(A, ::Type{S}, dims::Dims)`             | `Array{S}(undef, dims)`                | Return a mutable array with the specified element type and size                       |\n"
"| **Non-traditional indices**                     | **Default definition**                 | **Brief description**                                                                 |\n"
"| `axes(A)`                                    | `map(OneTo, size(A))`                  | Return the `AbstractUnitRange` of valid indices                                       |\n"
"| `similar(A, ::Type{S}, inds)`              | `similar(A, S, Base.to_shape(inds))`   | Return a mutable array with the specified indices `inds` (see below)                  |\n"
"| `similar(T::Union{Type,Function}, inds)`   | `T(Base.to_shape(inds))`               | Return an array similar to `T` with the specified indices `inds` (see below)          |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:244
msgid ""
"If a type is defined as a subtype of `AbstractArray`, it inherits a very "
"large set of rich behaviors including iteration and multidimensional "
"indexing built on top of single-element access.  See the [arrays manual page]"
"(@ref man-multi-dim-arrays) and the [Julia Base section](@ref lib-arrays) "
"for more supported methods."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:253
#, no-wrap
msgid ""
"A key part in defining an `AbstractArray` subtype is [`IndexStyle`](@ref). Since indexing is\n"
"such an important part of an array and often occurs in hot loops, it's important to make both\n"
"indexing and indexed assignment as efficient as possible.  Array data structures are typically\n"
"defined in one of two ways: either it most efficiently accesses its elements using just one index\n"
"(linear indexing) or it intrinsically accesses the elements with indices specified for every dimension.\n"
" These two modalities are identified by Julia as `IndexLinear()` and `IndexCartesian()`.\n"
" Converting a linear index to multiple indexing subscripts is typically very expensive, so this\n"
"provides a traits-based mechanism to enable efficient generic code for all array types.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:262
msgid ""
"This distinction determines which scalar indexing methods the type must "
"define. `IndexLinear()` arrays are simple: just define `getindex(A::"
"ArrayType, i::Int)`.  When the array is subsequently indexed with a "
"multidimensional set of indices, the fallback `getindex(A::AbstractArray, "
"I...)()` efficiently converts the indices into one linear index and then "
"calls the above method. `IndexCartesian()` arrays, on the other hand, "
"require methods to be defined for each supported dimensionality with "
"`ndims(A)` `Int` indices. For example, [`SparseMatrixCSC`](@ref) from the "
"`SparseArrays` standard library module, only supports two dimensions, so it "
"just defines `getindex(A::SparseMatrixCSC, i::Int, j::Int)`. The same holds "
"for [`setindex!`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:265
msgid ""
"Returning to the sequence of squares from above, we could instead define it "
"as a subtype of an `AbstractArray{Int, 1}`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:270
#, no-wrap
msgid ""
"```jldoctest squarevectype\n"
"julia> struct SquaresVector <: AbstractArray{Int, 1}\n"
"           count::Int\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:272
#, no-wrap
msgid "julia> Base.size(S::SquaresVector) = (S.count,)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:274
#, no-wrap
msgid "julia> Base.IndexStyle(::Type{<:SquaresVector}) = IndexLinear()\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:277
#, no-wrap
msgid ""
"julia> Base.getindex(S::SquaresVector, i::Int) = i*i\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:282
msgid ""
"Note that it's very important to specify the two parameters of the "
"`AbstractArray`; the first defines the [`eltype`](@ref), and the second "
"defines the [`ndims`](@ref). That supertype and those three methods are all "
"it takes for `SquaresVector` to be an iterable, indexable, and completely "
"functional array:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:290
#, no-wrap
msgid ""
"```jldoctest squarevectype\n"
"julia> s = SquaresVector(4)\n"
"4-element SquaresVector:\n"
"  1\n"
"  4\n"
"  9\n"
" 16\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:295
#, no-wrap
msgid ""
"julia> s[s .> 8]\n"
"2-element Array{Int64,1}:\n"
"  9\n"
" 16\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:302
#, no-wrap
msgid ""
"julia> s + s\n"
"4-element Array{Int64,1}:\n"
"  2\n"
"  8\n"
" 18\n"
" 32\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:310
#, no-wrap
msgid ""
"julia> sin.(s)\n"
"4-element Array{Float64,1}:\n"
"  0.8414709848078965\n"
" -0.7568024953079282\n"
"  0.4121184852417566\n"
" -0.2879033166650653\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:313
msgid ""
"As a more complicated example, let's define our own toy N-dimensional sparse-"
"like array type built on top of [`Dict`](@ref):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:319
#, no-wrap
msgid ""
"```jldoctest squarevectype\n"
"julia> struct SparseArray{T,N} <: AbstractArray{T,N}\n"
"           data::Dict{NTuple{N,Int}, T}\n"
"           dims::NTuple{N,Int}\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:321
#, no-wrap
msgid "julia> SparseArray(::Type{T}, dims::Int...) where {T} = SparseArray(T, dims);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:323
#, no-wrap
msgid "julia> SparseArray(::Type{T}, dims::NTuple{N,Int}) where {T,N} = SparseArray{T,N}(Dict{NTuple{N,Int}, T}(), dims);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:325
#, no-wrap
msgid "julia> Base.size(A::SparseArray) = A.dims\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:327
#, no-wrap
msgid "julia> Base.similar(A::SparseArray, ::Type{T}, dims::Dims) where {T} = SparseArray(T, dims)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:329
#, no-wrap
msgid "julia> Base.getindex(A::SparseArray{T,N}, I::Vararg{Int,N}) where {T,N} = get(A.data, I, zero(T))\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:332
#, no-wrap
msgid ""
"julia> Base.setindex!(A::SparseArray{T,N}, v, I::Vararg{Int,N}) where {T,N} = (A.data[I] = v)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:336
msgid ""
"Notice that this is an `IndexCartesian` array, so we must manually define "
"[`getindex`](@ref) and [`setindex!`](@ref)  at the dimensionality of the "
"array. Unlike the `SquaresVector`, we are able to define [`setindex!`]"
"(@ref), and so we can mutate the array:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:343
#, no-wrap
msgid ""
"```jldoctest squarevectype\n"
"julia> A = SparseArray(Float64, 3, 3)\n"
"3×3 SparseArray{Float64,2}:\n"
" 0.0  0.0  0.0\n"
" 0.0  0.0  0.0\n"
" 0.0  0.0  0.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:349
#, no-wrap
msgid ""
"julia> fill!(A, 2)\n"
"3×3 SparseArray{Float64,2}:\n"
" 2.0  2.0  2.0\n"
" 2.0  2.0  2.0\n"
" 2.0  2.0  2.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:356
#, no-wrap
msgid ""
"julia> A[:] = 1:length(A); A\n"
"3×3 SparseArray{Float64,2}:\n"
" 1.0  4.0  7.0\n"
" 2.0  5.0  8.0\n"
" 3.0  6.0  9.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:362
msgid ""
"The result of indexing an `AbstractArray` can itself be an array (for "
"instance when indexing by an `AbstractRange`). The `AbstractArray` fallback "
"methods use [`similar`](@ref) to allocate an `Array` of the appropriate size "
"and element type, which is filled in using the basic indexing method "
"described above. However, when implementing an array wrapper you often want "
"the result to be wrapped as well:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:369
#, no-wrap
msgid ""
"```jldoctest squarevectype\n"
"julia> A[1:2,:]\n"
"2×3 SparseArray{Float64,2}:\n"
" 1.0  4.0  7.0\n"
" 2.0  5.0  8.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:375
msgid ""
"In this example it is accomplished by defining `Base.similar{T}(A::"
"SparseArray, ::Type{T}, dims::Dims)` to create the appropriate wrapped "
"array. (Note that while `similar` supports 1- and 2-argument forms, in most "
"case you only need to specialize the 3-argument form.) For this to work it's "
"important that `SparseArray` is mutable (supports `setindex!`). Defining "
"`similar`, `getindex` and `setindex!` for `SparseArray` also makes it "
"possible to [`copy`](@ref) the array:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:383
#, no-wrap
msgid ""
"```jldoctest squarevectype\n"
"julia> copy(A)\n"
"3×3 SparseArray{Float64,2}:\n"
" 1.0  4.0  7.0\n"
" 2.0  5.0  8.0\n"
" 3.0  6.0  9.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:386
msgid ""
"In addition to all the iterable and indexable methods from above, these "
"types can also interact with each other and use most of the methods defined "
"in Julia Base for `AbstractArrays`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:393
#, no-wrap
msgid ""
"```jldoctest squarevectype\n"
"julia> A[SquaresVector(3)]\n"
"3-element SparseArray{Float64,1}:\n"
" 1.0\n"
" 4.0\n"
" 9.0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:397
#, no-wrap
msgid ""
"julia> sum(A)\n"
"45.0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:403
msgid ""
"If you are defining an array type that allows non-traditional indexing "
"(indices that start at something other than 1), you should specialize "
"[`axes`](@ref). You should also specialize [`similar`](@ref)  so that the "
"`dims` argument (ordinarily a `Dims` size-tuple) can accept "
"`AbstractUnitRange` objects, perhaps range-types `Ind` of your own design. "
"For more information, see [Arrays with custom indices](@ref man-custom-"
"indices)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/interfaces.md:404
#, no-wrap
msgid "[Strided Arrays](@id man-interface-strided-arrays)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:412
#, no-wrap
msgid ""
"| Methods to implement                            |                                        | Brief description                                                                     |\n"
"|:----------------------------------------------- |:-------------------------------------- |:------------------------------------------------------------------------------------- |\n"
"| `strides(A)`                             |                                        | Return the distance in memory (in number of elements) between adjacent elements in each dimension as a tuple. If `A` is an `AbstractArray{T,0}`, this should return an empty tuple.    |\n"
"| `Base.unsafe_convert(::Type{Ptr{T}}, A)`        |                                        | Return the native address of an array.                                     |\n"
"| **Optional methods**                            | **Default definition**                 | **Brief description**                                                                 |\n"
"| `stride(A, i::Int)`                             |     `strides(A)[i]`                                   | Return the distance in memory (in number of elements) between adjacent elements in dimension k.    |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:417
msgid ""
"A strided array is a subtype of `AbstractArray` whose entries are stored in "
"memory with fixed strides.  Provided the element type of the array is "
"compatible with BLAS, a strided array can utilize BLAS and LAPACK routines "
"for more efficient linear algebra routines.  A typical example of a user-"
"defined strided array is one that wraps a standard `Array` with additional "
"structure."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:420
msgid ""
"Warning: do not implement these methods if the underlying storage is not "
"actually strided, as it may lead to incorrect results or segmentation faults."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:430
#, no-wrap
msgid ""
"Here are some examples to demonstrate which type of arrays are strided and which are not:\n"
"```julia\n"
"1:5   # not strided (there is no storage associated with this array.)\n"
"Vector(1:5)  # is strided with strides (1,)\n"
"A = [1 5; 2 6; 3 7; 4 8]  # is strided with strides (1,4)\n"
"V = view(A, 1:2, :)   # is strided with strides (1,4)\n"
"V = view(A, 1:2:3, 1:2)   # is strided with strides (2,4)\n"
"V = view(A, [1,2,4], :)   # is not strided, as the spacing between rows is not fixed.\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/manual/interfaces.md:435
#, no-wrap
msgid "[Customizing broadcasting](@id man-interfaces-broadcasting)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:451
msgid ""
"| Methods to implement | Brief description | |:-------------------- "
"|:----------------- | | `Base.BroadcastStyle(::Type{SrcType}) = SrcStyle()` "
"| Broadcasting behavior of `SrcType` | | `Base.similar(bc::"
"Broadcasted{DestStyle}, ::Type{ElType})` | Allocation of output container | "
"| **Optional methods** | | | | `Base.BroadcastStyle(::Style1, ::Style2) = "
"Style12()` | Precedence rules for mixing styles | | `Base.axes(x)` | "
"Declaration of the indices of `x`, as per [`axes(x)`](@ref). | | `Base."
"broadcastable(x)` | Convert `x` to an object that has `axes` and supports "
"indexing | | **Bypassing default machinery** | | | `Base.copy(bc::"
"Broadcasted{DestStyle})` | Custom implementation of `broadcast` | | `Base."
"copyto!(dest, bc::Broadcasted{DestStyle})` | Custom implementation of "
"`broadcast!`, specializing on `DestStyle` | | `Base.copyto!(dest::DestType, "
"bc::Broadcasted{Nothing})` | Custom implementation of `broadcast!`, "
"specializing on `DestType` | | `Base.Broadcast.broadcasted(f, args...)` | "
"Override the default lazy behavior within a fused expression | | `Base."
"Broadcast.instantiate(bc::Broadcasted{DestStyle})` | Override the "
"computation of the lazy broadcast's axes |"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:456
msgid ""
"[Broadcasting](@ref) is triggered by an explicit call to `broadcast` or "
"`broadcast!`, or implicitly by \"dot\" operations like `A .+ b` or `f.(x, "
"y)`. Any object that has [`axes`](@ref) and supports indexing can "
"participate as an argument in broadcasting, and by default the result is "
"stored in an `Array`. This basic framework is extensible in three major ways:"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/interfaces.md:460
msgid "Ensuring that all arguments support broadcast"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/interfaces.md:460
msgid "Selecting an appropriate output array for the given set of arguments"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/interfaces.md:460
msgid "Selecting an efficient implementation for the given set of arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:473
msgid ""
"Not all types support `axes` and indexing, but many are convenient to allow "
"in broadcast.  The [`Base.broadcastable`](@ref) function is called on each "
"argument to broadcast, allowing it to return something different that "
"supports `axes` and indexing. By default, this is the identity function for "
"all `AbstractArray`s and `Number`s — they already support `axes` and "
"indexing. For a handful of other types (including but not limited to types "
"themselves, functions, special singletons like [`missing`](@ref) and "
"[`nothing`](@ref), and dates), `Base.broadcastable` returns the argument "
"wrapped in a `Ref` to act as a 0-dimensional \"scalar\" for the purposes of "
"broadcasting. Custom types can similarly specialize `Base.broadcastable` to "
"define their shape, but they should follow the convention that `collect(Base."
"broadcastable(x)) == collect(x)`. A notable exception is `AbstractString`; "
"strings are special-cased to behave as scalars for the purposes of broadcast "
"even though they are iterable collections of their characters (see [Strings]"
"(@ref) for more)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:480
msgid ""
"The next two steps (selecting the output array and implementation) are "
"dependent upon determining a single answer for a given set of arguments. "
"Broadcast must take all the varied types of its arguments and collapse them "
"down to just one output array and one implementation. Broadcast calls this "
"single answer a \"style.\" Every broadcastable object each has its own "
"preferred style, and a promotion-like system is used to combine these styles "
"into a single answer — the \"destination style\"."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/interfaces.md:481
#, no-wrap
msgid "Broadcast Styles"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:487
msgid ""
"`Base.BroadcastStyle` is the abstract type from which all broadcast styles "
"are derived. When used as a function it has two possible forms, unary "
"(single-argument) and binary. The unary variant states that you intend to "
"implement specific broadcasting behavior and/or output type, and do not wish "
"to rely on the default fallback [`Broadcast.DefaultArrayStyle`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:489
msgid ""
"To override these defaults, you can define a custom `BroadcastStyle` for "
"your object:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:494
#, no-wrap
msgid ""
"```julia\n"
"struct MyStyle <: Broadcast.BroadcastStyle end\n"
"Base.BroadcastStyle(::Type{<:MyType}) = MyStyle()\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:497
msgid ""
"In some cases it might be convenient not to have to define `MyStyle`, in "
"which case you can leverage one of the general broadcast wrappers:"
msgstr ""

#. type: Bullet: '  - '
#: ext/julia/doc/src/manual/interfaces.md:503
msgid ""
"`Base.BroadcastStyle(::Type{<:MyType}) = Broadcast.Style{MyType}()` can be "
"used for arbitrary types."
msgstr ""

#. type: Bullet: '  - '
#: ext/julia/doc/src/manual/interfaces.md:503
msgid ""
"`Base.BroadcastStyle(::Type{<:MyType}) = Broadcast.ArrayStyle{MyType}()` is "
"preferred if `MyType` is an `AbstractArray`."
msgstr ""

#. type: Bullet: '  - '
#: ext/julia/doc/src/manual/interfaces.md:503
msgid ""
"For `AbstractArrays` that only support a certain dimensionality, create a "
"subtype of `Broadcast.AbstractArrayStyle{N}` (see below)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:507
msgid ""
"When your broadcast operation involves several arguments, individual "
"argument styles get combined to determine a single `DestStyle` that controls "
"the type of the output container.  For more details, see [below](@ref "
"writing-binary-broadcasting-rules)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/interfaces.md:508
#, no-wrap
msgid "Selecting an appropriate output array"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:513
msgid ""
"The broadcast style is computed for every broadcasting operation to allow "
"for dispatch and specialization. The actual allocation of the result array "
"is handled by `similar`, using the Broadcasted object as its first argument."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:517
msgid "```julia Base.similar(bc::Broadcasted{DestStyle}, ::Type{ElType})  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:519
msgid "The fallback definition is"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:524
#, no-wrap
msgid ""
"```julia\n"
"similar(bc::Broadcasted{DefaultArrayStyle{N}}, ::Type{ElType}) where {N,ElType} =\n"
"    similar(Array{ElType}, axes(bc))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:530
msgid ""
"However, if needed you can specialize on any or all of these arguments. The "
"final argument `bc` is a lazy representation of a (potentially fused) "
"broadcast operation, a `Broadcasted` object.  For these purposes, the most "
"important fields of the wrapper are `f` and `args`, describing the function "
"and argument list, respectively.  Note that the argument list can — and "
"often does — include other nested `Broadcasted` wrappers."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:533
msgid ""
"For a complete example, let's say you have created a type, `ArrayAndChar`, "
"that stores an array and a single character:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:543
#, no-wrap
msgid ""
"```jldoctest ArrayAndChar; output = false\n"
"struct ArrayAndChar{T,N} <: AbstractArray{T,N}\n"
"    data::Array{T,N}\n"
"    char::Char\n"
"end\n"
"Base.size(A::ArrayAndChar) = size(A.data)\n"
"Base.getindex(A::ArrayAndChar{T,N}, inds::Vararg{Int,N}) where {T,N} = A.data[inds...]\n"
"Base.setindex!(A::ArrayAndChar{T,N}, val, inds::Vararg{Int,N}) where {T,N} = A.data[inds...] = val\n"
"Base.showarg(io::IO, A::ArrayAndChar, toplevel) = print(io, typeof(A), \" with char '\", A.char, \"'\")\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:548
msgid ""
"You might want broadcasting to preserve the `char` \"metadata.\" First we "
"define"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:551
#, no-wrap
msgid ""
"```jldoctest ArrayAndChar; output = false\n"
"Base.BroadcastStyle(::Type{<:ArrayAndChar}) = Broadcast.ArrayStyle{ArrayAndChar}()\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:563
#, no-wrap
msgid ""
"This means we must also define a corresponding `similar` method:\n"
"```jldoctest ArrayAndChar; output = false\n"
"function Base.similar(bc::Broadcast.Broadcasted{Broadcast.ArrayStyle{ArrayAndChar}}, ::Type{ElType}) where ElType\n"
"    # Scan the inputs for the ArrayAndChar:\n"
"    A = find_aac(bc)\n"
"    # Use the char field of A to create the output\n"
"    ArrayAndChar(similar(Array{ElType}, axes(bc)), A.char)\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:570
msgid ""
"\"`A = find_aac(As)` returns the first ArrayAndChar among the arguments.\" "
"find_aac(bc::Base.Broadcast.Broadcasted) = find_aac(bc.args)  find_aac(args::"
"Tuple) = find_aac(find_aac(args[1]), Base.tail(args))  find_aac(x) = x "
"find_aac(a::ArrayAndChar, rest) = a find_aac(::Any, rest) = find_aac(rest)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:573
msgid "find_aac (generic function with 5 methods)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:580
#, no-wrap
msgid ""
"From these definitions, one obtains the following behavior:\n"
"```jldoctest ArrayAndChar\n"
"julia> a = ArrayAndChar([1 2; 3 4], 'x')\n"
"2×2 ArrayAndChar{Int64,2} with char 'x':\n"
" 1  2\n"
" 3  4\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:585
#, no-wrap
msgid ""
"julia> a .+ 1\n"
"2×2 ArrayAndChar{Int64,2} with char 'x':\n"
" 2  3\n"
" 4  5\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:591
#, no-wrap
msgid ""
"julia> a .+ [5,10]\n"
"2×2 ArrayAndChar{Int64,2} with char 'x':\n"
"  6   7\n"
" 13  14\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/interfaces.md:592
#, no-wrap
msgid "[Extending broadcast with custom implementations](@id extending-in-place-broadcast)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:610
msgid ""
"In general, a broadcast operation is represented by a lazy `Broadcasted` "
"container that holds onto the function to be applied alongside its "
"arguments. Those arguments may themselves be more nested `Broadcasted` "
"containers, forming a large expression tree to be evaluated. A nested tree "
"of `Broadcasted` containers is directly constructed by the implicit dot "
"syntax; `5 .+ 2.*x` is transiently represented by `Broadcasted(+, 5, "
"Broadcasted(*, 2, x))`, for example. This is invisible to users as it is "
"immediately realized through a call to `copy`, but it is this container that "
"provides the basis for broadcast's extensibility for authors of custom "
"types. The built-in broadcast machinery will then determine the result type "
"and size based upon the arguments, allocate it, and then finally copy the "
"realization of the `Broadcasted` object into it with a default `copyto!(::"
"AbstractArray, ::Broadcasted)` method. The built-in fallback `broadcast` and "
"`broadcast!` methods similarly construct a transient `Broadcasted` "
"representation of the operation so they can follow the same codepath. This "
"allows custom array implementations to provide their own `copyto!` "
"specialization to customize and optimize broadcasting. This is again "
"determined by the computed broadcast style. This is such an important part "
"of the operation that it is stored as the first type parameter of the "
"`Broadcasted` type, allowing for dispatch and specialization."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:621
msgid ""
"For some types, the machinery to \"fuse\" operations across nested levels of "
"broadcasting is not available or could be done more efficiently "
"incrementally. In such cases, you may need or want to evaluate `x .* (x .+ "
"1)` as if it had been written `broadcast(*, x, broadcast(+, x, 1))`, where "
"the inner operation is evaluated before tackling the outer operation. This "
"sort of eager operation is directly supported by a bit of indirection; "
"instead of directly constructing `Broadcasted` objects, Julia lowers the "
"fused expression `x .* (x .+ 1)` to `Broadcast.broadcasted(*, x, Broadcast."
"broadcasted(+, x, 1))`. Now, by default, `broadcasted` just calls the "
"`Broadcasted` constructor to create the lazy representation of the fused "
"expression tree, but you can choose to override it for a particular "
"combination of function and arguments."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:628
msgid ""
"As an example, the builtin `AbstractRange` objects use this machinery to "
"optimize pieces of broadcasted expressions that can be eagerly evaluated "
"purely in terms of the start, step, and length (or stop) instead of "
"computing every single element. Just like all the other machinery, "
"`broadcasted` also computes and exposes the combined broadcast style of its "
"arguments, so instead of specializing on `broadcasted(f, args...)`, you can "
"specialize on `broadcasted(::DestStyle, f, args...)` for any combination of "
"style, function, and arguments."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:630
msgid "For example, the following definition supports the negation of ranges:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:634
msgid ""
"```julia broadcasted(::DefaultArrayStyle{1}, ::typeof(-), r::OrdinalRange) = "
"range(-first(r), step=-step(r), length=length(r))  ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/interfaces.md:635
#, no-wrap
msgid "[Extending in-place broadcasting](@id extending-in-place-broadcast)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:640
msgid ""
"In-place broadcasting can be supported by defining the appropriate `copyto!"
"(dest, bc::Broadcasted)` method. Because you might want to specialize either "
"on `dest` or the specific subtype of `bc`, to avoid ambiguities between "
"packages we recommend the following convention."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:646
msgid ""
"If you wish to specialize on a particular style `DestStyle`, define a method "
"for ```julia copyto!(dest, bc::Broadcasted{DestStyle})  ``` Optionally, with "
"this form you can also specialize on the type of `dest`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:649
msgid ""
"If instead you want to specialize on the destination type `DestType` without "
"specializing on `DestStyle`, then you should define a method with the "
"following signature:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:653
msgid "```julia copyto!(dest::DestType, bc::Broadcasted{Nothing})  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:657
msgid ""
"This leverages a fallback implementation of `copyto!` that converts the "
"wrapper into a `Broadcasted{Nothing}`. Consequently, specializing on "
"`DestType` has lower precedence than methods that specialize on `DestStyle`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:660
msgid ""
"Similarly, you can completely override out-of-place broadcasting with a "
"`copy(::Broadcasted)` method."
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/manual/interfaces.md:661
#, no-wrap
msgid "Working with `Broadcasted` objects"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:666
msgid ""
"In order to implement such a `copy` or `copyto!`, method, of course, you "
"must work with the `Broadcasted` wrapper to compute each element. There are "
"two main ways of doing so:"
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/interfaces.md:672
msgid ""
"`Broadcast.flatten` recomputes the potentially nested operation into a "
"single function and flat list of arguments. You are responsible for "
"implementing the broadcasting shape rules yourself, but this may be helpful "
"in limited situations."
msgstr ""

#. type: Bullet: '* '
#: ext/julia/doc/src/manual/interfaces.md:672
msgid ""
"Iterating over the `CartesianIndices` of the `axes(::Broadcasted)` and using "
"indexing with the resulting `CartesianIndex` object to compute the result."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/manual/interfaces.md:673
#, no-wrap
msgid "[Writing binary broadcasting rules](@id writing-binary-broadcasting-rules)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:676
msgid "The precedence rules are defined by binary `BroadcastStyle` calls:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:680
msgid "```julia Base.BroadcastStyle(::Style1, ::Style2) = Style12()  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:683
msgid ""
"where `Style12` is the `BroadcastStyle` you want to choose for outputs "
"involving arguments of `Style1` and `Style2`. For example,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:687
msgid ""
"```julia Base.BroadcastStyle(::Broadcast.Style{Tuple}, ::Broadcast."
"AbstractArrayStyle{0}) = Broadcast.Style{Tuple}()  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:691
msgid ""
"indicates that `Tuple` \"wins\" over zero-dimensional arrays (the output "
"container will be a tuple).  It is worth noting that you do not need to (and "
"should not) define both argument orders of this call; defining one is "
"sufficient no matter what order the user supplies the arguments in."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:695
msgid ""
"For `AbstractArray` types, defining a `BroadcastStyle` supersedes the "
"fallback choice, [`Broadcast.DefaultArrayStyle`](@ref). `DefaultArrayStyle` "
"and the abstract supertype, `AbstractArrayStyle`, store the dimensionality "
"as a type parameter to support specialized array types that have fixed "
"dimensionality requirements."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:698
msgid ""
"`DefaultArrayStyle` \"loses\" to any other `AbstractArrayStyle` that has "
"been defined because of the following methods:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:705
#, no-wrap
msgid ""
"```julia\n"
"BroadcastStyle(a::AbstractArrayStyle{Any}, ::DefaultArrayStyle) = a\n"
"BroadcastStyle(a::AbstractArrayStyle{N}, ::DefaultArrayStyle{N}) where N = a\n"
"BroadcastStyle(a::AbstractArrayStyle{M}, ::DefaultArrayStyle{N}) where {M,N} =\n"
"    typeof(a)(_max(Val(M),Val(N)))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:709
msgid ""
"You do not need to write binary `BroadcastStyle` rules unless you want to "
"establish precedence for two or more non-`DefaultArrayStyle` types."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:712
msgid ""
"If your array type does have fixed dimensionality requirements, then you "
"should subtype `AbstractArrayStyle`. For example, the sparse array code has "
"the following definitions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:719
#, no-wrap
msgid ""
"```julia\n"
"struct SparseVecStyle <: Broadcast.AbstractArrayStyle{1} end\n"
"struct SparseMatStyle <: Broadcast.AbstractArrayStyle{2} end\n"
"Base.BroadcastStyle(::Type{<:SparseVector}) = SparseVecStyle()\n"
"Base.BroadcastStyle(::Type{<:SparseMatrixCSC}) = SparseMatStyle()\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:723
msgid ""
"Whenever you subtype `AbstractArrayStyle`, you also need to define rules for "
"combining dimensionalities, by creating a constructor for your style that "
"takes a `Val(N)` argument.  For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:730
msgid ""
"```julia SparseVecStyle(::Val{0}) = SparseVecStyle()  SparseVecStyle(::"
"Val{1}) = SparseVecStyle()  SparseVecStyle(::Val{2}) = SparseMatStyle()  "
"SparseVecStyle(::Val{N}) where N = Broadcast.DefaultArrayStyle{N}()  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/manual/interfaces.md:735
msgid ""
"These rules indicate that the combination of a `SparseVecStyle` with 0- or 1-"
"dimensional arrays yields another `SparseVecStyle`, that its combination "
"with a 2-dimensional array yields a `SparseMatStyle`, and anything of higher "
"dimensionality falls back to the dense arbitrary-dimensional framework.  "
"These rules allow broadcasting to keep the sparse representation for "
"operations that result in one or two dimensional outputs, but produce an "
"`Array` for any other dimensionality."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/iterators.md:1
#, no-wrap
msgid "Iteration utilities"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/iterators.md:18
msgid ""
"```@docs Base.Iterators.Stateful Base.Iterators.zip Base.Iterators.enumerate "
"Base.Iterators.rest Base.Iterators.countfrom Base.Iterators.take Base."
"Iterators.drop Base.Iterators.cycle Base.Iterators.repeated Base.Iterators."
"product Base.Iterators.flatten Base.Iterators.partition Base.Iterators."
"filter Base.Iterators.reverse ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/punctuation.md:1
#, no-wrap
msgid "Punctuation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/punctuation.md:4
msgid ""
"Extended documentation for mathematical symbols & functions is [here](@ref "
"math-ops)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/punctuation.md:47
#, no-wrap
msgid ""
"| symbol      | meaning                                                                                                                                         |\n"
"|:----------- |:----------------------------------------------------------------------------------------------------------------------------------------------- |\n"
"| `@m`        | invoke macro `m`; followed by space-separated expressions                                   |\n"
"| `!`         | prefix \"not\" (logical negation) operator                                                    |\n"
"| `a!( )`     | at the end of a function name, `!` is used as a convention to indicate that a function modifies its argument(s) |\n"
"| `#`         | begin single line comment                                                                   |\n"
"| `#=`        | begin multi-line comment (these are nestable)                                               |\n"
"| `=#`        | end multi-line comment                                                                      |\n"
"| `$`         | string and expression interpolation                                                         |\n"
"| `%`         | remainder operator                                                                          |\n"
"| `^`         | exponent operator                                                                           |\n"
"| `&`         | bitwise and                                                                                 |\n"
"| `&&`        | short-circuiting boolean and                                                                |\n"
"| `\\|`        | bitwise or                                                                                  |\n"
"| `\\|\\|`      | short-circuiting boolean or                                                                 |\n"
"| `⊻`         | bitwise xor operator                                                                        |\n"
"| `*`         | multiply, or matrix multiply                                                                |\n"
"| `()`        | the empty tuple                                                                             |\n"
"| `~`         | bitwise not operator                                                                        |\n"
"| `\\`         | backslash operator                                                                          |\n"
"| `'`         | complex transpose operator Aᴴ                                                               |\n"
"| `a[]`       | array indexing (calling [`getindex`](@ref) or [`setindex!`](@ref))                          |\n"
"| `[,]`       | vector literal constructor (calling [`vect`](@ref Base.vect))                               |\n"
"| `[;]`       | vertical concatenation (calling [`vcat`](@ref) or [`hvcat`](@ref))                          |\n"
"| `[    ]`    | with space-separated expressions, horizontal concatenation (calling [`hcat`](@ref) or [`hvcat`](@ref)) |\n"
"| `T{ }`      | parametric type instantiation                                                               |\n"
"| `;`         | statement separator                                                                         |\n"
"| `,`         | separate function arguments or tuple components                                             |\n"
"| `?`         | 3-argument conditional operator (used like: `conditional ? if_true : if_false`)             |\n"
"| `\"\"`        | delimit string literals                                                                     |\n"
"| `''`        | delimit character literals                                                                  |\n"
"| ``` ` ` ``` | delimit external process (command) specifications                                           |\n"
"| `...`       | splice arguments into a function call or declare a varargs function                         |\n"
"| `.`         | access named fields in objects/modules (calling [`getproperty`](@ref Base.getproperty) or [`setproperty!`](@ref Base.setproperty!)), also prefixes elementwise function calls (calling [`broadcast`](@ref)) |\n"
"| `a:b`       | range a, a+1, a+2, ..., b                                                                   |\n"
"| `a:s:b`     | range a, a+s, a+2s, ..., b                                                                  |\n"
"| `:`         | index an entire dimension (firstindex:lastindex), see [`Colon`](@ref))                      |\n"
"| `::`        | type annotation or [`typeassert`](@ref), depending on context                               |\n"
"| `:( )`      | quoted expression                                                                           |\n"
"| `:a`        | symbol a                                                                                    |\n"
"| `<:`        | [`subtype operator`](@ref <:)                                                               |\n"
"| `>:`        | [`supertype operator`](@ref >:) (reverse of subtype operator)                               |\n"
"| `===`       | [`egal comparison operator`](@ref ===)                                                      |\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/numbers.md:1
#, no-wrap
msgid "[Numbers](@id lib-numbers)"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/numbers.md:3
#, no-wrap
msgid "Standard Numeric Types"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/base/numbers.md:5
#, no-wrap
msgid "Abstract number types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/numbers.md:16
msgid ""
"```@docs Core.Number Core.Real Core.AbstractFloat Core.Integer Core.Signed "
"Core.Unsigned Base.AbstractIrrational ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/base/numbers.md:17
#, no-wrap
msgid "Concrete number types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/numbers.md:40
msgid ""
"```@docs Core.Float16 Core.Float32 Core.Float64 Base.BigFloat Core.Bool Core."
"Int8 Core.UInt8 Core.Int16 Core.UInt16 Core.Int32 Core.UInt32 Core.Int64 "
"Core.UInt64 Core.Int128 Core.UInt128 Base.BigInt Base.Complex Base.Rational "
"Base.Irrational ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/numbers.md:41
#, no-wrap
msgid "Data Formats"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/numbers.md:61
msgid ""
"```@docs Base.digits Base.digits! Base.bitstring Base.parse Base.tryparse "
"Base.big Base.signed Base.unsigned Base.float(::Any)  Base.Math.significand "
"Base.Math.exponent Base.complex(::Complex)  Base.bswap Base.hex2bytes Base."
"hex2bytes! Base.bytes2hex ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/numbers.md:62
#, no-wrap
msgid "General Number Functions and Constants"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/numbers.md:98
msgid ""
"```@docs Base.one Base.oneunit Base.zero Base.im Base.MathConstants.pi Base."
"MathConstants.ℯ Base.MathConstants.catalan Base.MathConstants.eulergamma "
"Base.MathConstants.golden Base.Inf Base.Inf32 Base.Inf16 Base.NaN Base.NaN32 "
"Base.NaN16 Base.issubnormal Base.isfinite Base.isinf Base.isnan Base.iszero "
"Base.isone Base.nextfloat Base.prevfloat Base.isinteger Base.isreal Core."
"Float32(::Any)  Core.Float64(::Any)  Base.Rounding.rounding Base.Rounding."
"setrounding(::Type, ::Any)  Base.Rounding.setrounding(::Function, ::Type, ::"
"RoundingMode)  Base.Rounding.get_zero_subnormals Base.Rounding."
"set_zero_subnormals ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/numbers.md:113
msgid ""
"```@docs Base.count_ones Base.count_zeros Base.leading_zeros Base."
"leading_ones Base.trailing_zeros Base.trailing_ones Base.isodd Base.iseven "
"Base.@int128_str Base.@uint128_str ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/numbers.md:114
#, no-wrap
msgid "BigFloats and BigInts"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/numbers.md:121
msgid ""
"The [`BigFloat`](@ref) and [`BigInt`](@ref) types implements arbitrary-"
"precision floating point and integer arithmetic, respectively. For "
"[`BigFloat`](@ref) the [GNU MPFR library](https://www.mpfr.org/) is used, "
"and for [`BigInt`](@ref) the [GNU Multiple Precision Arithmetic Library "
"(GMP)] (https://gmplib.org) is used."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/numbers.md:129
msgid ""
"```@docs Base.MPFR.BigFloat(::Any, rounding::RoundingMode)  Base.precision "
"Base.MPFR.precision(::Type{BigFloat})  Base.MPFR.setprecision Base.GMP."
"BigInt(::Any)  Base.@big_str ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/multi-threading.md:6
msgid ""
"This experimental interface supports Julia's multi-threading capabilities. "
"Types and functions described here might (and likely will) change in the "
"future."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/multi-threading.md:24
msgid ""
"```@docs Base.Threads.threadid Base.Threads.nthreads Base.Threads.@threads "
"Base.Threads.Atomic Base.Threads.atomic_cas! Base.Threads.atomic_xchg! Base."
"Threads.atomic_add! Base.Threads.atomic_sub! Base.Threads.atomic_and! Base."
"Threads.atomic_nand! Base.Threads.atomic_or! Base.Threads.atomic_xor! Base."
"Threads.atomic_max! Base.Threads.atomic_min! Base.Threads.atomic_fence ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/multi-threading.md:25
#, no-wrap
msgid "ccall using a threadpool (Experimental)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/multi-threading.md:30
msgid "```@docs Base.@threadcall ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/multi-threading.md:31
#, no-wrap
msgid "Synchronization Primitives"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/multi-threading.md:47
msgid ""
"```@docs Base.Threads.AbstractLock Base.lock Base.unlock Base.trylock Base."
"islocked Base.ReentrantLock Base.Threads.Mutex Base.Threads.SpinLock Base."
"Threads.RecursiveSpinLock Base.Semaphore Base.acquire Base.release ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/parallel.md:1
#, no-wrap
msgid "Tasks"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/parallel.md:27
msgid ""
"```@docs Core.Task Base.current_task Base.istaskdone Base.istaskstarted Base."
"yield Base.yieldto Base.task_local_storage(::Any)  Base.task_local_storage(::"
"Any, ::Any)  Base.task_local_storage(::Function, ::Any, ::Any)  Base."
"Condition Base.notify Base.schedule Base.@task Base.sleep Base.Channel Base."
"put!(::Channel, ::Any)  Base.take!(::Channel)  Base.isready(::Channel)  Base."
"fetch(::Channel)  Base.close(::Channel)  Base.bind(c::Channel, task::Task)  "
"Base.asyncmap Base.asyncmap! ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/base.md:1
#, no-wrap
msgid "Essentials"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:3
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:9
msgid ""
"Julia Base contains a range of functions and macros appropriate for "
"performing scientific and numerical computing, but is also as broad as those "
"of many general purpose programming languages.  Additional functionality is "
"available from a growing collection of available packages.  Functions are "
"grouped by topic below."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:11
msgid "Some general notes:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/base.md:17
msgid ""
"To use module functions, use `import Module` to import the module, and "
"`Module.fn(x)` to use the functions."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/base.md:17
msgid ""
"Alternatively, `using Module` will import all exported `Module` functions "
"into the current namespace."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/base.md:17
msgid ""
"By convention, function names ending with an exclamation point (`!`) modify "
"their arguments.  Some functions have both modifying (e.g., `sort!`) and non-"
"modifying (`sort`) versions."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:18
#, no-wrap
msgid "Getting Around"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:37
msgid ""
"```@docs Base.exit Base.atexit Base.isinteractive Base.summarysize Base."
"require Base.compilecache Base.__precompile__ Base.include Base.MainInclude."
"include Base.include_string Base.include_dependency Base.which(::Any, ::"
"Any)  Base.methods Base.@show ans ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:38
#, no-wrap
msgid "Keywords"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:46
msgid ""
"This is the list of reserved keywords in Julia: `baremodule`, `begin`, "
"`break`, `catch`, `const`, `continue`, `do`, `else`, `elseif`, `end`, "
"`export`, `false`, `finally`, `for`, `function`, `global`, `if`, `import`, "
"`let`, `local`, `macro`, `module`, `quote`, `return`, `struct`, `true`, "
"`try`, `using`, `while`.  Those keywords are not allowed to be used as "
"variable names."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:51
msgid ""
"The following two-word sequences are reserved: `abstract type`, `mutable "
"struct`, `primitive type`.  However, you can create variables with names: "
"`abstract`, `mutable`, `primitive` and `type`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:55
msgid ""
"Finally,`where` is parsed as an infix operator for writing parametric method "
"and type definitions. Also `in` and `isa` are parsed as infix operators.  "
"Creation of a variable named `where`, `in` or `isa` is allowed though."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:88
msgid ""
"```@docs module export import using baremodule function macro return do "
"begin end let if for while break continue try finally quote local global "
"const struct mutable struct abstract type primitive type where ...  ; ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:89
#, no-wrap
msgid "Base Modules"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:102
msgid ""
"```@docs Base.Base Base.Broadcast Base.Docs Base.Iterators Base.Libc Base."
"Meta Base.StackTraces Base.Sys Base.Threads Base.GC ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:103
#, no-wrap
msgid "All Objects"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:134
msgid ""
"```@docs Core.:(===)  Core.isa Base.isequal Base.isless Base.ifelse Core."
"typeassert Core.typeof Core.tuple Base.ntuple Base.objectid Base.hash Base."
"finalizer Base.finalize Base.copy Base.deepcopy Base.getproperty Base."
"setproperty! Base.propertynames Core.getfield Core.setfield! Core.isdefined "
"Base.@isdefined Base.convert Base.promote Base.oftype Base.widen Base."
"identity ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:135
#, no-wrap
msgid "Properties of Types"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/base/base.md:137
#, no-wrap
msgid "Type relations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:149
#, no-wrap
msgid ""
"```@docs\n"
"Base.supertype\n"
"Core.:(<:)\n"
"Base.:(>:)\n"
"Base.typejoin\n"
"Base.typeintersect\n"
"Base.promote_type\n"
"Base.promote_rule\n"
"Base.isdispatchtuple\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/base/base.md:150
#, no-wrap
msgid "Declared structure"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:161
msgid ""
"```@docs Base.isimmutable Base.isabstracttype Base.isprimitivetype Base."
"isstructtype Base.nameof(::DataType)  Base.fieldnames Base.fieldname ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/base/base.md:162
#, no-wrap
msgid "Memory layout"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:177
msgid ""
"```@docs Base.sizeof(::Type)  Base.isconcretetype Base.isbits Base."
"isbitstype Core.fieldtype Base.fieldtypes Base.fieldcount Base.fieldoffset "
"Base.datatype_alignment Base.datatype_haspadding Base.datatype_pointerfree "
"```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/base/base.md:178
#, no-wrap
msgid "Special values"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:190
#, no-wrap
msgid ""
"```@docs\n"
"Base.typemin\n"
"Base.typemax\n"
"Base.floatmin\n"
"Base.floatmax\n"
"Base.maxintfloat\n"
"Base.eps(::Type{<:AbstractFloat})\n"
"Base.eps(::AbstractFloat)\n"
"Base.instances\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:191
#, no-wrap
msgid "Special Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:208
msgid ""
"```@docs Core.Any Core.Union Union{} Core.UnionAll Core.Tuple Core."
"NamedTuple Base.Val Core.Vararg Core.Nothing Base.isnothing Base.Some Base."
"something Base.Enums.@enum ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:209
#, no-wrap
msgid "Generic Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:221
#, no-wrap
msgid ""
"```@docs\n"
"Core.Function\n"
"Base.hasmethod\n"
"Core.applicable\n"
"Core.invoke\n"
"Base.invokelatest\n"
"new\n"
"Base.:(|>)\n"
"Base.:(∘)\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:222
#, no-wrap
msgid "Syntax"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:245
msgid ""
"```@docs Core.eval Base.MainInclude.eval Base.@eval Base.evalfile Base.esc "
"Base.@inbounds Base.@boundscheck Base.@inline Base.@noinline Base."
"@nospecialize Base.@specialize Base.gensym Base.@gensym Base.@goto Base."
"@label Base.@simd Base.@polly Base.@generated Base.@pure ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:246
#, no-wrap
msgid "Missing Values"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:254
msgid ""
"```@docs Base.Missing Base.missing Base.coalesce Base.ismissing Base."
"skipmissing ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:255
#, no-wrap
msgid "System"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:296
msgid ""
"```@docs Base.run Base.devnull Base.success Base.process_running Base."
"process_exited Base.kill(::Base.Process, ::Integer)  Base.Sys."
"set_process_title Base.Sys.get_process_title Base.ignorestatus Base.detach "
"Base.Cmd Base.setenv Base.withenv Base.pipeline(::Any, ::Any, ::Any, ::"
"Any...)  Base.pipeline(::Base.AbstractCmd)  Base.Libc.gethostname Base.Libc."
"getpid Base.Libc.time()  Base.time_ns Base.@time Base.@timev Base.@timed "
"Base.@elapsed Base.@allocated Base.EnvDict Base.ENV Base.Sys.isunix Base.Sys."
"isapple Base.Sys.islinux Base.Sys.isbsd Base.Sys.isfreebsd Base.Sys."
"isopenbsd Base.Sys.isnetbsd Base.Sys.isdragonfly Base.Sys.iswindows Base.Sys."
"windows_version Base.@static ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:297
#, no-wrap
msgid "Versioning"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:303
msgid "```@docs Base.VersionNumber Base.@v_str ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:343
msgid ""
"```@docs Base.error Core.throw Base.rethrow Base.backtrace Base."
"catch_backtrace Base.catch_stack Base.@assert Base.ArgumentError Base."
"AssertionError Core.BoundsError Base.CompositeException Base."
"DimensionMismatch Core.DivideError Core.DomainError Base.EOFError Core."
"ErrorException Core.InexactError Core.InterruptException Base.KeyError Base."
"LoadError Base.MethodError Base.MissingException Core.OutOfMemoryError Core."
"ReadOnlyMemoryError Core.OverflowError Core.StackOverflowError Base."
"SystemError Core.TypeError Core.UndefKeywordError Core.UndefRefError Core."
"UndefVarError Base.StringIndexError Base.InitError Base.retry Base."
"ExponentialBackOff ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:344
#, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:352
msgid ""
"```@docs Base.Timer(::Function, ::Real)  Base.Timer Base.AsyncCondition Base."
"AsyncCondition(::Function)  ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:353
#, no-wrap
msgid "Reflection"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:369
msgid ""
"```@docs Base.nameof(::Module)  Base.parentmodule Base.pathof(::Module)  "
"Base.moduleroot Base.@__MODULE__ Base.fullname Base.names Core.nfields Base."
"isconst Base.nameof(::Function)  Base.functionloc(::Any, ::Any)  Base."
"functionloc(::Method)  ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/base.md:370
#, no-wrap
msgid "Internals"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/base.md:387
msgid ""
"```@docs Base.GC.gc Base.GC.enable Base.GC.@preserve Meta.lower Meta.@lower "
"Meta.parse(::AbstractString, ::Int)  Meta.parse(::AbstractString)  Meta."
"ParseError Base.macroexpand Base.@macroexpand Base.@macroexpand1 Base."
"code_lowered Base.code_typed Base.precompile ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/sort.md:1
#, no-wrap
msgid "Sorting and Related Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:5
msgid ""
"Julia has an extensive, flexible API for sorting and interacting with "
"already-sorted arrays of values. By default, Julia picks reasonable "
"algorithms and sorts in standard ascending order:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:13
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sort([2,3,1])\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:15
msgid "You can easily sort in reverse order as well:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:23
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> sort([2,3,1], rev=true)\n"
"3-element Array{Int64,1}:\n"
" 3\n"
" 2\n"
" 1\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:25
msgid ""
"To sort an array in-place, use the \"bang\" version of the sort function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:28
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> a = [2,3,1];\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:30
#, no-wrap
msgid "julia> sort!(a);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:37
#, no-wrap
msgid ""
"julia> a\n"
"3-element Array{Int64,1}:\n"
" 1\n"
" 2\n"
" 3\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:40
msgid ""
"Instead of directly sorting an array, you can compute a permutation of the "
"array's indices that puts the array into sorted order:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:49
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> v = randn(5)\n"
"5-element Array{Float64,1}:\n"
"  0.297288\n"
"  0.382396\n"
" -0.597634\n"
" -0.0104452\n"
" -0.839027\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:57
#, no-wrap
msgid ""
"julia> p = sortperm(v)\n"
"5-element Array{Int64,1}:\n"
" 5\n"
" 3\n"
" 4\n"
" 1\n"
" 2\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:66
#, no-wrap
msgid ""
"julia> v[p]\n"
"5-element Array{Float64,1}:\n"
" -0.839027\n"
" -0.597634\n"
" -0.0104452\n"
"  0.297288\n"
"  0.382396\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:68
msgid ""
"Arrays can easily be sorted according to an arbitrary transformation of "
"their values:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:78
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> sort(v, by=abs)\n"
"5-element Array{Float64,1}:\n"
" -0.0104452\n"
"  0.297288\n"
"  0.382396\n"
" -0.597634\n"
" -0.839027\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:80
msgid "Or in reverse order by a transformation:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:90
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> sort(v, by=abs, rev=true)\n"
"5-element Array{Float64,1}:\n"
" -0.839027\n"
" -0.597634\n"
"  0.382396\n"
"  0.297288\n"
" -0.0104452\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:92
msgid "If needed, the sorting algorithm can be chosen:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:102
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> sort(v, alg=InsertionSort)\n"
"5-element Array{Float64,1}:\n"
" -0.839027\n"
" -0.597634\n"
" -0.0104452\n"
"  0.297288\n"
"  0.382396\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:106
msgid ""
"All the sorting and order related functions rely on a \"less than\" relation "
"defining a total order on the values to be manipulated. The `isless` "
"function is invoked by default, but the relation can be specified via the "
"`lt` keyword."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/sort.md:107
#, no-wrap
msgid "Sorting Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:120
msgid ""
"```@docs Base.sort! Base.sort Base.sortperm Base.InsertionSort Base."
"MergeSort Base.QuickSort Base.PartialQuickSort Base.Sort.sortperm! Base.Sort."
"sortslices ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/sort.md:121
#, no-wrap
msgid "Order-Related Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:133
msgid ""
"```@docs Base.issorted Base.Sort.searchsorted Base.Sort.searchsortedfirst "
"Base.Sort.searchsortedlast Base.Sort.partialsort! Base.Sort.partialsort Base."
"Sort.partialsortperm Base.Sort.partialsortperm! ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/sort.md:134
#, no-wrap
msgid "Sorting Algorithms"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:137
msgid "There are currently four sorting algorithms available in base Julia:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/sort.md:142
msgid "[`InsertionSort`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/sort.md:142
msgid "[`QuickSort`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/sort.md:142
msgid "[`PartialQuickSort(k)`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/sort.md:142
msgid "[`MergeSort`](@ref)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:145
msgid ""
"`InsertionSort` is an O(n^2) stable sorting algorithm. It is efficient for "
"very small `n`, and is used internally by `QuickSort`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:150
msgid ""
"`QuickSort` is an O(n log n) sorting algorithm which is in-place, very fast, "
"but not stable – i.e. elements which are considered equal will not remain in "
"the same order in which they originally appeared in the array to be sorted. "
"`QuickSort` is the default algorithm for numeric values, including integers "
"and floats."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:153
msgid ""
"`PartialQuickSort(k)` is similar to `QuickSort`, but the output array is "
"only sorted up to index `k` if `k` is an integer, or in the range of `k` if "
"`k` is an `OrdinalRange`. For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:167
#, no-wrap
msgid ""
"```julia\n"
"x = rand(1:500, 100)\n"
"k = 50\n"
"k2 = 50:100\n"
"s = sort(x; alg=QuickSort)\n"
"ps = sort(x; alg=PartialQuickSort(k))\n"
"qs = sort(x; alg=PartialQuickSort(k2))\n"
"map(issorted, (s, ps, qs))             # => (true, false, false)\n"
"map(x->issorted(x[1:k]), (s, ps, qs))  # => (true, true, false)\n"
"map(x->issorted(x[k2]), (s, ps, qs))   # => (true, false, true)\n"
"s[1:k] == ps[1:k]                      # => true\n"
"s[k2] == qs[k2]                        # => true\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:171
msgid ""
"`MergeSort` is an O(n log n) stable sorting algorithm but is not in-place – "
"it requires a temporary array of half the size of the input array – and is "
"typically not quite as fast as `QuickSort`.  It is the default algorithm for "
"non-numeric data."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:177
msgid ""
"The default sorting algorithms are chosen on the basis that they are fast "
"and stable, or *appear* to be so. For numeric types indeed, `QuickSort` is "
"selected as it is faster and indistinguishable in this case from a stable "
"sort (unless the array records its mutations in some way). The stability "
"property comes at a non-negligible cost, so if you don't need it, you may "
"want to explicitly specify your preferred algorithm, e.g. `sort!(v, "
"alg=QuickSort)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:181
msgid ""
"The mechanism by which Julia picks default sorting algorithms is implemented "
"via the `Base.Sort.defalg` function. It allows a particular algorithm to be "
"registered as the default in all sorting functions for specific arrays. For "
"example, here are the two default methods from [`sort.jl`](https://github."
"com/JuliaLang/julia/blob/master/base/sort.jl):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:186
#, no-wrap
msgid ""
"```julia\n"
"defalg(v::AbstractArray) = MergeSort\n"
"defalg(v::AbstractArray{<:Number}) = QuickSort\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/sort.md:189
msgid ""
"As for numeric arrays, choosing a non-stable default algorithm for array "
"types for which the notion of a stable sort is meaningless (i.e. when two "
"values comparing equal can not be distinguished)  may make sense."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/strings.md:1
#, no-wrap
msgid "[Strings](@id lib-strings)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/strings.md:81
msgid ""
"```@docs Core.AbstractChar Core.Char Base.codepoint Base.length(::"
"AbstractString)  Base.sizeof(::AbstractString)  Base.:*(::"
"Union{AbstractChar, AbstractString}, ::Union{AbstractChar, "
"AbstractString}...)  Base.:^(::AbstractString, ::Integer)  Base.string Base."
"repeat(::AbstractString, ::Integer)  Base.repeat(::AbstractChar, ::Integer)  "
"Base.repr(::Any)  Core.String(::AbstractString)  Base.SubString Base."
"transcode Base.unsafe_string Base.ncodeunits(::AbstractString)  Base."
"codeunit Base.codeunits Base.ascii Base.@r_str Base.SubstitutionString Base."
"@s_str Base.@raw_str Base.Docs.@html_str Base.Docs.@text_str Base.isvalid(::"
"Any)  Base.isvalid(::Any, ::Any)  Base.isvalid(::AbstractString, ::Integer)  "
"Base.match Base.eachmatch Base.isless(::AbstractString, ::AbstractString)  "
"Base.:(==)(::AbstractString, ::AbstractString)  Base.cmp(::AbstractString, ::"
"AbstractString)  Base.lpad Base.rpad Base.findfirst(::AbstractString, ::"
"AbstractString)  Base.findnext(::AbstractString, ::AbstractString, ::"
"Integer)  Base.findlast(::AbstractString, ::AbstractString)  Base.findprev(::"
"AbstractString, ::AbstractString, ::Integer)  Base.occursin Base.reverse(::"
"Union{String,SubString{String}})  Base.replace(s::AbstractString, ::Pair)  "
"Base.split Base.rsplit Base.strip Base.lstrip Base.rstrip Base.startswith "
"Base.endswith Base.first(::AbstractString, ::Integer)  Base.last(::"
"AbstractString, ::Integer)  Base.uppercase Base.lowercase Base.titlecase "
"Base.uppercasefirst Base.lowercasefirst Base.join Base.chop Base.chomp Base."
"thisind Base.nextind Base.prevind Base.textwidth Base.isascii Base.iscntrl "
"Base.isdigit Base.isletter Base.islowercase Base.isnumeric Base.isprint Base."
"ispunct Base.isspace Base.isuppercase Base.isxdigit Core.Symbol Base."
"escape_string Base.unescape_string ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/math.md:1
#, no-wrap
msgid "Mathematics"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/math.md:3
#, no-wrap
msgid "[Mathematical Operators](@id math-ops)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/math.md:55
#, no-wrap
msgid ""
"```@docs\n"
"Base.:-(::Any)\n"
"Base.:(+)\n"
"Base.:-(::Any, ::Any)\n"
"Base.:*(::Any, ::Any...)\n"
"Base.:(/)\n"
"Base.:\\(::Any, ::Any)\n"
"Base.:^(::Number, ::Number)\n"
"Base.fma\n"
"Base.muladd\n"
"Base.inv(::Number)\n"
"Base.div\n"
"Base.fld\n"
"Base.cld\n"
"Base.mod\n"
"Base.rem\n"
"Base.rem2pi\n"
"Base.Math.mod2pi\n"
"Base.divrem\n"
"Base.fldmod\n"
"Base.fld1\n"
"Base.mod1\n"
"Base.fldmod1\n"
"Base.:(//)\n"
"Base.rationalize\n"
"Base.numerator\n"
"Base.denominator\n"
"Base.:(<<)\n"
"Base.:(>>)\n"
"Base.:(>>>)\n"
"Base.:(:)\n"
"Base.range\n"
"Base.OneTo\n"
"Base.StepRangeLen\n"
"Base.:(==)\n"
"Base.:(!=)\n"
"Base.:(!==)\n"
"Base.:(<)\n"
"Base.:(<=)\n"
"Base.:(>)\n"
"Base.:(>=)\n"
"Base.cmp\n"
"Base.:(~)\n"
"Base.:(&)\n"
"Base.:(|)\n"
"Base.xor\n"
"Base.:(!)\n"
"&&\n"
"||\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/math.md:56
#, no-wrap
msgid "Mathematical Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/math.md:178
#, no-wrap
msgid ""
"```@docs\n"
"Base.isapprox\n"
"Base.sin(::Number)\n"
"Base.cos(::Number)\n"
"Base.sincos(::Float64)\n"
"Base.tan(::Number)\n"
"Base.Math.sind\n"
"Base.Math.cosd\n"
"Base.Math.tand\n"
"Base.Math.sinpi\n"
"Base.Math.cospi\n"
"Base.sinh(::Number)\n"
"Base.cosh(::Number)\n"
"Base.tanh(::Number)\n"
"Base.asin(::Number)\n"
"Base.acos(::Number)\n"
"Base.atan(::Number)\n"
"Base.Math.asind\n"
"Base.Math.acosd\n"
"Base.Math.atand\n"
"Base.Math.sec(::Number)\n"
"Base.Math.csc(::Number)\n"
"Base.Math.cot(::Number)\n"
"Base.Math.secd\n"
"Base.Math.cscd\n"
"Base.Math.cotd\n"
"Base.Math.asec(::Number)\n"
"Base.Math.acsc(::Number)\n"
"Base.Math.acot(::Number)\n"
"Base.Math.asecd\n"
"Base.Math.acscd\n"
"Base.Math.acotd\n"
"Base.Math.sech(::Number)\n"
"Base.Math.csch(::Number)\n"
"Base.Math.coth(::Number)\n"
"Base.asinh(::Number)\n"
"Base.acosh(::Number)\n"
"Base.atanh(::Number)\n"
"Base.Math.asech(::Number)\n"
"Base.Math.acsch(::Number)\n"
"Base.Math.acoth(::Number)\n"
"Base.Math.sinc\n"
"Base.Math.cosc\n"
"Base.Math.deg2rad\n"
"Base.Math.rad2deg\n"
"Base.Math.hypot\n"
"Base.log(::Number)\n"
"Base.log(::Number, ::Number)\n"
"Base.log2\n"
"Base.log10\n"
"Base.log1p\n"
"Base.Math.frexp\n"
"Base.exp(::Float64)\n"
"Base.exp2\n"
"Base.exp10\n"
"Base.Math.ldexp\n"
"Base.Math.modf\n"
"Base.expm1\n"
"Base.round(::Type, ::Any)\n"
"Base.Rounding.RoundingMode\n"
"Base.Rounding.RoundNearest\n"
"Base.Rounding.RoundNearestTiesAway\n"
"Base.Rounding.RoundNearestTiesUp\n"
"Base.Rounding.RoundToZero\n"
"Base.Rounding.RoundFromZero\n"
"Base.Rounding.RoundUp\n"
"Base.Rounding.RoundDown\n"
"Base.round(::Complex{<: AbstractFloat}, ::RoundingMode, ::RoundingMode)\n"
"Base.ceil\n"
"Base.floor\n"
"Base.trunc\n"
"Base.unsafe_trunc\n"
"Base.min\n"
"Base.max\n"
"Base.minmax\n"
"Base.Math.clamp\n"
"Base.Math.clamp!\n"
"Base.abs\n"
"Base.Checked.checked_abs\n"
"Base.Checked.checked_neg\n"
"Base.Checked.checked_add\n"
"Base.Checked.checked_sub\n"
"Base.Checked.checked_mul\n"
"Base.Checked.checked_div\n"
"Base.Checked.checked_rem\n"
"Base.Checked.checked_fld\n"
"Base.Checked.checked_mod\n"
"Base.Checked.checked_cld\n"
"Base.Checked.add_with_overflow\n"
"Base.Checked.sub_with_overflow\n"
"Base.Checked.mul_with_overflow\n"
"Base.abs2\n"
"Base.copysign\n"
"Base.sign\n"
"Base.signbit\n"
"Base.flipsign\n"
"Base.sqrt(::Real)\n"
"Base.isqrt\n"
"Base.Math.cbrt\n"
"Base.real(::Complex)\n"
"Base.imag\n"
"Base.reim\n"
"Base.conj\n"
"Base.angle\n"
"Base.cis\n"
"Base.binomial\n"
"Base.factorial\n"
"Base.gcd\n"
"Base.lcm\n"
"Base.gcdx\n"
"Base.ispow2\n"
"Base.nextpow\n"
"Base.prevpow\n"
"Base.nextprod\n"
"Base.invmod\n"
"Base.powermod\n"
"Base.ndigits\n"
"Base.widemul\n"
"Base.Math.@evalpoly\n"
"Base.FastMath.@fastmath\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/stacktraces.md:1
#, no-wrap
msgid "StackTraces"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/stacktraces.md:8
msgid ""
"```@docs Base.StackTraces.StackFrame Base.StackTraces.StackTrace Base."
"StackTraces.stacktrace ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/stacktraces.md:11
msgid ""
"The following methods and types in `Base.StackTraces` are not exported and "
"need to be called e.g.  as `StackTraces.lookup(ptr)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/stacktraces.md:15
msgid "```@docs Base.StackTraces.lookup Base.StackTraces.remove_frames! ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/libc.md:1
#, no-wrap
msgid "C Standard Library"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/libc.md:17
msgid ""
"```@docs Base.Libc.malloc Base.Libc.calloc Base.Libc.realloc Base.Libc.free "
"Base.Libc.errno Base.Libc.strerror Base.Libc.GetLastError Base.Libc."
"FormatMessage Base.Libc.time(::Base.Libc.TmStruct)  Base.Libc.strftime Base."
"Libc.strptime Base.Libc.TmStruct Base.Libc.flush_cstdio ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/file.md:1
#, no-wrap
msgid "Filesystem"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/file.md:66
msgid ""
"```@docs Base.Filesystem.pwd Base.Filesystem.cd(::AbstractString)  Base."
"Filesystem.cd(::Function)  Base.Filesystem.readdir Base.Filesystem.walkdir "
"Base.Filesystem.mkdir Base.Filesystem.mkpath Base.Filesystem.symlink Base."
"Filesystem.readlink Base.Filesystem.chmod Base.Filesystem.chown Base.RawFD "
"Base.stat Base.Filesystem.lstat Base.Filesystem.ctime Base.Filesystem.mtime "
"Base.Filesystem.filemode Base.Filesystem.filesize Base.Filesystem.uperm Base."
"Filesystem.gperm Base.Filesystem.operm Base.Filesystem.cp Base.download Base."
"Filesystem.mv Base.Filesystem.rm Base.Filesystem.touch Base.Filesystem."
"tempname Base.Filesystem.tempdir Base.Filesystem.mktemp(::Any)  Base."
"Filesystem.mktemp(::Function, ::Any)  Base.Filesystem.mktempdir(::Any)  Base."
"Filesystem.mktempdir(::Function, ::Any)  Base.Filesystem.isblockdev Base."
"Filesystem.ischardev Base.Filesystem.isdir Base.Filesystem.isfifo Base."
"Filesystem.isfile Base.Filesystem.islink Base.Filesystem.ismount Base."
"Filesystem.ispath Base.Filesystem.issetgid Base.Filesystem.issetuid Base."
"Filesystem.issocket Base.Filesystem.issticky Base.Filesystem.homedir Base."
"Filesystem.dirname Base.Filesystem.basename Base.@__FILE__ Base.@__DIR__ "
"Base.@__LINE__ Base.Filesystem.isabspath Base.Filesystem.isdirpath Base."
"Filesystem.joinpath Base.Filesystem.abspath Base.Filesystem.normpath Base."
"Filesystem.realpath Base.Filesystem.relpath Base.Filesystem.expanduser Base."
"Filesystem.splitdir Base.Filesystem.splitdrive Base.Filesystem.splitext Base."
"Filesystem.splitpath ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/collections.md:1
#, no-wrap
msgid "Collections and Data Structures"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/collections.md:3
#, no-wrap
msgid "[Iteration](@id lib-collections-iteration)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:7
msgid ""
"Sequential iteration is implemented by the [`iterate`](@ref) function.  The "
"general `for` loop:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:28
msgid ""
"The `state` object may be anything, and should be chosen appropriately for "
"each iterable type.  See the [manual section on the iteration interface]"
"(@ref man-interface-iteration) for more details about defining a custom "
"iterable type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:34
msgid "```@docs Base.iterate Base.IteratorSize Base.IteratorEltype ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:36
#: ext/julia/doc/src/base/collections.md:72
#: ext/julia/doc/src/base/collections.md:151
#: ext/julia/doc/src/base/collections.md:218
#: ext/julia/doc/src/base/collections.md:253
#: ext/julia/doc/src/base/collections.md:277
msgid "Fully implemented by:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:167
msgid "[`AbstractRange`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:167
msgid "[`UnitRange`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:167
msgid "`Tuple`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
msgid "`Number`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:156
msgid "[`AbstractArray`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:232
#: ext/julia/doc/src/base/collections.md:256
msgid "[`BitSet`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:167
#: ext/julia/doc/src/base/collections.md:222
msgid "[`IdDict`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:167
#: ext/julia/doc/src/base/collections.md:222
msgid "[`Dict`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:167
#: ext/julia/doc/src/base/collections.md:222
msgid "[`WeakKeyDict`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
msgid "`EachLine`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:167
msgid "`AbstractString`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:232
#: ext/julia/doc/src/base/collections.md:256
msgid "[`Set`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
msgid "[`Pair`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:51
#: ext/julia/doc/src/base/collections.md:85
#: ext/julia/doc/src/base/collections.md:167
msgid "[`NamedTuple`](@ref)"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/collections.md:52 ext/julia/doc/src/base/arrays.md:3
#, no-wrap
msgid "Constructors and Types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:62
msgid ""
"```@docs Base.AbstractRange Base.OrdinalRange Base.AbstractUnitRange Base."
"StepRange Base.UnitRange Base.LinRange ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/collections.md:63
#, no-wrap
msgid "General Collections"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:70
msgid "```@docs Base.isempty Base.empty! Base.length ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/collections.md:86
#, no-wrap
msgid "Iterable Collections"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:140
msgid ""
"```@docs Base.in Base.:∉ Base.eltype Base.indexin Base.unique Base.unique! "
"Base.allunique Base.reduce(::Any, ::Any)  Base.foldl(::Any, ::Any)  Base."
"foldr(::Any, ::Any)  Base.maximum Base.maximum! Base.minimum Base.minimum! "
"Base.extrema Base.argmax Base.argmin Base.findmax Base.findmin Base.findmax! "
"Base.findmin! Base.sum Base.sum! Base.prod Base.prod! Base.any(::Any)  Base."
"any(::AbstractArray, ::Any)  Base.any! Base.all(::Any)  Base.all(::"
"AbstractArray, ::Any)  Base.all! Base.count Base.any(::Any, ::Any)  Base."
"all(::Any, ::Any)  Base.foreach Base.map Base.map! Base.mapreduce(::Any, ::"
"Any, ::Any)  Base.mapfoldl(::Any, ::Any, ::Any)  Base.mapfoldr(::Any, ::"
"Any, ::Any)  Base.first Base.last Base.step Base.collect(::Any)  Base."
"collect(::Type, ::Any)  Base.filter Base.filter! Base.replace(::Any, ::"
"Pair...)  Base.replace(::Base.Callable, ::Any)  Base.replace! ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/collections.md:141
#, no-wrap
msgid "Indexable Collections"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:149
msgid ""
"```@docs Base.getindex Base.setindex! Base.firstindex Base.lastindex ```"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:156
#: ext/julia/doc/src/base/collections.md:232
#: ext/julia/doc/src/base/collections.md:260
msgid "[`Array`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:156
#: ext/julia/doc/src/base/collections.md:232
msgid "[`BitArray`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:156
msgid "`SubArray`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:158
#: ext/julia/doc/src/base/collections.md:224
#: ext/julia/doc/src/base/collections.md:258
msgid "Partially implemented by:"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/collections.md:168
#, no-wrap
msgid "Dictionaries"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:173
msgid ""
"[`Dict`](@ref) is the standard dictionary. Its implementation uses [`hash`]"
"(@ref)  as the hashing function for the key, and [`isequal`](@ref) to "
"determine equality. Define these two functions for custom types to override "
"how they are stored in a hash table."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:175
msgid ""
"[`IdDict`](@ref) is a special hash table where the keys are always object "
"identities."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:180
msgid ""
"[`WeakKeyDict`](@ref) is a hash table implementation where the keys are weak "
"references to objects, and thus may be garbage collected even when "
"referenced in a hash table.  Like `Dict` it uses `hash` for hashing and "
"`isequal` for equality, unlike `Dict` it does not convert keys on insertion."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:185
#, no-wrap
msgid ""
"[`Dict`](@ref)s can be created by passing pair objects constructed with `=>` to a [`Dict`](@ref)\n"
"constructor: `Dict(\"A\"=>1, \"B\"=>2)`. This call will attempt to infer type information from the\n"
"keys and values (i.e. this example creates a `Dict{String, Int64}`). To explicitly specify types\n"
"use the syntax `Dict{KeyType,ValueType}(...)`. For example, `Dict{String,Int32}(\"A\"=>1, \"B\"=>2)`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:187
#, no-wrap
msgid "Dictionaries may also be created with generators. For example, `Dict(i => f(i) for i = 1:10)`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:192
#, no-wrap
msgid ""
"Given a dictionary `D`, the syntax `D[x]` returns the value of key `x` (if it exists) or throws\n"
"an error, and `D[x] = y` stores the key-value pair `x => y` in `D` (replacing any existing value\n"
"for the key `x`).  Multiple arguments to `D[...]` are converted to tuples; for example, the syntax\n"
"`D[x,y]`  is equivalent to `D[(x,y)]`, i.e. it refers to the value keyed by the tuple `(x,y)`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:216
msgid ""
"```@docs Base.Dict Base.IdDict Base.WeakKeyDict Base.ImmutableDict Base."
"haskey Base.get(::Any, ::Any, ::Any)  Base.get Base.get!(::Any, ::Any, ::"
"Any)  Base.get!(::Function, ::Any, ::Any)  Base.getkey Base.delete! Base.pop!"
"(::Any, ::Any, ::Any)  Base.keys Base.values Base.pairs Base.merge Base."
"merge!(::AbstractDict, ::AbstractDict...)  Base.merge!(::Function, ::"
"AbstractDict, ::AbstractDict...)  Base.sizehint! Base.keytype Base.valtype "
"```"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:232
msgid "[`EnvDict`](@ref Base.EnvDict)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:232
msgid "[`ImmutableDict`](@ref Base.ImmutableDict)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:232
msgid "[`Iterators.Pairs`](@ref)"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/collections.md:233
#, no-wrap
msgid "Set-Like Collections"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:251
msgid ""
"```@docs Base.Set Base.BitSet Base.union Base.union! Base.intersect Base."
"setdiff Base.setdiff! Base.symdiff Base.symdiff! Base.intersect! Base."
"issubset Base.:⊈ Base.:⊊ Base.issetequal ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/collections.md:261
#, no-wrap
msgid "Dequeues"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:275
msgid ""
"```@docs Base.push! Base.pop! Base.pushfirst! Base.popfirst! Base.insert! "
"Base.deleteat! Base.splice! Base.resize! Base.append! Base.prepend! ```"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:280
msgid "`Vector` (a.k.a. 1-dimensional [`Array`](@ref))"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/collections.md:280
msgid "`BitVector` (a.k.a. 1-dimensional [`BitArray`](@ref))"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/collections.md:281
#, no-wrap
msgid "Utility Collections"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/collections.md:286
msgid "```@docs Base.Pair Iterators.Pairs ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/arrays.md:1
#, no-wrap
msgid "[Arrays](@id lib-arrays)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/arrays.md:45
msgid ""
"```@docs Core.AbstractArray Base.AbstractVector Base.AbstractMatrix Base."
"AbstractVecOrMat Core.Array Core.Array(::UndefInitializer, ::Any)  Core."
"Array(::Nothing, ::Any)  Core.Array(::Missing, ::Any)  Core.UndefInitializer "
"Core.undef Base.Vector Base.Vector(::UndefInitializer, ::Any)  Base.Vector(::"
"Nothing, ::Any)  Base.Vector(::Missing, ::Any)  Base.Matrix Base.Matrix(::"
"UndefInitializer, ::Any, ::Any)  Base.Matrix(::Nothing, ::Any, ::Any)  Base."
"Matrix(::Missing, ::Any, ::Any)  Base.VecOrMat Core.DenseArray Base."
"DenseVector Base.DenseMatrix Base.DenseVecOrMat Base.StridedArray Base."
"StridedVector Base.StridedMatrix Base.StridedVecOrMat Base.getindex(::"
"Type, ::Any...)  Base.zeros Base.ones Base.BitArray Base.BitArray(::"
"UndefInitializer, ::Integer...)  Base.BitArray(::Any)  Base.trues Base."
"falses Base.fill Base.fill! Base.similar ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/arrays.md:46
#, no-wrap
msgid "Basic functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/arrays.md:62
msgid ""
"```@docs Base.ndims Base.size Base.axes(::Any)  Base.axes(::AbstractArray, ::"
"Any)  Base.length(::AbstractArray)  Base.eachindex Base.IndexStyle Base."
"IndexLinear Base.IndexCartesian Base.conj! Base.stride Base.strides ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/arrays.md:63
#, no-wrap
msgid "Broadcast and vectorization"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/arrays.md:69
msgid ""
"See also the [dot syntax for vectorizing functions](@ref man-vectorized); "
"for example, `f.(args...)` implicitly calls `broadcast(f, args...)`.  Rather "
"than relying on \"vectorized\" methods of functions like `sin` to operate on "
"arrays, you should use `sin.(a)` to vectorize via `broadcast`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/arrays.md:75
msgid "```@docs Base.broadcast Base.Broadcast.broadcast! Base.@__dot__ ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/arrays.md:84
msgid ""
"For specializing broadcast on custom types, see ```@docs Base.BroadcastStyle "
"Base.Broadcast.AbstractArrayStyle Base.Broadcast.ArrayStyle Base.Broadcast."
"DefaultArrayStyle Base.Broadcast.broadcastable ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/arrays.md:85
#, no-wrap
msgid "Indexing and assignment"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/arrays.md:101
msgid ""
"```@docs Base.getindex(::AbstractArray, ::Any...)  Base.setindex!(::"
"AbstractArray, ::Any, ::Any...)  Base.copyto!(::AbstractArray, ::"
"CartesianIndices, ::AbstractArray, ::CartesianIndices)  Base.isassigned Base."
"Colon Base.CartesianIndex Base.CartesianIndices Base.Dims Base.LinearIndices "
"Base.to_indices Base.checkbounds Base.checkindex ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/arrays.md:102
#, no-wrap
msgid "Views (SubArrays and other view types)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/arrays.md:116
msgid ""
"```@docs Base.view Base.@view Base.@views Base.parent Base.parentindices "
"Base.selectdim Base.reinterpret Base.reshape Base.dropdims Base.vec ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/arrays.md:117
#, no-wrap
msgid "Concatenation and permutation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/arrays.md:143
msgid ""
"```@docs Base.cat Base.vcat Base.hcat Base.hvcat Base.vect Base.circshift "
"Base.circshift! Base.circcopy! Base.findall(::Any)  Base.findall(::"
"Function, ::Any)  Base.findfirst(::Any)  Base.findfirst(::Function, ::Any)  "
"Base.findlast(::Any)  Base.findlast(::Function, ::Any)  Base.findnext(::"
"Any, ::Integer)  Base.findnext(::Function, ::Any, ::Integer)  Base."
"findprev(::Any, ::Integer)  Base.findprev(::Function, ::Any, ::Integer)  "
"Base.permutedims Base.permutedims! Base.PermutedDimsArray Base.promote_shape "
"```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/arrays.md:144
#, no-wrap
msgid "Array functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/arrays.md:160
msgid ""
"```@docs Base.accumulate Base.accumulate! Base.cumprod Base.cumprod! Base."
"cumsum Base.cumsum! Base.diff Base.repeat Base.rot180 Base.rotl90 Base."
"rotr90 Base.mapslices ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/arrays.md:161
#, no-wrap
msgid "Combinatorics"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/arrays.md:171
msgid ""
"```@docs Base.invperm Base.isperm Base.permute!(::Any, ::AbstractVector)  "
"Base.invpermute! Base.reverse(::AbstractVector; kwargs...)  Base.reverseind "
"Base.reverse! ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/io-network.md:1
#, no-wrap
msgid "I/O and Network"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/io-network.md:3
#, no-wrap
msgid "General I/O"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/io-network.md:53
msgid ""
"```@docs Base.stdout Base.stderr Base.stdin Base.open Base.IOBuffer Base."
"take!(::Base.GenericIOBuffer)  Base.fdio Base.flush Base.close Base.write "
"Base.read Base.read! Base.readbytes! Base.unsafe_read Base.unsafe_write Base."
"position Base.seek Base.seekstart Base.seekend Base.skip Base.mark Base."
"unmark Base.reset Base.ismarked Base.eof Base.isreadonly Base.iswritable "
"Base.isreadable Base.isopen Base.Grisu.print_shortest Base.fd Base."
"redirect_stdout Base.redirect_stdout(::Function, ::Any)  Base."
"redirect_stderr Base.redirect_stderr(::Function, ::Any)  Base.redirect_stdin "
"Base.redirect_stdin(::Function, ::Any)  Base.readchomp Base.truncate Base."
"skipchars Base.countlines Base.PipeBuffer Base.readavailable Base.IOContext "
"Base.IOContext(::IO, ::Pair)  Base.IOContext(::IO, ::IOContext)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/io-network.md:72
msgid ""
"```@docs Base.show(::Any)  Base.summary Base.print Base.println Base."
"printstyled Base.sprint Base.showerror Base.dump Meta.@dump Base.readline "
"Base.readuntil Base.readlines Base.eachline Base.displaysize ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/io-network.md:73
#, no-wrap
msgid "Multimedia I/O"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/io-network.md:78
msgid ""
"Just as text output is performed by [`print`](@ref) and user-defined types "
"can indicate their textual representation by overloading [`show`](@ref), "
"Julia provides a standardized mechanism for rich multimedia output (such as "
"images, formatted text, or even audio and video), consisting of three parts:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/io-network.md:85
msgid ""
"A function [`display(x)`](@ref) to request the richest available multimedia "
"display of a Julia object `x` (with a plain-text fallback)."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/io-network.md:85
msgid ""
"Overloading [`show`](@ref) allows one to indicate arbitrary multimedia "
"representations (keyed by standard MIME types) of user-defined types."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/io-network.md:85
msgid ""
"Multimedia-capable display backends may be registered by subclassing a "
"generic `AbstractDisplay` type and pushing them onto a stack of display "
"backends via [`pushdisplay`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/io-network.md:89
msgid ""
"The base Julia runtime provides only plain-text display, but richer displays "
"may be enabled by loading external modules or by using graphical Julia "
"environments (such as the IPython-based IJulia notebook)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/io-network.md:98
msgid ""
"```@docs Base.Multimedia.display Base.Multimedia.redisplay Base.Multimedia."
"displayable Base.show(::Any, ::Any, ::Any)  Base.Multimedia.showable Base."
"repr(::MIME, ::Any)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/io-network.md:102
msgid ""
"As mentioned above, one can also define new display backends. For example, a "
"module that can display PNG images in a window can register this capability "
"with Julia, so that calling [`display(x)`](@ref) on types with PNG "
"representations will automatically display the image using the module's "
"window."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/io-network.md:117
msgid ""
"In order to define a new display backend, one should first create a subtype "
"`D` of the abstract class `AbstractDisplay`.  Then, for each MIME type "
"(`mime` string) that can be displayed on `D`, one should define a function "
"`display(d::D, ::MIME\"mime\", x) = ...` that displays `x` as that MIME "
"type, usually by calling [`show(io, mime, x)`](@ref) or [`repr(io, mime, x)`]"
"(@ref).  A `MethodError` should be thrown if `x` cannot be displayed as that "
"MIME type; this is automatic if one calls `show` or `repr`. Finally, one "
"should define a function `display(d::D, x)` that queries [`showable(mime, "
"x)`](@ref) for the `mime` types supported by `D` and displays the \"best\" "
"one; a `MethodError` should be thrown if no supported MIME types are found "
"for `x`.  Similarly, some subtypes may wish to override [`redisplay(d::"
"D, ...)`](@ref Base.Multimedia.redisplay). (Again, one should `import Base."
"display` to add new methods to `display`.) The return values of these "
"functions are up to the implementation (since in some cases it may be useful "
"to return a display \"handle\" of some type).  The display functions for `D` "
"can then be called directly, but they can also be invoked automatically from "
"[`display(x)`](@ref) simply by pushing a new display onto the display-"
"backend stack with:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/io-network.md:124
msgid ""
"```@docs Base.Multimedia.pushdisplay Base.Multimedia.popdisplay Base."
"Multimedia.TextDisplay Base.Multimedia.istextmime ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/base/io-network.md:125
#, no-wrap
msgid "Network I/O"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/io-network.md:134
msgid ""
"```@docs Base.bytesavailable Base.ntoh Base.hton Base.ltoh Base.htol Base."
"ENDIAN_BOM ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/constants.md:1
#, no-wrap
msgid "[Constants](@id lib-constants)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/constants.md:17
msgid ""
"```@docs Core.nothing Base.PROGRAM_FILE Base.ARGS Base.C_NULL Base.VERSION "
"Base.LOAD_PATH Base.Sys.BINDIR Base.Sys.CPU_THREADS Base.Sys.WORD_SIZE Base."
"Sys.KERNEL Base.Sys.ARCH Base.Sys.MACHINE ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/constants.md:19
msgid "See also:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/constants.md:27
msgid "[`stdin`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/constants.md:27
msgid "[`stdout`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/constants.md:27
msgid "[`stderr`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/constants.md:27
msgid "[`ENV`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/constants.md:27
msgid "[`ENDIAN_BOM`](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/constants.md:27
msgid "`Libc.MS_ASYNC`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/constants.md:27
msgid "`Libc.MS_INVALIDATE`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/base/constants.md:27
msgid "`Libc.MS_SYNC`"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/c.md:1
#, no-wrap
msgid "C Interface"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/c.md:45
msgid ""
"```@docs ccall Core.Intrinsics.cglobal Base.@cfunction Base.CFunction Base."
"unsafe_convert Base.cconvert Base.unsafe_load Base.unsafe_store! Base."
"unsafe_copyto!{T}(::Ptr{T}, ::Ptr{T}, ::Any)  Base.unsafe_copyto!{T}(::"
"Array{T}, ::Any, ::Array{T}, ::Any, ::Any)  Base.copyto! Base.pointer Base."
"unsafe_wrap{T,N}(::Union{Type{Array},Type{Array{T}},Type{Array{T,N}}}, ::"
"Ptr{T}, ::NTuple{N,Int})  Base.pointer_from_objref Base."
"unsafe_pointer_to_objref Base.disable_sigint Base.reenable_sigint Base."
"systemerror Core.Ptr Core.Ref Base.Cchar Base.Cuchar Base.Cshort Base."
"Cstring Base.Cushort Base.Cint Base.Cuint Base.Clong Base.Culong Base."
"Clonglong Base.Culonglong Base.Cintmax_t Base.Cuintmax_t Base.Csize_t Base."
"Cssize_t Base.Cptrdiff_t Base.Cwchar_t Base.Cwstring Base.Cfloat Base."
"Cdouble ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/c.md:46
#, no-wrap
msgid "LLVM Interface"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/c.md:50
msgid "```@docs Core.Intrinsics.llvmcall ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/base/simd-types.md:1
#, no-wrap
msgid "SIMD Support"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/simd-types.md:5
msgid ""
"Type `VecElement{T}` is intended for building libraries of SIMD operations. "
"Practical use of it requires using `llvmcall`. The type is defined as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/simd-types.md:11
#, no-wrap
msgid ""
"```julia\n"
"struct VecElement{T}\n"
"    value::T\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/simd-types.md:14
msgid ""
"It has a special compilation rule: a homogeneous tuple of `VecElement{T}` "
"maps to an LLVM `vector` type when `T` is a primitive bits type and the "
"tuple length is in the set {2-6,8-10,16}."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/simd-types.md:18
msgid ""
"At `-O3`, the compiler *might* automatically vectorize operations on such "
"tuples. For example, the following program, when compiled with `julia -O3` "
"generates two SIMD addition instructions (`addps`) on x86 systems:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/simd-types.md:21
msgid "```julia const m128 = NTuple{4,VecElement{Float32}}"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/simd-types.md:28
#, no-wrap
msgid ""
"function add(a::m128, b::m128)\n"
"    (VecElement(a[1].value+b[1].value),\n"
"     VecElement(a[2].value+b[2].value),\n"
"     VecElement(a[3].value+b[3].value),\n"
"     VecElement(a[4].value+b[4].value))\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/simd-types.md:30
msgid "triple(c::m128) = add(add(c,c),c)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/simd-types.md:33
msgid "code_native(triple,(m128,))  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/base/simd-types.md:35
msgid ""
"However, since the automatic vectorization cannot be relied upon, future use "
"will mostly be via libraries that use `llvmcall`."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/locks.md:1
#, no-wrap
msgid "Proper maintenance and care of multi-threading locks"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:5
msgid ""
"The following strategies are used to ensure that the code is dead-lock free "
"(generally by addressing the 4th Coffman condition: circular wait)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:9
#, no-wrap
msgid ""
"> 1. structure code such that only one lock will need to be acquired at a time\n"
"> 2. always acquire shared locks in the same order, as given by the table below\n"
"> 3. avoid constructs that expect to need unrestricted recursion\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/locks.md:10
#, no-wrap
msgid "Locks"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:14
msgid ""
"Below are all of the locks that exist in the system and the mechanisms for "
"using them that avoid the potential for deadlocks (no Ostrich algorithm "
"allowed here):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:16
msgid ""
"The following are definitely leaf locks (level 1), and must not try to "
"acquire any other lock:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:32
#, no-wrap
msgid ""
">   * safepoint\n"
">\n"
">     > Note that this lock is acquired implicitly by `JL_LOCK` and `JL_UNLOCK`. use the `_NOGC` variants\n"
">     > to avoid that for level 1 locks.\n"
">     >\n"
">     > While holding this lock, the code must not do any allocation or hit any safepoints. Note that\n"
">     > there are safepoints when doing allocation, enabling / disabling GC, entering / restoring exception\n"
">     > frames, and taking / releasing locks.\n"
">   * shared_map\n"
">   * finalizers\n"
">   * pagealloc\n"
">   * gc_perm_lock\n"
">   * flisp\n"
">\n"
">     > flisp itself is already threadsafe, this lock only protects the `jl_ast_context_list_t` pool\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:34
msgid ""
"The following is a leaf lock (level 2), and only acquires level 1 locks "
"(safepoint) internally:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:36
#, no-wrap
msgid ">   * typecache\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:38
msgid ""
"The following is a level 3 lock, which can only acquire level 1 or level 2 "
"locks internally:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:40
#, no-wrap
msgid ">   * Method->writelock\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:42
msgid ""
"The following is a level 4 lock, which can only recurse to acquire level 1, "
"2, or 3 locks:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:44
#, no-wrap
msgid ">   * MethodTable->writelock\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:46
msgid "No Julia code may be called while holding a lock above this point."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:48
msgid ""
"The following is a level 6 lock, which can only recurse to acquire locks at "
"lower levels:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:50
#, no-wrap
msgid ">   * codegen\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:53
msgid ""
"The following is an almost root lock (level end-1), meaning only the root "
"look may be held when trying to acquire it:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:60
#, no-wrap
msgid ""
">   * typeinf\n"
">\n"
">     > this one is perhaps one of the most tricky ones, since type-inference can be invoked from many\n"
">     > points\n"
">     >\n"
">     > currently the lock is merged with the codegen lock, since they call each other recursively\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:62
msgid ""
"The following is the root lock, meaning no other lock shall be held when "
"trying to acquire it:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:71
#, no-wrap
msgid ""
">   * toplevel\n"
">\n"
">     > this should be held while attempting a top-level action (such as making a new type or defining\n"
">     > a new method): trying to obtain this lock inside a staged function will cause a deadlock condition!\n"
">     >\n"
">     >\n"
">     > additionally, it's unclear if *any* code can safely run in parallel with an arbitrary toplevel\n"
">     > expression, so it may require all threads to get to a safepoint first\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/locks.md:72
#, no-wrap
msgid "Broken Locks"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:75
msgid "The following locks are broken:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/locks.md:77
msgid "toplevel"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:81
#, no-wrap
msgid ""
"    > doesn't exist right now\n"
"    >\n"
"    > fix: create it\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/locks.md:82
#, no-wrap
msgid "Shared Global Data Structures"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:87
msgid ""
"These data structures each need locks due to being shared mutable global "
"state. It is the inverse list for the above lock priority list. This list "
"does not include level 1 leaf resources due to their simplicity."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:89
#, no-wrap
msgid "MethodTable modifications (def, cache, kwsorter type) : MethodTable->writelock\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:91
msgid "Type declarations : toplevel lock"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:93
msgid "Type application : typecache lock"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:95
msgid "Module serializer : toplevel lock"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:97
msgid "JIT & type-inference : codegen lock"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:99
msgid "MethodInstance updates : codegen lock"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:128
#, no-wrap
msgid ""
">   * These fields are generally lazy initialized, using the test-and-test-and-set pattern.\n"
">   * These are set at construction and immutable:\n"
">\n"
">       * specTypes\n"
">       * sparam_vals\n"
">       * def\n"
">   * These are set by `jl_type_infer` (while holding codegen lock):\n"
">\n"
">       * rettype\n"
">       * inferred\n"
">       * these can also be reset, see `jl_set_lambda_rettype` for that logic as it needs to keep `functionObjectsDecls`\n"
">         in sync\n"
">   * `inInference` flag:\n"
">\n"
">       * optimization to quickly avoid recurring into `jl_type_infer` while it is already running\n"
">       * actual state (of setting `inferred`, then `fptr`) is protected by codegen lock\n"
">   * Function pointers (`jlcall_api` and `fptr`, `unspecialized_ducttape`):\n"
">\n"
">       * these transition once, from `NULL` to a value, while the codegen lock is held\n"
">   * Code-generator cache (the contents of `functionObjectsDecls`):\n"
">\n"
">       * these can transition multiple times, but only while the codegen lock is held\n"
">       * it is valid to use old version of this, or block for new versions of this, so races are benign,\n"
">         as long as the code is careful not to reference other data in the method instance (such as `rettype`)\n"
">         and assume it is coordinated, unless also holding the codegen lock\n"
">   * `compile_traced` flag:\n"
">\n"
">       * unknown\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:130
msgid "LLVMContext : codegen lock"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/locks.md:132
#, no-wrap
msgid "Method : Method->writelock\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/locks.md:134
msgid "roots array (serializer and codegen)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/locks.md:134
msgid "invoke / specializations / tfunc modifications"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/ast.md:1
#, no-wrap
msgid "Julia ASTs"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:10
msgid ""
"Julia has two representations of code. First there is a surface syntax AST "
"returned by the parser (e.g. the [`Meta.parse`](@ref) function), and "
"manipulated by macros. It is a structured representation of code as it is "
"written, constructed by `julia-parser.scm` from a character stream. Next "
"there is a lowered form, or IR (intermediate representation), which is used "
"by type inference and code generation. In the lowered form there are fewer "
"types of nodes, all macros are expanded, and all control flow is converted "
"to explicit branches and sequences of statements. The lowered form is "
"constructed by `julia-syntax.scm`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:13
msgid ""
"First we will focus on the lowered form, since it is more important to the "
"compiler. It is also less obvious to the human, since it results from a "
"significant rearrangement of the input syntax."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/ast.md:14
#, no-wrap
msgid "Lowered form"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:17
msgid "The following data types exist in lowered form:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:19
msgid "`Expr`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:24
#, no-wrap
msgid ""
"    Has a node type indicated by the `head` field, and an `args` field which is a `Vector{Any}` of\n"
"    subexpressions.\n"
"    While almost every part of a surface AST is represented by an `Expr`, the IR uses only a\n"
"    limited number of `Expr`s, mostly for calls, conditional branches (`gotoifnot`), and returns.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:26
msgid "`Slot`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:33
#, no-wrap
msgid ""
"    Identifies arguments and local variables by consecutive numbering. `Slot` is an abstract type\n"
"    with subtypes `SlotNumber` and `TypedSlot`. Both types have an integer-valued `id` field giving\n"
"    the slot index. Most slots have the same type at all uses, and so are represented with `SlotNumber`.\n"
"    The types of these slots are found in the `slottypes` field of their `MethodInstance` object.\n"
"    Slots that require per-use type annotations are represented with `TypedSlot`, which has a `typ`\n"
"    field.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:35
msgid "`CodeInfo`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:37
#, no-wrap
msgid "    Wraps the IR of a method. Its `code` field is an array of expressions to execute.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:39
msgid "`GotoNode`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:42
#, no-wrap
msgid ""
"    Unconditional branch. The argument is the branch target, represented as an index in\n"
"    the code array to jump to.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:44
msgid "`QuoteNode`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:48
#, no-wrap
msgid ""
"    Wraps an arbitrary value to reference as data. For example, the function `f() = :a` contains a\n"
"    `QuoteNode` whose `value` field is the symbol `a`, in order to return the symbol itself instead\n"
"    of evaluating it.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:50
msgid "`GlobalRef`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:52
#, no-wrap
msgid "    Refers to global variable `name` in module `mod`.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:54
msgid "`SSAValue`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:58
#, no-wrap
msgid ""
"    Refers to a consecutively-numbered (starting at 1) static single assignment (SSA) variable inserted\n"
"    by the compiler. The number (`id`) of an `SSAValue` is the code array index of the expression whose\n"
"    value it represents.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:60
msgid "`NewvarNode`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:62
#, no-wrap
msgid "    Marks a point where a variable (slot) is created. This has the effect of resetting a variable to undefined.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:64
#, no-wrap
msgid "Expr types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:67
msgid "These symbols appear in the `head` field of `Expr`s in lowered form."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:69
msgid "`call`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:71
#, no-wrap
msgid "    Function call (dynamic dispatch). `args[1]` is the function to call, `args[2:end]` are the arguments.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:73
msgid "`invoke`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:76
#, no-wrap
msgid ""
"    Function call (static dispatch). `args[1]` is the MethodInstance to call, `args[2:end]` are the\n"
"    arguments (including the function that is being called, at `args[2]`).\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:78
msgid "`static_parameter`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:80
#, no-wrap
msgid "    Reference a static parameter by index.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:82
msgid "`gotoifnot`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:84
#, no-wrap
msgid "    Conditional branch. If `args[1]` is false, goes to the index identified in `args[2]`.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:86
msgid "`=`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:88
#, no-wrap
msgid "    Assignment. In the IR, the first argument is always a Slot or a GlobalRef.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:90
msgid "`method`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:92
#, no-wrap
msgid "    Adds a method to a generic function and assigns the result if necessary.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:101
#, no-wrap
msgid ""
"    Has a 1-argument form and a 4-argument form. The 1-argument form arises from the syntax `function foo end`.\n"
"    In the 1-argument form, the argument is a symbol. If this symbol already names a function in the\n"
"    current scope, nothing happens. If the symbol is undefined, a new function is created and assigned\n"
"    to the identifier specified by the symbol. If the symbol is defined but names a non-function,\n"
"    an error is raised. The definition of \"names a function\" is that the binding is constant, and\n"
"    refers to an object of singleton type. The rationale for this is that an instance of a singleton\n"
"    type uniquely identifies the type to add the method to. When the type has fields, it wouldn't\n"
"    be clear whether the method was being added to the instance or its type.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:103
#, no-wrap
msgid "    The 4-argument form has the following arguments:\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:105
msgid "`args[1]`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:109
#, no-wrap
msgid ""
"        A function name, or `false` if unknown. If a symbol, then the expression first\n"
"        behaves like the 1-argument form above. This argument is ignored from then on. When\n"
"        this is `false`, it means a method is being added strictly by type, `(::T)(x) = x`.\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:111
msgid "`args[2]`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:115
#, no-wrap
msgid ""
"        A `SimpleVector` of argument type data. `args[2][1]` is a `SimpleVector` of the\n"
"        argument types, and `args[2][2]` is a `SimpleVector` of type variables corresponding\n"
"        to the method's static parameters.\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:117
msgid "`args[3]`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:121
#, no-wrap
msgid ""
"        A `CodeInfo` of the method itself. For \"out of scope\" method definitions (adding a\n"
"        method to a function that also has methods defined in different scopes) this is an\n"
"        expression that evaluates to a `:lambda` expression.\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:123
msgid "`args[4]`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:125
#, no-wrap
msgid "        `true` or `false`, identifying whether the method is staged (`@generated function`).\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:127
msgid "`const`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:130
#, no-wrap
msgid ""
"    Declares a (global) variable as constant.\n"
"  * `null`\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:132
#, no-wrap
msgid "    Has no arguments; simply yields the value `nothing`.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:134
msgid "`new`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:138
#, no-wrap
msgid ""
"    Allocates a new struct-like object. First argument is the type. The [`new`](@ref) pseudo-function is lowered\n"
"    to this, and the type is always inserted by the compiler.  This is very much an internal-only\n"
"    feature, and does no checking. Evaluating arbitrary `new` expressions can easily segfault.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:140
msgid "`return`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:142
#, no-wrap
msgid "    Returns its argument as the value of the enclosing function.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:144
msgid "`the_exception`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:146
#, no-wrap
msgid "    Yields the caught exception inside a `catch` block, as returned by `jl_current_exception()`.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:148
msgid "`enter`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:151
#, no-wrap
msgid ""
"    Enters an exception handler (`setjmp`). `args[1]` is the label of the catch block to jump to on\n"
"    error.  Yields a token which is consumed by `pop_exception`.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:153
msgid "`leave`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:155
#, no-wrap
msgid "    Pop exception handlers. `args[1]` is the number of handlers to pop.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:157
msgid "`pop_exception`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:160
#, no-wrap
msgid ""
"    Pop the stack of current exceptions back to the state at the associated `enter` when leaving a\n"
"    catch block. `args[1]` contains the token from the associated `enter`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:163
#, no-wrap
msgid ""
"    !!! compat \"Julia 1.1\"\n"
"        `pop_exception` is new in Julia 1.1.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:165
msgid "`inbounds`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:169
#, no-wrap
msgid ""
"    Controls turning bounds checks on or off. A stack is maintained; if the first argument of this\n"
"    expression is true or false (`true` means bounds checks are disabled), it is pushed onto the stack.\n"
"    If the first argument is `:pop`, the stack is popped.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:171
msgid "`boundscheck`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:174
#, no-wrap
msgid ""
"    Has the value `false` if inlined into a section of code marked with `@inbounds`,\n"
"    otherwise has the value `true`.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:176
msgid "`copyast`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:179
#, no-wrap
msgid ""
"    Part of the implementation of quasi-quote. The argument is a surface syntax AST that is simply\n"
"    copied recursively and returned at run time.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:181
msgid "`meta`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:184
#, no-wrap
msgid ""
"    Metadata. `args[1]` is typically a symbol specifying the kind of metadata, and the rest of the\n"
"    arguments are free-form. The following kinds of metadata are commonly used:\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:186
msgid "`:inline` and `:noinline`: Inlining hints."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:188
#, no-wrap
msgid "Method"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:191
msgid ""
"A unique'd container describing the shared metadata for a single method."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:193
msgid "`name`, `module`, `file`, `line`, `sig`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:195
#, no-wrap
msgid "    Metadata to uniquely identify the method for the computer and the human.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:197
msgid "`ambig`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:199
#, no-wrap
msgid "    Cache of other methods that may be ambiguous with this one.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:201
msgid "`specializations`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:205
#, no-wrap
msgid ""
"    Cache of all MethodInstance ever created for this Method, used to ensure uniqueness.\n"
"    Uniqueness is required for efficiency, especially for incremental precompile and\n"
"    tracking of method invalidation.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:207
msgid "`source`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:209
#, no-wrap
msgid "    The original source code (usually compressed).\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:211
msgid "`roots`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:214
#, no-wrap
msgid ""
"    Pointers to non-AST things that have been interpolated into the AST, required by\n"
"    compression of the AST, type-inference, or the generation of native code.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:216
msgid "`nargs`, `isva`, `called`, `isstaged`, `pure`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:218
#, no-wrap
msgid "    Descriptive bit-fields for the source code of this Method.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:220 ext/julia/doc/src/devdocs/ast.md:272
msgid "`min_world` / `max_world`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:222
#, no-wrap
msgid "    The range of world ages for which this method is visible to dispatch.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:224
#, no-wrap
msgid "MethodInstance"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:228
msgid ""
"A unique'd container describing a single callable signature for a Method. "
"See especially [Proper maintenance and care of multi-threading locks](@ref)  "
"for important details on how to modify these fields safely."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:230
msgid "`specTypes`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:233
#, no-wrap
msgid ""
"    The primary key for this MethodInstance. Uniqueness is guaranteed through a\n"
"    `def.specializations` lookup.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:235
msgid "`def`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:238
#, no-wrap
msgid ""
"    The `Method` that this function describes a specialization of. Or a `Module`,\n"
"    if this is a top-level Lambda expanded in Module, and which is not part of a Method.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:240
msgid "`sparam_vals`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:245
#, no-wrap
msgid ""
"    The values of the static parameters in `specTypes` indexed by `def.sparam_syms`. For the\n"
"    `MethodInstance` at `Method.unspecialized`, this is the empty `SimpleVector`. But for a\n"
"    runtime `MethodInstance` from the `MethodTable` cache, this will always be defined and\n"
"    indexable.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:247
msgid "`rettype`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:250
#, no-wrap
msgid ""
"    The inferred return type for the `specFunctionObject` field, which (in most cases) is\n"
"    also the computed return type for the function in general.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:252 ext/julia/doc/src/devdocs/ast.md:320
msgid "`inferred`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:256
#, no-wrap
msgid ""
"    May contain a cache of the inferred source for this function, or other information about\n"
"    the inference result such as a constant return value may be put here (if `jlcall_api ==\n"
"    2`), or it could be set to `nothing` to just indicate `rettype` is inferred.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:258
msgid "`ftpr`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:260
#, no-wrap
msgid "    The generic jlcall entry point.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:262
msgid "`jlcall_api`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:264
#, no-wrap
msgid "    The ABI to use when calling `fptr`. Some significant ones include:\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:270
msgid "0 - Not compiled yet"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:270
msgid ""
"1 - JL_CALLABLE `jl_value_t *(*)(jl_function_t *f, jl_value_t *args[nargs], "
"uint32_t nargs)`"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:270
msgid "2 - Constant (value stored in `inferred`)"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:270
msgid ""
"3 - With Static-parameters forwarded `jl_value_t *(*)(jl_svec_t *sparams, "
"jl_function_t *f, jl_value_t *args[nargs], uint32_t nargs)`"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:270
msgid ""
"4 - Run in interpreter `jl_value_t *(*)(jl_method_instance_t *meth, "
"jl_function_t *f, jl_value_t *args[nargs], uint32_t nargs)`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:274
#, no-wrap
msgid "    The range of world ages for which this method instance is valid to be called.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:276
#, no-wrap
msgid "CodeInfo"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:279
msgid "A temporary container for holding lowered source code."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:281
msgid "`code`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:283
#, no-wrap
msgid "    An `Any` array of statements\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:285
msgid "`slotnames`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:287
#, no-wrap
msgid "    An array of symbols giving the name of each slot (argument or local variable).\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:289
msgid "`slottypes`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:291
#, no-wrap
msgid "    An array of types for the slots.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:293
msgid "`slotflags`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:295
#, no-wrap
msgid "    A `UInt8` array of slot properties, represented as bit flags:\n"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:300
msgid ""
"2 - assigned (only false if there are *no* assignment statements with this "
"var on the left)"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:300
msgid "8 - const (currently unused for local variables)"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:300
msgid "16 - statically assigned once"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/ast.md:300
msgid ""
"32 - might be used before assigned. This flag is only valid after type "
"inference."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:302
msgid "`ssavaluetypes`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:304
#, no-wrap
msgid "    Either an array or an `Int`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:307
#, no-wrap
msgid ""
"    If an `Int`, it gives the number of compiler-inserted temporary locations in the\n"
"    function. If an array, specifies a type for each location.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:309
msgid "`linetable`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:311
#, no-wrap
msgid "    An array of source location objects\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:313
msgid "`codelocs`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:316
#, no-wrap
msgid ""
"    An array of integer indices into the `linetable`, giving the location associated\n"
"    with each statement.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:318
msgid "Boolean properties:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:322
#, no-wrap
msgid "    Whether this has been produced by type inference.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:324
msgid "`inlineable`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:326
#, no-wrap
msgid "    Whether this should be inlined.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:328
msgid "`propagate_inbounds`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:331
#, no-wrap
msgid ""
"    Whether this should should propagate `@inbounds` when inlined for the purpose of eliding\n"
"    `@boundscheck` blocks.\n"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/ast.md:333
msgid "`pure`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:336
#, no-wrap
msgid ""
"    Whether this is known to be a pure function of its arguments, without respect to the\n"
"    state of the method caches or other mutable global state.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/ast.md:338
#, no-wrap
msgid "Surface syntax AST"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:345
msgid ""
"Front end ASTs consist almost entirely of `Expr`s and atoms (e.g. symbols, "
"numbers).  There is generally a different expression head for each visually "
"distinct syntactic form.  Examples will be given in s-expression syntax.  "
"Each parenthesized list corresponds to an Expr, where the first element is "
"the head.  For example `(call f x)` corresponds to `Expr(:call, :f, :x)` in "
"Julia."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:346
#, no-wrap
msgid "Calls"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:354
#, no-wrap
msgid ""
"| Input            | AST                                |\n"
"|:---------------- |:---------------------------------- |\n"
"| `f(x)`           | `(call f x)`                       |\n"
"| `f(x, y=1, z=2)` | `(call f x (kw y 1) (kw z 2))`     |\n"
"| `f(x; y=1)`      | `(call f (parameters (kw y 1)) x)` |\n"
"| `f(x...)`        | `(call f (... x))`                 |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:356
msgid "`do` syntax:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:362
#, no-wrap
msgid ""
"```julia\n"
"f(x) do a,b\n"
"    body\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:364
#, no-wrap
msgid "parses as `(do (call f x) (-> (tuple a b) (block body)))`.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:365
#, no-wrap
msgid "Operators"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:372
msgid ""
"Most uses of operators are just function calls, so they are parsed with the "
"head `call`. However some operators are special forms (not necessarily "
"function calls), and in those cases the operator itself is the expression "
"head. In julia-parser.scm these are referred to as \"syntactic operators\".  "
"Some operators (`+` and `*`) use N-ary parsing; chained calls are parsed as "
"a single N-argument call. Finally, chains of comparisons have their own "
"special expression structure."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:388
#, no-wrap
msgid ""
"| Input       | AST                       |\n"
"|:----------- |:------------------------- |\n"
"| `x+y`       | `(call + x y)`            |\n"
"| `a+b+c+d`   | `(call + a b c d)`        |\n"
"| `2x`        | `(call * 2 x)`            |\n"
"| `a&&b`      | `(&& a b)`                |\n"
"| `x += 1`    | `(+= x 1)`                |\n"
"| `a ? 1 : 2` | `(if a 1 2)`              |\n"
"| `a:b`       | `(: a b)`                 |\n"
"| `a:b:c`     | `(: a b c)`               |\n"
"| `a,b`       | `(tuple a b)`             |\n"
"| `a==b`      | `(call == a b)`           |\n"
"| `1<i<=n`    | `(comparison 1 < i <= n)` |\n"
"| `a.b`       | `(. a (quote b))`         |\n"
"| `a.(b)`     | `(. a b)`                 |\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:389
#, no-wrap
msgid "Bracketed forms"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:408
#, no-wrap
msgid ""
"| Input                    | AST                                  |\n"
"|:------------------------ |:------------------------------------ |\n"
"| `a[i]`                   | `(ref a i)`                          |\n"
"| `t[i;j]`                 | `(typed_vcat t i j)`                 |\n"
"| `t[i j]`                 | `(typed_hcat t i j)`                 |\n"
"| `t[a b; c d]`            | `(typed_vcat t (row a b) (row c d))` |\n"
"| `a{b}`                   | `(curly a b)`                        |\n"
"| `a{b;c}`                 | `(curly a (parameters c) b)`         |\n"
"| `[x]`                    | `(vect x)`                           |\n"
"| `[x,y]`                  | `(vect x y)`                         |\n"
"| `[x;y]`                  | `(vcat x y)`                         |\n"
"| `[x y]`                  | `(hcat x y)`                         |\n"
"| `[x y; z t]`             | `(vcat (row x y) (row z t))`         |\n"
"| `[x for y in z, a in b]` | `(comprehension x (= y z) (= a b))`  |\n"
"| `T[x for y in z]`        | `(typed_comprehension T x (= y z))`  |\n"
"| `(a, b, c)`              | `(tuple a b c)`                      |\n"
"| `(a; b; c)`              | `(block a (block b c))`              |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:416
#, no-wrap
msgid ""
"| Input         | AST                                          |\n"
"|:------------- |:-------------------------------------------- |\n"
"| `@m x y`      | `(macrocall @m (line) x y)`                  |\n"
"| `Base.@m x y` | `(macrocall (. Base (quote @m)) (line) x y)` |\n"
"| `@Base.m x y` | `(macrocall (. Base (quote @m)) (line) x y)` |\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:417
#, no-wrap
msgid "Strings"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:426
#, no-wrap
msgid ""
"| Input           | AST                                 |\n"
"|:--------------- |:----------------------------------- |\n"
"| `\"a\"`           | `\"a\"`                               |\n"
"| `x\"y\"`          | `(macrocall @x_str (line) \"y\")`     |\n"
"| `x\"y\"z`         | `(macrocall @x_str (line) \"y\" \"z\")` |\n"
"| `\"x = $x\"`      | `(string \"x = \" x)`                 |\n"
"| ``` `a b c` ``` | `(macrocall @cmd (line) \"a b c\")`   |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:428
msgid "Doc string syntax:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:433
msgid "```julia \"some docs\" f(x) = x ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:435
msgid ""
"parses as `(macrocall (|.| Core '@doc) (line) \"some docs\" (= (call f x) "
"(block x)))`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:436
#, no-wrap
msgid "Imports and such"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:447
#, no-wrap
msgid ""
"| Input               | AST                                          |\n"
"|:------------------- |:-------------------------------------------- |\n"
"| `import a`          | `(import (. a))`                             |\n"
"| `import a.b.c`      | `(import (. a b c))`                         |\n"
"| `import ...a`       | `(import (. . . . a))`                       |\n"
"| `import a.b, c.d`   | `(import (. a b) (. c d))`                   |\n"
"| `import Base: x`    | `(import (: (. Base) (. x)))`                |\n"
"| `import Base: x, y` | `(import (: (. Base) (. x) (. y)))`          |\n"
"| `export a, b`       | `(export a b)`                               |\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:448
#, no-wrap
msgid "Numbers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:452
msgid ""
"Julia supports more number types than many scheme implementations, so not "
"all numbers are represented directly as scheme numbers in the AST."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:458
#, no-wrap
msgid ""
"| Input                   | AST                                                     |\n"
"|:----------------------- |:------------------------------------------------------- |\n"
"| `11111111111111111111`  | `(macrocall @int128_str (null) \"11111111111111111111\")` |\n"
"| `0xfffffffffffffffff`   | `(macrocall @uint128_str (null) \"0xfffffffffffffffff\")` |\n"
"| `1111...many digits...` | `(macrocall @big_str (null) \"1111....\")`                |\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:459
#, no-wrap
msgid "Block forms"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:462
msgid "A block of statements is parsed as `(block stmt1 stmt2 ...)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:464
msgid "If statement:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:474
#, no-wrap
msgid ""
"```julia\n"
"if a\n"
"    b\n"
"elseif c\n"
"    d\n"
"else\n"
"    e\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:476 ext/julia/doc/src/devdocs/ast.md:502
#: ext/julia/doc/src/devdocs/ast.md:519
msgid "parses as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:482
#, no-wrap
msgid ""
"```\n"
"(if a (block (line 2) b)\n"
"    (elseif (block (line 3) c) (block (line 4) d)\n"
"            (block (line 5 e))))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:484
msgid "A `while` loop parses as `(while condition body)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:487
msgid ""
"A `for` loop parses as `(for (= var iter) body)`. If there is more than one "
"iteration specification, they are parsed as a block: `(for (block (= v1 "
"iter1) (= v2 iter2)) body)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:489
msgid ""
"`break` and `continue` are parsed as 0-argument expressions `(break)` and "
"`(continue)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:492
msgid ""
"`let` is parsed as `(let (= var val) body)` or `(let (block (= var1 val1) (= "
"var2 val2) ...) body)`, like `for` loops."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:494
msgid ""
"A basic function definition is parsed as `(function (call f x) body)`. A "
"more complex example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:500
#, no-wrap
msgid ""
"```julia\n"
"function f(x::T; k = 1) where T\n"
"    return x+1\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:509
#, no-wrap
msgid ""
"```\n"
"(function (where (call f (parameters (kw k 1))\n"
"                       (:: x T))\n"
"                 T)\n"
"          (block (line 2) (return (call + x 1))))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:511
msgid "Type definition:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:517
#, no-wrap
msgid ""
"```julia\n"
"mutable struct Foo{T<:S}\n"
"    x::T\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:524
#, no-wrap
msgid ""
"```\n"
"(struct true (curly Foo (<: T S))\n"
"        (block (line 2) (:: x T)))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:526
msgid "The first argument is a boolean telling whether the type is mutable."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:529
msgid ""
"`try` blocks parse as `(try try_block var catch_block finally_block)`. If no "
"variable is present after `catch`, `var` is `#f`. If there is no `finally` "
"clause, then the last argument is not present."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:530
#, no-wrap
msgid "Quote expressions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:536
msgid ""
"Julia source syntax forms for code quoting (`quote` and `:( )`) support "
"interpolation with `$`.  In Lisp terminology, this means they are actually "
"\"backquote\" or \"quasiquote\" forms.  Internally, there is also a need for "
"code quoting without interpolation.  In Julia's scheme code, non-"
"interpolating quote is represented with the expression head `inert`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:539
msgid ""
"`inert` expressions are converted to Julia `QuoteNode` objects.  These "
"objects wrap a single value of any type, and when evaluated simply return "
"that value."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:541
msgid ""
"A `quote` expression whose argument is an atom also gets converted to a "
"`QuoteNode`."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ast.md:542
#, no-wrap
msgid "Line numbers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:547
msgid ""
"Source location information is represented as `(line line_num file_name)` "
"where the third component is optional (and omitted when the current line "
"number, but not file name, changes)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:549
msgid "These expressions are represented as `LineNumberNode`s in Julia."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ast.md:555
msgid ""
"Macro hygiene is represented through the expression head pair `escape` and "
"`hygienic-scope`.  The result of a macro expansion is automatically wrapped "
"in `(hygienic-scope block module)`, to represent the result of the new "
"scope. The user can insert `(escape block)` inside to interpolate code from "
"the caller."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/require.md:1
#, no-wrap
msgid "Module loading"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/require.md:5
msgid ""
"[`Base.require`](@ref) is responsible for loading modules and it also "
"manages the precompilation cache. It is the implementation of the `import` "
"statement."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/require.md:6
#, no-wrap
msgid "Experimental features"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/require.md:9
msgid ""
"The features below are experimental and not part of the stable Julia API.  "
"Before building upon them inform yourself about the current thinking and "
"whether they might change soon."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/require.md:10
#, no-wrap
msgid "Module loading callbacks"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/require.md:13
msgid ""
"It is possible to listen to the modules loaded by `Base.require`, by "
"registering a callback."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/require.md:19
#, no-wrap
msgid ""
"```julia\n"
"loaded_packages = Channel{Symbol}()\n"
"callback = (mod::Symbol) -> put!(loaded_packages, mod)\n"
"push!(Base.package_callbacks, callback)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/require.md:23
msgid ""
"Please note that the symbol given to the callback is a non-unique identifier "
"and it is the responsibility of the callback provider to walk the module "
"chain to determine the fully qualified name of the loaded binding."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/require.md:25
msgid "The callback below is an example of how to do that:"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/require.md:27
#, no-wrap
msgid "Get the fully-qualified name of a module."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/require.md:32
#, no-wrap
msgid ""
"function module_fqn(name::Symbol)\n"
"    fqn = fullname(Base.root_module(name))\n"
"    return join(fqn, '.')\n"
"end\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/callconv.md:1
#, no-wrap
msgid "Calling Conventions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/callconv.md:4
msgid "Julia uses three calling conventions for four distinct purposes:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/callconv.md:11
#, no-wrap
msgid ""
"| Name    | Prefix    | Purpose                          |\n"
"|:------- |:--------- |:-------------------------------- |\n"
"| Native  | `julia_`  | Speed via specialized signatures |\n"
"| JL Call | `jlcall_` | Wrapper for generic calls        |\n"
"| JL Call | `jl_`     | Builtins                         |\n"
"| C ABI   | `jlcapi_` | Wrapper callable from C          |\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/callconv.md:12
#, no-wrap
msgid "Julia Native Calling Convention"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/callconv.md:16
msgid ""
"The native calling convention is designed for fast non-generic calls. It "
"usually uses a specialized signature."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/callconv.md:20
msgid "LLVM ghosts (zero-length types) are omitted."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/callconv.md:20
msgid "LLVM scalars and vectors are passed by value."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/callconv.md:20
msgid "LLVM aggregates (arrays and structs) are passed by reference."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/callconv.md:23
msgid ""
"A small return values is returned as LLVM return values. A large return "
"values is returned via the \"structure return\" (`sret`) convention, where "
"the caller provides a pointer to a return slot."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/callconv.md:26
msgid ""
"An argument or return values that is a homogeneous tuple is sometimes "
"represented as an LLVM vector instead of an LLVM array."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/callconv.md:27
#, no-wrap
msgid "JL Call Convention"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/callconv.md:31
msgid ""
"The JL Call convention is for builtins and generic dispatch. Hand-written "
"functions using this convention are declared via the macro `JL_CALLABLE`. "
"The convention uses exactly 3 parameters:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/callconv.md:35
msgid "`F` - Julia representation of function that is being applied"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/callconv.md:35
msgid "`args` - pointer to array of pointers to boxes"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/callconv.md:35
msgid "`nargs` - length of the array"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/callconv.md:37
msgid "The return value is a pointer to a box."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/callconv.md:38
#, no-wrap
msgid "C ABI"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/callconv.md:42
msgid ""
"C ABI wrappers enable calling Julia from C. The wrapper calls a function "
"using the native calling convention."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/callconv.md:43
msgid "Tuples are always represented as C arrays."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/cartesian.md:1
#, no-wrap
msgid "Base.Cartesian"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:6
msgid ""
"The (non-exported) Cartesian module provides macros that facilitate writing "
"multidimensional algorithms.  It is hoped that Cartesian will not, in the "
"long term, be necessary; however, at present it is one of the few ways to "
"write compact and performant multidimensional code."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/cartesian.md:7
#, no-wrap
msgid "Principles of usage"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:10
msgid "A simple example of usage is:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:16
#, no-wrap
msgid ""
"```julia\n"
"@nloops 3 i A begin\n"
"    s += @nref 3 A i\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:18
msgid "which generates the following code:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:28
#, no-wrap
msgid ""
"```julia\n"
"for i_3 = 1:size(A,3)\n"
"    for i_2 = 1:size(A,2)\n"
"        for i_1 = 1:size(A,1)\n"
"            s += A[i_1,i_2,i_3]\n"
"        end\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:33
msgid ""
"In general, Cartesian allows you to write generic code that contains "
"repetitive elements, like the nested loops in this example.  Other "
"applications include repeated expressions (e.g., loop unwinding) or creating "
"function calls with variable numbers of arguments without using the \"splat"
"\" construct (`i...`)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/cartesian.md:34
#, no-wrap
msgid "Basic syntax"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:37
msgid "The (basic) syntax of `@nloops` is as follows:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/cartesian.md:45
msgid ""
"The first argument must be an integer (*not* a variable) specifying the "
"number of loops."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/cartesian.md:45
msgid ""
"The second argument is the symbol-prefix used for the iterator variable. "
"Here we used `i`, and variables `i_1, i_2, i_3` were generated."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/cartesian.md:45
msgid ""
"The third argument specifies the range for each iterator variable. If you "
"use a variable (symbol)  here, it's taken as `1:size(A,dim)`. More flexibly, "
"you can use the anonymous-function expression syntax described below."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/cartesian.md:45
msgid ""
"The last argument is the body of the loop. Here, that's what appears between "
"the `begin...end`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:47
msgid ""
"There are some additional features of `@nloops` described in the [reference "
"section](@ref dev-cartesian-reference)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:52
msgid ""
"`@nref` follows a similar pattern, generating `A[i_1,i_2,i_3]` from `@nref 3 "
"A i`. The general practice is to read from left to right, which is why "
"`@nloops` is `@nloops 3 i A expr` (as in `for i_2 = 1:size(A,2)`, where "
"`i_2` is to the left and the range is to the right) whereas `@nref` is "
"`@nref 3 A i` (as in `A[i_1,i_2,i_3]`, where the array comes first)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:55
msgid ""
"If you're developing code with Cartesian, you may find that debugging is "
"easier when you examine the generated code, using `@macroexpand`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:61
#, no-wrap
msgid ""
"```@meta\n"
"DocTestSetup = quote\n"
"    import Base.Cartesian: @nref\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:66
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> @macroexpand @nref 2 A i\n"
":(A[i_1, i_2])\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:70
msgid "```@meta DocTestSetup = nothing ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/cartesian.md:71
#, no-wrap
msgid "Supplying the number of expressions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:77
msgid ""
"The first argument to both of these macros is the number of expressions, "
"which must be an integer.  When you're writing a function that you intend to "
"work in multiple dimensions, this may not be something you want to hard-"
"code. If you're writing code that you need to work with older Julia "
"versions, currently you should use the `@ngenerate` macro described in [an "
"older version of this documentation](https://docs.julialang.org/en/"
"release-0.3/devdocs/cartesian/#supplying-the-number-of-expressions)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:80
msgid ""
"Starting in Julia 0.4-pre, the recommended approach is to use a `@generated "
"function`.  Here's an example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:92
#, no-wrap
msgid ""
"```julia\n"
"@generated function mysum(A::Array{T,N}) where {T,N}\n"
"    quote\n"
"        s = zero(T)\n"
"        @nloops $N i A begin\n"
"            s += @nref $N A i\n"
"        end\n"
"        s\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:94
msgid ""
"Naturally, you can also prepare expressions or perform calculations before "
"the `quote` block."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/cartesian.md:95
#, no-wrap
msgid "Anonymous-function expressions as macro arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:99
msgid ""
"Perhaps the single most powerful feature in `Cartesian` is the ability to "
"supply anonymous-function expressions that get evaluated at parsing time.  "
"Let's consider a simple example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:103
#, no-wrap
msgid ""
"```julia\n"
"@nexprs 2 j->(i_j = 1)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:106
msgid ""
"`@nexprs` generates `n` expressions that follow a pattern. This code would "
"generate the following statements:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:111
msgid "```julia i_1 = 1 i_2 = 1 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:115
msgid ""
"In each generated statement, an \"isolated\" `j` (the variable of the "
"anonymous function) gets replaced by values in the range `1:2`. Generally "
"speaking, Cartesian employs a LaTeX-like syntax.  This allows you to do math "
"on the index `j`.  Here's an example computing the strides of an array:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:120
#, no-wrap
msgid ""
"```julia\n"
"s_1 = 1\n"
"@nexprs 3 j->(s_{j+1} = s_j * size(A, j))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:122
msgid "would generate expressions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:129
msgid ""
"```julia s_1 = 1 s_2 = s_1 * size(A, 1)  s_3 = s_2 * size(A, 2)  s_4 = s_3 * "
"size(A, 3)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:131
msgid "Anonymous-function expressions have many uses in practice."
msgstr ""

#. type: Title ####
#: ext/julia/doc/src/devdocs/cartesian.md:132
#, no-wrap
msgid "[Macro reference](@id dev-cartesian-reference)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/cartesian.md:144
msgid ""
"```@docs Base.Cartesian.@nloops Base.Cartesian.@nref Base.Cartesian."
"@nextract Base.Cartesian.@nexprs Base.Cartesian.@ncall Base.Cartesian."
"@ntuple Base.Cartesian.@nall Base.Cartesian.@nany Base.Cartesian.@nif ```"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/sysimg.md:1
#, no-wrap
msgid "System Image Building"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/sysimg.md:3
#, no-wrap
msgid "Building the Julia system image"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:10
msgid ""
"Julia ships with a preparsed system image containing the contents of the "
"`Base` module, named `sys.ji`.  This file is also precompiled into a shared "
"library called `sys.{so,dll,dylib}` on as many platforms as possible, so as "
"to give vastly improved startup times.  On systems that do not ship with a "
"precompiled system image file, one can be generated from the source files "
"shipped in Julia's `DATAROOTDIR/julia/base` folder."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:12
msgid "This operation is useful for multiple reasons.  A user may:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/sysimg.md:18
msgid ""
"Build a precompiled shared library system image on a platform that did not "
"ship with one, thereby improving startup times."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/sysimg.md:18
msgid ""
"Modify `Base`, rebuild the system image and use the new `Base` next time "
"Julia is started."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/sysimg.md:18
msgid ""
"Include a `userimg.jl` file that includes packages into the system image, "
"thereby creating a system image that has packages embedded into the startup "
"environment."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:22
msgid ""
"Julia now ships with a script that automates the tasks of building the "
"system image, wittingly named `build_sysimg.jl` that lives in `DATAROOTDIR/"
"julia/`.  That is, to include it into a current Julia session, type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:26
msgid ""
"```julia include(joinpath(Sys.BINDIR, Base.DATAROOTDIR, \"julia\", "
"\"build_sysimg.jl\"))  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:28
msgid "This will include a `build_sysimg` function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:32
msgid "```@docs BuildSysImg.build_sysimg ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:37
msgid ""
"Note that this file can also be run as a script itself, with command line "
"arguments taking the place of arguments passed to the `build_sysimg` "
"function.  For example, to build a system image in `/tmp/sys.{so,dll,dylib}"
"`, with the `core2` CPU instruction set, a user image of `~/userimg.jl` and "
"`force` set to `true`, one would execute:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:41
msgid "``` julia build_sysimg.jl /tmp/sys core2 ~/userimg.jl --force ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/sysimg.md:42
#, no-wrap
msgid "System image optimized for multiple microarchitectures"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:50
msgid ""
"The system image can be compiled simultaneously for multiple CPU "
"microarchitectures under the same instruction set architecture (ISA). "
"Multiple versions of the same function may be created with minimum dispatch "
"point inserted into shared functions in order to take advantage of different "
"ISA extensions or other microarchitecture features.  The version that offers "
"the best performance will be selected automatically at runtime based on "
"available CPU features."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/sysimg.md:51
#, no-wrap
msgid "Specifying multiple system image targets"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:61
msgid ""
"A multi-microarchitecture system image can be enabled by passing multiple "
"targets during system image compilation. This can be done either with the "
"`JULIA_CPU_TARGET` make option or with the `-C` command line option when "
"running the compilation command manually.  Multiple targets are separated by "
"`;` in the option string.  The syntax for each target is a CPU name followed "
"by multiple features separated by `,`.  All features supported by LLVM are "
"supported and a feature can be disabled with a `-` prefix.  (`+` prefix is "
"also allowed and ignored to be consistent with LLVM syntax).  Additionally, "
"a few special features are supported to control the function cloning "
"behavior."
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/devdocs/sysimg.md:63
msgid "`clone_all`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:70
#, no-wrap
msgid ""
"    By default, only functions that are the most likely to benefit from\n"
"    the microarchitecture features will be cloned.\n"
"    When `clone_all` is specified for a target, however,\n"
"    **all** functions in the system image will be cloned for the target.\n"
"    The negative form `-clone_all` can be used to prevent the built-in\n"
"    heuristic from cloning all functions.\n"
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/devdocs/sysimg.md:72
msgid "`base(<n>)`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:80
#, no-wrap
msgid ""
"    Where `<n>` is a placeholder for a non-negative number (e.g. `base(0)`, `base(1)`).\n"
"    By default, a partially cloned (i.e. not `clone_all`) target will use functions\n"
"    from the default target (first one specified) if a function is not cloned.\n"
"    This behavior can be changed by specifying a different base with the `base(<n>)` option.\n"
"    The `n`th target (0-based) will be used as the base target instead of the default (`0`th) one.\n"
"    The base target has to be either `0` or another `clone_all` target.\n"
"    Specifying a non-`clone_all` target as the base target will cause an error.\n"
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/devdocs/sysimg.md:82
msgid "`opt_size`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:85
#, no-wrap
msgid ""
"    This causes the function for the target to be optimized for size when there isn't a significant\n"
"    runtime performance impact. This corresponds to `-Os` GCC and Clang option.\n"
msgstr ""

#. type: Bullet: '4. '
#: ext/julia/doc/src/devdocs/sysimg.md:87
msgid "`min_size`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:90
#, no-wrap
msgid ""
"    This cause the function for the targe to be optimize for size that might have\n"
"    a significant runtime performance impact. This corresponds to `-Oz` Clang option.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:93
msgid ""
"As an example, at the time of this writing, the following string is used in "
"the creation of the official `x86_64` Julia binaries downloadable from "
"julialang.org:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:97
msgid "``` generic;sandybridge,-xsaveopt,clone_all;haswell,-rdrnd,base(1)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:108
msgid ""
"This creates a system image with three separate targets; one for a generic "
"`x86_64` processor, one with a `sandybridge` ISA (explicitly excluding "
"`xsaveopt`) that explicitly clones all functions, and one targeting the "
"`haswell` ISA, based off of the `sandybridge` sysimg version, and also "
"excluding `rdrnd`.  When a Julia implementation loads the generated sysimg, "
"it will check the host processor for matching CPU capability flags, enabling "
"the highest ISA level possible.  Note that the base level (`generic`) "
"requires the `cx16` instruction, which is disabled in some virtualization "
"software and must be enabled for the `generic` target to be loaded.  "
"Alternatively, a sysimg could be generated with the target `generic,-cx16` "
"for greater compatibility, however note that this may cause performance and "
"stability problems in some code."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/sysimg.md:109
#, no-wrap
msgid "Implementation overview"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:113
msgid ""
"This is a brief overview of different part involved in the implementation.  "
"See code comments for each components for more implementation details."
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/devdocs/sysimg.md:115
msgid "System image compilation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:125
#, no-wrap
msgid ""
"    The parsing and cloning decision are done in `src/processor*`.\n"
"    We currently support cloning of function based on the present of loops, simd instructions,\n"
"    or other math operations (e.g. fastmath, fma, muladd).\n"
"    This information is passed on to `src/llvm-multiversioning.cpp` which does the actual cloning.\n"
"    In addition to doing the cloning and insert dispatch slots\n"
"    (see comments in `MultiVersioning::runOnModule` for how this is done),\n"
"    the pass also generates metadata so that the runtime can load and initialize the\n"
"    system image correctly.\n"
"    A detail description of the metadata is available in `src/processor.h`.\n"
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/devdocs/sysimg.md:127
msgid "System image loading"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sysimg.md:133
#, no-wrap
msgid ""
"    The loading and initialization of the system image is done in `src/processor*` by\n"
"    parsing the metadata saved during system image generation.\n"
"    Host feature detection and selection decision are done in `src/processor_*.cpp`\n"
"    depending on the ISA. The target selection will prefer exact CPU name match,\n"
"    larger vector register size, and larget number of features.\n"
"    An overview of this process is in `src/processor.cpp`.\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/offset-arrays.md:1
#, no-wrap
msgid "[Arrays with custom indices](@id man-custom-indices)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:9
msgid ""
"Conventionally, Julia's arrays are indexed starting at 1, whereas some other "
"languages start numbering at 0, and yet others (e.g., Fortran) allow you to "
"specify arbitrary starting indices.  While there is much merit in picking a "
"standard (i.e., 1 for Julia), there are some algorithms which simplify "
"considerably if you can index outside the range `1:size(A,d)` (and not just "
"`0:size(A,d)-1`, either).  To facilitate such computations, Julia supports "
"arrays with arbitrary indices."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:16
msgid ""
"The purpose of this page is to address the question, \"what do I have to do "
"to support such arrays in my own code?\" First, let's address the simplest "
"case: if you know that your code will never need to handle arrays with "
"unconventional indexing, hopefully the answer is \"nothing.\" Old code, on "
"conventional arrays, should function essentially without alteration as long "
"as it was using the exported interfaces of Julia.  If you find it more "
"convenient to just force your users to supply traditional arrays where "
"indexing starts at one, you can add"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:20
msgid "```julia @assert !Base.has_offset_axes(arrays...)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:23
msgid ""
"where `arrays...` is a list of the array objects that you wish to check for "
"anything that violates 1-based indexing."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/offset-arrays.md:24
#, no-wrap
msgid "Generalizing existing code"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:27
msgid "As an overview, the steps are:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/offset-arrays.md:31
msgid "replace many uses of `size` with `axes`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/offset-arrays.md:31
msgid ""
"replace `1:length(A)` with `eachindex(A)`, or in some cases "
"`LinearIndices(A)`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/offset-arrays.md:31
msgid ""
"replace explicit allocations like `Array{Int}(size(B))` with "
"`similar(Array{Int}, axes(B))`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:33
msgid "These are described in more detail below."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/offset-arrays.md:34
#, no-wrap
msgid "Things to watch out for"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:41
msgid ""
"Because unconventional indexing breaks many people's assumptions that all "
"arrays start indexing with 1, there is always the chance that using such "
"arrays will trigger errors.  The most frustrating bugs would be incorrect "
"results or segfaults (total crashes of Julia).  For example, consider the "
"following function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:52
#, no-wrap
msgid ""
"```julia\n"
"function mycopy!(dest::AbstractVector, src::AbstractVector)\n"
"    length(dest) == length(src) || throw(DimensionMismatch(\"vectors must match\"))\n"
"    # OK, now we're safe to use @inbounds, right? (not anymore!)\n"
"    for i = 1:length(src)\n"
"        @inbounds dest[i] = src[i]\n"
"    end\n"
"    dest\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:56
msgid ""
"This code implicitly assumes that vectors are indexed from 1; if `dest` "
"starts at a different index than `src`, there is a chance that this code "
"would trigger a segfault.  (If you do get segfaults, to help locate the "
"cause try running julia with the option `--check-bounds=yes`.)"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/offset-arrays.md:57
#, no-wrap
msgid "Using `axes` for bounds checks and loop iteration"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:63
msgid ""
"`axes(A)` (reminiscent of `size(A)`) returns a tuple of `AbstractUnitRange` "
"objects, specifying the range of valid indices along each dimension of `A`.  "
"When `A` has unconventional indexing, the ranges may not start at 1.  If you "
"just want the range for a particular dimension `d`, there is `axes(A, d)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:68
msgid ""
"Base implements a custom range type, `OneTo`, where `OneTo(n)` means the "
"same thing as `1:n` but in a form that guarantees (via the type system) that "
"the lower index is 1. For any new [`AbstractArray`](@ref)  type, this is the "
"default returned by `axes`, and it indicates that this array type uses "
"\"conventional\" 1-based indexing."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:71
msgid ""
"For bounds checking, note that there are dedicated functions `checkbounds` "
"and `checkindex` which can sometimes simplify such tests."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/offset-arrays.md:72
#, no-wrap
msgid "Linear indexing (`LinearIndices`)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:76
msgid ""
"Some algorithms are most conveniently (or efficiently) written in terms of a "
"single linear index, `A[i]` even if `A` is multi-dimensional. Regardless of "
"the array's native indices, linear indices always range from `1:length(A)`. "
"However, this raises an ambiguity for one-dimensional arrays (a.k.a., "
"[`AbstractVector`](@ref)): does `v[i]` mean linear indexing , or Cartesian "
"indexing with the array's native indices?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:78
msgid ""
"For this reason, your best option may be to iterate over the array with "
"`eachindex(A)`, or, if you require the indices to be sequential integers, to "
"get the index range by calling `LinearIndices(A)`. This will return `axes(A, "
"1)` if A is an AbstractVector, and the equivalent of `1:length(A)` otherwise."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:80
msgid ""
"By this definition, 1-dimensional arrays always use Cartesian indexing with "
"the array's native indices. To help enforce this, it's worth noting that the "
"index conversion functions will throw an error if shape indicates a 1-"
"dimensional array with unconventional indexing (i.e., is a `Tuple{UnitRange}"
"` rather than a tuple of `OneTo`). For arrays with conventional indexing, "
"these functions continue to work the same as always."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:82
msgid ""
"Using `axes` and `LinearIndices`, here is one way you could rewrite `mycopy!"
"`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:92
#, no-wrap
msgid ""
"```julia\n"
"function mycopy!(dest::AbstractVector, src::AbstractVector)\n"
"    axes(dest) == axes(src) || throw(DimensionMismatch(\"vectors must match\"))\n"
"    for i in LinearIndices(src)\n"
"        @inbounds dest[i] = src[i]\n"
"    end\n"
"    dest\n"
"end\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/offset-arrays.md:93
#, no-wrap
msgid "Allocating storage using generalizations of `similar`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:102
#, no-wrap
msgid ""
"Storage is often allocated with `Array{Int}(undef, dims)` or `similar(A, args...)`. When the result needs\n"
"to match the indices of some other array, this may not always suffice. The generic replacement\n"
"for such patterns is to use `similar(storagetype, shape)`.  `storagetype` indicates the kind of\n"
"underlying \"conventional\" behavior you'd like, e.g., `Array{Int}` or `BitArray` or even `dims->zeros(Float32, dims)`\n"
"(which would allocate an all-zeros array). `shape` is a tuple of [`Integer`](@ref) or\n"
"`AbstractUnitRange` values, specifying the indices that you want the result to use. Note that\n"
"a convenient way of producing an all-zeros array that matches the indices of A is simply `zeros(A)`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:109
msgid ""
"Let's walk through a couple of explicit examples. First, if `A` has "
"conventional indices, then `similar(Array{Int}, axes(A))` would end up "
"calling `Array{Int}(size(A))`, and thus return an array.  If `A` is an "
"`AbstractArray` type with unconventional indexing, then `similar(Array{Int}, "
"axes(A))` should return something that \"behaves like\" an `Array{Int}` but "
"with a shape (including indices)  that matches `A`.  (The most obvious "
"implementation is to allocate an `Array{Int}(undef, size(A))` and then \"wrap"
"\" it in a type that shifts the indices.)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:112
msgid ""
"Note also that `similar(Array{Int}, (axes(A, 2),))` would allocate an "
"`AbstractVector{Int}` (i.e., 1-dimensional array) that matches the indices "
"of the columns of `A`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/offset-arrays.md:113
#, no-wrap
msgid "Writing custom array types with non-1 indexing"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:117
msgid ""
"Most of the methods you'll need to define are standard for any "
"`AbstractArray` type, see [Abstract Arrays](@ref man-interface-array).  This "
"page focuses on the steps needed to define unconventional indexing."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/offset-arrays.md:118
#, no-wrap
msgid "Custom `AbstractUnitRange` types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:125
msgid ""
"If you're writing a non-1 indexed array type, you will want to specialize "
"`axes` so it returns a `UnitRange`, or (perhaps better) a custom "
"`AbstractUnitRange`.  The advantage of a custom type is that it \"signals\" "
"the allocation type for functions like `similar`. If we're writing an array "
"type for which indexing will start at 0, we likely want to begin by creating "
"a new `AbstractUnitRange`, `ZeroRange`, where `ZeroRange(n)` is equivalent "
"to `0:n-1`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:131
#, no-wrap
msgid ""
"In general, you should probably *not* export `ZeroRange` from your package: there may be other\n"
"packages that implement their own `ZeroRange`, and having multiple distinct `ZeroRange` types\n"
"is (perhaps counterintuitively) an advantage: `ModuleA.ZeroRange` indicates that `similar` should\n"
"create a `ModuleA.ZeroArray`, whereas `ModuleB.ZeroRange` indicates a `ModuleB.ZeroArray` type.\n"
" This design allows peaceful coexistence among many different custom array types.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:134
msgid ""
"Note that the Julia package [CustomUnitRanges.jl](https://github.com/"
"JuliaArrays/CustomUnitRanges.jl)  can sometimes be used to avoid the need to "
"write your own `ZeroRange` type."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/offset-arrays.md:135
#, no-wrap
msgid "Specializing `axes`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:138
msgid "Once you have your `AbstractUnitRange` type, then specialize `axes`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:142
#, no-wrap
msgid ""
"```julia\n"
"Base.axes(A::ZeroArray) = map(n->ZeroRange(n), A.size)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:145
msgid ""
"where here we imagine that `ZeroArray` has a field called `size` (there "
"would be other ways to implement this)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:147
msgid "In some cases, the fallback definition for `axes(A, d)`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:151
#, no-wrap
msgid ""
"```julia\n"
"axes(A::AbstractArray{T,N}, d) where {T,N} = d <= N ? axes(A)[d] : OneTo(1)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:156
#, no-wrap
msgid ""
"may not be what you want: you may need to specialize it to return something other than `OneTo(1)`\n"
"when `d > ndims(A)`.  Likewise, in `Base` there is a dedicated function `indices1` which is equivalent\n"
"to `axes(A, 1)` but which avoids checking (at runtime) whether `ndims(A) > 0`. (This is purely\n"
"a performance optimization.)  It is defined as:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:161
msgid ""
"```julia indices1(A::AbstractArray{T,0}) where {T} = OneTo(1)  indices1(A::"
"AbstractArray) = axes(A)[1] ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:164
msgid ""
"If the first of these (the zero-dimensional case) is problematic for your "
"custom array type, be sure to specialize it appropriately."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/offset-arrays.md:165
#, no-wrap
msgid "Specializing `similar`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:169
msgid ""
"Given your custom `ZeroRange` type, then you should also add the following "
"two specializations for `similar`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:174
#, no-wrap
msgid ""
"```julia\n"
"function Base.similar(A::AbstractArray, T::Type, shape::Tuple{ZeroRange,Vararg{ZeroRange}})\n"
"    # body\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:179
#, no-wrap
msgid ""
"function Base.similar(f::Union{Function,DataType}, shape::Tuple{ZeroRange,Vararg{ZeroRange}})\n"
"    # body\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:181
msgid "Both of these should allocate your custom array type."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/offset-arrays.md:182
#, no-wrap
msgid "Specializing `reshape`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:185
msgid "Optionally, define a method"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:189
msgid ""
"``` Base.reshape(A::AbstractArray, shape::Tuple{ZeroRange,"
"Vararg{ZeroRange}}) = ...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:191
msgid "and you can `reshape` an array so that the result has custom indices."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/offset-arrays.md:192
#, no-wrap
msgid "For objects that mimic AbstractArray but are not subtypes"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:202
msgid ""
"`has_offset_axes` depends on having `axes` defined for the objects you call "
"it on. If there is some reason you don't have an `axes` method defined for "
"your object, consider defining a method ```julia Base.has_offset_axes(obj::"
"MyNon1IndexedArraylikeObject) = true ``` This will allow code that assumes 1-"
"based indexing to detect a problem and throw a helpful error, rather than "
"returning incorrect results or segfaulting julia."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/offset-arrays.md:203
#, no-wrap
msgid "Catching errors"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:207
msgid ""
"If your new array type triggers errors in other code, one helpful debugging "
"step can be to comment out `@boundscheck` in your `getindex` and `setindex!` "
"implementation.  This will ensure that every element access checks bounds. "
"Or, restart julia with `--check-bounds=yes`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/offset-arrays.md:209
msgid ""
"In some cases it may also be helpful to temporarily disable `size` and "
"`length` for your new array type, since code that makes incorrect "
"assumptions frequently uses these functions."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/functions.md:1
#, no-wrap
msgid "Julia Functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:4
msgid ""
"This document will explain how functions, method definitions, and method "
"tables work."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/functions.md:5
#, no-wrap
msgid "Method Tables"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:12
msgid ""
"Every function in Julia is a generic function. A generic function is "
"conceptually a single function, but consists of many definitions, or "
"methods. The methods of a generic function are stored in a method table. "
"Method tables (type `MethodTable`) are associated with `TypeName`s. A "
"`TypeName` describes a family of parameterized types. For example "
"`Complex{Float32}` and `Complex{Float64}` share the same `Complex` type name "
"object."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:15
msgid ""
"All objects in Julia are potentially callable, because every object has a "
"type, which in turn has a `TypeName`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/functions.md:16
#, no-wrap
msgid "Function calls"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:23
msgid ""
"Given the call `f(x,y)`, the following steps are performed: first, the "
"method table to use is accessed as `typeof(f).name.mt`. Second, an argument "
"tuple type is formed, `Tuple{typeof(f), typeof(x), typeof(y)}`.  Note that "
"the type of the function itself is the first element. This is because the "
"type might have parameters, and so needs to take part in dispatch. This "
"tuple type is looked up in the method table."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:26
msgid ""
"This dispatch process is performed by `jl_apply_generic`, which takes two "
"arguments: a pointer to an array of the values f, x, and y, and the number "
"of values (in this case 3)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:32
msgid ""
"Throughout the system, there are two kinds of APIs that handle functions and "
"argument lists: those that accept the function and arguments separately, and "
"those that accept a single argument structure.  In the first kind of API, "
"the \"arguments\" part does *not* contain information about the function, "
"since that is passed separately. In the second kind of API, the function is "
"the first element of the argument structure."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:35
msgid ""
"For example, the following function for performing a call accepts just an "
"`args` pointer, so the first element of the args array will be the function "
"to call:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:39
msgid "```c jl_value_t *jl_apply(jl_value_t **args, uint32_t nargs)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:42
msgid ""
"This entry point for the same functionality accepts the function separately, "
"so the `args` array does not contain the function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:46
msgid ""
"```c jl_value_t *jl_call(jl_function_t *f, jl_value_t **args, int32_t "
"nargs); ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/functions.md:47
#, no-wrap
msgid "Adding methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:54
msgid ""
"Given the above dispatch process, conceptually all that is needed to add a "
"new method is (1) a tuple type, and (2) code for the body of the method. "
"`jl_method_def` implements this operation.  `jl_first_argument_datatype` is "
"called to extract the relevant method table from what would be the type of "
"the first argument. This is much more complicated than the corresponding "
"procedure during dispatch, since the argument tuple type might be abstract. "
"For example, we can define:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:58
msgid "```julia (::Union{Foo{Int},Foo{Int8}})(x) = 0 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:60
msgid ""
"which works since all possible matching methods would belong to the same "
"method table."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/functions.md:61
#, no-wrap
msgid "Creating generic functions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:68
msgid ""
"Since every object is callable, nothing special is needed to create a "
"generic function. Therefore `jl_new_generic_function` simply creates a new "
"singleton (0 size) subtype of `Function` and returns its instance. A "
"function can have a mnemonic \"display name\" which is used in debug info "
"and when printing objects. For example the name of `Base.sin` is `sin`. By "
"convention, the name of the created *type* is the same as the function name, "
"with a `#` prepended. So `typeof(sin)` is `Base.#sin`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/functions.md:69
#, no-wrap
msgid "Closures"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:73
msgid ""
"A closure is simply a callable object with field names corresponding to "
"captured variables. For example, the following code:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:79
#, no-wrap
msgid ""
"```julia\n"
"function adder(x)\n"
"    return y->x+y\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:81
msgid "is lowered to (roughly):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:86
#, no-wrap
msgid ""
"```julia\n"
"struct ##1{T}\n"
"    x::T\n"
"end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:88
msgid "(_::##1)(y) = _.x + y"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:93
#, no-wrap
msgid ""
"function adder(x)\n"
"    return ##1(x)\n"
"end\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/functions.md:94
#, no-wrap
msgid "Constructors"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:99
msgid ""
"A constructor call is just a call to a type. The method table for `Type` "
"contains all constructor definitions. All subtypes of `Type` (`Type`, "
"`UnionAll`, `Union`, and `DataType`)  currently share a method table via "
"special arrangement."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/functions.md:100
#, no-wrap
msgid "Builtins"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:103
msgid "The \"builtin\" functions, defined in the `Core` module, are:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:109
#, no-wrap
msgid ""
"```\n"
"=== typeof sizeof <: isa typeassert throw tuple getfield setfield! fieldtype\n"
"nfields isdefined arrayref arrayset arraysize applicable invoke apply_type _apply\n"
"_expr svec\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:113
msgid ""
"These are all singleton objects whose types are subtypes of `Builtin`, which "
"is a subtype of `Function`. Their purpose is to expose entry points in the "
"run time that use the \"jlcall\" calling convention:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:117
msgid "```c jl_value_t *(jl_value_t*, jl_value_t**, uint32_t)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:121
msgid ""
"The method tables of builtins are empty. Instead, they have a single catch-"
"all method cache entry (`Tuple{Vararg{Any}}`) whose jlcall fptr points to "
"the correct function. This is kind of a hack but works reasonably well."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/functions.md:122
#, no-wrap
msgid "Keyword arguments"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:133
msgid ""
"Keyword arguments work by associating a special, hidden function object with "
"each method table that has definitions with keyword arguments. This function "
"is called the \"keyword argument sorter\" or \"keyword sorter\", or "
"\"kwsorter\", and is stored in the `kwsorter` field of `MethodTable` "
"objects.  Every definition in the kwsorter function has the same arguments "
"as some definition in the normal method table, except with a single "
"`NamedTuple` argument prepended, which gives the names and values of passed "
"keyword arguments. The kwsorter's job is to move keyword arguments into "
"their canonical positions based on name, plus evaluate and substitute any "
"needed default value expressions. The result is a normal positional argument "
"list, which is then passed to yet another compiler-generated function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:136
msgid ""
"The easiest way to understand the process is to look at how a keyword "
"argument method definition is lowered. The code:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:142
#, no-wrap
msgid ""
"```julia\n"
"function circle(center, radius; color = black, fill::Bool = true, options...)\n"
"    # draw\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:146
msgid ""
"actually produces *three* method definitions. The first is a function that "
"accepts all arguments (including keyword arguments) as positional arguments, "
"and includes the code for the method body.  It has an auto-generated name:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:152
#, no-wrap
msgid ""
"```julia\n"
"function #circle#1(color, fill::Bool, options, circle, center, radius)\n"
"    # draw\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:155
msgid ""
"The second method is an ordinary definition for the original `circle` "
"function, which handles the case where no keyword arguments are passed:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:161
#, no-wrap
msgid ""
"```julia\n"
"function circle(center, radius)\n"
"    #circle#1(black, true, pairs(NamedTuple()), circle, center, radius)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:166
msgid ""
"This simply dispatches to the first method, passing along default values.  "
"`pairs` is applied to the named tuple of rest arguments to provide key-value "
"pair iteration.  Note that if the method doesn't accept rest keyword "
"arguments then this argument is absent."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:168
msgid "Finally there is the kwsorter definition:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:177
#, no-wrap
msgid ""
"```\n"
"function (::Core.kwftype(typeof(circle)))(kws, circle, center, radius)\n"
"    if haskey(kws, :color)\n"
"        color = kws.color\n"
"    else\n"
"        color = black\n"
"    end\n"
"    # etc.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:180
#, no-wrap
msgid ""
"    # put remaining kwargs in `options`\n"
"    options = structdiff(kws, NamedTuple{(:color, :fill)})\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:183
#, no-wrap
msgid ""
"    # if the method doesn't accept rest keywords, throw an error\n"
"    # unless `options` is empty\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:187
#, no-wrap
msgid ""
"    #circle#1(color, fill, pairs(options), circle, center, radius)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:190
msgid ""
"The function `Core.kwftype(t)` creates the field `t.name.mt.kwsorter` (if it "
"hasn't been created yet), and returns the type of that function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:195
msgid ""
"This design has the feature that call sites that don't use keyword arguments "
"require no special handling; everything works as if they were not part of "
"the language at all. Call sites that do use keyword arguments are dispatched "
"directly to the called function's kwsorter. For example the call:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:199
msgid "```julia circle((0,0), 1.0, color = red; other...)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:201
msgid "is lowered to:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:205
msgid ""
"```julia kwfunc(circle)(merge((color = red,), other), circle, (0,0), 1.0)  "
"```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:212
#, no-wrap
msgid ""
" `kwfunc` (also in`Core`) fetches the kwsorter for the called function.\n"
"The keyword splatting operation (written as `other...`) calls the named tuple `merge` function.\n"
"This function further unpacks each *element* of `other`, expecting each one to contain two values\n"
"(a symbol and a value).\n"
"Naturally, a more efficient implementation is available if all splatted arguments are named tuples.\n"
"Notice that the original `circle` function is passed through, to handle closures.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/functions.md:213
#, no-wrap
msgid "Compiler efficiency issues"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:221
msgid ""
"Generating a new type for every function has potentially serious "
"consequences for compiler resource use when combined with Julia's "
"\"specialize on all arguments by default\" design. Indeed, the initial "
"implementation of this design suffered from much longer build and test "
"times, higher memory use, and a system image nearly 2x larger than the "
"baseline. In a naive implementation, the problem is bad enough to make the "
"system nearly unusable. Several significant optimizations were needed to "
"make the design practical."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:233
msgid ""
"The first issue is excessive specialization of functions for different "
"values of function-valued arguments. Many functions simply \"pass through\" "
"an argument to somewhere else, e.g. to another function or to a storage "
"location. Such functions do not need to be specialized for every closure "
"that might be passed in. Fortunately this case is easy to distinguish by "
"simply considering whether a function *calls* one of its arguments (i.e. the "
"argument appears in \"head position\" somewhere).  Performance-critical "
"higher-order functions like `map` certainly call their argument function and "
"so will still be specialized as expected. This optimization is implemented "
"by recording which arguments are called during the `analyze-variables` pass "
"in the front end. When `cache_method` sees an argument in the `Function` "
"type hierarchy passed to a slot declared as `Any` or `Function`, it behaves "
"as if the `@nospecialize` annotation were applied. This heuristic seems to "
"be extremely effective in practice."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:246
msgid ""
"The next issue concerns the structure of method cache hash tables. Empirical "
"studies show that the vast majority of dynamically-dispatched calls involve "
"one or two arguments. In turn, many of these cases can be resolved by "
"considering only the first argument. (Aside: proponents of single dispatch "
"would not be surprised by this at all. However, this argument means "
"\"multiple dispatch is easy to optimize in practice\", and that we should "
"therefore use it, *not* \"we should use single dispatch\"!) So the method "
"cache uses the type of the first argument as its primary key. Note, however, "
"that this corresponds to the *second* element of the tuple type for a "
"function call (the first element being the type of the function itself). "
"Typically, type variation in head position is extremely low -- indeed, the "
"majority of functions belong to singleton types with no parameters.  "
"However, this is not the case for constructors, where a single method table "
"holds constructors for every type. Therefore the `Type` method table is "
"special-cased to use the *first* tuple type element instead of the second."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:254
msgid ""
"The front end generates type declarations for all closures. Initially, this "
"was implemented by generating normal type declarations. However, this "
"produced an extremely large number of constructors, all of which were "
"trivial (simply passing all arguments through to [`new`](@ref)). Since "
"methods are partially ordered, inserting all of these methods is O(n^2), "
"plus there are just too many of them to keep around. This was optimized by "
"generating `struct_type` expressions directly (bypassing default constructor "
"generation), and using `new` directly to create closure instances. Not the "
"prettiest thing ever, but you do what you gotta do."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/functions.md:258
msgid ""
"The next problem was the `@test` macro, which generated a 0-argument closure "
"for each test case.  This is not really necessary, since each test case is "
"simply run once in place. Therefore, `@test` was modified to expand to a try-"
"catch block that records the test result (true, false, or exception raised) "
"and calls the test suite handler on it."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/stdio.md:1
#, no-wrap
msgid "printf() and stdio in the Julia runtime"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/stdio.md:3
#, no-wrap
msgid "Libuv wrappers for stdio"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:6
msgid ""
"`julia.h` defines [libuv](http://docs.libuv.org) wrappers for the `stdio.h` "
"streams:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:12
msgid ""
"```c uv_stream_t *JL_STDIN; uv_stream_t *JL_STDOUT; uv_stream_t *JL_STDERR; "
"```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:14
msgid "... and corresponding output functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:19
msgid ""
"```c int jl_printf(uv_stream_t *s, const char *format, ...); int "
"jl_vprintf(uv_stream_t *s, const char *format, va_list args); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:22
msgid ""
"These `printf` functions are used by the `.c` files in the `src/` and `ui/` "
"directories wherever stdio is needed to ensure that output buffering is "
"handled in a unified way."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:25
msgid ""
"In special cases, like signal handlers, where the full libuv infrastructure "
"is too heavy, `jl_safe_printf()` can be used to [`write(2)`](@ref) directly "
"to `STDERR_FILENO`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:29
msgid "```c void jl_safe_printf(const char *str, ...); ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/stdio.md:30
#, no-wrap
msgid "Interface between JL_STD* and Julia code"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:34
msgid ""
"[`Base.stdin`](@ref), [`Base.stdout`](@ref) and [`Base.stderr`](@ref) are "
"bound to the `JL_STD*` libuv streams defined in the runtime."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:37
msgid ""
"Julia's `__init__()` function (in `base/sysimg.jl`) calls `reinit_stdio()` "
"(in `base/stream.jl`)  to create Julia objects for [`Base.stdin`](@ref), "
"[`Base.stdout`](@ref) and [`Base.stderr`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:41
msgid ""
"`reinit_stdio()` uses [`ccall`](@ref) to retrieve pointers to `JL_STD*` and "
"calls `jl_uv_handle_type()` to inspect the type of each stream.  It then "
"creates a Julia `Base.IOStream`, `Base.TTY` or `Base.PipeEndpoint` object to "
"represent each stream, e.g.:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:45
msgid ""
"``` $ julia -e 'println(typeof((stdin, stdout, stderr)))' Tuple{Base.TTY,"
"Base.TTY,Base.TTY}"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:48
#, no-wrap
msgid ""
"$ julia -e 'println(typeof((stdin, stdout, stderr)))' < /dev/null 2>/dev/null\n"
"Tuple{IOStream,Base.TTY,IOStream}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:52
msgid ""
"$ echo hello | julia -e 'println(typeof((stdin, stdout, stderr)))' | cat "
"Tuple{Base.PipeEndpoint,Base.PipeEndpoint,Base.TTY} ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:55
msgid ""
"The [`Base.read`](@ref) and [`Base.write`](@ref) methods for these streams "
"use [`ccall`](@ref)  to call libuv wrappers in `src/jl_uv.c`, e.g.:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:62
#, no-wrap
msgid ""
"```\n"
"stream.jl: function write(s::IO, p::Ptr, nb::Integer)\n"
"               -> ccall(:jl_uv_write, ...)\n"
"  jl_uv.c:          -> int jl_uv_write(uv_stream_t *stream, ...)\n"
"                        -> uv_write(uvw, stream, buf, ...)\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/stdio.md:63
#, no-wrap
msgid "printf() during initialization"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:69
msgid ""
"The libuv streams relied upon by `jl_printf()` etc., are not available until "
"midway through initialization of the runtime (see `init.c`, "
"`init_stdio()`).  Error messages or warnings that need to be printed before "
"this are routed to the standard C library `fwrite()` function by the "
"following mechanism:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:73
msgid ""
"In `sys.c`, the `JL_STD*` stream pointers are statically initialized to "
"integer constants: `STD*_FILENO (0, 1 and 2)`.  In `jl_uv.c` the "
"`jl_uv_puts()` function checks its `uv_stream_t* stream` argument and calls "
"`fwrite()` if stream is set to `STDOUT_FILENO` or `STDERR_FILENO`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:76
msgid ""
"This allows for uniform use of `jl_printf()` throughout the runtime "
"regardless of whether or not any particular piece of code is reachable "
"before initialization is complete."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/stdio.md:77
#, no-wrap
msgid "Legacy `ios.c` library"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:81
msgid ""
"The `src/support/ios.c` library is inherited from [femtolisp](https://github."
"com/JeffBezanson/femtolisp).  It provides cross-platform buffered file IO "
"and in-memory temporary buffers."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:83
msgid "`ios.c` is still used by:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/stdio.md:88
msgid "`src/flisp/*.c`"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/stdio.md:88
msgid "`src/dump.c` – for serialization file IO and for memory buffers."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/stdio.md:88
msgid "`src/staticdata.c` – for serialization file IO and for memory buffers."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/stdio.md:88
msgid ""
"`base/iostream.jl` – for file IO (see `base/fs.jl` for libuv equivalent)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:92
msgid ""
"Use of `ios.c` in these modules is mostly self-contained and separated from "
"the libuv I/O system.  However, there is [one place](https://github.com/"
"JuliaLang/julia/blob/master/src/flisp/print.c#L654)  where femtolisp calls "
"through to `jl_printf()` with a legacy `ios_t` stream."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:96
#, no-wrap
msgid ""
"There is a hack in `ios.h` that makes the `ios_t.bm` field line up with the `uv_stream_t.type`\n"
"and ensures that the values used for `ios_t.bm` to not overlap with valid `UV_HANDLE_TYPE` values.\n"
" This allows `uv_stream_t` pointers to point to `ios_t` streams.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:99
msgid ""
"This is needed because `jl_printf()` caller `jl_static_show()` is passed an "
"`ios_t` stream by femtolisp's `fl_print()` function. Julia's `jl_uv_puts()` "
"function has special handling for this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/stdio.md:104
#, no-wrap
msgid ""
"```c\n"
"if (stream->type > UV_HANDLE_TYPE_MAX) {\n"
"    return ios_write((ios_t*)stream, str, n);\n"
"}\n"
"```\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/valgrind.md:1
#, no-wrap
msgid "Using Valgrind with Julia"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:6
#, no-wrap
msgid ""
"[Valgrind](http://valgrind.org/) is a tool for memory debugging, memory leak detection, and profiling.\n"
" This section describes things to keep in mind when using Valgrind to debug memory issues with\n"
"Julia.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/valgrind.md:7
#: ext/julia/doc/src/devdocs/sanitizers.md:3
#, no-wrap
msgid "General considerations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:13
msgid ""
"By default, Valgrind assumes that there is no self modifying code in the "
"programs it runs.  This assumption works fine in most instances but fails "
"miserably for a just-in-time compiler like `julia`.  For this reason it is "
"crucial to pass `--smc-check=all-non-file` to `valgrind`, else code may "
"crash or behave unexpectedly (often in subtle ways)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:18
msgid ""
"In some cases, to better detect memory errors using Valgrind it can help to "
"compile `julia` with memory pools disabled.  The compile-time flag "
"`MEMDEBUG` disables memory pools in Julia, and `MEMDEBUG2` disables memory "
"pools in FemtoLisp.  To build `julia` with both flags, add the following "
"line to `Make.user`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:22
msgid "```julia CFLAGS = -DMEMDEBUG -DMEMDEBUG2 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:26
msgid ""
"Another thing to note: if your program uses multiple workers processes, it "
"is likely that you want all such worker processes to run under Valgrind, not "
"just the parent process.  To do this, pass `--trace-children=yes` to "
"`valgrind`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/valgrind.md:27
#, no-wrap
msgid "Suppressions"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:32
msgid ""
"Valgrind will typically display spurious warnings as it runs.  To reduce the "
"number of such warnings, it helps to provide a [suppressions file](http://"
"valgrind.org/docs/manual/manual-core.html#manual-core.suppress)  to "
"Valgrind.  A sample suppressions file is included in the Julia source "
"distribution at `contrib/valgrind-julia.supp`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:34
msgid ""
"The suppressions file can be used from the `julia/` source directory as "
"follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:38
msgid ""
"``` $ valgrind --smc-check=all-non-file --suppressions=contrib/valgrind-"
"julia.supp ./julia progname.jl ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:42
msgid ""
"Any memory errors that are displayed should either be reported as bugs or "
"contributed as additional suppressions.  Note that some versions of Valgrind "
"are [shipped with insufficient default suppressions](https://github.com/"
"JuliaLang/julia/issues/8314#issuecomment-55766210), so that may be one thing "
"to consider before submitting any bugs."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/valgrind.md:43
#, no-wrap
msgid "Running the Julia test suite under Valgrind"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:47
msgid ""
"It is possible to run the entire Julia test suite under Valgrind, but it "
"does take quite some time (typically several hours).  To do so, run the "
"following command from the `julia/test/` directory:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:51
msgid ""
"``` valgrind --smc-check=all-non-file --trace-children=yes --suppressions="
"$PWD/../contrib/valgrind-julia.supp ../julia runtests.jl all ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:54
msgid ""
"If you would like to see a report of \"definite\" memory leaks, pass the "
"flags `--leak-check=full --show-leak-kinds=definite` to `valgrind` as well."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/valgrind.md:55
#, no-wrap
msgid "Caveats"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:59
msgid ""
"Valgrind currently [does not support multiple rounding modes](https://bugs."
"kde.org/show_bug.cgi?id=136779), so code that adjusts the rounding mode will "
"behave differently when run under Valgrind."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/valgrind.md:63
#, no-wrap
msgid ""
"In general, if after setting `--smc-check=all-non-file` you find that your program behaves differently\n"
"when run under Valgrind, it may help to pass `--tool=none` to `valgrind` as you investigate further.\n"
" This will enable the minimal Valgrind machinery but will also run much faster than when the full\n"
"memory checker is enabled.\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/boundscheck.md:1
#, no-wrap
msgid "Bounds checking"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:10
msgid ""
"Like many modern programming languages, Julia uses bounds checking to ensure "
"program safety when accessing arrays. In tight inner loops or other "
"performance critical situations, you may wish to skip these bounds checks to "
"improve runtime performance. For instance, in order to emit vectorized "
"(SIMD) instructions, your loop body cannot contain branches, and thus cannot "
"contain bounds checks.  Consequently, Julia includes an `@inbounds(...)` "
"macro to tell the compiler to skip such bounds checks within the given "
"block. User-defined array types can use the `@boundscheck(...)` macro to "
"achieve context-sensitive code selection."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/boundscheck.md:11
#, no-wrap
msgid "Eliding bounds checks"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:17
msgid ""
"The `@boundscheck(...)` macro marks blocks of code that perform bounds "
"checking.  When such blocks are inlined into an `@inbounds(...)` block, the "
"compiler may remove these blocks.  The compiler removes the `@boundscheck` "
"block *only if it is inlined* into the calling function.  For example, you "
"might write the method `sum` as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:27
#, no-wrap
msgid ""
"```julia\n"
"function sum(A::AbstractArray)\n"
"    r = zero(eltype(A))\n"
"    for i = 1:length(A)\n"
"        @inbounds r += A[i]\n"
"    end\n"
"    return r\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:29
msgid "With a custom array-like type `MyArray` having:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:33
msgid ""
"```julia @inline getindex(A::MyArray, i::Real) = (@boundscheck checkbounds(A,"
"i); A.data[to_index(i)])  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:38
msgid ""
"Then when `getindex` is inlined into `sum`, the call to `checkbounds(A,i)` "
"will be elided. If your function contains multiple layers of inlining, only "
"`@boundscheck` blocks at most one level of inlining deeper are eliminated. "
"The rule prevents unintended changes in program behavior from code further "
"up the stack."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/boundscheck.md:39
#, no-wrap
msgid "Propagating inbounds"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:45
msgid ""
"There may be certain scenarios where for code-organization reasons you want "
"more than one layer between the `@inbounds` and `@boundscheck` declarations. "
"For instance, the default `getindex` methods have the chain `getindex(A::"
"AbstractArray, i::Real)` calls `getindex(IndexStyle(A), A, i)` calls "
"`_getindex(::IndexLinear, A, i)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:48
msgid ""
"To override the \"one layer of inlining\" rule, a function may be marked "
"with `@propagate_inbounds` to propagate an inbounds context (or out of "
"bounds context) through one additional layer of inlining."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/boundscheck.md:49
#, no-wrap
msgid "The bounds checking call hierarchy"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:52
msgid "The overall hierarchy is:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/boundscheck.md:54
msgid "`checkbounds(A, I...)` which calls"
msgstr ""

#. type: Bullet: '      * '
#: ext/julia/doc/src/devdocs/boundscheck.md:56
msgid "`checkbounds(Bool, A, I...)` which calls"
msgstr ""

#. type: Bullet: '          * '
#: ext/julia/doc/src/devdocs/boundscheck.md:58
msgid "`checkbounds_indices(Bool, axes(A), I)` which recursively calls"
msgstr ""

#. type: Bullet: '              * '
#: ext/julia/doc/src/devdocs/boundscheck.md:60
msgid "`checkindex` for each dimension"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:63
msgid ""
"Here `A` is the array, and `I` contains the \"requested\" indices. `axes(A)` "
"returns a tuple of \"permitted\" indices of `A`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:70
msgid ""
"`checkbounds(A, I...)` throws an error if the indices are invalid, whereas "
"`checkbounds(Bool, A, I...)` returns `false` in that circumstance.  "
"`checkbounds_indices` discards any information about the array other than "
"its `axes` tuple, and performs a pure indices-vs-indices comparison: this "
"allows relatively few compiled methods to serve a huge variety of array "
"types. Indices are specified as tuples, and are usually compared in a 1-1 "
"fashion with individual dimensions handled by calling another important "
"function, `checkindex`: typically,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:75
#, no-wrap
msgid ""
"```julia\n"
"checkbounds_indices(Bool, (IA1, IA...), (I1, I...)) = checkindex(Bool, IA1, I1) &\n"
"                                                      checkbounds_indices(Bool, IA, I)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:78
msgid ""
"so `checkindex` checks a single dimension.  All of these functions, "
"including the unexported `checkbounds_indices` have docstrings accessible "
"with `?` ."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:82
msgid ""
"If you have to customize bounds checking for a specific array type, you "
"should specialize `checkbounds(Bool, A, I...)`.  However, in most cases you "
"should be able to rely on `checkbounds_indices` as long as you supply useful "
"`axes` for your array type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:86
msgid ""
"If you have novel index types, first consider specializing `checkindex`, "
"which handles a single index for a particular dimension of an array.  If you "
"have a custom multidimensional index type (similar to `CartesianIndex`), "
"then you may have to consider specializing `checkbounds_indices`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/boundscheck.md:90
msgid ""
"Note this hierarchy has been designed to reduce the likelihood of method "
"ambiguities.  We try to make `checkbounds` the place to specialize on array "
"type, and try to avoid specializations on index types; conversely, "
"`checkindex` is intended to be specialized only on index type (especially, "
"the last argument)."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/init.md:1
#, no-wrap
msgid "Initialization of the Julia runtime"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:4
msgid ""
"How does the Julia runtime execute `julia -e 'println(\"Hello World!\")'` ?"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/init.md:5
#, no-wrap
msgid "`main()`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:8
msgid ""
"Execution starts at [`main()` in `ui/repl.c`](https://github.com/JuliaLang/"
"julia/blob/master/ui/repl.c)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:12
msgid ""
"`main()` calls [`libsupport_init()`](https://github.com/JuliaLang/julia/blob/"
"master/src/support/libsupportinit.c)  to set the C library locale and to "
"initialize the \"ios\" library (see [`ios_init_stdstreams()`](https://github."
"com/JuliaLang/julia/blob/master/src/support/ios.c)  and [Legacy `ios.c` "
"library](@ref))."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:16
msgid ""
"Next [`jl_parse_opts()`](https://github.com/JuliaLang/julia/blob/master/src/"
"jloptions.c) is called to process command line options. Note that "
"`jl_parse_opts()` only deals with options that affect code generation or "
"early initialization. Other options are handled later by "
"[`process_options()` in `base/client.jl`](https://github.com/JuliaLang/julia/"
"blob/master/base/client.jl)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:18
msgid ""
"`jl_parse_opts()` stores command line options in the [global `jl_options` "
"struct](https://github.com/JuliaLang/julia/blob/master/src/julia.h)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/init.md:19
#, no-wrap
msgid "`julia_init()`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:23
msgid ""
"[`julia_init()` in `task.c`](https://github.com/JuliaLang/julia/blob/master/"
"src/task.c) is called by `main()` and calls [`_julia_init()` in `init.c`]"
"(https://github.com/JuliaLang/julia/blob/master/src/init.c)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:25
msgid ""
"`_julia_init()` begins by calling `libsupport_init()` again (it does nothing "
"the second time)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:28
msgid ""
"[`restore_signals()`](https://github.com/JuliaLang/julia/blob/master/src/"
"signals-unix.c) is called to zero the signal handler mask."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:31
msgid ""
"[`jl_resolve_sysimg_location()`](https://github.com/JuliaLang/julia/blob/"
"master/src/init.c) searches configured paths for the base system image. See "
"[Building the Julia system image](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:34
msgid ""
"[`jl_gc_init()`](https://github.com/JuliaLang/julia/blob/master/src/gc.c) "
"sets up allocation pools and lists for weak refs, preserved values and "
"finalization."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:37
msgid ""
"[`jl_init_frontend()`](https://github.com/JuliaLang/julia/blob/master/src/"
"ast.c) loads and initializes a pre-compiled femtolisp image containing the "
"scanner/parser."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:41
msgid ""
"[`jl_init_types()`](https://github.com/JuliaLang/julia/blob/master/src/"
"jltypes.c) creates `jl_datatype_t` type description objects for the [built-"
"in types defined in `julia.h`](https://github.com/JuliaLang/julia/blob/"
"master/src/julia.h).  e.g."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:45
#, no-wrap
msgid ""
"```c\n"
"jl_any_type = jl_new_abstracttype(jl_symbol(\"Any\"), core, NULL, jl_emptysvec);\n"
"jl_any_type->super = jl_any_type;\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:47
msgid ""
"jl_type_type = jl_new_abstracttype(jl_symbol(\"Type\"), core, jl_any_type, "
"jl_emptysvec);"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:51
#, no-wrap
msgid ""
"jl_int32_type = jl_new_primitivetype(jl_symbol(\"Int32\"), core,\n"
"                                     jl_any_type, jl_emptysvec, 32);\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:54
msgid ""
"[`jl_init_tasks()`](https://github.com/JuliaLang/julia/blob/master/src/task."
"c) creates the `jl_datatype_t* jl_task_type` object; initializes the global "
"`jl_root_task` struct; and sets `jl_current_task` to the root task."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:57
msgid ""
"[`jl_init_codegen()`](https://github.com/JuliaLang/julia/blob/master/src/"
"codegen.cpp) initializes the [LLVM library](http://llvm.org)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:60
msgid ""
"[`jl_init_serializer()`](https://github.com/JuliaLang/julia/blob/master/src/"
"staticdata.c) initializes 8-bit serialization tags for builtin `jl_value_t` "
"values."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:63
msgid ""
"If there is no sysimg file (`!jl_options.image_file`) then the `Core` and "
"`Main` modules are created and `boot.jl` is evaluated:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:65
msgid ""
"`jl_core_module = jl_new_module(jl_symbol(\"Core\"))` creates the Julia "
"`Core` module."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:71
msgid ""
"[`jl_init_intrinsic_functions()`](https://github.com/JuliaLang/julia/blob/"
"master/src/intrinsics.cpp)  creates a new Julia module `Intrinsics` "
"containing constant `jl_intrinsic_type` symbols. These define an integer "
"code for each [intrinsic function](https://github.com/JuliaLang/julia/blob/"
"master/src/intrinsics.cpp).  [`emit_intrinsic()`](https://github.com/"
"JuliaLang/julia/blob/master/src/intrinsics.cpp) translates these symbols "
"into LLVM instructions during code generation."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:75
msgid ""
"[`jl_init_primitives()`](https://github.com/JuliaLang/julia/blob/master/src/"
"builtins.c) hooks C functions up to Julia function symbols. e.g. the symbol "
"`Core.:(===)()` is bound to C function pointer `jl_f_is()` by calling "
"`add_builtin_func(\"===\", jl_f_is)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:78
#, no-wrap
msgid ""
"[`jl_new_main_module()`](https://github.com/JuliaLang/julia/blob/master/src/toplevel.c) creates\n"
"the global \"Main\" module and sets `jl_current_task->current_module = jl_main_module`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:82
#, no-wrap
msgid ""
"Note: `_julia_init()` [then sets](https://github.com/JuliaLang/julia/blob/master/src/init.c) `jl_root_task->current_module = jl_core_module`.\n"
"`jl_root_task` is an alias of `jl_current_task` at this point, so the `current_module` set by `jl_new_main_module()`\n"
"above is overwritten.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:88
#, no-wrap
msgid ""
"[`jl_load(\"boot.jl\", sizeof(\"boot.jl\"))`](https://github.com/JuliaLang/julia/blob/master/src/init.c)\n"
"calls [`jl_parse_eval_all`](https://github.com/JuliaLang/julia/blob/master/src/ast.c) which repeatedly\n"
"calls [`jl_toplevel_eval_flex()`](https://github.com/JuliaLang/julia/blob/master/src/toplevel.c)\n"
"to execute [`boot.jl`](https://github.com/JuliaLang/julia/blob/master/base/boot.jl). <!-- TODO – drill\n"
"down into eval? -->\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:91
msgid ""
"[`jl_get_builtin_hooks()`](https://github.com/JuliaLang/julia/blob/master/"
"src/init.c) initializes global C pointers to Julia globals defined in `boot."
"jl`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:95
msgid ""
"[`jl_init_box_caches()`](https://github.com/JuliaLang/julia/blob/master/src/"
"datatype.c) pre-allocates global boxed integer value objects for values up "
"to 1024. This speeds up allocation of boxed ints later on. e.g.:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:102
#, no-wrap
msgid ""
"```c\n"
"jl_value_t *jl_box_uint8(uint32_t x)\n"
"{\n"
"    return boxed_uint8_cache[(uint8_t)x];\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:106
#, no-wrap
msgid ""
"[`_julia_init()` iterates](https://github.com/JuliaLang/julia/blob/master/src/init.c) over the\n"
"`jl_core_module->bindings.table` looking for `jl_datatype_t` values and sets the type name's module\n"
"prefix to `jl_core_module`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:109
msgid ""
"[`jl_add_standard_imports(jl_main_module)`](https://github.com/JuliaLang/"
"julia/blob/master/src/toplevel.c)  does \"using Base\" in the \"Main\" "
"module."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:112
#, no-wrap
msgid ""
"Note: `_julia_init()` now reverts to `jl_root_task->current_module = jl_main_module` as it was\n"
"before being set to `jl_core_module` above.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:114
msgid ""
"Platform specific signal handlers are initialized for `SIGSEGV` (OSX, "
"Linux), and `SIGFPE` (Windows)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:118
msgid ""
"Other signals (`SIGINFO, SIGBUS, SIGILL, SIGTERM, SIGABRT, SIGQUIT, SIGSYS` "
"and `SIGPIPE`) are hooked up to [`sigdie_handler()`](https://github.com/"
"JuliaLang/julia/blob/master/src/signals-unix.c)  which prints a backtrace."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:122
msgid ""
"[`jl_init_restored_modules()`](https://github.com/JuliaLang/julia/blob/"
"master/src/staticdata.c) calls [`jl_module_run_initializer()`](https://"
"github.com/JuliaLang/julia/blob/master/src/module.c) for each deserialized "
"module to run the `__init__()` function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:125
msgid ""
"Finally [`sigint_handler()`](https://github.com/JuliaLang/julia/blob/master/"
"src/signals-unix.c)  is hooked up to `SIGINT` and calls "
"`jl_throw(jl_interrupt_exception)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:128
msgid ""
"`_julia_init()` then returns [back to `main()` in `ui/repl.c`](https://"
"github.com/JuliaLang/julia/blob/master/ui/repl.c)  and `main()` calls "
"`true_main(argc, (char**)argv)`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:132
#, no-wrap
msgid ""
"!!! sidebar \"sysimg\"\n"
"    If there is a sysimg file, it contains a pre-cooked image of the `Core` and `Main` modules (and\n"
"    whatever else is created by `boot.jl`). See [Building the Julia system image](@ref).\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:136
#, no-wrap
msgid ""
"    [`jl_restore_system_image()`](https://github.com/JuliaLang/julia/blob/master/src/staticdata.c) deserializes\n"
"    the saved sysimg into the current Julia runtime environment and initialization continues after\n"
"    `jl_init_box_caches()` below...\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:139
#, no-wrap
msgid ""
"    Note: [`jl_restore_system_image()` (and `staticdata.c` in general)](https://github.com/JuliaLang/julia/blob/master/src/staticdata.c)\n"
"    uses the [Legacy `ios.c` library](@ref).\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/init.md:140
#, no-wrap
msgid "`true_main()`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:144
msgid ""
"[`true_main()`](https://github.com/JuliaLang/julia/blob/master/ui/repl.c) "
"loads the contents of `argv[]` into [`Base.ARGS`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:150
msgid ""
"If a `.jl` \"program\" file was supplied on the command line, then "
"[`exec_program()`](https://github.com/JuliaLang/julia/blob/master/ui/repl."
"c)  calls [`jl_load(program,len)`](https://github.com/JuliaLang/julia/blob/"
"master/src/toplevel.c) which calls [`jl_parse_eval_all`](https://github.com/"
"JuliaLang/julia/blob/master/src/ast.c) which repeatedly calls "
"[`jl_toplevel_eval_flex()`](https://github.com/JuliaLang/julia/blob/master/"
"src/toplevel.c)  to execute the program."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:154
msgid ""
"However, in our example (`julia -e 'println(\"Hello World!\")'`), "
"[`jl_get_global(jl_base_module, jl_symbol(\"_start\"))`](https://github.com/"
"JuliaLang/julia/blob/master/src/module.c)  looks up [`Base._start`](https://"
"github.com/JuliaLang/julia/blob/master/base/client.jl) and [`jl_apply()`]"
"(https://github.com/JuliaLang/julia/blob/master/src/julia.h)  executes it."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/init.md:155
#, no-wrap
msgid "`Base._start`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:160
msgid ""
"[`Base._start`](https://github.com/JuliaLang/julia/blob/master/base/client."
"jl) calls [`Base.process_options`](https://github.com/JuliaLang/julia/blob/"
"master/base/client.jl)  which calls [`jl_parse_input_line(\"println(\"Hello "
"World!\")\")`](https://github.com/JuliaLang/julia/blob/master/src/ast.c)  to "
"create an expression object and [`Base.eval()`](@ref eval) to execute it."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/init.md:161
#, no-wrap
msgid "`Base.eval`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:165
msgid ""
"[`Base.eval()`](@ref eval) was [mapped to `jl_f_top_eval`](https://github."
"com/JuliaLang/julia/blob/master/src/builtins.c)  by `jl_init_primitives()`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:168
msgid ""
"[`jl_f_top_eval()`](https://github.com/JuliaLang/julia/blob/master/src/"
"builtins.c) calls [`jl_toplevel_eval_in(jl_main_module, ex)`](https://github."
"com/JuliaLang/julia/blob/master/src/builtins.c), where `ex` is the parsed "
"expression `println(\"Hello World!\")`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:172
msgid ""
"[`jl_toplevel_eval_in()`](https://github.com/JuliaLang/julia/blob/master/src/"
"builtins.c) calls [`jl_toplevel_eval_flex()`](https://github.com/JuliaLang/"
"julia/blob/master/src/toplevel.c) which calls [`eval()` in `interpreter.c`]"
"(https://github.com/JuliaLang/julia/blob/master/src/interpreter.c)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:176
#, no-wrap
msgid ""
"The stack dump below shows how the interpreter works its way through various methods of [`Base.println()`](@ref)\n"
"and [`Base.print()`](@ref) before arriving at [`write(s::IO, a::Array{T}) where T`](https://github.com/JuliaLang/julia/blob/master/base/stream.jl)\n"
" which does `ccall(jl_uv_write())`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:179
msgid ""
"[`jl_uv_write()`](https://github.com/JuliaLang/julia/blob/master/src/jl_uv."
"c) calls `uv_write()` to write \"Hello World!\" to `JL_STDOUT`. See [Libuv "
"wrappers for stdio](@ref).:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:183
msgid "``` Hello World! ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:216
#, no-wrap
msgid ""
"| Stack frame                    | Source code     | Notes                                                |\n"
"|:------------------------------ |:--------------- |:---------------------------------------------------- |\n"
"| `jl_uv_write()`                | `jl_uv.c`       | called though [`ccall`](@ref)                        |\n"
"| `julia_write_282942`           | `stream.jl`     | function `write!(s::IO, a::Array{T}) where T`        |\n"
"| `julia_print_284639`           | `ascii.jl`      | `print(io::IO, s::String) = (write(io, s); nothing)` |\n"
"| `jlcall_print_284639`          |                 |                                                      |\n"
"| `jl_apply()`                   | `julia.h`       |                                                      |\n"
"| `jl_trampoline()`              | `builtins.c`    |                                                      |\n"
"| `jl_apply()`                   | `julia.h`       |                                                      |\n"
"| `jl_apply_generic()`           | `gf.c`          | `Base.print(Base.TTY, String)`                       |\n"
"| `jl_apply()`                   | `julia.h`       |                                                      |\n"
"| `jl_trampoline()`              | `builtins.c`    |                                                      |\n"
"| `jl_apply()`                   | `julia.h`       |                                                      |\n"
"| `jl_apply_generic()`           | `gf.c`          | `Base.print(Base.TTY, String, Char, Char...)`        |\n"
"| `jl_apply()`                   | `julia.h`       |                                                      |\n"
"| `jl_f_apply()`                 | `builtins.c`    |                                                      |\n"
"| `jl_apply()`                   | `julia.h`       |                                                      |\n"
"| `jl_trampoline()`              | `builtins.c`    |                                                      |\n"
"| `jl_apply()`                   | `julia.h`       |                                                      |\n"
"| `jl_apply_generic()`           | `gf.c`          | `Base.println(Base.TTY, String, String...)`          |\n"
"| `jl_apply()`                   | `julia.h`       |                                                      |\n"
"| `jl_trampoline()`              | `builtins.c`    |                                                      |\n"
"| `jl_apply()`                   | `julia.h`       |                                                      |\n"
"| `jl_apply_generic()`           | `gf.c`          | `Base.println(String,)`                              |\n"
"| `jl_apply()`                   | `julia.h`       |                                                      |\n"
"| `do_call()`                    | `interpreter.c` |                                                      |\n"
"| `eval()`                       | `interpreter.c` |                                                      |\n"
"| `jl_interpret_toplevel_expr()` | `interpreter.c` |                                                      |\n"
"| `jl_toplevel_eval_flex()`      | `toplevel.c`    |                                                      |\n"
"| `jl_toplevel_eval()`           | `toplevel.c`    |                                                      |\n"
"| `jl_toplevel_eval_in()`        | `builtins.c`    |                                                      |\n"
"| `jl_f_top_eval()`              | `builtins.c`    |                                                      |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:219
msgid ""
"Since our example has just one function call, which has done its job of "
"printing \"Hello World!\", the stack now rapidly unwinds back to `main()`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/init.md:220
#, no-wrap
msgid "`jl_atexit_hook()`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:225
msgid ""
"`main()` calls [`jl_atexit_hook()`](https://github.com/JuliaLang/julia/blob/"
"master/src/init.c).  This calls `_atexit` for each module, then calls "
"[`jl_gc_run_all_finalizers()`](https://github.com/JuliaLang/julia/blob/"
"master/src/gc.c)  and cleans up libuv handles."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/init.md:226
#, no-wrap
msgid "`julia_save()`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/init.md:230
msgid ""
"Finally, `main()` calls [`julia_save()`](https://github.com/JuliaLang/julia/"
"blob/master/src/init.c), which if requested on the command line, saves the "
"runtime state to a new system image. See [`jl_compile_all()`](https://github."
"com/JuliaLang/julia/blob/master/src/gf.c)  and [`jl_save_system_image()`]"
"(https://github.com/JuliaLang/julia/blob/master/src/staticdata.c)."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/llvm.md:1
#, no-wrap
msgid "Working with LLVM"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:5
msgid ""
"This is not a replacement for the LLVM documentation, but a collection of "
"tips for working on LLVM for Julia."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/llvm.md:6
#, no-wrap
msgid "Overview of Julia to LLVM Interface"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:9
msgid ""
"Julia dynamically links against LLVM by default. Build with "
"`USE_LLVM_SHLIB=0` to link statically."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:11
msgid ""
"The code for lowering Julia AST to LLVM IR or interpreting it directly is in "
"directory `src/`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:24
#, no-wrap
msgid ""
"| File                | Description                                                |\n"
"|:------------------- |:---------------------------------------------------------- |\n"
"| `builtins.c`        | Builtin functions                                          |\n"
"| `ccall.cpp`         | Lowering [`ccall`](@ref)                                   |\n"
"| `cgutils.cpp`       | Lowering utilities, notably for array and tuple accesses   |\n"
"| `codegen.cpp`       | Top-level of code generation, pass list, lowering builtins |\n"
"| `debuginfo.cpp`     | Tracks debug information for JIT code                      |\n"
"| `disasm.cpp`        | Handles native object file and JIT code diassembly         |\n"
"| `gf.c`              | Generic functions                                          |\n"
"| `intrinsics.cpp`    | Lowering intrinsics                                        |\n"
"| `llvm-simdloop.cpp` | Custom LLVM pass for [`@simd`](@ref)                       |\n"
"| `sys.c`             | I/O and operating system utility functions                 |\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:26
msgid "Some of the `.cpp` files form a group that compile to a single object."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:30
msgid ""
"The difference between an intrinsic and a builtin is that a builtin is a "
"first class function that can be used like any other Julia function.  An "
"intrinsic can operate only on unboxed data, and therefore its arguments must "
"be statically typed."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/llvm.md:31
#, no-wrap
msgid "Alias Analysis"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:36
msgid ""
"Julia currently uses LLVM's [Type Based Alias Analysis](http://llvm.org/docs/"
"LangRef.html#tbaa-metadata).  To find the comments that document the "
"inclusion relationships, look for `static MDNode*` in `src/codegen.cpp`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:38
msgid ""
"The `-O` option enables LLVM's [Basic Alias Analysis](http://llvm.org/docs/"
"AliasAnalysis.html#the-basicaa-pass)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/llvm.md:39
#, no-wrap
msgid "Building Julia with a different version of LLVM"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:43
msgid ""
"The default version of LLVM is specified in `deps/Versions.make`. You can "
"override it by creating a file called `Make.user` in the top-level directory "
"and adding a line to it such as:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:47
msgid "``` LLVM_VER = 6.0.1 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:50
msgid ""
"Besides the LLVM release numerals, you can also use `LLVM_VER = svn` to "
"build against the latest development version of LLVM."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:57
msgid ""
"You can also specify to build a debug version of LLVM, by setting either "
"`LLVM_DEBUG = 1` or `LLVM_DEBUG = Release` in your `Make.user` file. The "
"former will be a fully unoptimized build of LLVM and the latter will produce "
"an optimized build of LLVM. Depending on your needs the latter will suffice "
"and it quite a bit faster. If you use `LLVM_DEBUG = Release` you will also "
"want to set `LLVM_ASSERTIONS = 1` to enable diagonstics for different "
"passes. Only `LLVM_DEBUG = 1` implies that option by default."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/llvm.md:58
#, no-wrap
msgid "Passing options to LLVM"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:62
msgid ""
"You can pass options to LLVM via the environment variable "
"`JULIA_LLVM_ARGS`.  Here are example settings using `bash` syntax:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/llvm.md:67
msgid "`export JULIA_LLVM_ARGS = -print-after-all` dumps IR after each pass."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/llvm.md:67
msgid ""
"`export JULIA_LLVM_ARGS = -debug-only=loop-vectorize` dumps LLVM "
"`DEBUG(...)` diagnostics for loop vectorizer. If you get warnings about "
"\"Unknown command line argument\", rebuild LLVM with `LLVM_ASSERTIONS = 1`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/llvm.md:68
#, no-wrap
msgid "Debugging LLVM transformations in isolation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:87
msgid ""
"On occasion, it can be useful to debug LLVM's transformations in isolation "
"from the rest of the Julia system, e.g. because reproducing the issue inside "
"`julia` would take too long, or because one wants to take advantage of "
"LLVM's tooling (e.g. bugpoint). To get unoptimized IR for the entire system "
"image, pass the `--output-unopt-bc unopt.bc` option to the system image "
"build process, which will output the unoptimized IR to an `unopt.bc` file. "
"This file can then be passed to LLVM tools as usual. `libjulia` can function "
"as an LLVM pass plugin and can be loaded into LLVM tools, to make julia-"
"specific passes available in this environment. In addition, it exposes the `-"
"julia` meta-pass, which runs the entire Julia pass-pipeline over the IR. As "
"an example, to generate a system image, one could do: ``` opt -load libjulia."
"so -julia -o opt.bc unopt.bc llc -o sys.o opt.bc cc -shared -o sys.so sys.o "
"``` This system image can then be loaded by `julia` as usual."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:93
msgid ""
"Alternatively, you can use `--output-jit-bc jit.bc` to obtain a trace of all "
"IR passed to the JIT.  This is useful for code that cannot be run as part of "
"the sysimg generation process (e.g. because it creates unserializable "
"state). However, the resulting `jit.bc` does not include sysimage data, and "
"can thus not be used as such."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:105
#, no-wrap
msgid ""
"It is also possible to dump an LLVM IR module for just one Julia function,\n"
"using:\n"
"```julia\n"
"f, T = +, Tuple{Int,Int} # Substitute your function of interest here\n"
"optimize = false\n"
"open(\"plus.ll\", \"w\") do f\n"
"    println(f, Base._dump_function(f, T, false, false, false, true, :att, optimize))\n"
"end\n"
"```\n"
"These files can be processed the same way as the unoptimized sysimg IR shown\n"
"above.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/llvm.md:106
#, no-wrap
msgid "Improving LLVM optimizations for Julia"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:110
msgid ""
"Improving LLVM code generation usually involves either changing Julia "
"lowering to be more friendly to LLVM's passes, or improving a pass."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:114
msgid ""
"If you are planning to improve a pass, be sure to read the [LLVM developer "
"policy](http://llvm.org/docs/DeveloperPolicy.html).  The best strategy is to "
"create a code example in a form where you can use LLVM's `opt` tool to study "
"it and the pass of interest in isolation."
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/devdocs/llvm.md:119
msgid "Create an example Julia code of interest."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/devdocs/llvm.md:119
msgid "Use `JULIA_LLVM_ARGS = -print-after-all` to dump the IR."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/devdocs/llvm.md:119
msgid "Pick out the IR at the point just before the pass of interest runs."
msgstr ""

#. type: Bullet: '4. '
#: ext/julia/doc/src/devdocs/llvm.md:119
msgid "Strip the debug metadata and fix up the TBAA metadata by hand."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:121
msgid ""
"The last step is labor intensive.  Suggestions on a better way would be "
"appreciated."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/llvm.md:122
#, no-wrap
msgid "The jlcall calling convention"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:145
msgid ""
"Julia has a generic calling convention for unoptimized code, which looks "
"somewhat as follows: ```c jl_value_t *any_unoptimized_call(jl_value_t *, "
"jl_value_t **, int); ``` where the first argument is the boxed function "
"object, the second argument is an on-stack array of arguments and the third "
"is the number of arguments. Now, we could perform a straightforward lowering "
"and emit an alloca for the argument array. However, this would betray the "
"SSA nature of the uses at the call site, making optimizations (including GC "
"root placement), significantly harder.  Instead, we emit it as follows: "
"```llvm %bitcast = bitcast @any_unoptimized_call to %jl_value_t *(*)"
"(%jl_value_t *, %jl_value_t *)  call cc 37 %jl_value_t *%bitcast(%jl_value_t "
"*%arg1, %jl_value_t *%arg2)  ``` The special `cc 37` annotation marks the "
"fact that this call site is really using the jlcall calling convention. This "
"allows us to retain the SSA-ness of the uses throughout the optimizer. GC "
"root placement will later lower this call to the original C ABI. In the code "
"the calling convention number is represented by the `JLCALL_F_CC` constant. "
"In addition, there is the `JLCALL_CC` calling convention which functions "
"similarly, but omits the first argument."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/llvm.md:146
#, no-wrap
msgid "GC root placement"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:169
#, no-wrap
msgid ""
"GC root placement is done by an LLVM pass late in the pass pipeline. Doing GC root\n"
"placement this late enables LLVM to make more aggressive optimizations around\n"
"code that requires GC roots, as well as allowing us to reduce the number of\n"
"required GC roots and GC root store operations (since LLVM doesn't understand\n"
"our GC, it wouldn't otherwise know what it is and is not allowed to do with\n"
"values stored to the GC frame, so it'll conservatively do very little). As an\n"
"example, consider an error path\n"
"```julia\n"
"if some_condition()\n"
"    #= Use some variables maybe =#\n"
"    error(\"An error occurred\")\n"
"end\n"
"```\n"
"During constant folding, LLVM may discover that the condition is always false,\n"
"and can remove the basic block. However, if GC root lowering is done early,\n"
"the GC root slots used in the deleted block, as well as any values kept alive\n"
"in those slots only because they were used in the error path, would be kept\n"
"alive by LLVM. By doing GC root lowering late, we give LLVM the license to do\n"
"any of its usual optimizations (constant folding, dead code elimination, etc.),\n"
"without having to worry (too much) about which values may or may not be GC\n"
"tracked.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:173
msgid ""
"However, in order to be able to do late GC root placement, we need to be "
"able to identify a) which pointers are GC tracked and b) all uses of such "
"pointers. The goal of the GC placement pass is thus simple:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:177
msgid ""
"Minimize the number of needed GC roots/stores to them subject to the "
"constraint that at every safepoint, any live GC-tracked pointer (i.e. for "
"which there is a path after this point that contains a use of this pointer) "
"is in some GC slot."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/llvm.md:178
#, no-wrap
msgid "Representation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:187
msgid ""
"The primary difficulty is thus choosing an IR representation that allows us "
"to identify GC-tracked pointers and their uses, even after the program has "
"been run through the optimizer. Our design makes use of three LLVM features "
"to achieve this: - Custom address spaces - Operand Bundles - Non-integral "
"pointers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:198
msgid ""
"Custom address spaces allow us to tag every point with an integer that needs "
"to be preserved through optimizations. The compiler may not insert casts "
"between address spaces that did not exist in the original program and it "
"must never change the address space of a pointer on a load/store/etc "
"operation. This allows us to annotate which pointers are GC-tracked in an "
"optimizer-resistant way. Note that metadata would not be able to achieve the "
"same purpose. Metadata is supposed to always be discardable without altering "
"the semantics of the program. However, failing to identify a GC-tracked "
"pointer alters the resulting program behavior dramatically - it'll probably "
"crash or return wrong results. We currently use three different address "
"spaces (their numbers are defined in `src/codegen_shared.cpp`):"
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/llvm.md:219
msgid ""
"GC Tracked Pointers (currently 10): These are pointers to boxed values that "
"may be put into a GC frame. It is loosely equivalent to a `jl_value_t*` "
"pointer on the C side. N.B. It is illegal to ever have a pointer in this "
"address space that may not be stored to a GC slot."
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/llvm.md:219
msgid ""
"Derived Pointers (currently 11): These are pointers that are derived from "
"some GC tracked pointer. Uses of these pointers generate uses of the "
"original pointer.  However, they need not themselves be known to the GC. The "
"GC root placement pass MUST always find the GC tracked pointer from which "
"this pointer is derived and use that as the pointer to root."
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/llvm.md:219
msgid ""
"Callee Rooted Pointers (currently 12): This is a utility address space to "
"express the notion of a callee rooted value. All values of this address "
"space MUST be storable to a GC root (though it is possible to relax this "
"condition in the future), but unlike the other pointers need not be rooted "
"if passed to a call (they do still need to be rooted if they are live across "
"another safepoint between the definition and the call)."
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/llvm.md:219
msgid ""
"Pointers loaded from tracked object (currently 13): This is used by arrays, "
"which themselves contain a pointer to the managed data. This data area is "
"owned by the array, but is not a GC-tracked object by itself. The compiler "
"guarantees that as long as this pointer is live, the object that this "
"pointer was loaded from will keep being live."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/llvm.md:220
#, no-wrap
msgid "Invariants"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:224
msgid ""
"The GC root placement pass makes use of several invariants, which need to be "
"observed by the frontend and are preserved by the optimizer."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:235
#, no-wrap
msgid ""
"First, only the following address space casts are allowed:\n"
"- 0->{Tracked,Derived,CalleeRooted}: It is allowable to decay an untracked pointer to any of the\n"
"  others. However, do note that the optimizer has broad license to not root\n"
"  such a value. It is never safe to have a value in address space 0 in any part\n"
"  of the program if it is (or is derived from) a value that requires a GC root.\n"
"- Tracked->Derived: This is the standard decay route for interior values. The placement\n"
"  pass will look for these to identify the base pointer for any use.\n"
"- Tracked->CalleeRooted: Addrspace CalleeRooted serves merely as a hint that a GC root is not\n"
"  required. However, do note that the Derived->CalleeRooted decay is prohibited, since\n"
"  pointers should generally be storable to a GC slot, even in this address space.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:243
msgid ""
"Now let us consider what constitutes a use: - Loads whose loaded values is "
"in one of the address spaces - Stores of a value in one of the address "
"spaces to a location - Stores to a pointer in one of the address spaces - "
"Calls for which a value in one of the address spaces is an operand - Calls "
"in jlcall ABI, for which the argument array contains a value - Return "
"instructions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:250
msgid ""
"We explicitly allow load/stores and simple calls in address spaces Tracked/"
"Derived. Elements of jlcall argument arrays must always be in address space "
"Tracked (it is required by the ABI that they are valid `jl_value_t*` "
"pointers). The same is true for return instructions (though note that struct "
"return arguments are allowed to have any of the address spaces). The only "
"allowable use of an address space CalleeRooted pointer is to pass it to a "
"call (which must have an appropriately typed operand)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:255
msgid ""
"Further, we disallow `getelementptr` in addrspace Tracked. This is because "
"unless the operation is a noop, the resulting pointer will not be validly "
"storable to a GC slot and may thus not be in this address space. If such a "
"pointer is required, it should be decayed to addrspace Derived first."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:264
msgid ""
"Lastly, we disallow `inttoptr`/`ptrtoint` instructions in these address "
"spaces.  Having these instructions would mean that some `i64` values are "
"really GC tracked.  This is problematic, because it breaks that stated "
"requirement that we're able to identify GC-relevant pointers. This invariant "
"is accomplished using the LLVM \"non-integral pointers\" feature, which is "
"new in LLVM 5.0. It prohibits the optimizer from making optimizations that "
"would introduce these operations. Note we can still insert static constants "
"at JIT time by using `inttoptr` in address space 0 and then decaying to the "
"appropriate address space afterwards."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/llvm.md:265
#, no-wrap
msgid "Supporting [`ccall`](@ref)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:293
msgid ""
"One important aspect missing from the discussion so far is the handling of "
"[`ccall`](@ref). [`ccall`](@ref) has the peculiar feature that the location "
"and scope of a use do not coincide. As an example consider: ```julia A = "
"randn(1024)  ccall(:foo, Cvoid, (Ptr{Float64},), A)  ``` In lowering, the "
"compiler will insert a conversion from the array to the pointer which drops "
"the reference to the array value. However, we of course need to make sure "
"that the array does stay alive while we're doing the [`ccall`](@ref). To "
"understand how this is done, first recall the lowering of the above code: "
"```julia return $(Expr(:foreigncall, :(:foo), Cvoid, svec(Ptr{Float64}), :(:"
"ccall), 1, :($(Expr(:foreigncall, :(:jl_array_ptr), Ptr{Float64}, "
"svec(Any), :(:ccall), 1, :(A)))), :(A)))  ``` The last `:(A)`, is an extra "
"argument list inserted during lowering that informs the code generator which "
"Julia level values need to be kept alive for the duration of this [`ccall`]"
"(@ref). We then take this information and represent it in an \"operand bundle"
"\" at the IR level. An operand bundle is essentially a fake use that is "
"attached to the call site. At the IR level, this looks like so: ```llvm call "
"void inttoptr (i64 ... to void (double*)*)(double* %5) [ \"jl_roots"
"\"(%jl_value_t addrspace(10)* %A) ] ``` The GC root placement pass will "
"treat the `jl_roots` operand bundle as if it were a regular operand. "
"However, as a final step, after the GC roots are inserted, it will drop the "
"operand bundle to avoid confusing instruction selection."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/llvm.md:294
#, no-wrap
msgid "Supporting [`pointer_from_objref`](@ref)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:311
msgid ""
"[`pointer_from_objref`](@ref) is special because it requires the user to "
"take explicit control of GC rooting. By our above invariants, this function "
"is illegal, because it performs an address space cast from 10 to 0. However, "
"it can be useful, in certain situations, so we provide a special intrinsic: "
"```llvm declared %jl_value_t *julia.pointer_from_objref(%jl_value_t "
"addrspace(10)*)  ``` which is lowered to the corresponding address space "
"cast after GC root lowering.  Do note however that by using this intrinsic, "
"the caller assumes all responsibility for making sure that the value in "
"question is rooted. Further this intrinsic is not considered a use, so the "
"GC root placement pass will not provide a GC root for the function. As a "
"result, the external rooting must be arranged while the value is still "
"tracked by the system. I.e. it is not valid to attempt to use the result of "
"this operation to establish a global root - the optimizer may have already "
"dropped the value."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/llvm.md:312
#, no-wrap
msgid "Keeping values alive in the absence of uses"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/llvm.md:331
msgid ""
"In certain cases it is necessary to keep an object alive, even though there "
"is no compiler-visible use of said object. This may be case for low level "
"code that operates on the memory-representation of an object directly or "
"code that needs to interface with C code. In order to allow this, we provide "
"the following intrinsics at the LLVM level: ``` token @llvm.julia."
"gc_preserve_begin(...)  void @llvm.julia.gc_preserve_end(token)  ``` (The "
"`llvm.` in the name is required in order to be able to use the `token` "
"type). The semantics of these intrinsics are as follows: At any safepoint "
"that is dominated by a `gc_preserve_begin` call, but that is not not "
"dominated by a corresponding `gc_preserve_end` call (i.e. a call whose "
"argument is the token returned by a `gc_preserve_begin` call), the values "
"passed as arguments to that `gc_preserve_begin` will be kept live. Note that "
"the `gc_preserve_begin` still counts as a regular use of those values, so "
"the standard lifetime semantics will ensure that the values will be kept "
"alive before entering the preserve region."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/isbitsunionarrays.md:1
#, no-wrap
msgid "isbits Union Optimizations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/isbitsunionarrays.md:4
msgid ""
"In Julia, the `Array` type holds both \"bits\" values as well as heap-"
"allocated \"boxed\" values. The distinction is whether the value itself is "
"stored inline (in the direct allocated memory of the array), or if the "
"memory of the array is simply a collection of pointers to objects allocated "
"elsewhere. In terms of performance, accessing values inline is clearly an "
"advantage over having to follow a pointer to the actual value. The "
"definition of \"isbits\" generally means any Julia type with a fixed, "
"determinate size, meaning no \"pointer\" fields, see `?isbitstype`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/isbitsunionarrays.md:6
msgid ""
"Julia also supports Union types, quite literally the union of a set of "
"types. Custom Union type definitions can be extremely handy for applications "
"wishing to \"cut across\" the nominal type system (i.e. explicit subtype "
"relationships) and define methods or functionality on these, otherwise "
"unrelated, set of types. A compiler challenge, however, is in determining "
"how to treat these Union types. The naive approach (and indeed, what Julia "
"itself did pre-0.7), is to simply make a \"box\" and then a pointer in the "
"box to the actual value, similar to the previously mentioned \"boxed\" "
"values. This is unfortunate, however, because of the number of small, "
"primitive \"bits\" types (think `UInt8`, `Int32`, `Float64`, etc.) that "
"would easily fit themselves inline in this \"box\" without needing any "
"indirection for value access. There are two main ways Julia can take "
"advantage of this optimization as of 0.7: isbits Union fields in types, and "
"isbits Union Arrays."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/isbitsunionarrays.md:7
#, no-wrap
msgid "isbits Union Structs"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/isbitsunionarrays.md:10
msgid ""
"Julia now includes an optimization wherein \"isbits Union\" fields in types "
"(`mutable struct`, `struct`, etc.) will be stored inline. This is "
"accomplished by determining the \"inline size\" of the Union type (e.g. "
"`Union{UInt8, Int16}` will have a size of two bytes, which represents the "
"size needed of the largest Union type `Int16`), and in addition, allocating "
"an extra \"type tag byte\" (`UInt8`), whose value signals the type of the "
"actual value stored inline of the \"Union bytes\". The type tag byte value "
"is the index of the actual value's type in the Union type's order of types. "
"For example, a type tag value of `0x02` for a field with type "
"`Union{Nothing, UInt8, Int16}` would indicate that an `Int16` value is "
"stored in the 16 bytes of the field in the structure's memory; a `0x01` "
"value would indicate that a `UInt8` value was stored in the first 8 bytes of "
"the 16 bytes of the field's memory. Lastly, a value of `0x00` signals that "
"the `nothing` value will be returned for this field, even though, as a "
"singleton type with a single type instance, it technically has a size of 0. "
"The type tag byte for a type's Union field is stored directly after the "
"field's computed Union memory."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/isbitsunionarrays.md:11
#, no-wrap
msgid "isbits Union Arrays"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/isbitsunionarrays.md:13
#, no-wrap
msgid "Julia can now also store \"isbits Union\" values inline in an Array, as opposed to requiring an indirection box. The optimization is accomplished by storing an extra \"type tag array\" of bytes, one byte per array element, alongside the bytes of the actual array data. This type tag array serves the same function as the type field case: its value signals the type of the actual stored Union value in the array. In terms of layout, a Julia Array can include extra \"buffer\" space before and after its actual data values, which are tracked in the `a->offset` and `a->maxsize` fields of the `jl_array_t*` type. The \"type tag array\" is treated exactly as another `jl_array_t*`, but which shares the same `a->offset`, `a->maxsize`, and `a->len` fields. So the formula to access an isbits Union Array's type tag bytes is `a->data + (a->maxsize - a->offset) * a->elsize + a->offset`; i.e. the Array's `a->data` pointer is already shifted by `a->offset`, so correcting for that, we follow the data all the way to the max of what it can hold `a->maxsize`, then adjust by `a->ofset` more bytes to account for any present \"front buffering\" the array might be doing. This layout in particular allows for very efficient resizing operations as the type tag data only ever has to move when the actual array's data has to move.\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/reflection.md:1
#, no-wrap
msgid "Reflection and introspection"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:4
msgid "Julia provides a variety of runtime reflection capabilities."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/reflection.md:5
#, no-wrap
msgid "Module bindings"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:10
msgid ""
"The exported names for a `Module` are available using [`names(m::Module)`]"
"(@ref), which will return an array of [`Symbol`](@ref) elements representing "
"the exported bindings. `names(m::Module, all = true)` returns symbols for "
"all bindings in `m`, regardless of export status."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/reflection.md:11
#, no-wrap
msgid "DataType fields"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:16
msgid ""
"The names of `DataType` fields may be interrogated using [`fieldnames`]"
"(@ref). For example, given the following type, `fieldnames(Point)` returns a "
"tuple of [`Symbol`](@ref)s representing the field names:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:22
#, no-wrap
msgid ""
"```jldoctest struct_point\n"
"julia> struct Point\n"
"           x::Int\n"
"           y\n"
"       end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:26
#, no-wrap
msgid ""
"julia> fieldnames(Point)\n"
"(:x, :y)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:29
msgid ""
"The type of each field in a `Point` object is stored in the `types` field of "
"the `Point` variable itself:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:34
#, no-wrap
msgid ""
"```jldoctest struct_point\n"
"julia> Point.types\n"
"svec(Int64, Any)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:37
msgid ""
"While `x` is annotated as an `Int`, `y` was unannotated in the type "
"definition, therefore `y` defaults to the `Any` type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:39
msgid "Types are themselves represented as a structure called `DataType`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:44
#, no-wrap
msgid ""
"```jldoctest struct_point\n"
"julia> typeof(Point)\n"
"DataType\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:47
msgid ""
"Note that `fieldnames(DataType)` gives the names for each field of "
"`DataType` itself, and one of these fields is the `types` field observed in "
"the example above."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/reflection.md:48
#, no-wrap
msgid "Subtypes"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:52
msgid ""
"The *direct* subtypes of any `DataType` may be listed using [`subtypes`]"
"(@ref). For example, the abstract `DataType` [`AbstractFloat`](@ref) has "
"four (concrete) subtypes:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:61
#, no-wrap
msgid ""
"```jldoctest; setup = :(using InteractiveUtils)\n"
"julia> subtypes(AbstractFloat)\n"
"4-element Array{Any,1}:\n"
" BigFloat\n"
" Float16\n"
" Float32\n"
" Float64\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:64
msgid ""
"Any abstract subtype will also be included in this list, but further "
"subtypes thereof will not; recursive application of [`subtypes`](@ref) may "
"be used to inspect the full type tree."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/reflection.md:65
#, no-wrap
msgid "DataType layout"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:71
msgid ""
"The internal representation of a `DataType` is critically important when "
"interfacing with C code and several functions are available to inspect these "
"details. [`isbits(T::DataType)`](@ref) returns true if `T` is stored with C-"
"compatible alignment. [`fieldoffset(T::DataType, i::Integer)`](@ref)  "
"returns the (byte) offset for field *i* relative to the start of the type."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/reflection.md:72
#, no-wrap
msgid "Function methods"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:76
msgid ""
"The methods of any generic function may be listed using [`methods`](@ref). "
"The method dispatch table may be searched for methods accepting a given type "
"using [`methodswith`](@ref)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/reflection.md:77
#, no-wrap
msgid "Expansion and lowering"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:83
msgid ""
"As discussed in the [Metaprogramming](@ref) section, the [`macroexpand`]"
"(@ref) function gives the unquoted and interpolated expression (`Expr`) form "
"for a given macro. To use `macroexpand`, `quote` the expression block itself "
"(otherwise, the macro will be evaluated and the result will be passed "
"instead!). For example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:88
#, no-wrap
msgid ""
"```jldoctest; setup = :(using InteractiveUtils)\n"
"julia> macroexpand(@__MODULE__, :(@edit println(\"\")) )\n"
":((InteractiveUtils.edit)(println, (Base.typesof)(\"\")))\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:91
msgid ""
"The functions `Base.Meta.show_sexpr` and [`dump`](@ref) are used to display "
"S-expr style views and depth-nested detail views for any expression."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:95
msgid ""
"Finally, the [`Meta.lower`](@ref) function gives the `lowered` form of any "
"expression and is of particular interest for understanding how language "
"constructs map to primitive operations such as assignments, branches, and "
"calls:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:105
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Meta.lower(@__MODULE__, :( [1+2, sin(0.5)] ))\n"
":($(Expr(:thunk, CodeInfo(\n"
"1 ─ %1 = 1 + 2\n"
"│   %2 = sin(0.5)\n"
"│   %3 = (Base.vect)(%1, %2)\n"
"└──      return %3\n"
"))))\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/reflection.md:106
#, no-wrap
msgid "Intermediate and compiled representations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:113
msgid ""
"Inspecting the lowered form for functions requires selection of the specific "
"method to display, because generic functions may have many methods with "
"different type signatures. For this purpose, method-specific code-lowering "
"is available using [`code_lowered`](@ref), and the type-inferred form is "
"available using [`code_typed`](@ref).  [`code_warntype`](@ref) adds "
"highlighting to the output of [`code_typed`](@ref)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:118
msgid ""
"Closer to the machine, the LLVM intermediate representation of a function "
"may be printed using by [`code_llvm`](@ref), and finally the compiled "
"machine code is available using [`code_native`](@ref) (this will trigger JIT "
"compilation/code generation for any function which has not previously been "
"called)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:121
msgid ""
"For convenience, there are macro versions of the above functions which take "
"standard function calls and expand argument types automatically:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:124
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> @code_llvm +(1,1)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:132
#, no-wrap
msgid ""
";  @ int.jl:53 within `+'\n"
"define i64 @\"julia_+_130862\"(i64, i64) {\n"
"top:\n"
"    %2 = add i64 %1, %0\n"
"    ret i64 %2\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/reflection.md:134
msgid ""
"See [`@code_lowered`](@ref), [`@code_typed`](@ref), [`@code_warntype`]"
"(@ref), [`@code_llvm`](@ref), and [`@code_native`](@ref)."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/eval.md:1
#, no-wrap
msgid "Eval of Julia code"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:5
msgid ""
"One of the hardest parts about learning how the Julia Language runs code is "
"learning how all of the pieces work together to execute a block of code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:10
msgid ""
"Each chunk of code typically makes a trip through many steps with "
"potentially unfamiliar names, such as (in no particular order): flisp, AST, C"
"++, LLVM, `eval`, `typeinf`, `macroexpand`, sysimg (or system image), "
"bootstrapping, compile, parse, execute, JIT, interpret, box, unbox, "
"intrinsic function, and primitive function, before turning into the desired "
"result (hopefully)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:13
#, no-wrap
msgid ""
"!!! sidebar \"Definitions\"\n"
"      * REPL\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:17
#, no-wrap
msgid ""
"        REPL stands for Read-Eval-Print Loop. It's just what we call the command line environment for\n"
"        short.\n"
"      * AST\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:20
#, no-wrap
msgid ""
"        Abstract Syntax Tree The AST is the digital representation of the code structure. In this form\n"
"        the code has been tokenized for meaning so that it is more suitable for manipulation and execution.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/eval.md:21
#, no-wrap
msgid "Julia Execution"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:24
msgid "The 10,000 foot view of the whole process is as follows:"
msgstr ""

#. type: Bullet: '1. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid "The user starts `julia`."
msgstr ""

#. type: Bullet: '2. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"The C function `main()` from `ui/repl.c` gets called. This function "
"processes the command line arguments, filling in the `jl_options` struct and "
"setting the variable `ARGS`. It then initializes Julia (by calling "
"[`julia_init` in `task.c`](https://github.com/JuliaLang/julia/blob/master/"
"src/task.c), which may load a previously compiled [sysimg](@ref dev-"
"sysimg)). Finally, it passes off control to Julia by calling [`Base."
"_start()`](https://github.com/JuliaLang/julia/blob/master/base/client.jl)."
msgstr ""

#. type: Bullet: '3. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"When `_start()` takes over control, the subsequent sequence of commands "
"depends on the command line arguments given. For example, if a filename was "
"supplied, it will proceed to execute that file. Otherwise, it will start an "
"interactive REPL."
msgstr ""

#. type: Bullet: '4. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"Skipping the details about how the REPL interacts with the user, let's just "
"say the program ends up with a block of code that it wants to run."
msgstr ""

#. type: Bullet: '5. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"If the block of code to run is in a file, [`jl_load(char *filename)`]"
"(https://github.com/JuliaLang/julia/blob/master/src/toplevel.c)  gets "
"invoked to load the file and [parse](@ref dev-parsing) it. Each fragment of "
"code is then passed to `eval` to execute."
msgstr ""

#. type: Bullet: '6. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"Each fragment of code (or AST), is handed off to [`eval()`](@ref) to turn "
"into results."
msgstr ""

#. type: Bullet: '7. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"[`eval()`](@ref) takes each code fragment and tries to run it in "
"[`jl_toplevel_eval_flex()`](https://github.com/JuliaLang/julia/blob/master/"
"src/toplevel.c)."
msgstr ""

#. type: Bullet: '8. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"`jl_toplevel_eval_flex()` decides whether the code is a \"toplevel\" action "
"(such as `using` or `module`), which would be invalid inside a function. If "
"so, it passes off the code to the toplevel interpreter."
msgstr ""

#. type: Bullet: '9. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"`jl_toplevel_eval_flex()` then [expands](@ref dev-macro-expansion) the code "
"to eliminate any macros and to \"lower\" the AST to make it simpler to "
"execute."
msgstr ""

#. type: Bullet: '10. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"`jl_toplevel_eval_flex()` then uses some simple heuristics to decide whether "
"to JIT compiler the AST or to interpret it directly."
msgstr ""

#. type: Bullet: '11. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"The bulk of the work to interpret code is handled by [`eval` in `interpreter."
"c`](https://github.com/JuliaLang/julia/blob/master/src/interpreter.c)."
msgstr ""

#. type: Bullet: '12. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"If instead, the code is compiled, the bulk of the work is handled by "
"`codegen.cpp`. Whenever a Julia function is called for the first time with a "
"given set of argument types, [type inference](@ref dev-type-inference)  will "
"be run on that function. This information is used by the [codegen](@ref dev-"
"codegen) step to generate faster code."
msgstr ""

#. type: Bullet: '13. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"Eventually, the user quits the REPL, or the end of the program is reached, "
"and the `_start()` method returns."
msgstr ""

#. type: Bullet: '14. '
#: ext/julia/doc/src/devdocs/eval.md:59
msgid ""
"Just before exiting, `main()` calls [`jl_atexit_hook(exit_code)`](https://"
"github.com/JuliaLang/julia/blob/master/src/init.c).  This calls `Base."
"_atexit()` (which calls any functions registered to [`atexit()`](@ref) "
"inside Julia). Then it calls [`jl_gc_run_all_finalizers()`](https://github."
"com/JuliaLang/julia/blob/master/src/gc.c).  Finally, it gracefully cleans up "
"all `libuv` handles and waits for them to flush and close."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/eval.md:60
#, no-wrap
msgid "[Parsing](@id dev-parsing)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:64
msgid ""
"The Julia parser is a small lisp program written in femtolisp, the source-"
"code for which is distributed inside Julia in [src/flisp](https://github.com/"
"JuliaLang/julia/tree/master/src/flisp)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:68
msgid ""
"The interface functions for this are primarily defined in [`jlfrontend.scm`]"
"(https://github.com/JuliaLang/julia/blob/master/src/jlfrontend.scm).  The "
"code in [`ast.c`](https://github.com/JuliaLang/julia/blob/master/src/ast.c) "
"handles this handoff on the Julia side."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:73
msgid ""
"The other relevant files at this stage are [`julia-parser.scm`](https://"
"github.com/JuliaLang/julia/blob/master/src/julia-parser.scm), which handles "
"tokenizing Julia code and turning it into an AST, and [`julia-syntax.scm`]"
"(https://github.com/JuliaLang/julia/blob/master/src/julia-syntax.scm), which "
"handles transforming complex AST representations into simpler, \"lowered\" "
"AST representations which are more suitable for analysis and execution."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/eval.md:74
#, no-wrap
msgid "[Macro Expansion](@id dev-macro-expansion)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:80
msgid ""
"When [`eval()`](@ref) encounters a macro, it expands that AST node before "
"attempting to evaluate the expression. Macro expansion involves a handoff "
"from [`eval()`](@ref) (in Julia), to the parser function `jl_macroexpand()` "
"(written in `flisp`) to the Julia macro itself (written in - what else - "
"Julia) via `fl_invoke_julia_macro()`, and back."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:83
msgid ""
"Typically, macro expansion is invoked as a first step during a call to "
"[`Meta.lower()`](@ref)/`jl_expand()`, although it can also be invoked "
"directly by a call to [`macroexpand()`](@ref)/`jl_macroexpand()`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/eval.md:84
#, no-wrap
msgid "[Type Inference](@id dev-type-inference)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:92
msgid ""
"Type inference is implemented in Julia by [`typeinf()` in `compiler/"
"typeinfer.jl`](https://github.com/JuliaLang/julia/blob/master/base/compiler/"
"typeinfer.jl).  Type inference is the process of examining a Julia function "
"and determining bounds for the types of each of its variables, as well as "
"bounds on the type of the return value from the function.  This enables many "
"future optimizations, such as unboxing of known immutable values, and "
"compile-time hoisting of various run-time operations such as computing field "
"offsets and function pointers.  Type inference may also include other steps "
"such as constant propagation and inlining."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:95
#, no-wrap
msgid ""
"!!! sidebar \"More Definitions\"\n"
"      * JIT\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:99
#, no-wrap
msgid ""
"        Just-In-Time Compilation The process of generating native-machine code into memory right when\n"
"        it is needed.\n"
"      * LLVM\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:104
#, no-wrap
msgid ""
"        Low-Level Virtual Machine (a compiler) The Julia JIT compiler is a program/library called libLLVM.\n"
"        Codegen in Julia refers both to the process of taking a Julia AST and turning it into LLVM instructions,\n"
"        and the process of LLVM optimizing that and turning it into native assembly instructions.\n"
"      * C++\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:109
#, no-wrap
msgid ""
"        The programming language that LLVM is implemented in, which means that codegen is also implemented\n"
"        in this language. The rest of Julia's library is implemented in C, in part because its smaller\n"
"        feature set makes it more usable as a cross-language interface layer.\n"
"      * box\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:113
#, no-wrap
msgid ""
"        This term is used to describe the process of taking a value and allocating a wrapper around the\n"
"        data that is tracked by the garbage collector (gc) and is tagged with the object's type.\n"
"      * unbox\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:117
#, no-wrap
msgid ""
"        The reverse of boxing a value. This operation enables more efficient manipulation of data when\n"
"        the type of that data is fully known at compile-time (through type inference).\n"
"      * generic function\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:121
#, no-wrap
msgid ""
"        A Julia function composed of multiple \"methods\" that are selected for dynamic dispatch based on\n"
"        the argument type-signature\n"
"      * anonymous function or \"method\"\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:124
#, no-wrap
msgid ""
"        A Julia function without a name and without type-dispatch capabilities\n"
"      * primitive function\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:128
#, no-wrap
msgid ""
"        A function implemented in C but exposed in Julia as a named function \"method\" (albeit without\n"
"        generic function dispatch capabilities, similar to a anonymous function)\n"
"      * intrinsic function\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:133
#, no-wrap
msgid ""
"        A low-level operation exposed as a function in Julia. These pseudo-functions implement operations\n"
"        on raw bits such as add and sign extend that cannot be expressed directly in any other way. Since\n"
"        they operate on bits directly, they must be compiled into a function and surrounded by a call\n"
"        to `Core.Intrinsics.box(T, ...)` to reassign type information to the value.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/eval.md:134
#, no-wrap
msgid "[JIT Code Generation](@id dev-codegen)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:137
msgid "Codegen is the process of turning a Julia AST into native machine code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:139
msgid ""
"The JIT environment is initialized by an early call to [`jl_init_codegen` in "
"`codegen.cpp`](https://github.com/JuliaLang/julia/blob/master/src/codegen."
"cpp)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:143
msgid ""
"On demand, a Julia method is converted into a native function by the "
"function `emit_function(jl_method_instance_t*)`.  (note, when using the "
"MCJIT (in LLVM v3.4+), each function must be JIT into a new module.) This "
"function recursively calls `emit_expr()` until the entire function has been "
"emitted."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:148
msgid ""
"Much of the remaining bulk of this file is devoted to various manual "
"optimizations of specific code patterns. For example, `emit_known_call()` "
"knows how to inline many of the primitive functions (defined in [`builtins."
"c`](https://github.com/JuliaLang/julia/blob/master/src/builtins.c)) for "
"various combinations of argument types."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:150
msgid "Other parts of codegen are handled by various helper files:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/eval.md:152
msgid ""
"[`debuginfo.cpp`](https://github.com/JuliaLang/julia/blob/master/src/"
"debuginfo.cpp)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:155
#, no-wrap
msgid ""
"    Handles backtraces for JIT functions\n"
"  * [`ccall.cpp`](https://github.com/JuliaLang/julia/blob/master/src/ccall.cpp)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:158
#, no-wrap
msgid ""
"    Handles the ccall and llvmcall FFI, along with various `abi_*.cpp` files\n"
"  * [`intrinsics.cpp`](https://github.com/JuliaLang/julia/blob/master/src/intrinsics.cpp)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:160
#, no-wrap
msgid "    Handles the emission of various low-level intrinsic functions\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:163
#, no-wrap
msgid ""
"!!! sidebar \"Bootstrapping\"\n"
"    The process of creating a new system image is called \"bootstrapping\".\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:167
#, no-wrap
msgid ""
"    The etymology of this word comes from the phrase \"pulling oneself up by the bootstraps\", and\n"
"    refers to the idea of starting from a very limited set of available functions and definitions\n"
"    and ending with the creation of a full-featured environment.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/eval.md:168
#, no-wrap
msgid "[System Image](@id dev-sysimg)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:176
msgid ""
"The system image is a precompiled archive of a set of Julia files. The `sys."
"ji` file distributed with Julia is one such system image, generated by "
"executing the file [`sysimg.jl`](https://github.com/JuliaLang/julia/blob/"
"master/base/sysimg.jl), and serializing the resulting environment (including "
"Types, Functions, Modules, and all other defined values) into a file. "
"Therefore, it contains a frozen version of the `Main`, `Core`, and `Base` "
"modules (and whatever else was in the environment at the end of "
"bootstrapping). This serializer/deserializer is implemented by "
"[`jl_save_system_image`/`jl_restore_system_image` in `staticdata.c`](https://"
"github.com/JuliaLang/julia/blob/master/src/staticdata.c)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/eval.md:182
msgid ""
"If there is no sysimg file (`jl_options.image_file == NULL`), this also "
"implies that `--build` was given on the command line, so the final result "
"should be a new sysimg file. During Julia initialization, minimal `Core` and "
"`Main` modules are created. Then a file named `boot.jl` is evaluated from "
"the current directory. Julia then evaluates any file given as a command line "
"argument until it reaches the end. Finally, it saves the resulting "
"environment to a \"sysimg\" file for use as a starting point for a future "
"Julia run."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/gc-sa.md:1
#, no-wrap
msgid "Static analyzer annotations for GC correctness in C code"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/gc-sa.md:3
#, no-wrap
msgid "General Overview"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:10
msgid ""
"Since Julia's GC is precise, it needs to maintain correct rooting "
"information for any value that may be referenced at any time GC may occur. "
"These places are known as `safepoints` and in the function local context, we "
"extend this designation to any function call that may recursively end up at "
"a safepoint."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:15
msgid ""
"In generated code, this is taken care of automatically by the GC root "
"placement pass (see the chapter on GC rooting in the LLVM codegen devdocs). "
"However, in C code, we need to inform the runtime of any GC roots manually. "
"This is done using the following macros:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:26
msgid ""
"``` // The value assigned to any slot passed as an argument to these // is "
"rooted for the duration of this GC frame.  JL_GC_PUSH{1,...,6}(args...)  // "
"The values assigned into the size `n` array `rts` are rooted // for the "
"duration of this GC frame.  JL_GC_PUSHARGS(rts, n)  // Pop a GC frame "
"JL_GC_POP ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:31
msgid ""
"If these macros are not used where they need to be, or they are used "
"incorrectly, the result is silent memory corruption. As such it is very "
"important that they are placed correctly in all applicable code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:37
msgid ""
"As such, we employ static analysis (and in particular the clang static "
"analyzer) to help ensure that these macros are used correctly. The remainder "
"of this document gives an overview of this static analysis and describes the "
"support needed in the julia code base to make things work."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/gc-sa.md:38
#, no-wrap
msgid "GC Invariants"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:45
#, no-wrap
msgid ""
"There is two simple invariants correctness:\n"
"- All GC_PUSH calls need to be followed by an appropriate GC_POP (in practice we enforce this\n"
"  at the function level)\n"
"- If a value was previously not rooted at any safepoint, it may no longer be referenced\n"
"  afterwards\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:51
msgid ""
"Of course the devil is in the details here. In particular to satisfy the "
"second of the above conditions, we need to know: - Which calls are "
"safepoints and which are not - Which values are rooted at any given "
"safepoint and which are not - When is a value referenced"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:56
msgid ""
"For the second point in particular, we need to know which memory locations "
"will be considered rooting at runtime (i.e. values assigned to such "
"locations are rooted). This includes locations explicitly designated as such "
"by passing them to one of the `GC_PUSH` macros, globally rooted locations "
"and values, as well as any location recursively reachable from one of those "
"locations."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/gc-sa.md:57
#, no-wrap
msgid "Static Analysis Algorithm"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:65
msgid ""
"The idea itself is very simple, although the implementation is quite a bit "
"more complicated (mainly due to a large number of special cases and "
"intricacies of C and C++). In essence, we keep track of all locations that "
"are rooting, all values that are rootable and any expression (assignments, "
"allocations, etc) affect the rootedness of any rootable values.  Then, at "
"any safepoint, we perform a \"symbolic GC\" and poison any values that are "
"not rooted at said location. If these values are later referenced, we emit "
"an error."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:69
msgid ""
"The clang static analyzer works by constructing a graph of states and "
"exploring this graph for sources of errors. Several nodes in this graph are "
"generated by the analyzer itself (e.g. for control flow), but the "
"definitions above augment this graph with our own state."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:77
msgid ""
"The static analyzer is interprocedural and can analyze control flow across "
"function boundaries.  However, the static analyzer is not fully recursive "
"and makes heuristic decisions about which calls to explore (additionally "
"some calls are cross-translation unit and invisible to the analyzer).  In "
"our case, our definition of correctness requires total information.  As "
"such, we need to annotate the prototypes of all function calls with whatever "
"information the analysis required, even if that information would otherwise "
"be available by interprocedural static analysis."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:80
msgid ""
"Luckily however, we can still use this interprocedural analysis to ensure "
"that the annotations we place on a given function are indeed correct given "
"the implementation of said function."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/gc-sa.md:81
#, no-wrap
msgid "The analyzer annotations"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:86
msgid ""
"These annotations are found in src/support/analyzer_annotations.h.  The are "
"only active when the analyzer is being used and expand either to nothing "
"(for prototype annotations) or to no-ops (for function like annotations)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/gc-sa.md:87
#, no-wrap
msgid "`JL_NOTSAFEPOINT`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:94
msgid ""
"This is perhaps the most common annotation, and should be placed on any "
"function that is known not to possibly lead to reaching a GC safepoint. In "
"general, it is only safe for such a function to perform arithmetic, memory "
"accesses and calls to functions either annotated `JL_NOTSAFEPOINT` or "
"otherwise known not to be safepoints (e.g.  function in the C standard "
"library, which are hardcoded as such in the analyzer)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:97
msgid ""
"It is valid to keep values unrooted across calls to any function annotated "
"with this attribute:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:103
#, no-wrap
msgid ""
"Usage Example:\n"
"```c\n"
"void jl_get_one() JL_NOTSAFEPOINT {\n"
"  return 1;\n"
"}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:112
#, no-wrap
msgid ""
"jl_value_t *example() {\n"
"  jl_value_t *val = jl_alloc_whatever();\n"
"  // This is valid, even though `val` is unrooted, because\n"
"  // jl_get_one is not a safepoint\n"
"  jl_get_one();\n"
"  return val;\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/gc-sa.md:113
#, no-wrap
msgid "`JL_MAYBE_UNROOTED`/`JL_ROOTS_TEMPORARILY`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:125
msgid ""
"When `JL_MAYBE_UNROOTED` is annotated as an argument on a function, "
"indicates that said argument may be passed, even if it is not rooted.  In "
"the ordinary course of events, the julia ABI guarantees that callers root "
"values before passing them to callees. However, some functions do not follow "
"this ABI and allow values to be passed to them even though they are not "
"rooted. Note however, that this does not automatically imply that said "
"argument will be preserved.  The `ROOTS_TEMPORARILY` annotation provides the "
"stronger guarantee that, not only may the value be unrooted when passed, it "
"will also be preserved across any internal safepoints by the callee."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:129
msgid ""
"Note that `JL_NOTSAFEPOINT` essentially implies `JL_MAYBE_UNROOTED`/"
"`JL_ROOTS_TEMPORARILY`, because the rootedness of an argument is irrelevant "
"if the function contains no safepoints."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:135
msgid ""
"One additional point to note is that these annotations apply on both the "
"caller and the callee side. On the caller side, they lift rootedness "
"restrictions that are normally required for julia ABI functions. On the "
"callee side, they have the reverse effect of preventing these arguments from "
"being considered implicitly rooted."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:139
msgid ""
"If either of these annotations is applied to the function as a whole, it "
"applies to all arguments of the function. This should generally only be "
"necessary for varargs functions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:144
msgid ""
"Usage example: ```c JL_DLLEXPORT void JL_NORETURN jl_throw(jl_value_t *e "
"JL_MAYBE_UNROOTED); jl_value_t *jl_alloc_error();"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:151
#, no-wrap
msgid ""
"void example() {\n"
"  // The return value of the allocation is unrooted. This would normally\n"
"  // be an error, but is allowed because of the above annotation.\n"
"  jl_throw(jl_alloc_error());\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/gc-sa.md:152
#, no-wrap
msgid "`JL_PROPAGATES_ROOT`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:158
msgid ""
"This annotation is commonly found on accessor functions that return one "
"rootable object stored within another. When annotated on a function "
"argument, it tells the analyzer that the root for that argument also applies "
"to the value returned by the function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:162
msgid ""
"Usage Example: ```c jl_value_t *jl_svecref(jl_svec_t *t JL_PROPAGATES_ROOT, "
"size_t i) JL_NOTSAFEPOINT;"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:171
#, no-wrap
msgid ""
"size_t example(jl_svec_t *svec) {\n"
"  jl_value_t *val = jl_svecref(svec, 1)\n"
"  // This is valid, because, as annotated by the PROPAGATES_ROOT annotation,\n"
"  // jl_svecref propagates the rooted-ness from `svec` to `val`\n"
"  jl_gc_safepoint();\n"
"  return jl_unbox_long(val);\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/gc-sa.md:172
#, no-wrap
msgid "`JL_ROOTING_ARGUMENT`/`JL_ROOTED_ARGUMENT`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:177
msgid ""
"This is essentially the assignment counterpart to `JL_PROPAGATES_ROOT`.  "
"When assigning a value to a field of another value that is already rooted, "
"the assigned value will inherit the root of the value it is assigned into."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:181
msgid ""
"Usage Example: ```c void jl_svecset(void *t JL_ROOTING_ARGUMENT, size_t i, "
"void *x JL_ROOTED_ARGUMENT) JL_NOTSAFEPOINT"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:192
#, no-wrap
msgid ""
"size_t example(jl_svec_t *svec) {\n"
"  jl_value_t *val = jl_box_long(10000);\n"
"  jl_svecset(svec, val);\n"
"  // This is valid, because the annotations imply that the\n"
"  // jl_svecset propagates the rooted-ness from `svec` to `val`\n"
"  jl_gc_safepoint();\n"
"  return jl_unbox_long(val);\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/gc-sa.md:193
#, no-wrap
msgid "`JL_GC_DISABLED`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:200
msgid ""
"This annotation implies that this function is only called with the GC "
"runtime-disabled.  Functions of this kind are most often encountered during "
"startup and in the GC code itself.  Note that this annotation is checked "
"against the runtime enable/disable calls, so clang will know if you lie. "
"This is not a good way to disable processing of a given function if the GC "
"is not actually disabled (use `ifdef __clang_analyzer__` for that if you "
"must)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:206
#, no-wrap
msgid ""
"Usage example:\n"
"```c\n"
"void jl_do_magic() JL_GC_DISABLED {\n"
"  // Wildly allocate here with no regard for roots\n"
"}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:213
#, no-wrap
msgid ""
"void example() {\n"
"  int en = jl_gc_enable(0);\n"
"  jl_do_magic();\n"
"  jl_gc_enable(en);\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/gc-sa.md:214
#, no-wrap
msgid "`JL_REQUIRE_ROOTED_SLOT`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:218
msgid ""
"This annotation requires the caller to pass in a slot that is rooted (i.e. "
"values assigned to this slot will be rooted)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:226
#, no-wrap
msgid ""
"Usage example:\n"
"```c\n"
"void jl_do_processing(jl_value_t **slot JL_REQUIRE_ROOTED_SLOT) {\n"
"  *slot = jl_box_long(1);\n"
"  // Ok, only, because the slot was annotated as rooting\n"
"  jl_gc_safepoint();\n"
"}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:234
#, no-wrap
msgid ""
"void example() {\n"
"  jl_value_t *slot = NULL;\n"
"  JL_GC_PUSH1(&slot);\n"
"  jl_do_processing(&slot);\n"
"  JL_GC_POP();\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/gc-sa.md:235
#, no-wrap
msgid "`JL_GLOBALLY_ROOTED`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:243
msgid ""
"This annotation implies that a given value is always globally rooted.  It "
"can be applied to global variable declarations, in which case it will apply "
"to the value of those variables (or values if the declaration if for an "
"array), or to functions, in which case it will apply to the return value of "
"such functions (e.g. for functions that always return some private, globally "
"rooted value)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:249
msgid ""
"Usage example: ``` extern JL_DLLEXPORT jl_datatype_t *jl_any_type "
"JL_GLOBALLY_ROOTED; jl_ast_context_t *jl_ast_ctx(fl_context_t *fl) "
"JL_GLOBALLY_ROOTED; ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/gc-sa.md:250
#, no-wrap
msgid "`JL_ALWAYS_LEAFTYPE`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:260
msgid ""
"This annotations is essentially equivalent to `JL_GLOBALLY_ROOTED`, except "
"that is should only be used if those values are globally rooted by virtue of "
"being a leaftype. The rooting of leaftypes is a bit complicated. They are "
"generally rooted through `cache` field of the corresponding `TypeName`, "
"which itself is rooted by the containing module (so they're rooted as long "
"as the containing module is ok) and we can generally assume that leaftypes "
"are rooted where they are used, but we may refine this property in the "
"future, so the separate annotation helps split out the reason for being "
"globally rooted."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:263
msgid ""
"The analyzer also automatically detects checks for leaftype-ness and will "
"not complain about missing GC roots on these paths."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:267
msgid ""
"``` JL_DLLEXPORT jl_value_t *jl_apply_array_type(jl_value_t *type, size_t "
"dim) JL_ALWAYS_LEAFTYPE; ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/gc-sa.md:268
#, no-wrap
msgid "`JL_GC_PROMISE_ROOTED`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:274
msgid ""
"This is a function-like annotation. Any value passed to this annotation will "
"be considered rooted for the scope of the current function. It is designed "
"as an escape hatch for analyzer inadequacy or complicated situations. "
"However, it should be used sparingly, in favor of improving the analyzer "
"itself."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:285
#, no-wrap
msgid ""
"```\n"
"void example() {\n"
"  jl_value_t *val = jl_alloc_something();\n"
"  if (some_condition) {\n"
"    // We happen to know for complicated external reasons\n"
"    // that val is rooted under these conditions\n"
"    JL_GC_PROMISE_ROOTED(val);\n"
"  }\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/gc-sa.md:286
#, no-wrap
msgid "Completeness of analysis"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/gc-sa.md:293
msgid ""
"The analyzer only looks at local information. In particular, e.g. in the "
"`PROPAGATES_ROOT` case above, it assumes that such memory is only modified "
"in ways it can see, not in any called functions (unless it happens to decide "
"to consider them in its analysis) and not in any concurrently running "
"threads. As such, it may miss a few problematic cases, though in practice "
"such concurrent modification is fairly rare. Improving the analyzer to "
"handle more such cases may be an interesting topic for future work."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/subarrays.md:1
#, no-wrap
msgid "SubArrays"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:5
msgid ""
"Julia's `SubArray` type is a container encoding a \"view\" of a parent "
"[`AbstractArray`](@ref).  This page documents some of the design principles "
"and implementation of `SubArray`s."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:9
msgid ""
"One of the major design goals is to ensure high performance for views of "
"both [`IndexLinear`](@ref) and [`IndexCartesian`](@ref) arrays. Furthermore, "
"views of `IndexLinear` arrays should themselves be `IndexLinear` to the "
"extent that it is possible."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/subarrays.md:10
#, no-wrap
msgid "Index replacement"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:13
msgid "Consider making 2d slices of a 3d array:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:19
#, no-wrap
msgid ""
"```@meta\n"
"DocTestSetup = :(import Random; Random.seed!(1234))\n"
"```\n"
"```jldoctest subarray\n"
"julia> A = rand(2,3,4);\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:24
#, no-wrap
msgid ""
"julia> S1 = view(A, :, 1, 2:3)\n"
"2×2 view(::Array{Float64,3}, :, 1, 2:3) with eltype Float64:\n"
" 0.200586  0.066423\n"
" 0.298614  0.956753\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:34
#, no-wrap
msgid ""
"julia> S2 = view(A, 1, :, 2:3)\n"
"3×2 view(::Array{Float64,3}, 1, :, 2:3) with eltype Float64:\n"
" 0.200586  0.066423\n"
" 0.246837  0.646691\n"
" 0.648882  0.276021\n"
"```\n"
"```@meta\n"
"DocTestSetup = nothing\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:39
msgid ""
"`view` drops \"singleton\" dimensions (ones that are specified by an `Int`), "
"so both `S1` and `S2` are two-dimensional `SubArray`s. Consequently, the "
"natural way to index these is with `S1[i,j]`.  To extract the value from the "
"parent array `A`, the natural approach is to replace `S1[i,j]` with `A[i,1,"
"(2:3)[j]]` and `S2[i,j]` with `A[1,i,(2:3)[j]]`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:42
msgid ""
"The key feature of the design of SubArrays is that this index replacement "
"can be performed without any runtime overhead."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/subarrays.md:43
#, no-wrap
msgid "SubArray design"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/subarrays.md:45
#, no-wrap
msgid "Type parameters and fields"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:48
msgid ""
"The strategy adopted is first and foremost expressed in the definition of "
"the type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:58
#, no-wrap
msgid ""
"```julia\n"
"struct SubArray{T,N,P,I,L} <: AbstractArray{T,N}\n"
"    parent::P\n"
"    indices::I\n"
"    offset1::Int       # for linear indexing and pointer, only valid when L==true\n"
"    stride1::Int       # used only for linear indexing\n"
"    ...\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:64
#, no-wrap
msgid ""
"`SubArray` has 5 type parameters.  The first two are the standard element type and dimensionality.\n"
" The next is the type of the parent `AbstractArray`.  The most heavily-used is the fourth parameter,\n"
"a `Tuple` of the types of the indices for each dimension. The final one, `L`, is only provided\n"
"as a convenience for dispatch; it's a boolean that represents whether the index types support\n"
"fast linear indexing. More on that later.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:69
msgid ""
"If in our example above `A` is a `Array{Float64, 3}`, our `S1` case above "
"would be a `SubArray{Float64,2,Array{Float64,3},Tuple{Base.Slice{Base."
"OneTo{Int64}},Int64,UnitRange{Int64}},false}`.  Note in particular the tuple "
"parameter, which stores the types of the indices used to create `S1`. "
"Likewise,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:74
#, no-wrap
msgid ""
"```jldoctest subarray\n"
"julia> S1.indices\n"
"(Base.Slice(Base.OneTo(2)), 1, 2:3)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:77
msgid ""
"Storing these values allows index replacement, and having the types encoded "
"as parameters allows one to dispatch to efficient algorithms."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/subarrays.md:78
#, no-wrap
msgid "Index translation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:84
msgid ""
"Performing index translation requires that you do different things for "
"different concrete `SubArray` types.  For example, for `S1`, one needs to "
"apply the `i,j` indices to the first and third dimensions of the parent "
"array, whereas for `S2` one needs to apply them to the second and third.  "
"The simplest approach to indexing would be to do the type-analysis at "
"runtime:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:104
#, no-wrap
msgid ""
"```julia\n"
"parentindices = Vector{Any}()\n"
"for thisindex in S.indices\n"
"    ...\n"
"    if isa(thisindex, Int)\n"
"        # Don't consume one of the input indices\n"
"        push!(parentindices, thisindex)\n"
"    elseif isa(thisindex, AbstractVector)\n"
"        # Consume an input index\n"
"        push!(parentindices, thisindex[inputindex[j]])\n"
"        j += 1\n"
"    elseif isa(thisindex, AbstractMatrix)\n"
"        # Consume two input indices\n"
"        push!(parentindices, thisindex[inputindex[j], inputindex[j+1]])\n"
"        j += 2\n"
"    elseif ...\n"
"end\n"
"S.parent[parentindices...]\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:107
msgid ""
"Unfortunately, this would be disastrous in terms of performance: each "
"element access would allocate memory, and involves the running of a lot of "
"poorly-typed code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:112
msgid ""
"The better approach is to dispatch to specific methods to handle each type "
"of stored index. That's what `reindex` does: it dispatches on the type of "
"the first stored index and consumes the appropriate number of input indices, "
"and then it recurses on the remaining indices. In the case of `S1`, this "
"expands to"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:116
msgid ""
"```julia Base.reindex(S1, S1.indices, (i, j)) == (i, S1.indices[2], S1."
"indices[3][j])  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:118
msgid ""
"for any pair of indices `(i,j)` (except [`CartesianIndex`](@ref)s and arrays "
"thereof, see below)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:121
msgid ""
"This is the core of a `SubArray`; indexing methods depend upon `reindex` to "
"do this index translation.  Sometimes, though, we can avoid the indirection "
"and make it even faster."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:128
msgid ""
"Linear indexing can be implemented efficiently when the entire array has a "
"single stride that separates successive elements, starting from some offset. "
"This means that we can pre-compute these values and represent linear "
"indexing simply as an addition and multiplication, avoiding the indirection "
"of `reindex` and (more importantly) the slow computation of the cartesian "
"coordinates entirely."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:132
msgid ""
"For `SubArray` types, the availability of efficient linear indexing is based "
"purely on the types of the indices, and does not depend on values like the "
"size of the parent array. You can ask whether a given set of indices "
"supports fast linear indexing with the internal `Base.viewindexing` function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:136
#, no-wrap
msgid ""
"```jldoctest subarray\n"
"julia> Base.viewindexing(S1.indices)\n"
"IndexCartesian()\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:140
#, no-wrap
msgid ""
"julia> Base.viewindexing(S2.indices)\n"
"IndexLinear()\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:144
msgid ""
"This is computed during construction of the `SubArray` and stored in the `L` "
"type parameter as a boolean that encodes fast linear indexing support. While "
"not strictly necessary, it means that we can define dispatch directly on "
"`SubArray{T,N,A,I,true}` without any intermediaries."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:147
msgid ""
"Since this computation doesn't depend on runtime values, it can miss some "
"cases in which the stride happens to be uniform:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:155
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> A = reshape(1:4*2, 4, 2)\n"
"4×2 reshape(::UnitRange{Int64}, 4, 2) with eltype Int64:\n"
" 1  5\n"
" 2  6\n"
" 3  7\n"
" 4  8\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:162
#, no-wrap
msgid ""
"julia> diff(A[2:2:4,:][:])\n"
"3-element Array{Int64,1}:\n"
" 2\n"
" 2\n"
" 2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:166
msgid ""
"A view constructed as `view(A, 2:2:4, :)` happens to have uniform stride, "
"and therefore linear indexing indeed could be performed efficiently.  "
"However, success in this case depends on the size of the array: if the first "
"dimension instead were odd,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:175
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> A = reshape(1:5*2, 5, 2)\n"
"5×2 reshape(::UnitRange{Int64}, 5, 2) with eltype Int64:\n"
" 1   6\n"
" 2   7\n"
" 3   8\n"
" 4   9\n"
" 5  10\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:182
#, no-wrap
msgid ""
"julia> diff(A[2:2:4,:][:])\n"
"3-element Array{Int64,1}:\n"
" 2\n"
" 3\n"
" 2\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:186
#, no-wrap
msgid ""
"then `A[2:2:4,:]` does not have uniform stride, so we cannot guarantee efficient linear indexing.\n"
" Since we have to base this decision based purely on types encoded in the parameters of the `SubArray`,\n"
"`S = view(A, 2:2:4, :)` cannot implement efficient linear indexing.\n"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/subarrays.md:187
#, no-wrap
msgid "A few details"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/subarrays.md:198
msgid ""
"Note that the `Base.reindex` function is agnostic to the types of the input "
"indices; it simply determines how and where the stored indices should be "
"reindexed. It not only supports integer indices, but it supports non-scalar "
"indexing, too. This means that views of views don't need two levels of "
"indirection; they can simply re-compute the indices into the original parent "
"array!"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/subarrays.md:198
msgid ""
"Hopefully by now it's fairly clear that supporting slices means that the "
"dimensionality, given by the parameter `N`, is not necessarily equal to the "
"dimensionality of the parent array or the length of the `indices` tuple.  "
"Neither do user-supplied indices necessarily line up with entries in the "
"`indices` tuple (e.g., the second user-supplied index might correspond to "
"the third dimension of the parent array, and the third element in the "
"`indices` tuple)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:201
#, no-wrap
msgid ""
"    What might be less obvious is that the dimensionality of the stored parent array must be equal\n"
"    to the number of effective indices in the `indices` tuple. Some examples:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:207
#, no-wrap
msgid ""
"    ```julia\n"
"    A = reshape(1:35, 5, 7) # A 2d parent Array\n"
"    S = view(A, 2:7)         # A 1d view created by linear indexing\n"
"    S = view(A, :, :, 1:1)   # Appending extra indices is supported\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:213
#, no-wrap
msgid ""
"    Naively, you'd think you could just set `S.parent = A` and `S.indices = (:,:,1:1)`, but supporting\n"
"    this dramatically complicates the reindexing process, especially for views of views. Not only\n"
"    do you need to dispatch on the types of the stored indices, but you need to examine whether a\n"
"    given index is the final one and \"merge\" any remaining stored indices together. This is not an\n"
"    easy task, and even worse: it's slow since it implicitly depends upon linear indexing.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:225
#, no-wrap
msgid ""
"    Fortunately, this is precisely the computation that `ReshapedArray` performs, and it does so linearly\n"
"    if possible. Consequently, `view` ensures that the parent array is the appropriate dimensionality\n"
"    for the given indices by reshaping it if needed. The inner `SubArray` constructor ensures that\n"
"    this invariant is satisfied.\n"
"  * [`CartesianIndex`](@ref) and arrays thereof throw a nasty wrench into the `reindex` scheme. Recall that\n"
"    `reindex` simply dispatches on the type of the stored indices in order to determine how many passed\n"
"    indices should be used and where they should go. But with `CartesianIndex`, there's no longer\n"
"    a one-to-one correspondence between the number of passed arguments and the number of dimensions\n"
"    that they index into. If we return to the above example of `Base.reindex(S1, S1.indices, (i, j))`,\n"
"    you can see that the expansion is incorrect for `i, j = CartesianIndex(), CartesianIndex(2,1)`.\n"
"    It should *skip* the `CartesianIndex()` entirely and return:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:229
#, no-wrap
msgid ""
"    ```julia\n"
"    (CartesianIndex(2,1)[1], S1.indices[2], S1.indices[3][CartesianIndex(2,1)[2]])\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:231
#, no-wrap
msgid "    Instead, though, we get:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:235
#, no-wrap
msgid ""
"    ```julia\n"
"    (CartesianIndex(), S1.indices[2], S1.indices[3][CartesianIndex(2,1)])\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/subarrays.md:243
#, no-wrap
msgid ""
"    Doing this correctly would require *combined* dispatch on both the stored and passed indices across\n"
"    all combinations of dimensionalities in an intractable manner. As such, `reindex` must never be\n"
"    called with `CartesianIndex` indices. Fortunately, the scalar case is easily handled by first\n"
"    flattening the `CartesianIndex` arguments to plain integers. Arrays of `CartesianIndex`, however,\n"
"    cannot be split apart into orthogonal pieces so easily. Before attempting to use `reindex`, `view`\n"
"    must ensure that there are no arrays of `CartesianIndex` in the argument list. If there are, it\n"
"    can simply \"punt\" by avoiding the `reindex` calculation entirely, constructing a nested `SubArray`\n"
"    with two levels of indirection instead.\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/ssair.md:1
#, no-wrap
msgid "Julia SSA-form IR"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/ssair.md:3
#, no-wrap
msgid "Background"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:14
msgid ""
"Beginning in Julia 0.7, parts of the compiler use a new [SSA-form](https://"
"en.wikipedia.org/wiki/Static_single_assignment_form)  intermediate "
"representation. Historically, the compiler used to directly generate LLVM "
"IR, from a lowered form of the Julia AST. This form had most syntactic "
"abstractions removed, but still looked a lot like an abstract syntax tree.  "
"Over time, in order to facilitate optimizations, SSA values were introduced "
"to this IR and the IR was linearized (i.e. a form where function arguments "
"may only be SSA values or constants). However, non-ssa values (slots) "
"remained in the IR due to the lack of Phi nodes in the IR (necessary for "
"back-edges and re-merging of conditional control flow), negating much of the "
"usefulfulness of the SSA form representation to perform middle end "
"optimizations. Some heroic effort was put into making these optimizations "
"work without a complete SSA form representation, but the lack of such a "
"representation ultimately proved prohibitive."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/ssair.md:15
#, no-wrap
msgid "New IR nodes"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:19
msgid ""
"With the new IR representation, the compiler learned to handle four new IR "
"nodes, Phi nodes, Pi nodes as well as PhiC nodes and Upsilon nodes (the "
"latter two are only used for exception handling)."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ssair.md:20
#, no-wrap
msgid "Phi nodes and Pi nodes"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:39
#, no-wrap
msgid ""
"Phi nodes are part of generic SSA abstraction (see the link above if you're not familiar with\n"
"the concept). In the Julia IR, these nodes are represented as:\n"
"```\n"
"struct PhiNode\n"
"    edges::Vector{Int}\n"
"    values::Vector{Any}\n"
"end\n"
"```\n"
"where we ensure that both vectors always have the same length. In the canonical representation (the one\n"
"handles by codegen and the interpreter), the edge values indicate come-from statement numbers (i.e.\n"
"if edge has an entry of `15`, there must be a `goto`, `gotoifnot` or implicit fall through from\n"
"statement `15` that targets this phi node). Values are either SSA values or constants. It is also\n"
"possible for a value to be unassigned if the variable was not defined on this path. However, undefinedness\n"
"checks get explicitly inserted and represented as booleans after middle end optimizations, so code generators\n"
"may assume that any use of a phi node will have an assigned value in the corresponding slot. It is also legal\n"
"for the mapping to be incomplete, i.e. for a phi node to have missing incoming edges. In that case, it must\n"
"be dynamically guaranteed that the corresponding value will not be used.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:44
msgid ""
"PiNodes encode statically proven information that may be implicitly assumed "
"in basic blocks dominated by a given pi node. They are conceptually "
"equivalent to the technique introduced in the paper \"ABCD: Eliminating "
"Array Bounds Checks on Demand\" or the predicate info nodes in LLVM. To see "
"how they work, consider, e.g."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:53
#, no-wrap
msgid ""
"```julia\n"
"%x::Union{Int, Float64} # %x is some Union{Int, Float64} typed ssa value\n"
"if isa(x, Int)\n"
"    # use x\n"
"else\n"
"    # use x\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:55
msgid "we can perform predicate insertion and turn this into:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:66
#, no-wrap
msgid ""
"```julia\n"
"%x::Union{Int, Float64} # %x is some Union{Int, Float64} typed ssa value\n"
"if isa(x, Int)\n"
"    %x_int = PiNode(x, Int)\n"
"    # use %x_int\n"
"else\n"
"    %x_float = PiNode(x, Float64)\n"
"    # use %x_float\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:72
msgid ""
"Pi nodes are generally ignored in the interpreter, since they don't have any "
"effect on the values, but they may sometimes lead to code generation in the "
"compiler (e.g. to change from an implicitly union split representation to a "
"plain unboxed representation). The main usefulness of PiNodes stems from the "
"fact that path conditions of the values can be accumulated simply by def-use "
"chain walking that is generally done for most optimizations that care about "
"these conditions anyway."
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/ssair.md:73
#, no-wrap
msgid "PhiC nodes and Upsilon nodes"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:79
msgid ""
"Exception handling complicates the SSA story moderately, because exception "
"handling introduces additional control flow edges into the IR across which "
"values must be tracked.  One approach to do so, which is followed by LLVM is "
"to make calls which may throw exceptions into basic block terminators and "
"add an explicit control flow edge to the catch handler:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:82
msgid ""
"``` invoke @function_that_may_throw() to label %regular unwind to %catch"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:84
msgid "regular:"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/ssair.md:84
#, no-wrap
msgid "Control flow continues here"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:87
msgid "catch:"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/ssair.md:87
#, no-wrap
msgid "Exceptions go here"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:110
msgid ""
"However, this is problematic in a language like julia where at the start of "
"the optimization pipeline, we do not now which calls throw. We would have to "
"conservatively assume that every call (which in julia is every statement) "
"throws. This would have several negative effects.  On the one hand, it would "
"essentially recuce the scope of every basic block to a single call, "
"defeating the purpose of having operations be performed at the basic block "
"level. On the other hand, every catch basic block would have `n*m` phi node "
"arguments (`n`, the number of statements in the critical region, `m` the "
"number of live values through the catch block). To work around this, we use "
"a combination of `Upsilon` and `PhiC` (the C standing for `catch`, written "
"`φᶜ` in the IR pretty printer, because unicode subscript c is not available) "
"nodes. There is several ways to think of these nodes, but perhaps the "
"easiest is to think of each `PhiC` as a load from a unique store-many, read-"
"once slot, with `Upsilon` being the corresponding store operation. The "
"`PhiC` has an operand list of all the upsilon nodes that store to its "
"implicit slot. The `Upsilon` nodes however, do not record which `PhiC` node "
"they store to. This is done for more natural integration with the rest of "
"the SSA IR. E.g.  if there are no more uses of a `PhiC` node, it is safe to "
"delete is and the same is true of an `Upsilon` node. In most IR passes, "
"`PhiC` nodes can be treated similar to `Phi` nodes. One can follow use-def "
"chains through them, and they can be lifted to new `PhiC` nodes and new "
"Upsilon nodes (in the same places as the original `Upsilon` nodes). The "
"result of this scheme is that the number of Upsilon nodes (and `PhiC` "
"arguments) is proportional to the number of assigned values to a particular "
"variable (before SSA conversion), rather than the number of statements in "
"the critical region."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:112
msgid "To see this scheme in action, consider the function"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:124
#, no-wrap
msgid ""
"```julia\n"
"function foo()\n"
"    x = 1\n"
"    try\n"
"        y = 2\n"
"        error()\n"
"    catch\n"
"    end\n"
"    (x, y)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:126
msgid "The corresponding IR (with irrelevant types stripped) is:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:147
#, no-wrap
msgid ""
"```\n"
"ir = Code\n"
"1 ─       nothing\n"
"2 ─       $(Expr(:enter, 5))\n"
"3 ─ %3  = ϒ (#undef)\n"
"│   %4  = ϒ (1)\n"
"│   %5  = ϒ (2)\n"
"│         Main.bar()\n"
"│   %7  = ϒ (3)\n"
"└──       $(Expr(:leave, 1))\n"
"4 ─       goto 6\n"
"5 ─ %10 = φᶜ (%3, %5)\n"
"│   %11 = φᶜ (%4, %7)\n"
"└──       $(Expr(:leave, 1))\n"
"6 ┄ %13 = φ (4 => 2, 5 => %10)::NotInferenceDontLookHere.MaybeUndef(NotInferenceDontLookHere.Const(2, false))\n"
"│   %14 = φ (4 => 3, 5 => %11)::Int64\n"
"│         $(Expr(:undefcheck, :y, Core.SSAValue(13)))\n"
"│   %16 = Core.tuple(%14, %13)\n"
"└──       return %17\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:153
msgid ""
"Note in particular that every value live into the critical region gets an "
"upsilon node at the top of the critical region. This is because catch blocks "
"are considered to have an invisible control flow edge from outside the "
"function. As a result, no SSA value dominates the catch blocks, and all "
"incoming values have to come through a `φᶜ` node."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/ssair.md:154
#, no-wrap
msgid "Main SSA data structure"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:166
msgid ""
"The main `SSAIR` data structure is worthy of discussion. It draws "
"inspiration from LLVM and Webkit's B3 IR.  The core of the data structure is "
"a flat vector of statements. Each statement is implicitly assigned an SSA "
"values based on its position in the vector (i.e. the result of the statement "
"at idx 1 can be accessed using `SSAValue(1)` etc). For each SSA value, we "
"additionally maintain its type. Since, SSA values are definitionally "
"assigned only once, this type is also the result type of the expression at "
"the corresponding index. However, while this representation is rather "
"efficient (since the assignments don't need to be explicitly)  encoded, if "
"of course carries the drawback that order is semantically significant, so "
"reorderings and insertions change statement numbers. Additionally, we do not "
"keep use lists (i.e. it is impossible to walk from a def to all its uses "
"without explicitly computing this map - def lists however are trivial since "
"you can lookup the corresponding statement from the index), so the LLVM-"
"style RAUW (replace-all-uses-with) operation is unavailable."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:168
msgid "Instead, we do the following:"
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/ssair.md:178
msgid ""
"We keep a separate buffer of nodes to insert (including the position to "
"insert them at, the type of the corresponding value and the node itself). "
"These nodes are numbered by their occurrence in the insertion buffer, "
"allowing their values to be immediately used elesewhere in the IR (i.e. if "
"there is 12 statements in the original statement list, the first new "
"statement will be accessible as `SSAValue(13)`)"
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/ssair.md:178
msgid ""
"RAUW style operations are performed by setting the corresponding statement "
"index to the replacement value."
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/ssair.md:178
msgid ""
"Statements are erased by setting the corresponding statement to `nothing` "
"(this is essentially just a special-case convention of the above"
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/ssair.md:178
msgid ""
"if there are any uses of the statement being erased they will be set to "
"`nothing`)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:185
msgid ""
"There is a `compact!` function that compacts the above data structure by "
"performing the insertion of nodes in the appropriate place, trivial copy "
"propagation and renaming of uses to any changed SSA values. However, the "
"clever part of this scheme is that this compaction can be done lazily as "
"part of the subsequent pass. Most optimization passes need to walk over the "
"entire list of statements, performing analysis or modifications along the "
"way. We provide an `IncrementalCompact` iterator that can be used to iterate "
"over the statement list. It will perform any necessary compaction, and "
"return the new index of the node, as well as the node itself. It is legal at "
"this point to walk def-use chains, as well as make any modifications or "
"deletions to the IR (insertions are disallowed however)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/ssair.md:188
msgid ""
"The idea behind this arrangement is that, since the optimization passes need "
"to touch the corresponding memory anyway, and incur the corresponding memory "
"access penalty, performing the extra housekeeping should have comparatively "
"little overhead (and save the overhead of maintaining these data structures "
"during IR modification)."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/compiler.md:1
#, no-wrap
msgid "High-level Overview of the Native-Code Generation Process"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/compiler.md:3
#, no-wrap
msgid "Representation of Pointers"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:8
msgid ""
"When emitting code to an object file, pointers will be emitted as "
"relocations.  The deserialization code will ensure any object that pointed "
"to one of these constants gets recreated and contains the right runtime "
"pointer."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:10
msgid "Otherwise, they will be emitted as literal constants."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:14
msgid ""
"To emit one of these objects, call `literal_pointer_val`.  It'll handle "
"tracking the Julia value and the LLVM global, ensuring they are valid both "
"for the current runtime and after deserialization."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:18
msgid ""
"When emitted into the object file, these globals are stored as references in "
"a large `gvals` table. This allows the deserializer to reference them by "
"index, and implement a custom manual mechanism similar to a Global Offset "
"Table (GOT) to restore them."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:22
msgid ""
"Function pointers are handled similarly.  They are stored as values in a "
"large `fvals` table.  Like globals, this allows the deserializer to "
"reference them by index."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:25
msgid ""
"Note that `extern` functions are handled separately, with names, via the "
"usual symbol resolution mechanism in the linker."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:28
msgid ""
"Note too that `ccall` functions are also handled separately, via a manual "
"GOT and Procedure Linkage Table (PLT)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/compiler.md:30
#, no-wrap
msgid "Representation of Intermediate Values"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:35
msgid ""
"Values are passed around in a `jl_cgval_t` struct.  This represents an R-"
"value, and includes enough information to determine how to assign or pass it "
"somewhere."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:38
msgid ""
"They are created via one of the helper constructors, usually: "
"`mark_julia_type` (for immediate values) and `mark_julia_slot` (for pointers "
"to values)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:44
msgid ""
"The function `convert_julia_type` can transform between any two types.  It "
"returns an R-value with `cgval.typ` set to `typ`.  It'll cast the object to "
"the requested representation, making heap boxes, allocating stack copies, "
"and computing tagged unions as needed to change the representation."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:47
msgid ""
"By contrast `update_julia_type` will change `cgval.typ` to `typ`, only if it "
"can be done at zero-cost (i.e. without emitting any code)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/compiler.md:49
#, no-wrap
msgid "Union representation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:52
msgid ""
"Inferred union types may be stack allocated via a tagged type representation."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:64
msgid ""
"The primitive routines that need to be able to handle tagged unions are: - "
"mark-type - load-local - store-local - isa - is - emit_typeof - emit_sizeof "
"- boxed - unbox - specialized cc-ret"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:67
msgid ""
"Everything else should be possible to handle in inference by using these "
"primitives to implement union-splitting."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:77
#, no-wrap
msgid ""
"The representation of the tagged-union is as a pair\n"
"of `< void* union, byte selector >`.\n"
"The selector is fixed-size as `byte & 0x7f`,\n"
"and will union-tag the first 126 isbits.\n"
"It records the one-based depth-first count into the type-union of the\n"
"isbits objects inside. An index of zero indicates that the `union*` is\n"
"actually a tagged heap-allocated `jl_value_t*`,\n"
"and needs to be treated as normal for a boxed object rather than as a\n"
"tagged union.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:82
msgid ""
"The high bit of the selector (`byte & 0x80`) can be tested to determine if "
"the `void*` is actually a heap-allocated (`jl_value_t*`) box, thus avoiding "
"the cost of re-allocating a box, while maintaining the ability to "
"efficiently handle union-splitting based on the low bits."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:86
msgid ""
"It is guaranteed that `byte & 0x7f` is an exact test for the type, if the "
"value can be represented by a tag – it will never be marked `byte = 0x80`.  "
"It is not necessary to also test the type-tag when testing `isa`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:93
msgid ""
"The `union*` memory region may be allocated at *any* size.  The only "
"constraint is that it is big enough to contain the data currently specified "
"by `selector`.  It might not be big enough to contain the union of all types "
"that could be stored there according to the associated Union type field.  "
"Use appropriate care when copying."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/compiler.md:95
#, no-wrap
msgid "Specialized Calling Convention Signature Representation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:98
msgid ""
"A `jl_returninfo_t` object describes the calling convention details of any "
"callable."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:102
msgid ""
"If any of the arguments or return type of a method can be represented "
"unboxed, and the method is not varargs, it'll be given an optimized calling "
"convention signature based on its `specTypes` and `rettype` fields."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:104
msgid "The general principles are that:"
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/compiler.md:110
msgid "Primitive types get passed in int/float registers."
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/compiler.md:110
msgid "Tuples of VecElement types get passed in vector registers."
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/compiler.md:110
msgid "Structs get passed on the stack."
msgstr ""

#. type: Bullet: '- '
#: ext/julia/doc/src/devdocs/compiler.md:110
msgid ""
"Return values are handle similarly to arguments, with a size-cutoff at which "
"they will instead be returned via a hidden sret argument."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:112
msgid ""
"The total logic for this is implemented by `get_specsig_function` and "
"`deserves_sret`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/compiler.md:115
msgid ""
"Additionally, if the return type is a union, it may be returned as a pair of "
"values (a pointer and a tag).  If the union values can be stack-allocated, "
"then sufficient space to store them will also be passed as a hidden first "
"argument.  It is up to the callee whether the returned pointer will point to "
"this space, a boxed object, or even other constant memory."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/types.md:1
#, no-wrap
msgid "More about types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:5
msgid ""
"If you've used Julia for a while, you understand the fundamental role that "
"types play.  Here we try to get under the hood, focusing particularly on "
"[Parametric Types](@ref)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/types.md:6
#, no-wrap
msgid "Types and sets (and `Any` and `Union{}`/`Bottom`)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:13
msgid ""
"It's perhaps easiest to conceive of Julia's type system in terms of sets. "
"While programs manipulate individual values, a type refers to a set of "
"values. This is not the same thing as a collection; for example a `Set` of "
"values is itself a single `Set` value.  Rather, a type describes a set of "
"*possible* values, expressing uncertainty about which value we have."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:16
msgid ""
"A *concrete* type `T` describes the set of values whose direct tag, as "
"returned by the `typeof` function, is `T`. An *abstract* type describes some "
"possibly-larger set of values."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:21
msgid ""
"`Any` describes the entire universe of possible values. [`Integer`](@ref) is "
"a subset of `Any` that includes `Int`, [`Int8`](@ref), and other concrete "
"types.  Internally, Julia also makes heavy use of another type known as "
"`Bottom`, which can also be written as `Union{}`. This corresponds to the "
"empty set."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:25
#, no-wrap
msgid ""
"Julia's types support the standard operations of set theory: you can ask whether `T1` is a \"subset\"\n"
"(subtype) of `T2` with `T1 <: T2`. Likewise, you intersect two types using `typeintersect`, take\n"
"their union with `Union`, and compute a type that contains their union with `typejoin`:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:29
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typeintersect(Int, Float64)\n"
"Union{}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:32
#, no-wrap
msgid ""
"julia> Union{Int, Float64}\n"
"Union{Float64, Int64}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:35
#, no-wrap
msgid ""
"julia> typejoin(Int, Float64)\n"
"Real\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:38
#, no-wrap
msgid ""
"julia> typeintersect(Signed, Union{UInt8, Int8})\n"
"Int8\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:41
#, no-wrap
msgid ""
"julia> Union{Signed, Union{UInt8, Int8}}\n"
"Union{UInt8, Signed}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:44
#, no-wrap
msgid ""
"julia> typejoin(Signed, Union{UInt8, Int8})\n"
"Integer\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:47
#, no-wrap
msgid ""
"julia> typeintersect(Tuple{Integer,Float64}, Tuple{Int,Real})\n"
"Tuple{Int64,Float64}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:50
#, no-wrap
msgid ""
"julia> Union{Tuple{Integer,Float64}, Tuple{Int,Real}}\n"
"Union{Tuple{Int64,Real}, Tuple{Integer,Float64}}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:54
#, no-wrap
msgid ""
"julia> typejoin(Tuple{Integer,Float64}, Tuple{Int,Real})\n"
"Tuple{Integer,Real}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:62
#, no-wrap
msgid ""
"While these operations may seem abstract, they lie at the heart of Julia.  For example, method\n"
"dispatch is implemented by stepping through the items in a method list until reaching one for which\n"
"the type of the argument tuple is a subtype of the method signature.\n"
"For this algorithm to work, it's important that methods be sorted by their specificity, and that the\n"
"search begins with the most specific methods. Consequently, Julia also implements a partial order on\n"
"types; this is achieved by functionality that is similar to `<:`, but with differences that will\n"
"be discussed below.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/types.md:63
#, no-wrap
msgid "UnionAll types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:68
msgid ""
"Julia's type system can also express an *iterated union* of types: a union "
"of types over all values of some variable. This is needed to describe "
"parametric types where the values of some parameters are not known."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:72
msgid ""
"For example, :obj:`Array` has two parameters as in `Array{Int,2}`. If we did "
"not know the element type, we could write `Array{T,2} where T`, which is the "
"union of `Array{T,2}` for all values of `T`: `Union{Array{Int8,2}, "
"Array{Int16,2}, ...}`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:75
msgid ""
"Such a type is represented by a `UnionAll` object, which contains a variable "
"(`T` in this example, of type `TypeVar`), and a wrapped type (`Array{T,2}` "
"in this example)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:77
msgid "Consider the following methods:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:84
#, no-wrap
msgid ""
"```julia\n"
"f1(A::Array) = 1\n"
"f2(A::Array{Int}) = 2\n"
"f3(A::Array{T}) where {T<:Any} = 3\n"
"f4(A::Array{Any}) = 4\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:87
msgid ""
"The signature of `f3` is a `UnionAll` type wrapping a tuple type.  All but "
"`f4` can be called with `a = [1,2]`; all but `f2` can be called with `b = "
"Any[1,2]`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:89
msgid "Let's look at these types a little more closely:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:104
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> dump(Array)\n"
"UnionAll\n"
"  var: TypeVar\n"
"    name: Symbol T\n"
"    lb: Core.TypeofBottom Union{}\n"
"    ub: Any\n"
"  body: UnionAll\n"
"    var: TypeVar\n"
"      name: Symbol N\n"
"      lb: Core.TypeofBottom Union{}\n"
"      ub: Any\n"
"    body: Array{T,N} <: DenseArray{T,N}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:110
msgid ""
"This indicates that `Array` actually names a `UnionAll` type. There is one "
"`UnionAll` type for each parameter, nested. The syntax `Array{Int,2}` is "
"equivalent to `Array{Int}{2}`; internally each `UnionAll` is instantiated "
"with a particular variable value, one at a time, outermost-first. This gives "
"a natural meaning to the omission of trailing type parameters; `Array{Int}` "
"gives a type equivalent to `Array{Int,N} where N`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:116
msgid ""
"A `TypeVar` is not itself a type, but rather should be considered part of "
"the structure of a `UnionAll` type. Type variables have lower and upper "
"bounds on their values (in the fields `lb` and `ub`). The symbol `name` is "
"purely cosmetic. Internally, `TypeVar`s are compared by address, so they are "
"defined as mutable types to ensure that \"different\" type variables can be "
"distinguished. However, by convention they should not be mutated."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:118
msgid "One can construct `TypeVar`s manually:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:123
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> TypeVar(:V, Signed, Real)\n"
"Signed<:V<:Real\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:126
msgid ""
"There are convenience versions that allow you to omit any of these arguments "
"except the `name` symbol."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:128
#, no-wrap
msgid "The syntax `Array{T} where T<:Integer` is lowered to\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:134
#, no-wrap
msgid ""
"```julia\n"
"let T = TypeVar(:T,Integer)\n"
"    UnionAll(T, Array{T})\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:136
msgid ""
"so it is seldom necessary to construct a `TypeVar` manually (indeed, this is "
"to be avoided)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/types.md:137
#, no-wrap
msgid "Free variables"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:143
#, no-wrap
msgid ""
"The concept of a *free* type variable is extremely important in the type system. We say that a\n"
"variable `V` is free in type `T` if `T` does not contain the `UnionAll` that introduces variable\n"
"`V`. For example, the type `Array{Array{V} where V<:Integer}` has no free variables, but the\n"
"`Array{V}` part inside of it does have a free variable, `V`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:150
msgid ""
"A type with free variables is, in some sense, not really a type at all. "
"Consider the type `Array{Array{T}} where T`, which refers to all homogeneous "
"arrays of arrays.  The inner type `Array{T}`, seen by itself, might seem to "
"refer to any kind of array.  However, every element of the outer array must "
"have the *same* array type, so `Array{T}` cannot refer to just any old "
"array. One could say that `Array{T}` effectively \"occurs\" multiple times, "
"and `T` must have the same value each \"time\"."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:153
msgid ""
"For this reason, the function `jl_has_free_typevars` in the C API is very "
"important. Types for which it returns true will not give meaningful answers "
"in subtyping and other type functions."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/types.md:154
#, no-wrap
msgid "TypeNames"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:157
msgid ""
"The following two [`Array`](@ref) types are functionally equivalent, yet "
"print differently:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:161
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> TV, NV = TypeVar(:T), TypeVar(:N)\n"
"(T, N)\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:164
#, no-wrap
msgid ""
"julia> Array\n"
"Array\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:168
#, no-wrap
msgid ""
"julia> Array{TV,NV}\n"
"Array{T,N}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:171
msgid ""
"These can be distinguished by examining the `name` field of the type, which "
"is an object of type `TypeName`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:191
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> dump(Array{Int,1}.name)\n"
"TypeName\n"
"  name: Symbol Array\n"
"  module: Module Core\n"
"  names: empty SimpleVector\n"
"  wrapper: UnionAll\n"
"    var: TypeVar\n"
"      name: Symbol T\n"
"      lb: Core.TypeofBottom Union{}\n"
"      ub: Any\n"
"    body: UnionAll\n"
"      var: TypeVar\n"
"        name: Symbol N\n"
"        lb: Core.TypeofBottom Union{}\n"
"        ub: Any\n"
"      body: Array{T,N} <: DenseArray{T,N}\n"
"  cache: SimpleVector\n"
"    ...\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:194
#, no-wrap
msgid ""
"  linearcache: SimpleVector\n"
"    ...\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:206
#, no-wrap
msgid ""
"  hash: Int64 -7900426068641098781\n"
"  mt: MethodTable\n"
"    name: Symbol Array\n"
"    defs: Nothing nothing\n"
"    cache: Nothing nothing\n"
"    max_args: Int64 0\n"
"    kwsorter: #undef\n"
"    module: Module Core\n"
"    : Int64 0\n"
"    : Int64 0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:209
msgid ""
"In this case, the relevant field is `wrapper`, which holds a reference to "
"the top-level type used to make new `Array` types."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:213
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> pointer_from_objref(Array)\n"
"Ptr{Cvoid} @0x00007fcc7de64850\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:216
#, no-wrap
msgid ""
"julia> pointer_from_objref(Array.body.body.name.wrapper)\n"
"Ptr{Cvoid} @0x00007fcc7de64850\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:219
#, no-wrap
msgid ""
"julia> pointer_from_objref(Array{TV,NV})\n"
"Ptr{Cvoid} @0x00007fcc80c4d930\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:223
#, no-wrap
msgid ""
"julia> pointer_from_objref(Array{TV,NV}.name.wrapper)\n"
"Ptr{Cvoid} @0x00007fcc7de64850\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:226
msgid ""
"The `wrapper` field of [`Array`](@ref) points to itself, but for `Array{TV,"
"NV}` it points back to the original definition of the type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:230
msgid ""
"What about the other fields? `hash` assigns an integer to each type.  To "
"examine the `cache` field, it's helpful to pick a type that is less heavily "
"used than Array. Let's first create our own type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:233
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> struct MyType{T,N} end\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:236
#, no-wrap
msgid ""
"julia> MyType{Int,2}\n"
"MyType{Int64,2}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:239
#, no-wrap
msgid ""
"julia> MyType{Float32, 5}\n"
"MyType{Float32,5}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:243
#, no-wrap
msgid ""
"julia> MyType.body.body.name.cache\n"
"svec(MyType{Int64,2}, MyType{Float32,5}, #undef, #undef, #undef, #undef, #undef, #undef)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:247
msgid ""
"(The cache is pre-allocated to have length 8, but only the first two entries "
"are populated.) Consequently, when you instantiate a parametric type, each "
"concrete type gets saved in a type cache.  However, instances containing "
"free type variables are not cached."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/types.md:248
#, no-wrap
msgid "Tuple types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:252
msgid ""
"Tuple types constitute an interesting special case.  For dispatch to work on "
"declarations like `x::Tuple`, the type has to be able to accommodate any "
"tuple.  Let's check the parameters:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:256
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Tuple\n"
"Tuple\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:260
#, no-wrap
msgid ""
"julia> Tuple.parameters\n"
"svec(Vararg{Any,N} where N)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:263
msgid ""
"Unlike other types, tuple types are covariant in their parameters, so this "
"definition permits `Tuple` to match any type of tuple:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:267
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typeintersect(Tuple, Tuple{Int,Float64})\n"
"Tuple{Int64,Float64}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:271
#, no-wrap
msgid ""
"julia> typeintersect(Tuple{Vararg{Any}}, Tuple{Int,Float64})\n"
"Tuple{Int64,Float64}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:274
msgid ""
"However, if a variadic (`Vararg`) tuple type has free variables it can "
"describe different kinds of tuples:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:278
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> typeintersect(Tuple{Vararg{T} where T}, Tuple{Int,Float64})\n"
"Tuple{Int64,Float64}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:282
#, no-wrap
msgid ""
"julia> typeintersect(Tuple{Vararg{T}} where T, Tuple{Int,Float64})\n"
"Union{}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:286
msgid ""
"Notice that when `T` is free with respect to the `Tuple` type (i.e. its "
"binding `UnionAll` type is outside the `Tuple` type), only one `T` value "
"must work over the whole type.  Therefore a heterogeneous tuple does not "
"match."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:288
msgid "Finally, it's worth noting that `Tuple{}` is distinct:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:292
#, no-wrap
msgid ""
"```jldoctest\n"
"julia> Tuple{}\n"
"Tuple{}\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:295
#, no-wrap
msgid ""
"julia> Tuple{}.parameters\n"
"svec()\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:299
#, no-wrap
msgid ""
"julia> typeintersect(Tuple{}, Tuple{Int})\n"
"Union{}\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:301
msgid "What is the \"primary\" tuple-type?"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:305
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> pointer_from_objref(Tuple)\n"
"Ptr{Cvoid} @0x00007f5998a04370\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:308
#, no-wrap
msgid ""
"julia> pointer_from_objref(Tuple{})\n"
"Ptr{Cvoid} @0x00007f5998a570d0\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:311
#, no-wrap
msgid ""
"julia> pointer_from_objref(Tuple.name.wrapper)\n"
"Ptr{Cvoid} @0x00007f5998a04370\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:315
#, no-wrap
msgid ""
"julia> pointer_from_objref(Tuple{}.name.wrapper)\n"
"Ptr{Cvoid} @0x00007f5998a04370\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:317
msgid "so `Tuple == Tuple{Vararg{Any}}` is indeed the primary type."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/types.md:318
#, no-wrap
msgid "Diagonal types"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:322
msgid ""
"Consider the type `Tuple{T,T} where T`.  A method with this signature would "
"look like:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:326
msgid "```julia f(x::T, y::T) where {T} = ...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:330
msgid ""
"According to the usual interpretation of a `UnionAll` type, this `T` ranges "
"over all types, including `Any`, so this type should be equivalent to "
"`Tuple{Any,Any}`.  However, this interpretation causes some practical "
"problems."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:337
msgid ""
"First, a value of `T` needs to be available inside the method definition.  "
"For a call like `f(1, 1.0)`, it's not clear what `T` should be.  It could be "
"`Union{Int,Float64}`, or perhaps [`Real`](@ref).  Intuitively, we expect the "
"declaration `x::T` to mean `T === typeof(x)`.  To make sure that invariant "
"holds, we need `typeof(x) === typeof(y) === T` in this method.  That implies "
"the method should only be called for arguments of the exact same type."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:347
msgid ""
"It turns out that being able to dispatch on whether two values have the same "
"type is very useful (this is used by the promotion system for example), so "
"we have multiple reasons to want a different interpretation of `Tuple{T,T} "
"where T`.  To make this work we add the following rule to subtyping: if a "
"variable occurs more than once in covariant position, it is restricted to "
"ranging over only concrete types.  (\"Covariant position\" means that only "
"`Tuple` and `Union` types occur between an occurrence of a variable and the "
"`UnionAll` type that introduces it.)  Such variables are called \"diagonal "
"variables\" or \"concrete variables\"."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:359
#, no-wrap
msgid ""
"So for example, `Tuple{T,T} where T` can be seen as\n"
"`Union{Tuple{Int8,Int8}, Tuple{Int16,Int16}, ...}`, where `T` ranges over all\n"
"concrete types.\n"
"This gives rise to some interesting subtyping results.\n"
"For example `Tuple{Real,Real}` is not a subtype of `Tuple{T,T} where T`, because\n"
"it includes some types like `Tuple{Int8,Int16}` where the two elements have\n"
"different types.\n"
"`Tuple{Real,Real}` and `Tuple{T,T} where T` have the non-trivial intersection\n"
"`Tuple{T,T} where T<:Real`.\n"
"However, `Tuple{Real}` *is* a subtype of `Tuple{T} where T`, because in that case\n"
"`T` occurs only once and so is not diagonal.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:361
msgid "Next consider a signature like the following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:365
msgid "```julia f(a::Array{T}, x::T, y::T) where {T} = ...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:375
msgid ""
"In this case, `T` occurs in invariant position inside `Array{T}`.  That "
"means whatever type of array is passed unambiguously determines the value of "
"`T` --- we say `T` has an *equality constraint* on it.  Therefore in this "
"case the diagonal rule is not really necessary, since the array determines "
"`T` and we can then allow `x` and `y` to be of any subtypes of `T`.  So "
"variables that occur in invariant position are never considered diagonal.  "
"This choice of behavior is slightly controversial --- some feel this "
"definition should be written as"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:379
#, no-wrap
msgid ""
"```julia\n"
"f(a::Array{T}, x::S, y::S) where {T, S<:T} = ...\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:383
msgid ""
"to clarify whether `x` and `y` need to have the same type.  In this version "
"of the signature they would, or we could introduce a third variable for the "
"type of `y` if `x` and `y` can have different types."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:385
msgid ""
"The next complication is the interaction of unions and diagonal variables, e."
"g."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:389
msgid "```julia f(x::Union{Nothing,T}, y::T) where {T} = ...  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:393
msgid ""
"Consider what this declaration means.  `y` has type `T`. `x` then can have "
"either the same type `T`, or else be of type `Nothing`.  So all of the "
"following calls should match:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:402
msgid ""
"```julia f(1, 1)  f(\"\", \"\")  f(2.0, 2.0)  f(nothing, 1)  f(nothing, "
"\"\")  f(nothing, 2.0)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:412
msgid ""
"These examples are telling us something: when `x` is `nothing::Nothing`, "
"there are no extra constraints on `y`.  It is as if the method signature had "
"`y::Any`.  This means that whether a variable is diagonal is not a static "
"property based on where it appears in a type.  Rather, it depends on where a "
"variable appears when the subtyping algorithm *uses* it.  When `x` has type "
"`Nothing`, we don't need to use the `T` in `Union{Nothing,T}`, so `T` does "
"not \"occur\".  Indeed, we have the following type equivalence:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:416
msgid ""
"```julia (Tuple{Union{Nothing,T},T} where T) == Union{Tuple{Nothing,Any}, "
"Tuple{T,T} where T} ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/types.md:417
#, no-wrap
msgid "Subtyping diagonal variables"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:422
msgid ""
"The subtyping algorithm for diagonal variables has two components: (1) "
"identifying variable occurrences, and (2) ensuring that diagonal variables "
"range over concrete types only."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:427
#, no-wrap
msgid ""
"The first task is accomplished by keeping counters `occurs_inv` and `occurs_cov`\n"
"(in `src/subtype.c`) for each variable in the environment, tracking the number\n"
"of invariant and covariant occurrences, respectively.\n"
"A variable is diagonal when `occurs_inv == 0 && occurs_cov > 1`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:439
msgid ""
"The second task is accomplished by imposing a condition on a variable's "
"lower bound.  As the subtyping algorithm runs, it narrows the bounds of each "
"variable (raising lower bounds and lowering upper bounds) to keep track of "
"the range of variable values for which the subtype relation would hold.  "
"When we are done evaluating the body of a `UnionAll` type whose variable is "
"diagonal, we look at the final values of the bounds.  Since the variable "
"must be concrete, a contradiction occurs if its lower bound could not be a "
"subtype of a concrete type.  For example, an abstract type like "
"[`AbstractArray`](@ref) cannot be a subtype of a concrete type, but a "
"concrete type like `Int` can be, and the empty type `Bottom` can be as "
"well.  If a lower bound fails this test the algorithm stops with the answer "
"`false`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:443
#, no-wrap
msgid ""
"For example, in the problem `Tuple{Int,String} <: Tuple{T,T} where T`, we derive that\n"
"this would be true if `T` were a supertype of `Union{Int,String}`.\n"
"However, `Union{Int,String}` is an abstract type, so the relation does not hold.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:453
msgid ""
"This concreteness test is done by the function `is_leaf_bound`.  Note that "
"this test is slightly different from `jl_is_leaf_type`, since it also "
"returns `true` for `Bottom`.  Currently this function is heuristic, and does "
"not catch all possible concrete types.  The difficulty is that whether a "
"lower bound is concrete might depend on the values of other type variable "
"bounds.  For example, `Vector{T}` is equivalent to the concrete type "
"`Vector{Int}` only if both the upper and lower bounds of `T` equal `Int`.  "
"We have not yet worked out a complete algorithm for this."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/types.md:454
#, no-wrap
msgid "Introduction to the internal machinery"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:460
msgid ""
"Most operations for dealing with types are found in the files `jltypes.c` "
"and `subtype.c`.  A good way to start is to watch subtyping in action.  "
"Build Julia with `make debug` and fire up Julia within a debugger.  [gdb "
"debugging tips](@ref) has some tips which may be useful."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:463
msgid ""
"Because the subtyping code is used heavily in the REPL itself--and hence "
"breakpoints in this code get triggered often--it will be easiest if you make "
"the following definition:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:470
#, no-wrap
msgid ""
"```julia-repl\n"
"julia> function mysubtype(a,b)\n"
"           ccall(:jl_breakpoint, Cvoid, (Any,), nothing)\n"
"           a <: b\n"
"       end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:473
msgid ""
"and then set a breakpoint in `jl_breakpoint`.  Once this breakpoint gets "
"triggered, you can set breakpoints in other functions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:475
msgid "As a warm-up, try the following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:479
msgid "```julia mysubtype(Tuple{Int,Float64}, Tuple{Integer,Real})  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:481
msgid "We can make it more interesting by trying a more complex case:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:485
msgid ""
"```julia mysubtype(Tuple{Array{Int,2}, Int8}, Tuple{Array{T}, T} where T)  "
"```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/types.md:486
#, no-wrap
msgid "Subtyping and method sorting"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:491
msgid ""
"The `type_morespecific` functions are used for imposing a partial order on "
"functions in method tables (from most-to-least specific). Specificity is "
"strict; if `a` is more specific than `b`, then `a` does not equal `b` and "
"`b` is not more specific than `a`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:500
msgid ""
"If `a` is a strict subtype of `b`, then it is automatically considered more "
"specific.  From there, `type_morespecific` employs some less formal rules.  "
"For example, `subtype` is sensitive to the number of arguments, but "
"`type_morespecific` may not be.  In particular, `Tuple{Int,AbstractFloat}` "
"is more specific than `Tuple{Integer}`, even though it is not a subtype.  "
"(Of `Tuple{Int,AbstractFloat}` and `Tuple{Integer,Float64}`, neither is more "
"specific than the other.)  Likewise, `Tuple{Int,Vararg{Int}}` is not a "
"subtype of `Tuple{Integer}`, but it is considered more specific. However, "
"`morespecific` does get a bonus for length: in particular, `Tuple{Int,Int}` "
"is more specific than `Tuple{Int,Vararg{Int}}`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:502
msgid ""
"If you're debugging how methods get sorted, it can be convenient to define "
"the function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:506
msgid ""
"```julia type_morespecific(a, b) = ccall(:jl_type_morespecific, Cint, (Any,"
"Any), a, b)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/types.md:507
msgid ""
"which allows you to test whether tuple type `a` is more specific than tuple "
"type `b`."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/meta.md:1
#, no-wrap
msgid "Talking to the compiler (the `:meta` mechanism)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/meta.md:8
msgid ""
"In some circumstances, one might wish to provide hints or instructions that "
"a given block of code has special properties: you might always want to "
"inline it, or you might want to turn on special compiler optimization "
"passes.  Starting with version 0.4, Julia has a convention that these "
"instructions can be placed inside a `:meta` expression, which is typically "
"(but not necessarily) the first expression in the body of a function."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/meta.md:11
msgid ""
"`:meta` expressions are created with macros. As an example, consider the "
"implementation of the `@inline` macro:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/meta.md:17
#, no-wrap
msgid ""
"```julia\n"
"macro inline(ex)\n"
"    esc(isa(ex, Expr) ? pushmeta!(ex, :inline) : ex)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/meta.md:19
msgid ""
"Here, `ex` is expected to be an expression defining a function. A statement "
"like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/meta.md:25
#, no-wrap
msgid ""
"```julia\n"
"@inline function myfunction(x)\n"
"    x*(x+3)\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/meta.md:27
msgid "gets turned into an expression like this:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/meta.md:36
#, no-wrap
msgid ""
"```julia\n"
"quote\n"
"    function myfunction(x)\n"
"        Expr(:meta, :inline)\n"
"        x*(x+3)\n"
"    end\n"
"end\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/meta.md:40
msgid ""
"`Base.pushmeta!(ex, :symbol, args...)` appends `:symbol` to the end of the `:"
"meta` expression, creating a new `:meta` expression if necessary. If `args` "
"is specified, a nested expression containing `:symbol` and these arguments "
"is appended instead, which can be used to specify additional information."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/meta.md:47
msgid ""
"To use the metadata, you have to parse these `:meta` expressions. If your "
"implementation can be performed within Julia, `Base.popmeta!` is very handy: "
"`Base.popmeta!(body, :symbol)` will scan a function *body* expression (one "
"without the function signature) for the first `:meta` expression containing "
"`:symbol`, extract any arguments, and return a tuple `(found::Bool, args::"
"Array{Any})`.  If the metadata did not have any arguments, or `:symbol` was "
"not found, the `args` array will be empty."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/meta.md:48
msgid ""
"Not yet provided is a convenient infrastructure for parsing `:meta` "
"expressions from C++."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/object.md:1
#, no-wrap
msgid "Memory layout of Julia Objects"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/object.md:3
#, no-wrap
msgid "Object layout (`jl_value_t`)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:8
msgid ""
"The `jl_value_t` struct is the name for a block of memory owned by the Julia "
"Garbage Collector, representing the data associated with a Julia object in "
"memory. Absent any type information, it is simply an opaque pointer:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:12
msgid "```c typedef struct jl_value_t* jl_pvalue_t; ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:15
msgid ""
"Each `jl_value_t` struct is contained in a `jl_typetag_t` struct that "
"contains metadata information about the Julia object, such as its type and "
"garbage collector (gc) reachability:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:22
#, no-wrap
msgid ""
"```c\n"
"typedef struct {\n"
"    opaque metadata;\n"
"    jl_value_t value;\n"
"} jl_typetag_t;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:25
msgid ""
"The type of any Julia object is an instance of a leaf `jl_datatype_t` "
"object. The `jl_typeof()` function can be used to query for it:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:29
msgid "```c jl_value_t *jl_typeof(jl_value_t *v); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:32
msgid ""
"The layout of the object depends on its type. Reflection methods can be used "
"to inspect that layout.  A field can be accessed by calling one of the get-"
"field methods:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:37
msgid ""
"```c jl_value_t *jl_get_nth_field_checked(jl_value_t *v, size_t i); "
"jl_value_t *jl_get_field(jl_value_t *o, char *fld); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:40
msgid ""
"If the field types are known, a priori, to be all pointers, the values can "
"also be extracted directly as an array access:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:44
#, no-wrap
msgid ""
"```c\n"
"jl_value_t *v = value->fieldptr[n];\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:46
msgid "As an example, a \"boxed\" `uint16_t` is stored as follows:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:55
#, no-wrap
msgid ""
"```c\n"
"struct {\n"
"    opaque metadata;\n"
"    struct {\n"
"        uint16_t data;        // -- 2 bytes\n"
"    } jl_value_t;\n"
"};\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:58
msgid ""
"This object is created by `jl_box_uint16()`. Note that the `jl_value_t` "
"pointer references the data portion, not the metadata at the top of the "
"struct."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:63
msgid ""
"A value may be stored \"unboxed\" in many circumstances (just the data, "
"without the metadata, and possibly not even stored but just kept in "
"registers), so it is unsafe to assume that the address of a box is a unique "
"identifier. The \"egal\" test (corresponding to the `===` function in "
"Julia), should instead be used to compare two unknown objects for "
"equivalence:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:67
msgid "```c int jl_egal(jl_value_t *a, jl_value_t *b); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:70
msgid ""
"This optimization should be relatively transparent to the API, since the "
"object will be \"boxed\" on-demand, whenever a `jl_value_t` pointer is "
"needed."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:74
msgid ""
"Note that modification of a `jl_value_t` pointer in memory is permitted only "
"if the object is mutable. Otherwise, modification of the value may corrupt "
"the program and the result will be undefined.  The mutability property of a "
"value can be queried for with:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:78
msgid "```c int jl_is_mutable(jl_value_t *v); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:80
msgid ""
"If the object being stored is a `jl_value_t`, the Julia garbage collector "
"must be notified also:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:84
msgid "```c void jl_gc_wb(jl_value_t *parent, jl_value_t *ptr); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:87
msgid ""
"However, the [Embedding Julia](@ref) section of the manual is also required "
"reading at this point, for covering other details of boxing and unboxing "
"various types, and understanding the gc interactions."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:90
msgid ""
"Mirror structs for some of the built-in types are [defined in `julia.h`]"
"(https://github.com/JuliaLang/julia/blob/master/src/julia.h).  The "
"corresponding global `jl_datatype_t` objects are created by [`jl_init_types` "
"in `jltypes.c`](https://github.com/JuliaLang/julia/blob/master/src/jltypes."
"c)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/object.md:91
#, no-wrap
msgid "Garbage collector mark bits"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:96
msgid ""
"The garbage collector uses several bits from the metadata portion of the "
"`jl_typetag_t` to track each object in the system. Further details about "
"this algorithm can be found in the comments of the [garbage collector "
"implementation in `gc.c`](https://github.com/JuliaLang/julia/blob/master/src/"
"gc.c)."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/object.md:97
#, no-wrap
msgid "Object allocation"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:100
msgid "Most new objects are allocated by `jl_new_structv()`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:105
msgid ""
"```c jl_value_t *jl_new_struct(jl_datatype_t *type, ...); jl_value_t "
"*jl_new_structv(jl_datatype_t *type, jl_value_t **args, uint32_t na); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:107
msgid ""
"Although, [`isbits`](@ref) objects can be also constructed directly from "
"memory:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:111
msgid "```c jl_value_t *jl_new_bits(jl_value_t *bt, void *data)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:113
msgid ""
"And some objects have special constructors that must be used instead of the "
"above functions:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:115
msgid "Types:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:120
msgid ""
"```c jl_datatype_t *jl_apply_type(jl_datatype_t *tc, jl_tuple_t *params); "
"jl_datatype_t *jl_apply_array_type(jl_datatype_t *type, size_t dim); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:125
msgid ""
"While these are the most commonly used options, there are more low-level "
"constructors too, which you can find declared in [`julia.h`](https://github."
"com/JuliaLang/julia/blob/master/src/julia.h).  These are used in "
"`jl_init_types()` to create the initial types needed to bootstrap the "
"creation of the Julia system image."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:127
msgid "Tuples:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:133
msgid ""
"```c jl_tuple_t *jl_tuple(size_t n, ...); jl_tuple_t *jl_tuplev(size_t n, "
"jl_value_t **v); jl_tuple_t *jl_alloc_tuple(size_t n); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:137
msgid ""
"The representation of tuples is highly unique in the Julia object "
"representation ecosystem. In some cases, a [`Base.tuple()`](@ref) object may "
"be an array of pointers to the objects contained by the tuple equivalent to:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:144
#, no-wrap
msgid ""
"```c\n"
"typedef struct {\n"
"    size_t length;\n"
"    jl_value_t *data[length];\n"
"} jl_tuple_t;\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:148
msgid ""
"However, in other cases, the tuple may be converted to an anonymous "
"[`isbits`](@ref) type and stored unboxed, or it may not stored at all (if it "
"is not being used in a generic context as a `jl_value_t*`)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:150
msgid "Symbols:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:154
msgid "```c jl_sym_t *jl_symbol(const char *str); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:156
msgid "Functions and MethodInstance:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:161
msgid ""
"```c jl_function_t *jl_new_generic_function(jl_sym_t *name); "
"jl_method_instance_t *jl_new_method_instance(jl_value_t *ast, jl_tuple_t "
"*sparams); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:163
msgid "Arrays:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:172
msgid ""
"```c jl_array_t *jl_new_array(jl_value_t *atype, jl_tuple_t *dims); "
"jl_array_t *jl_new_arrayv(jl_value_t *atype, ...); jl_array_t "
"*jl_alloc_array_1d(jl_value_t *atype, size_t nr); jl_array_t "
"*jl_alloc_array_2d(jl_value_t *atype, size_t nr, size_t nc); jl_array_t "
"*jl_alloc_array_3d(jl_value_t *atype, size_t nr, size_t nc, size_t z); "
"jl_array_t *jl_alloc_vec_any(size_t n); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:176
msgid ""
"Note that many of these have alternative allocation functions for various "
"special-purposes. The list here reflects the more common usages, but a more "
"complete list can be found by reading the [`julia.h` header file](https://"
"github.com/JuliaLang/julia/blob/master/src/julia.h)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:179
msgid ""
"Internal to Julia, storage is typically allocated by `newstruct()` (or "
"`newobj()` for the special types):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:184
msgid ""
"```c jl_value_t *newstruct(jl_value_t *type); jl_value_t *newobj(jl_value_t "
"*type, size_t nfields); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:187
msgid ""
"And at the lowest level, memory is getting allocated by a call to the "
"garbage collector (in `gc.c`), then tagged with its type:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:192
msgid ""
"```c jl_value_t *jl_gc_allocobj(size_t nbytes); void "
"jl_set_typeof(jl_value_t *v, jl_datatype_t *type); ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:196
msgid ""
"Note that all objects are allocated in multiples of 4 bytes and aligned to "
"the platform pointer size. Memory is allocated from a pool for smaller "
"objects, or directly with `malloc()` for large objects."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:200
#, no-wrap
msgid ""
"!!! sidebar \"Singleton Types\"\n"
"    Singleton types have only one instance and no data fields. Singleton instances have a size of\n"
"    0 bytes, and consist only of their metadata. e.g. `nothing::Nothing`.\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/object.md:202
#, no-wrap
msgid "    See [Singleton Types](@ref man-singleton-types) and [Nothingness and missing values](@ref)\n"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/debuggingtips.md:1
#, no-wrap
msgid "gdb debugging tips"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/debuggingtips.md:3
#, no-wrap
msgid "Displaying Julia variables"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:6
msgid "Within `gdb`, any `jl_value_t*` object `obj` can be displayed using"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:10
msgid "``` (gdb) call jl_(obj)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:13
msgid ""
"The object will be displayed in the `julia` session, not in the gdb session. "
"This is a useful way to discover the types and values of objects being "
"manipulated by Julia's C code."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:16
msgid ""
"Similarly, if you're debugging some of Julia's internals (e.g., `compiler."
"jl`), you can print `obj` using"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:20
msgid "```julia ccall(:jl_, Cvoid, (Any,), obj)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:23
msgid ""
"This is a good way to circumvent problems that arise from the order in which "
"julia's output streams are initialized."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:25
msgid ""
"Julia's flisp interpreter uses `value_t` objects; these can be displayed "
"with `call fl_print(fl_ctx, ios_stdout, obj)`."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/debuggingtips.md:26
#, no-wrap
msgid "Useful Julia variables for Inspecting"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:31
msgid ""
"While the addresses of many variables, like singletons, can be be useful to "
"print for many failures, there are a number of additional variables (see "
"`julia.h` for a complete list) that are even more useful."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:41
msgid ""
"(when in `jl_apply_generic`) `mfunc` and `jl_uncompress_ast(mfunc->def, "
"mfunc->code)` :: for figuring out a bit about the call-stack"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:41
msgid ""
"`jl_lineno` and `jl_filename` :: for figuring out what line in a test to go "
"start debugging from (or figure out how far into a file has been parsed)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:41
msgid ""
"`$1` :: not really a variable, but still a useful shorthand for referring to "
"the result of the last gdb command (such as `print`)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:41
msgid ""
"`jl_options` :: sometimes useful, since it lists all of the command line "
"options that were successfully parsed"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:41
msgid ""
"`jl_uv_stderr` :: because who doesn't like to be able to interact with stdio"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/debuggingtips.md:42
#, no-wrap
msgid "Useful Julia functions for Inspecting those variables"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:55
msgid ""
"`jl_gdblookup($rip)` :: For looking up the current function and line. (use `"
"$eip` on i686 platforms)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:55
msgid ""
"`jlbacktrace()` :: For dumping the current Julia backtrace stack to stderr. "
"Only usable after `record_backtrace()` has been called."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:55
msgid ""
"`jl_dump_llvm_value(Value*)` :: For invoking `Value->dump()` in gdb, where "
"it doesn't work natively.  For example, `f->linfo->functionObject`, `f-"
">linfo->specFunctionObject`, and `to_function(f->linfo)`."
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:55
msgid ""
"`Type->dump()` :: only works in lldb. Note: add something like `;1` to "
"prevent lldb from printing its prompt over the output"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:55
msgid ""
"`jl_eval_string(\"expr\")` :: for invoking side-effects to modify the "
"current state or to lookup symbols"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/debuggingtips.md:55
msgid ""
"`jl_typeof(jl_value_t*)` :: for extracting the type tag of a Julia value (in "
"gdb, call `macro define jl_typeof jl_typeof` first, or pick something short "
"like `ty` for the first arg to define a shorthand)"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/debuggingtips.md:56
#, no-wrap
msgid "Inserting breakpoints for inspection from gdb"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:59
msgid "In your `gdb` session, set a breakpoint in `jl_breakpoint` like so:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:63
msgid "``` (gdb) break jl_breakpoint ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:65
msgid "Then within your Julia code, insert a call to `jl_breakpoint` by adding"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:69
msgid "```julia ccall(:jl_breakpoint, Cvoid, (Any,), obj)  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:71
msgid ""
"where `obj` can be any variable or tuple you want to be accessible in the "
"breakpoint."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:74
msgid ""
"It's particularly helpful to back up to the `jl_apply` frame, from which you "
"can display the arguments to a function using, e.g.,"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:78
msgid "``` (gdb) call jl_(args[0])  ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:83
msgid ""
"Another useful frame is `to_function(jl_method_instance_t *li, bool "
"cstyle)`. The `jl_method_instance_t*` argument is a struct with a reference "
"to the final AST sent into the compiler. However, the AST at this point will "
"usually be compressed; to view the AST, call `jl_uncompress_ast` and then "
"pass the result to `jl_`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:85
#, no-wrap
msgid "#2  0x00007ffff7928bf7 in to_function (li=0x2812060, cstyle=false) at codegen.cpp:584\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:89
#, no-wrap
msgid ""
"584          abort();\n"
"(gdb) p jl_(jl_uncompress_ast(li, li->ast))\n"
"```\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/debuggingtips.md:90
#, no-wrap
msgid "Inserting breakpoints upon certain conditions"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/debuggingtips.md:92
#, no-wrap
msgid "Loading a particular file"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:95
msgid "Let's say the file is `sysimg.jl`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:99
msgid "``` (gdb) break jl_load if strcmp(fname, \"sysimg.jl\")==0 ```"
msgstr ""

#. type: Title ###
#: ext/julia/doc/src/devdocs/debuggingtips.md:100
#, no-wrap
msgid "Calling a particular method"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:105
#, no-wrap
msgid ""
"```\n"
"(gdb) break jl_apply_generic if strcmp((char*)(jl_symbol_name)(jl_gf_mtable(F)->name), \"method_to_break\")==0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:107
msgid ""
"Since this function is used for every call, you will make everything 1000x "
"slower if you do this."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/debuggingtips.md:108
#, no-wrap
msgid "Dealing with signals"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:115
msgid ""
"Julia requires a few signal to function property. The profiler uses "
"`SIGUSR2` for sampling and the garbage collector uses `SIGSEGV` for threads "
"synchronization. If you are debugging some code that uses the profiler or "
"multiple threads, you may want to let the debugger ignore these signals "
"since they can be triggered very often during normal operations. The command "
"to do this in GDB is (replace `SIGSEGV` with `SIGUSRS` or other signals you "
"want to ignore):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:119
msgid "``` (gdb) handle SIGSEGV noprint nostop pass ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:121
msgid "The corresponding LLDB command is (after the process is started):"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:125
msgid "``` (lldb) pro hand -p true -s false -n false SIGSEGV ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:129
msgid ""
"If you are debugging a segfault with threaded code, you can set a breakpoint "
"on `jl_critical_error` (`sigdie_handler` should also work on Linux and BSD) "
"in order to only catch the actual segfault rather than the GC "
"synchronization points."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/debuggingtips.md:130
#, no-wrap
msgid "Debugging during Julia's build process (bootstrap)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:134
msgid ""
"Errors that occur during `make` need special handling. Julia is built in two "
"stages, constructing `sys0` and `sys.ji`. To see what commands are running "
"at the time of failure, use `make VERBOSE=1`."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:137
msgid ""
"At the time of this writing, you can debug build errors during the `sys0` "
"phase from the `base` directory using:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:141
msgid ""
"``` julia/base$ gdb --args ../usr/bin/julia-debug -C native --build ../usr/"
"lib/julia/sys0 sysimg.jl ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:143
msgid ""
"You might need to delete all the files in `usr/lib/julia/` to get this to "
"work."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:145
msgid "You can debug the `sys.ji` phase using:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:149
msgid ""
"``` julia/base$ gdb --args ../usr/bin/julia-debug -C native --build ../usr/"
"lib/julia/sys -J ../usr/lib/julia/sys0.ji sysimg.jl ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:153
msgid ""
"By default, any errors will cause Julia to exit, even under gdb. To catch an "
"error \"in the act\", set a breakpoint in `jl_error` (there are several "
"other useful spots, for specific kinds of failures, including: "
"`jl_too_few_args`, `jl_too_many_args`, and `jl_throw`)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:156
msgid ""
"Once an error is caught, a useful technique is to walk up the stack and "
"examine the function by inspecting the related call to `jl_apply`. To take a "
"real-world example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:164
msgid ""
"``` Breakpoint 1, jl_throw (e=0x7ffdf42de400) at task.c:802 802 { (gdb) p "
"jl_(e)  ErrorException(\"auto_unbox: unable to determine argument type\")  "
"$2 = void (gdb) bt 10"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:164
#, no-wrap
msgid "#0  jl_throw (e=0x7ffdf42de400) at task.c:802\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:165
#, no-wrap
msgid "#1  0x00007ffff65412fe in jl_error (str=0x7ffde56be000 <_j_str267> \"auto_unbox:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:168
#, no-wrap
msgid ""
"   unable to determine argument type\")\n"
"   at builtins.c:39\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:168
#, no-wrap
msgid "#2  0x00007ffde56bd01a in julia_convert_16886 ()\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:169
#: ext/julia/doc/src/devdocs/debuggingtips.md:180
#, no-wrap
msgid "#3  0x00007ffff6541154 in jl_apply (f=0x7ffdf367f630, args=0x7fffffffc2b0, nargs=2) at julia.h:1281\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:177
msgid ""
"The most recent `jl_apply` is at frame #3, so we can go back there and look "
"at the AST for the function `julia_convert_16886`. This is the uniqued name "
"for some method of `convert`. `f` in this frame is a `jl_function_t*`, so we "
"can look at the type signature, if any, from the `specTypes` field:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:180
msgid "``` (gdb) f 3"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:187
#, no-wrap
msgid ""
"1281            return f->fptr((jl_value_t*)f, args, nargs);\n"
"(gdb) p f->linfo->specTypes\n"
"$4 = (jl_tupletype_t *) 0x7ffdf39b1030\n"
"(gdb) p jl_( f->linfo->specTypes )\n"
"Tuple{Type{Float32}, Float64}           # <-- type signature for julia_convert_16886\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:189
msgid "Then, we can look at the AST for this function:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:196
#, no-wrap
msgid ""
"```\n"
"(gdb) p jl_( jl_uncompress_ast(f->linfo, f->linfo->ast) )\n"
"Expr(:lambda, Array{Any, 1}[:#s29, :x], Array{Any, 1}[Array{Any, 1}[], Array{Any, 1}[Array{Any, 1}[:#s29, :Any, 0], Array{Any, 1}[:x, :Any, 0]], Array{Any, 1}[], 0], Expr(:body,\n"
"Expr(:line, 90, :float.jl)::Any,\n"
"Expr(:return, Expr(:call, :box, :Float32, Expr(:call, :fptrunc, :Float32, :x)::Any)::Any)::Any)::Any)::Any\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:199
msgid ""
"Finally, and perhaps most usefully, we can force the function to be "
"recompiled in order to step through the codegen process. To do this, clear "
"the cached `functionObject` from the `jl_lamdbda_info_t*`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:205
#, no-wrap
msgid ""
"```\n"
"(gdb) p f->linfo->functionObject\n"
"$8 = (void *) 0x1289d070\n"
"(gdb) set f->linfo->functionObject = NULL\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:208
msgid ""
"Then, set a breakpoint somewhere useful (e.g. `emit_function`, `emit_expr`, "
"`emit_call`, etc.), and run codegen:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:213
msgid "``` (gdb) p jl_compile(f)  ... # your breakpoint here ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/debuggingtips.md:214
#, no-wrap
msgid "Debugging precompilation errors"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:219
msgid ""
"Module precompilation spawns a separate Julia process to precompile each "
"module. Setting a breakpoint or catching failures in a precompile worker "
"requires attaching a debugger to the worker. The easiest approach is to set "
"the debugger watch for new process launches matching a given name. For "
"example:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:223
msgid "``` (gdb) attach -w -n julia-debug ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:225
msgid "or:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:229
msgid "``` (lldb) process attach -w -n julia-debug ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:234
msgid ""
"Then run a script/command to start precompilation. As described earlier, use "
"conditional breakpoints in the parent process to catch specific file-loading "
"events and narrow the debugging window. (some operating systems may require "
"alternative approaches, such as following each `fork` from the parent "
"process)"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/debuggingtips.md:235
#, no-wrap
msgid "Mozilla's Record and Replay Framework (rr)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:241
msgid ""
"Julia now works out of the box with [rr](http://rr-project.org/), the "
"lightweight recording and deterministic debugging framework from Mozilla. "
"This allows you to replay the trace of an execution deterministically.  The "
"replayed execution's address spaces, register contents, syscall data etc are "
"exactly the same in every run."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/debuggingtips.md:242
msgid "A recent version of rr (3.1.0 or higher) is required."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/backtraces.md:1
#, no-wrap
msgid "Reporting and analyzing crashes (segfaults)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:7
msgid ""
"So you managed to break Julia.  Congratulations! Collected here are some "
"general procedures you can undergo for common symptoms encountered when "
"something goes awry.  Including the information from these debugging steps "
"can greatly help the maintainers when tracking down a segfault or trying to "
"figure out why your script is running slower than expected."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:10
msgid ""
"If you've been directed to this page, find the symptom that best matches "
"what you're experiencing and follow the instructions to generate the "
"debugging information requested.  Table of symptoms:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/backtraces.md:14
msgid "[Segfaults during bootstrap (`sysimg.jl`)](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/backtraces.md:14
msgid "[Segfaults when running a script](@ref)"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/backtraces.md:14
msgid "[Errors during Julia startup](@ref)"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/backtraces.md:15
#, no-wrap
msgid "[Version/Environment info](@id dev-version-info)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:19
msgid ""
"No matter the error, we will always need to know what version of Julia you "
"are running. When Julia first starts up, a header is printed out with a "
"version number and date. Please also include the output of `versioninfo()` "
"(exported from the [`InteractiveUtils`](@ref InteractiveUtils.versioninfo) "
"standard library) in any report you create:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:24
msgid "```@repl using InteractiveUtils versioninfo()  ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/backtraces.md:25
#, no-wrap
msgid "Segfaults during bootstrap (`sysimg.jl`)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:32
msgid ""
"Segfaults toward the end of the `make` process of building Julia are a "
"common symptom of something going wrong while Julia is preparsing the corpus "
"of code in the `base/` folder.  Many factors can contribute toward this "
"process dying unexpectedly, however it is as often as not due to an error in "
"the C-code portion of Julia, and as such must typically be debugged with a "
"debug build inside of `gdb`.  Explicitly:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:34
msgid "Create a debug build of Julia:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:39
#, no-wrap
msgid ""
"```\n"
"$ cd <julia_root>\n"
"$ make debug\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:43
msgid ""
"Note that this process will likely fail with the same error as a normal "
"`make` incantation, however this will create a debug executable that will "
"offer `gdb` the debugging symbols needed to get accurate backtraces.  Next, "
"manually run the bootstrap process inside of `gdb`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:48
msgid "``` $ cd base/ $ gdb -x ../contrib/debug_bootstrap.gdb ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:54
#, no-wrap
msgid ""
"This will start `gdb`, attempt to run the bootstrap process using the debug build of Julia, and\n"
"print out a backtrace if (when) it segfaults.  You may need to hit `<enter>` a few times to get\n"
"the full backtrace.  Create a [gist](https://gist.github.com) with the backtrace, the [version info](@ref dev-version-info),\n"
"and any other pertinent information you can think of and open a new [issue](https://github.com/JuliaLang/julia/issues?q=is%3Aopen)\n"
"on Github with a link to the gist.\n"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/backtraces.md:55
#, no-wrap
msgid "Segfaults when running a script"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:59
msgid ""
"The procedure is very similar to [Segfaults during bootstrap (`sysimg.jl`)]"
"(@ref).  Create a debug build of Julia, and run your script inside of a "
"debugged Julia process:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:65
#, no-wrap
msgid ""
"```\n"
"$ cd <julia_root>\n"
"$ make debug\n"
"$ gdb --args usr/bin/julia-debug <path_to_your_script>\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:68
msgid ""
"Note that `gdb` will sit there, waiting for instructions.  Type `r` to run "
"the process, and `bt` to generate a backtrace once it segfaults:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:75
msgid ""
"``` (gdb) r Starting program: /home/sabae/src/julia/usr/bin/julia-debug ./"
"test.jl ...  (gdb) bt ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:79
msgid ""
"Create a [gist](https://gist.github.com) with the backtrace, the [version "
"info](@ref dev-version-info), and any other pertinent information you can "
"think of and open a new [issue](https://github.com/JuliaLang/julia/issues?"
"q=is%3Aopen)  on Github with a link to the gist."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/backtraces.md:80
#, no-wrap
msgid "Errors during Julia startup"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:84
msgid ""
"Occasionally errors occur during Julia's startup process (especially when "
"using binary distributions, as opposed to compiling from source) such as the "
"following:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:89
msgid "```julia $ julia exec: error -5 ```"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:93
msgid ""
"These errors typically indicate something is not getting loaded properly "
"very early on in the bootup phase, and our best bet in determining what's "
"going wrong is to use external tools to audit the disk activity of the "
"`julia` process:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/backtraces.md:95
msgid "On Linux, use `strace`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:100
#, no-wrap
msgid ""
"    ```\n"
"    $ strace julia\n"
"    ```\n"
"  * On OSX, use `dtruss`:\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:104
#, no-wrap
msgid ""
"    ```\n"
"    $ dtruss -f julia\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:108
msgid ""
"Create a [gist](https://gist.github.com) with the `strace`/ `dtruss` output, "
"the [version info](@ref dev-version-info), and any other pertinent "
"information and open a new [issue](https://github.com/JuliaLang/julia/issues?"
"q=is%3Aopen)  on Github with a link to the gist."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/backtraces.md:109
#, no-wrap
msgid "Glossary"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/backtraces.md:112
msgid "A few terms have been used as shorthand in this guide:"
msgstr ""

#. type: Bullet: '  * '
#: ext/julia/doc/src/devdocs/backtraces.md:114
msgid ""
"`<julia_root>` refers to the root directory of the Julia source tree; e.g. "
"it should contain folders such as `base`, `deps`, `src`, `test`, etc....."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/inference.md:1
#, no-wrap
msgid "Inference"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/inference.md:3
#, no-wrap
msgid "How inference works"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:11
msgid ""
"[Type inference](https://en.wikipedia.org/wiki/Type_inference) refers to the "
"process of deducing the types of later values from the types of input "
"values. Julia's approach to inference has been described in blog posts ([1]"
"(https://juliacomputing.com/blog/2016/04/04/inference-convergence.html), [2]"
"(https://juliacomputing.com/blog/2017/05/15/inference-converage2.html))."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/inference.md:12
#, no-wrap
msgid "Debugging compiler.jl"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:19
msgid ""
"You can start a Julia session, edit `compiler/*.jl` (for example to insert "
"`print` statements), and then replace `Core.Compiler` in your running "
"session by navigating to `base/compiler` and executing `include(\"compiler.jl"
"\")`. This trick typically leads to much faster development than if you "
"rebuild Julia for each change."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:22
msgid ""
"A convenient entry point into inference is `typeinf_code`. Here's a demo "
"running inference on `convert(Int, UInt(1))`:"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/inference.md:24
#, no-wrap
msgid "Get the method"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:28
msgid ""
"atypes = Tuple{Type{Int}, UInt} # argument types mths = methods(convert, "
"atypes)  # worth checking that there is only one m = first(mths)"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/inference.md:29
#, no-wrap
msgid "Create variables needed to call `typeinf_code`"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:37
#, no-wrap
msgid ""
"params = Core.Compiler.Params(typemax(UInt))  # parameter is the world age,\n"
"                                                        #   typemax(UInt) -> most recent\n"
"sparams = Core.svec()      # this particular method doesn't have type-parameters\n"
"optimize = true            # run all inference optimizations\n"
"cached = false             # force inference to happen (do not use cached results)\n"
"Core.Compiler.typeinf_code(m, atypes, sparams, optimize, cached, params)\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:42
msgid ""
"If your debugging adventures require a `MethodInstance`, you can look it up "
"by calling `Core.Compiler.code_for_method` using many of the variables "
"above.  A `CodeInfo` object may be obtained with ```julia"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/inference.md:42
#, no-wrap
msgid "Returns the CodeInfo object for `convert(Int, ::UInt)`:"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:45
msgid "ci = (@code_typed convert(Int, UInt(1)))[1] ```"
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/inference.md:46
#, no-wrap
msgid "The inlining algorithm (inline_worthy)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:56
msgid ""
"Much of the hardest work for inlining runs in `inlining_pass`. However, if "
"your question is \"why didn't my function inline?\" then you will most "
"likely be interested in `isinlineable` and its primary callee, "
"`inline_worthy`. `isinlineable` handles a number of special cases (e.g., "
"critical functions like `next` and `done`, incorporating a bonus for "
"functions that return tuples, etc.). The main decision-making happens in "
"`inline_worthy`, which returns `true` if the function should be inlined."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:71
msgid ""
"`inline_worthy` implements a cost-model, where \"cheap\" functions get "
"inlined; more specifically, we inline functions if their anticipated run-"
"time is not large compared to the time it would take to [issue a call]"
"(https://en.wikipedia.org/wiki/Calling_convention) to them if they were not "
"inlined. The cost-model is extremely simple and ignores many important "
"details: for example, all `for` loops are analyzed as if they will be "
"executed once, and the cost of an `if...else...end` includes the summed cost "
"of all branches. It's also worth acknowledging that we currently lack a "
"suite of functions suitable for testing how well the cost model predicts the "
"actual run-time cost, although [BaseBenchmarks](https://github.com/JuliaCI/"
"BaseBenchmarks.jl)  provides a great deal of indirect information about the "
"successes and failures of any modification to the inlining algorithm."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:80
msgid ""
"The foundation of the cost-model is a lookup table, implemented in "
"`add_tfunc` and its callers, that assigns an estimated cost (measured in CPU "
"cycles) to each of Julia's intrinsic functions. These costs are based on "
"[standard ranges for common architectures](http://ithare.com/wp-content/"
"uploads/part101_infographics_v08.png)  (see [Agner Fog's analysis](https://"
"www.agner.org/optimize/instruction_tables.pdf)  for more detail)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:91
msgid ""
"We supplement this low-level lookup table with a number of special cases. "
"For example, an `:invoke` expression (a call for which all input and output "
"types were inferred in advance) is assigned a fixed cost (currently 20 "
"cycles). In contrast, a `:call` expression, for functions other than "
"intrinsics/builtins, indicates that the call will require dynamic dispatch, "
"in which case we assign a cost set by `Params.inline_nonleaf_penalty` "
"(currently set at 1000). Note that this is not a \"first-principles\" "
"estimate of the raw cost of dynamic dispatch, but a mere heuristic "
"indicating that dynamic dispatch is extremely expensive."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:95
msgid ""
"Each statement gets analyzed for its total cost in a function called "
"`statement_cost`. You can run this yourself by following the sketch below, "
"where `f` is your function and `tt` is the Tuple-type of the arguments:"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/inference.md:97
#, no-wrap
msgid "A demo on `fill(3.5, (2, 3))"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:100
msgid "f = fill tt = Tuple{Float64, Tuple{Int,Int}}"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/inference.md:100
#, no-wrap
msgid "Create the objects we need to interact with the compiler"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:105
msgid ""
"params = Core.Compiler.Params(typemax(UInt))  mi = Base.method_instances(f, "
"tt)[1] ci = code_typed(f, tt)[1][1] opt = Core.Compiler."
"OptimizationState(mi, params)"
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/inference.md:105
#, no-wrap
msgid "Calculate cost of each statement"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:109
msgid ""
"cost(stmt::Expr) = Core.Compiler.statement_cost(stmt, -1, ci, opt.sp, opt."
"slottypes, opt.params)  cost(stmt) = 0 cst = map(cost, ci.code)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:119
#, no-wrap
msgid ""
"5-element Array{Int64,1}:\n"
"  0\n"
"  0\n"
" 20\n"
" 20\n"
"  0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/inference.md:122
msgid ""
"The output is a `Vector{Int}` holding the estimated cost of each statement "
"in `ci.code`.  Note that `ci` includes the consequences of inlining callees, "
"and consequently the costs do too."
msgstr ""

#. type: Title #
#: ext/julia/doc/src/devdocs/sanitizers.md:1
#, no-wrap
msgid "Sanitizer support"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sanitizers.md:9
msgid ""
"Using Clang's sanitizers obviously require you to use Clang (`USECLANG=1`), "
"but there's another catch: most sanitizers require a run-time library, "
"provided by the host compiler, while the instrumented code generated by "
"Julia's JIT relies on functionality from that library. This implies that the "
"LLVM version of your host compiler matches that of the LLVM library used "
"within Julia."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sanitizers.md:13
msgid ""
"An easy solution is to have an dedicated build folder for providing a "
"matching toolchain, by building with `BUILD_LLVM_CLANG=1`. You can then "
"refer to this toolchain from another build folder by specifying `USECLANG=1` "
"while overriding the `CC` and `CXX` variables."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/sanitizers.md:14
#, no-wrap
msgid "Address Sanitizer (ASAN)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sanitizers.md:22
msgid ""
"For detecting or debugging memory bugs, you can use Clang's [address "
"sanitizer (ASAN)](http://clang.llvm.org/docs/AddressSanitizer.html).  By "
"compiling with `SANITIZE=1` you enable ASAN for the Julia compiler and its "
"generated code.  In addition, you can specify `LLVM_SANITIZE=1` to sanitize "
"the LLVM library as well. Note that these options incur a high performance "
"and memory cost. For example, using ASAN for Julia and LLVM makes `testall1` "
"takes 8-10 times as long while using 20 times as much memory (this can be "
"reduced to respectively a factor of 3 and 4 by using the options described "
"below)."
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sanitizers.md:29
msgid ""
"By default, Julia sets the `allow_user_segv_handler=1` ASAN flag, which is "
"required for signal delivery to work properly. You can define other options "
"using the `ASAN_OPTIONS` environment flag, in which case you'll need to "
"repeat the default option mentioned before. For example, memory usage can be "
"reduced by specifying `fast_unwind_on_malloc=0` and `malloc_context_size=2`, "
"at the cost of backtrace accuracy. For now, Julia also sets "
"`detect_leaks=0`, but this should be removed in the future."
msgstr ""

#. type: Title ##
#: ext/julia/doc/src/devdocs/sanitizers.md:30
#, no-wrap
msgid "Memory Sanitizer (MSAN)"
msgstr ""

#. type: Plain text
#: ext/julia/doc/src/devdocs/sanitizers.md:33
msgid ""
"For detecting use of uninitialized memory, you can use Clang's [memory "
"sanitizer (MSAN)](http://clang.llvm.org/docs/MemorySanitizer.html)  by "
"compiling with `SANITIZE_MEMORY=1`."
msgstr ""
